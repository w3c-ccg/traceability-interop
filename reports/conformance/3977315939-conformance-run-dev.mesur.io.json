{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3911115b-87ee-44a7-b524-35d21b89ca7e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "81466077-8c11-41db-90cd-c273f0bf74aa",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0affe4b3-742c-4040-aff4-2a699281d7b5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6bf5bdc8-f92e-4413-8a05-9c3ef18de95f"
                }
              }
            ]
          },
          {
            "id": "8369ca99-e45e-4828-a6d4-1a4222108974",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d5540498-3eab-4225-8849-c7ef3c0aa6b1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5ccbda51-b455-456c-8a09-9c1595d18356"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3a8ab319-81be-419c-8986-af708ed5fc8a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d398dd44-072a-458a-bec9-b7244d542950",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4977bc3e-99dd-4d70-9f01-e13868f8b08d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfea2a94-470c-4ebf-b595-3fb83afb18bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5487914a-2ba2-46b2-a2e8-2fa145fb66f2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7aa06e13-0085-402e-a8aa-a71c7e9c41cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea03399e-c685-4fd5-bd97-67d9fa4062f5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8b3c0a6c-6acc-4b18-98fb-630c01ff6b58",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39693dd7-746f-4684-949b-dfac41e867e4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ee1338f-b8b4-45e5-840f-f1657b025cc0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "95d9cf80-4f8b-4598-8477-22a34e2f19d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f53b8f1-58dc-4bb4-a6a3-fadbfb418c14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "015ee2a2-45d1-4eee-bbdc-ba2baa56581e"
            }
          }
        ]
      },
      {
        "id": "16ea5bcd-5a6d-4a13-9b99-80d083c45e70",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c4f1bdbb-d22c-48ee-965e-75d535aefd50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a11a7a80-bc03-40a6-92b5-60a89f766f37",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "de2c4ec0-a9e3-4a36-9ed6-3d94f4ac1873",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ccb341-ddc6-45ca-8768-b0211ce56086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "769bce7c-5d8a-423c-acca-4760137284ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99ba4b5-e378-472d-a07a-18d21a79425f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3710a9f7-e4a0-46cc-a974-0c6b1d416ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ae3ef65-a26e-4d4d-bfa9-c8ee46160ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d52d6cb-19ea-4019-b4b2-c0cfa1c03179",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afdeeb5-4ede-4f70-ad10-d7f3febb220f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5712e4e7-8cd6-437b-950d-79c6f5b129b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9ca09d50-a0f2-411c-a7af-f0fcddc9baf3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdd35b38-2f7a-4788-ae61-cd62cb918310",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74831973-dc95-4d1e-a826-b3db983050a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60bbf6f5-9f56-44cc-9460-057e3e2bda26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ec540b-0b8a-4f22-81a6-2e79c1e7c583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4421d1d2-ff37-4f51-9995-161613cb1bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9773e3f5-76db-4e29-b237-a87197cae238",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a781ade-a896-4c45-9e54-3769fa29016d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c6430fb-6231-4d27-acd6-1efa58a9365d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b21b0ed-2629-4688-bf34-4fe0a8644537",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c3d569d7-00f5-4c5e-a868-e07a88efae25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4b4ba64c-ae6b-4ca5-92d5-84fb4dd4b153",
            "name": "Positive Testing",
            "item": [
              {
                "id": "18003720-e80c-4333-ba83-c1f18f421116",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df591596-2d59-402a-9aa3-3a161b7fa735",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "82f73ce5-8472-4534-920a-eb9ca6514acf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4810afc1-9804-42d3-8b26-adbb90a14b8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "02f1538e-2db7-4069-a9f3-1de503c73982"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfa04fae-a3f9-4c15-8499-b3e8b8b073b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7755a79a-401b-47b1-ae2f-747e198831b1"
            }
          }
        ]
      },
      {
        "id": "5ef8a0bf-a3e4-42d5-b336-d746cda23de4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3417cee6-51ff-452b-8945-f6daae2a40cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58ef1e5c-3ab8-4d4f-9d7c-ffd01f92b804",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2758b85f-b2d2-4228-847d-083a33767264",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bbce8b-a050-4f79-9c9e-26b03d3501a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03d0161-c3a1-47b6-bd34-568db08a7a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbe1d53-f472-487e-9f1a-36ddae78a830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52b19279-8b94-4932-97df-1d447be0289e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443e0850-47b2-479e-9014-6971c31f7f44",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1958e9a4-114c-4c1d-b1e4-dc016cea88c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a75473-4de8-4939-b29c-932f386d2376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d5f957-986e-4d45-b742-5d68594c0ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3d9be29-3a18-4828-920f-49bea235b523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86f3045-c635-443e-b488-695e4971eb3a",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cddf0e-09f1-4269-b1f1-fa60a66b3cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19252bbb-de80-4315-85ef-a1c294fbb0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459f0e8a-85ca-4eb1-8541-17d1f00166b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2321f7f-6a61-4473-a83d-56ee8d76c328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968c2848-e422-4e2b-ba18-58d26138948c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2778f6d-9662-423d-ae2f-1eb7b004f6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00496106-44ad-4b11-9fad-555ad4380014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e927eb9a-bcbc-43dd-952e-ca57f65e5e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a886487-4f8a-4f99-a781-5149bdfa40eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01abc3ed-2b1e-4e7f-8dd1-cda3e4e586a7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51e3507-09e2-404d-aa8f-38ff29da9bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09651318-1161-44b3-9aca-fd247f6f367a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68b2afc-2cf9-454a-925a-c3a115c320b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcc41ccf-677f-4ee0-8083-96120e2daf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281275a3-3186-40c8-a9cd-a0506e627d80",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b143261b-19b5-404e-9e12-a8c957aa5617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704161f2-02f9-491d-9e7e-5c72017b5c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9bafae-a79b-4909-ac75-239c49f843b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ef061bd-492f-46d8-9499-72768da4c35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0888961-16b7-4144-96c8-363de2300e17",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49637282-6514-4d38-bc98-baf64eb100ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46fb64b1-0cff-451e-8364-e3659b8e59cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4b7d6a-d404-4285-9917-9856967a6dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ce0246a-a06c-4518-bcc4-151fa0ce38e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80077e6a-6b29-40f0-b924-881dcdcd2f4c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426aed32-a2a2-4aac-90ba-b65448e8ba99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01fcd21-23ad-4428-a272-d409c7ae5019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f241316e-3076-4286-93a5-8dd6599da527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ae40535-9721-4ac5-95d4-7b57983d52e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbac0053-7589-495b-9acf-1e54f1a84430",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70667e28-2295-4a9d-ba83-96f42124de37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86be1ebe-aea2-483c-82ea-ab780c3e4807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdffa25e-0144-47ab-8251-b22f887b7581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea3a6096-1256-4bc0-b074-376529d35e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0cb48e-cfd1-41c8-b196-c87af4d8fa85",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff332557-89c3-4060-9cf7-7cd455df2cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fea1c3-2219-4a33-8f50-62a6766f938f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c7ee79-661c-4c68-9bb7-51f9bfa8e0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "343de833-6e3b-47b3-9fef-fe4efd2b1278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecf4f65-ab84-4765-87d4-e63060fbdb7b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81b3b4c-b251-427d-a317-09b6f5dff58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3334815-cc24-49c4-a7fc-47995211044e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9003d3c0-1405-4540-a060-788f20c60226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6607db53-2d0c-4660-8db9-008385350b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9854c190-e865-4d04-9dc0-54b55c563b0f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e8625d-04f0-4b00-b41d-8afc32e3243c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd89e9a-25e5-476e-ad22-677a4cbdd5e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19816f9-06c2-4d6e-830f-4c1ed5a00474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "634e726e-c899-4d0b-8594-260f7000718a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160217f3-8b36-46b5-b118-1e552e2468aa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7130b59-c64e-4c24-9539-ea93af59a255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1b794b-f298-4c87-8d76-83de6c8a5d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba771c69-880d-4dc4-87c4-7d01fcd0b849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7714e7d4-9071-4be0-8f8c-8828dd0450b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894c92ba-abc8-4bf3-b7a0-bf4bac13fbdc",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79361824-6b6d-434f-8c72-b6dd4e11bc75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c7fc43-bd2a-46bf-9084-9a31d0c0c245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cff81d1-0250-405b-8fcd-1489c102f0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9f90db-f522-4f5d-80f5-528d226e01de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e15bde-6e38-4e3b-b1e9-66be25c91dab",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e19396-8254-40d9-ad67-01760e73a34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2455a6d3-b245-45d1-b4dd-c662f51fc4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e3c08f-831e-43bd-867f-fa00aaa00653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "564a22ed-6679-40e8-ae87-7f5d8e0b3e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9bebab-0dfc-41e9-b436-a1e12cf7c0e2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f07db92-3580-460b-b8eb-c881ed5fd776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f543a5b1-2cf9-4b87-bb07-0f18c0e35a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b6f409-1ca6-4a2d-8561-1d9df317fd7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b44ec08-67f9-489a-ae1d-ff465f6a4acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0acafb3-c377-47b8-a487-25ab2e779a7a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44abefc5-49bd-4a66-a2ec-b1a3a26c6615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1eae0e-4bfb-478b-8fec-b861004bda64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1482e6-59c1-4b19-8eb5-aa8723535372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38b7df9e-2134-404c-9cc0-566765bc785e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e8ac5e-fee7-43ae-8993-e0ec16eef16a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0449e79d-b080-4e3d-b7fc-39379279d150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa11df8-e014-45a7-8186-90cc4c26b028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbfdc2b-b23c-44f1-a3e4-b8deef7e0e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c579f729-309c-4ab4-afdf-5ef87866ea28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10f0c4a-873e-4084-af1f-a4ddf8af799b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06dced6a-974e-46b0-91fd-5ed2c883b006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b52a962-991a-4bb7-994e-e425861fc7cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c487789-5c90-4a67-bd6e-d14d7f32e29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c5a49cf-63c2-49d8-8e74-f481fda3879f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bc6112-c2df-46d0-865d-fba779a01f43",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87398d50-f98c-4620-8596-4b8810172cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8edb6151-d8d2-4e54-8544-0ce4e174ff3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c90e136-08f4-495d-b933-1c17cd0b60b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "86f8c765-8b90-45d7-a763-f488e6b44741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af137716-e4b5-42a6-9b11-5de9d6059ff0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c35795-b9af-4c24-bf8f-6e545cca3fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783085a7-96ad-46f3-a27b-837b3b544652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a416ab75-defc-4648-a479-20bfe2cee898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4253df5d-e10f-405d-847a-e920fc89a0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cb588d-5657-4795-aeda-fce07477c5bc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a7556b-235e-40e4-9a37-8cd0d2210ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1331859-5b59-4ce5-9950-12e8dc91f860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe09aff-0814-4930-bcdd-f010530de659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "097b1870-4cbd-4e4d-87ce-412c4e41fb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d67e5da-35ee-4098-bb4e-2533e9ae3615",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b146e369-d0f4-4b18-a325-8a9e42ebf123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deed2872-f58b-483c-916d-7ef752e1995f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dff155-6a43-4cbf-9167-2cc1bf560b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5f9ac0-e92e-4b83-b576-e285926c2ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbf74f3-fbd8-44b2-82ff-228b419b339f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79cf1b6-0a3a-4653-bcff-ace0dab6f21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762b9566-e6ff-4e81-b2bb-3198384fe961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd25e2f-1c69-4cd3-a63b-4b56c2a77d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "406d51f1-b1af-4963-9ba9-3a28ff4bbf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3568fa-0010-4016-ac7b-b06ee56530a7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0074f991-e3ef-42b2-923e-8365d96f90ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2337849c-20d7-4c2c-9682-5cb19b599da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8041421a-3259-4f97-94d5-ade69784b87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2bdece3-a6c9-41ce-a4ae-98dd1baa7f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931f9f6e-2311-411b-8398-4ea4618c157e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb5790b-f976-4305-a1ba-6d852357a30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f26fb8-22eb-4e80-947d-6b997dd544e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5da3cc-4c46-4a9b-b49a-bf3a8955019f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1aac34-42c6-47b7-bb2c-7708c4a7ce58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca040ff8-4701-494d-b2d1-3c9475909722",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cd31a4-a8a4-4140-9258-78284610b1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30496191-c3bc-49bc-85e6-df7d659b502a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c76909b-906e-4e3a-868a-e3c15a466f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3b2cbe-4210-4414-9976-b65bb7d2dc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8652fc46-4c53-440f-93c6-91c0c004c158",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfef1ca-9f55-46ec-89bb-be930cc8f9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8132e6f9-78fd-4311-9808-bc98e68bd265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befadb1c-ec47-4f3e-a15f-5381f7093a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4891e23e-fb5e-40e9-b747-cda50cba7853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187c4f0c-3934-4ff8-8199-c82b62ffa974",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb6afb2-f5f4-4aad-b5e7-bc88d345257a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b58426e-e7cf-42a6-8396-fbeb17f9a276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875fd74d-16b9-4f19-b7a1-fae8df515fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00bd7d1d-6e24-4105-bbee-fc297788939f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c5d5da-25b2-4843-a8fe-1b84bc8f7129",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f9b094-f9e0-485d-90ce-a36a48b6b327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6241a0-6958-460d-8256-b96f47fc5e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacb30c0-a09e-4845-840e-54ea0803297e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cafb7b12-8624-46ca-8a03-c524f0868ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee9b707-e36c-4ced-97b8-fb4b4ee82c59",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54d6fb4-80d3-49b4-9ece-49e99ab9ae69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738718d3-67f6-4afa-b626-842ca56c179b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3047f0d6-4070-415e-b4f4-d323ef52b082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b80d77-01c7-41c3-ab4f-e058289a35ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d523e05-19b9-4aa4-8d29-c4605281cce8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bd5851-478c-41f7-a439-dd2136373c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2305622-1fba-4caf-b506-d76a28188a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a981392-99fa-4fa6-829f-d32c6d03c220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a97e28fd-9dbd-45c0-9806-0e64e17db1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523f9dda-b04f-406b-8ed8-8bb8e763efed",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa79851-0868-4b17-a51b-62c3ac7db470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67135ca4-71fb-42a5-bd56-0366826577a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcdaa14-5337-4687-bf00-c6f45d1c80e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb9edaf-98d9-496e-8ef0-3dd602d7a9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a90e472-fe17-432b-a733-7dbbac0dade5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae856608-0644-4f15-9152-6b3f828cdf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01993751-a84e-4c84-b346-f40b4b28edc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6513a18-9efa-45a8-b400-79cd5bd89c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14bd523e-bbb0-42e3-aa2e-634d1a558851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4b1da2-b7b3-47c8-9ef1-2fbf84970732",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8e9055-18cf-43fa-bfae-840f0b29ebd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8600fd88-ecf0-44ca-840d-7659a95a7ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d293c97e-5977-49c0-aed5-45025538328f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7850b6-cc17-4c3e-a5b9-f430fd21d827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f2e3fe-1d0f-4332-b13c-fe1d5cee9036",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9060b1-66e0-4ac9-81b2-d1a383387842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07809cd3-2b3a-4045-9e72-b789d4856142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d80613-aab2-4001-a589-3d74ad32cb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f14cd379-b49e-4f8e-b669-b62ec5d45996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2501d7f-65aa-4429-9b3b-2bfb2eb38b78",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70682627-e0d6-4bef-bf57-674bdad2b886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e67427c-49f8-442c-a347-f132148c8605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b2346f-4a24-4076-8277-4d47857004a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5a464012-e07d-482b-a385-8b8ca99032f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1dd4667-017f-4dad-87ef-f85e4ecd2ab7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ba23cb-63ed-49be-8b0a-de1b8a21020e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a344163a-63b6-4638-b8ae-ab40f5a73fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e812684-54d7-46b0-93b0-5d4ae93efb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4787edcb-6949-47cd-9463-8938a6e64ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac66e68-f766-44bb-b5af-09a1e6ae845d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf966f80-3673-4b32-a4a5-106a281cc7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96b3b4f-2f74-4885-8bc3-845a1b7af8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86efd823-8b87-4bb8-af9f-75094b448437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b54ba821-c60e-4fe9-b689-588c045abbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dd0207-7b26-4efe-a25c-fc3b0ea3c39a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7e3140-1df5-4170-8287-b82f0564eae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f3fe79-1c42-4fda-aaf0-bec3cae7e3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c315045-f87c-4e45-9ca1-50f038db48c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7942aef-8b34-4415-92f4-73a79c42babf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d5139c-4824-41da-8e06-8ed5d816fcc1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a801751b-1923-4fc4-8070-580538b0dde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf5917e-d782-42c6-a838-7284786627c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd4fcc2-c020-4339-981a-3101946b61ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "33ce908e-c600-4431-b8af-7010be881b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731f1965-4650-4067-b5fd-d5b2bd8871ba",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3f561f-5ff1-4fd5-9336-10739711d29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a843df-a66c-468f-babc-717d10f67782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0afbfa5-43de-4fe1-9fa7-7d1dcd461803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "edb70ffa-9219-4681-9eb2-ed2bdd31d491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89322a7-b5d6-4914-afda-19ccdb82334e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5794db0d-a6b8-4d21-acc8-ad96520ae4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406811e7-542d-48a1-95ce-4177e7fe9918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de5c7b1-a5f3-409e-872b-a700f407bf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38302216-d008-4797-b1d9-0b0fd32bb137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b682be-fcc0-45b2-abc6-3a8ecee4d626",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec20d80e-ea9e-431f-bdf4-2307d75f2821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6fca52d-8416-4e42-8580-e5c81c9d22fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9fbd8b-05d0-4ae6-8371-2b029254a7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c2347bf1-eb56-45be-a6cc-95fa58bd494d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef41f7c9-f974-4835-8d53-e003bfe40945",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a11245-984e-40ae-8b1a-39d46dac0783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a92196e-ab56-4d64-a219-d0f9b58071cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84994764-c80e-4fbe-8ea0-0425d094fd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6673d64-66af-4903-b7f0-a76a2c93b608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4944ee-343f-4b0d-a2a1-447af6e344de",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706f5ef3-dcef-49ae-a402-fcc618dab641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bafad634-90f9-43cc-ac81-a9fd918ab42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3794bc31-ab3d-4ace-85fe-a9ffcaec24b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f91a23f2-ad08-4ebf-b713-de838dc96a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734a4c8d-bfbf-4079-adeb-057ab2e30cc4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d302e4-9666-4f79-aa72-5e1c9cbdf09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0607f8-ef3c-4641-a1fe-8784b711787f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b519679-b9d1-403d-9c13-3fdc5fef287d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9832ea4a-3621-4623-80b4-ecd022ebd525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b6a9fa-daba-4c7e-b0c2-2c95e895df91",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d61765-7810-4e29-a5ab-18b4280d08ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7735ef94-73bd-43cb-834f-42aed9ae7cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55edb60e-4b32-4813-b6e5-a25f014569d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0201974-93ad-4fcc-8373-214f8af9d4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d133e0d-ee89-4516-ae87-8f8281f264e6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797450d7-c166-4b64-bed8-d705e22fb846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b16e295-fb83-4331-88d5-325ef45026bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7911c95f-caaa-4527-b596-d15df91a4a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a668a3-6afe-4128-9765-b4720a81516f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8118ee2f-ade8-40be-91c4-93c4f0252575",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d40c0a-31b6-4704-ace8-8728c43a9096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a9ba24-aa73-423a-8256-3db7e3cf53fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbc574a-d518-457f-ad4e-094e0d093237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1abaa990-9013-4c6d-9f79-c5702f91df9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb740a6-5fb0-4588-98ed-65c3d19bf4ab",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "982c277f-563f-4e99-a0d8-d9dfcc58a5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63403815-2855-48b6-848a-98295f60b4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0744649d-c504-43ee-807c-bcf1cc3f9b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70d58134-a9a0-4433-a465-a1f662fbc65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903cc539-bdd9-484d-b6d6-77818d56722c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0719340f-227f-43da-8a3a-100f193ca97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a970cd0-6e9d-4a0c-bee5-65fef60db1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f66ba1d-e9ac-4581-9aab-dd7af4c257ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74889a99-4122-438d-941a-9b937624fc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae97ab74-30d4-421b-af24-5f5b91741222",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8149b89f-c617-4a2b-b780-eef4f16c4741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013283ee-0a56-491e-9bf9-bfa98021bc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea64d8b-0af9-4e90-b656-9e249857a1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f442f13a-10b1-4800-adf6-494e11a7c8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70bca8c8-a748-47f9-bc10-cdafa4ddd91b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9859f9-fbec-48a2-8df8-c92516e5984c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa419246-1caf-45d6-918e-de1829c29b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85a4a19-f0ee-4ede-baee-78d34563357a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e74b4d1-b1b4-4f85-83b6-d406a22a7766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4d049b-e19a-437d-819b-bf7f91e04fa2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3778bfec-06fd-49b9-93a9-ed56422bfe85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd22074-a9ed-4d18-80a4-f3e3197d375e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6ddc4f-1e17-4724-96ef-90bf7daac687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "339575c6-88d2-418e-946c-d79e53d11a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee0db6d-199b-4d54-ad5a-9d62506af7ef",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00c80c5-46e7-4a16-92e0-b0a561ac5878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88c520d-c138-4884-a525-201923062191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de77ff92-2172-4414-969c-8021f4fe91f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "111d897c-9a74-4c56-a3d0-e31601214252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68257947-564b-479c-8b4c-fdd00ac90e38",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f648c850-f6a5-4699-b9f4-84266206246a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ddf5fd-1922-4fd8-a68d-e3868e2faabd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1801d09c-f3d3-49cc-a907-08f58a0bd844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0afe1ff-da5d-4a0c-9793-2e1f38b132fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88d89ea-3be9-42c3-aab8-d631c2cecc62",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc36e3b8-72a9-44c2-adb6-2dd931d39f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230a6625-4a88-4be4-91ad-90d6f7e38dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752e1a67-869a-43dd-9a12-61f149aeea49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e4126b91-a9b6-4aa7-b6a8-a280adebbee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c288f04f-56ac-4f95-9f9b-219d70d9dcde",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b82c9b8-619d-4135-a367-3509e164c225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5c9a2b-21ee-42d3-a4b1-6b44fafa7e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba088ab-0781-4462-a2d9-e0adb4199e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "22e4f794-596e-4e70-b342-e362a9847d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839f9237-e590-4ee8-a29d-577e8f6dc3b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76106017-0cb4-4e30-96d5-f53b3630aca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae21fc13-84aa-4d06-8e27-29c2128e2405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75ad32c-649c-4ef7-8518-06e9e02c8602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "556a5be8-60c3-47d1-9383-a98a28515023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2df475b-f87d-4dd5-8e4d-b829b54f3822",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1deababc-5360-489a-a136-0c8b8ec72f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78d1d1f-db33-4cf6-946e-469cc303d67b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02343122-7e1e-4174-893b-f926c92225b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a4d50f-dd95-4660-99e1-dbf0ed233b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c21e70-383e-4644-b8a8-97ddc073c6b7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c180c6-124d-49f0-a345-fb1a29c00f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71dc0cb3-1fbf-41c8-b81b-df52d4719938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e95443-6373-4016-aabf-c815c2497939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce525ab9-05e0-4b35-b58e-22aca2035fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a8b655-c966-425f-9eb4-b0806671f5c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebf4e68-2863-4c45-b8df-46f1bd6dfa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c900ec-7035-41de-9fba-ff7480222443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777642b0-2bd8-4946-97e2-e5d5ec7f83f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e672fff6-0d54-4fd4-8dca-3b02c32dcd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c27c5a4-d5a7-4f96-abaa-40a6bbd4cb91",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c40e9d-f241-481e-89dc-35a0991cdf4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5575961e-653c-4cf0-83e3-b4c0ac0a2e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f845d514-0724-49c4-8c91-3e2defa8a363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b75e4599-6f51-49ee-b0a3-000421a0ff9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a351bf00-51b1-4670-9bb4-bad51209fcdf",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32dae33f-d380-4dc0-b3ba-142bda63864f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31cb8a7c-5799-49de-8b46-e82dddb67831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7fa5f2-cc69-4b05-a1e7-2783a5e52671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7078b094-5457-4b8b-8d31-fc3f7b1dd31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c7272a-d8dd-4ff6-99f1-e6f51af27979",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c4a959-d200-4163-a666-429fde90998d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aba6e26-1933-4015-a535-9f60989b2420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18a65ce-c53b-4c2f-ab12-0d9b8c21432b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f009741-776a-4d39-ac76-577dba778a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccd49c6-b172-43e1-a40f-90cab3e3b834",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bba482-b325-42e9-b925-4fca5932785e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51040aa-e04b-4add-a6ad-bed79ec55825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acec19f0-62b1-4694-85d1-4b01d8e33bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df542702-0bae-4fb7-abb3-89a12fbf9a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2776e7-6ad0-4e43-9b9a-370a7f42d044",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb6df96-6c7b-4c7b-9a71-105d4a74136f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c074bef-5396-4389-b830-3fec49a53361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1dc1f4-a53b-425d-8d7c-02f413508827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "172d6367-d442-4763-8374-5f820db1c772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032fb2ed-22ad-4edb-be85-b1fc6bd411ed",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89e9ad5-f399-4b6f-b4c4-c70b35c1b7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a34397a-32a8-4134-8a80-ae5d92e88784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c6d919-8450-42c8-86a7-eb0ea7bff435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3db85d8-ea44-4963-861a-3e22cf573869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58788ff3-e3d3-4642-9b6a-0e8bad3c31b0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251cdb1a-258d-40f4-93b4-9cec30abec78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf974c16-6a51-4b03-91d1-05f6e98f161b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06d9f85-fc47-41da-b959-2b803dc9d58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9b6edd-3cc4-4c3f-96f5-172799724df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea44e80-fccc-4f89-8169-f982ff6c6407",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979f3049-100b-4419-af78-7c908e15fe9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228f3db2-9746-4e0f-9f8a-972883225743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0882ef95-0b9c-4bd3-9212-772ffad97a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d09282b-97cf-4ba0-8d08-6de6f48ebb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d72d57-b706-4f79-a49f-d62dccd51f91",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8269d7db-30f5-4287-acbe-67ea92bb25cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ce742a-6501-4843-8fc8-c8b68161b924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd53644-709b-498e-a5f0-7239836e6072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ec50d0-bb45-4d14-8e00-1de937145fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd84130-8391-4085-8e13-e35d5137abda",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9714adf-9ab0-4438-b480-bdbf71147edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa59e9da-a6de-4b5c-b3f1-b06e328c3ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8a0e13-88a0-47fc-9120-3b8b56fdee8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efca15d4-3fc9-4a6b-8c16-8dfae20a0c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672a2cca-e105-4805-93c6-acbde8aa5a3b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf138f8f-4168-43bb-80a7-4656f6ed5a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f767a05-001b-4b2b-8ddd-cac0f0625b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f90a0ef-6942-46a0-a684-89719f833d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c213477-f393-448b-981e-c5e2b652b66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292747d2-c692-4ae7-b1c5-add80df71318",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bb1be6-a157-4bf1-a65a-7ce7f7abc8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28545192-8dde-4907-b535-3ff552438702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff555682-8e7c-4b87-9aac-bed32efd1da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e85c1e6-6b46-4630-80f5-dfaaf6f3469a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa11b17-0b06-4584-b232-75a7081e69ce",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a3ae76-87a1-4564-a508-42bfd9c4c62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af849d30-355f-422f-a698-bab865355d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71764c0-adfa-4564-8ce6-bc4f30a153cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6fea50bb-c294-4760-ba79-fa9a9a91c9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97d666c-04b2-4b00-b882-d89dbd079458",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a368d3-4159-41df-9913-b9a88e004d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30280745-cded-4366-a33e-4b3524aafb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69dc2573-42be-493f-ade8-fbf8290ad4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "32823d75-a29c-451c-916e-5bd9ce03b75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5490f6a0-d4a0-4711-a239-cfe3db152374",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b7291c-23db-459f-8249-5e34eb81d27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a13d9b-36a3-4aa8-a9f4-04dd1f7393d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51ce273-445c-4aea-a0d7-945bf7aab7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57634a60-e6fc-47d9-af86-15116f1975cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8db352-f7ab-4a52-9611-e8c372361a84",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95855dc-edd1-4fcb-b39c-37a889522ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b45830-fea4-42f9-8d4d-e453e0aaff3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316c6e07-0300-4317-9062-3cc89b96b8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa4d84e-f56e-468c-8734-5ec2e73c59a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e328810e-aab5-468e-bc1d-05c3ef7d9868",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17a3ce0-d85f-4c21-9670-c928f310cd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54697f84-5d9d-42e0-8262-b0f2104a38d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca51a2b9-78d3-4a36-8caf-1f1ba646ab82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd341b9-461e-4e07-a1ee-e67f1adef1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46b1aaa-e197-4593-9cb8-e00d7be76e77",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2007d163-f473-4738-b4de-7ab7f2452d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fcac219-29ad-4de1-a2f1-68eb8e3aeb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad3a565-73ea-42c7-90ba-41837d66e305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b79df567-94d1-4d56-afee-01ec93f15d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acc2c61-28ee-4348-9a14-652c1ee6c86b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb10a85-0940-41f9-9fe9-be3e5997b584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0c51d6-6f7b-4bce-babc-714d29446b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ce4b15-4fa9-4ccc-8d39-16bbd88a4ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "163258a5-e650-41e4-93fe-e404920b1862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aad1533-0dcb-46ee-8abd-f4f74f3d02c2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3a1d81-3b22-4188-930a-a67079d29221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7265fb0f-d447-410f-ac45-95134f10ede7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bf1f37-0488-4649-bf01-7c00ebca52bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd980e58-8065-422b-8ee3-78d12bdceec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91bfcce-6f59-45fd-a626-99469098920c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3e7eaf-3383-41cd-a44f-79c998cd62f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6965eb48-1c17-4c67-90ae-bb793b944b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10596e9a-b576-4b9f-8361-ee61244c5afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "972d2c20-b97f-4658-b89c-628e99d9dc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa3aad8-82fa-4405-8493-80682d20e664",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bbdfaa-b0f3-4b96-aa23-b4deca25011f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9b611d-7668-4154-bcf4-fd83d6e046e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e29678-04f4-4bc7-912a-d8aceaee7a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62b86aa1-4c1c-4f1e-a3a7-f27c7b97f3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e923931e-e604-4156-8103-66b4f3576293",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8612bcf6-709a-484e-b7de-248cd4dd641c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e79ebac-6e32-4039-92ca-b6c15481172e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826553ec-75b2-4b58-83bc-b7748c08ce6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "768398a2-f099-4114-862f-154bb6ecf10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8d3a77-1a22-41c7-9d06-6e7860d38a65",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9960655d-2dfc-49bb-87bd-ebaaa7a4a845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a0aae4-c315-410b-9107-dee425f5ccdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a42a04-b25a-4ce7-be37-d7063bb7bcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec036f6-1a60-4ea4-b726-6b73dd2a991c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f7ba49-bcb8-45a3-92db-c49303e1ccec",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ec525a-4646-4b04-a7d8-53217abfe63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0878c834-d5ab-4392-aac8-5abde2488ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d7d75a-cc32-4d52-ba65-736465e1956d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1db6b12-8f62-4cb3-ab85-e79d608297ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b392eb36-5d3c-4504-b822-45bb2ce71e85",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cff4cf-dbf2-4e59-9ceb-b348c345c46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e17fba2-15ea-4269-801d-0b2d42db953c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379ff6e1-876a-422d-bcd3-c29d497e6964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f39bfc9-1646-4e08-a27f-77948c0193ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f5d270-dd5f-4791-9e88-d000268a39ba",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8285fd-19b2-456c-beba-3eb142c9e7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b0f542-3e87-44c6-92ed-8bd028e9c7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293809d8-c4f1-42ad-bf5d-5e9ed9c0eddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca18915-f225-46e8-a6ed-b39ef9a6436a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7548c7-f2b0-4c43-8083-fe2129675f48",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6318ad55-42c4-4ade-b700-8078b273db3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d6bce5-14a4-4da4-97a0-74e3e227d06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce24195a-869d-414a-aa63-3d2a62f9b5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f577224-788c-40ae-a60f-921d9e376e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1558ea10-2281-4a62-b5f1-f4a27cd42f00",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2426f358-528f-433d-9242-5655cfce638a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6129ee-761f-4535-be90-ed1fe6fd0bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18bc52a-d2b9-434f-97cd-d228aae2af90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a991ef-b536-4f7b-a390-9efd767213e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdb4840-0f2f-4439-8a04-c825df33f856",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde82003-7fbf-460d-bdc1-dfe6d0bb4fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "020c2a1b-36a5-4d92-acfe-c2e361ed20bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47d2489-63f2-4b43-978f-1774977bf849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2543bcaf-8a74-4905-aa48-502d826d54cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29145d6c-3bb1-4181-b239-ec3eb25f7c2c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389f7149-84d2-4095-81d8-1138adf5241f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c2c16cc1-d4ea-4252-9785-6432bfa73f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cead76-c522-4db8-ae90-894a24e291c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "480a7f14-d178-460a-b0d4-aedcce79fe47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "891570b2-243d-4e58-a225-b420cc8ed823",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd7fbd27-23ad-433f-9a49-0ee9b95c9903",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c9cddf-69c4-413e-936d-195ed4d7c77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82fdccf9-1222-4fff-8c20-e3571d02d8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a64839-1b47-4fe5-b70f-eb37ebc821cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7df389b2-aeff-43c7-ad70-0a0509f02c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83af873f-846d-4fa8-925a-81112532051f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268669b7-cfa9-4509-ad51-89f4e461a07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e261086-b878-4eca-a098-7da5601d0716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7308da37-b429-4715-b55d-ed39e97c2628",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d88feda5-0975-4757-a0ad-1515130529b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb12986b-5963-4efc-bd97-f71454d9d81e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0376fd79-8e93-49e3-9424-acf9b21ef906"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f98bc3e4-a758-4e80-825d-648ff86829fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d74ce9a4-1bb4-47a5-8f4e-14aca62c9c41"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9740d1ea-03fd-4e4b-8fc4-d7bef793f5b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72518096-09ad-467e-9e23-6cf95467d13a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9ba84cca-e5f7-4266-8f3a-881f6b4d130e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3509b58f-1bab-44ed-a385-9292ae5d976f"
                }
              }
            ]
          },
          {
            "id": "c7125a55-1558-4481-94ec-80b75f2afb8f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b30b396-fda2-4d31-bb2d-d1a999412226",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d95ce46-3716-4d4a-91eb-f377b85db498",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe73b2ec-812c-4172-990b-b76c468fdd83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8e179b3-2a7d-4f11-b22e-8f39818e28d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "55f238d6-4ad8-47be-83d7-762a413f0f2e"
                    }
                  }
                ]
              },
              {
                "id": "f28d274c-8d6d-4cb9-a54b-870ce7014957",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdc6574f-c2ee-49aa-8752-5d62c68fbd0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2948e4ea-1e21-4096-acb4-def66cf75e49"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42a2ba3e-7d42-44a2-98ea-68ec676de2d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "66e6fca2-a0b5-4b3e-bc73-4e7620da8e03"
                    }
                  }
                ]
              },
              {
                "id": "28ffd42f-4c3e-4bb3-a12e-a9f30b5001db",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a86a14f-e8b1-4d6d-8c45-3bc732fa414e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "147991d9-2583-4162-8dcf-6277322589e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37fa6eb4-1138-44e8-bbb5-1593895ffcbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "371be6fe-aa14-47f2-96b7-900fa8019aee"
                    }
                  }
                ]
              },
              {
                "id": "2e25b269-d15f-4352-973e-efc4f54238ae",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4efd3f79-6454-46be-969a-76c57920498b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d50a658-12a8-4c28-ba9d-128219350588"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e02a1f03-5a09-499d-80bf-0bfa6a1705f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6919c9b9-34f3-42c5-91c1-a4abce4859d0"
                    }
                  }
                ]
              },
              {
                "id": "4d505ae4-ef40-47d7-9aad-7b899d06e420",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "402e87e9-469d-4728-84c2-a8ab66360092",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "867b02c9-44cd-4011-bc65-5ec35347406e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff00e4df-02f0-4e43-bbde-3ed821e16dca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c81fd5a-6463-46e3-b594-3b0582fa4ea8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5aa8f847-1ef4-483d-826d-621d0014dd55",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1f11053-6645-4058-b780-c93005b7b363"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae62a16e-1f4a-45dd-aef1-bf80d11baaab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3690b9b5-4220-4aea-820f-a3629456e9c0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2ff3627-6db3-4deb-a58e-72f7d3a6aec7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ded28f3a-31fe-4371-b82f-fb321467f0fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eba5ec54-82c3-4ecc-b7f8-3182a20225ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e9c01c7-3ac1-47c0-8b75-eac7343593a0"
            }
          }
        ]
      },
      {
        "id": "e28016eb-0854-4072-9b61-d066b5e15830",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1fd073a8-06bc-4e47-889e-91b5bcdb2978",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3823eac-6864-4b23-bb8c-4afff3ac0ae0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d52bca7b-7e70-42d2-a7ad-7880a45f5a92",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f65f58-2b1b-4ccc-ad2f-8d6b2890c360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf37e8c-221f-45f1-a52e-bc26d8a748e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8827ab5c-87ae-4048-9a7d-185eaf18004f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ac1ab6-2a86-481a-9381-17ee05fa38b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbbae18-55b1-4347-96e9-2d6f9e2c4dc7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fd8892-3374-428f-b759-1dc1cb23ae90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4f0c4e-4411-4418-8bab-9e213c5832c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c6efcf-ea75-4257-9dc0-95b3549bdfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1056c96e-6552-493b-a98b-03103386b955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef29548-36d9-4cd5-8b04-678b1e77f6de",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430b098a-91e3-44b7-b1ca-22f61b797752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3d11ce-095e-4fee-afec-0345f916ef8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c174db7d-f485-4aca-a6cf-4e974baa401e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b48d2864-13ee-4dd9-ada9-fd43f1c42cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7c8f71-1140-45cb-84b5-70c85c6270aa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ffa329-bb1f-478e-bc6f-9f06f5680313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657ebfd7-c759-46fc-8573-7d279d012799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dcef1f-26a3-47b9-a2ef-c542a7db5005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89aedd21-7d36-465b-9d5a-25a198723cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e1a108-d090-408c-90f9-a834a36a6f00",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270a195f-7ec2-4a4c-b5d1-a98d45990a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55096e45-6f38-4300-83ef-f9e4ed151570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c03b6e3-aa39-4d1e-aad9-9ab3ef6a0d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf89323b-147c-4940-a7ab-3e45a0eeb98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc7e2ad-a553-4ccc-9871-2f0b8839e457",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c85708-80d9-4727-b019-b2f807f77cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2767eb-3108-420c-b84c-5455d488c28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38990723-96f0-4fc6-a39b-3ffd6f271f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d35b347-2e25-4c1f-9107-a592d3e4a63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70eb4bdf-e2e0-4f2d-81b4-ec99d04ff5d9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759dc4dc-cd38-4914-879d-0c164fcbe6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82abb04e-582a-4eb5-b00a-3e98bf63598d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b2c088-b86f-4710-81c8-2a6a4d84cdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "45b30d1c-3d01-4aef-81d5-e7bc474e6b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2ee47c-490e-4df1-9300-4efe8fc094a9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02100d19-f647-4c4e-abeb-40de9dd05e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d27eae6-a0da-4ac0-ad19-6b30b19a2292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99736357-5074-4449-a2d1-92fb030cb432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06049c44-c803-45fe-845c-5998a3730a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9684fb61-db04-4a05-b4ff-cf705d969251",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c824c6a-8c25-4247-8a46-49f56d24dfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bc4efa-4cc8-4ca9-ac5c-273a0aacd593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e7472d-2154-465e-b037-d133eb1d5243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b39aa9b7-09f8-4cbb-99b0-0a6d3f3a1b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c349e016-e0dc-46d6-9c0f-652389611114",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705f68b5-5300-4d89-a33f-db8f311fb440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225f7f61-e4d9-4eaa-abd5-f729053e83b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2814fd9f-fe1f-4580-9de8-5419992295e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fef467e4-ffa7-4d37-add7-7379c65bdc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e02c12-7a56-4cb0-bdfa-2723f43a822d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4752614-943e-4d7a-9805-aba6dc4cd7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef1e3e8-3a32-4f10-9e6b-393c2f340956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e86198-200e-4e2c-9588-91188d6f0a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3673e7e9-f58d-49b0-a042-42e66823a331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3279db6-3e81-4521-914e-a9fb91b4bbc3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9aa7a5-236d-4702-8bf9-8ec663350585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923b87d6-5f83-4abc-9ded-068c90c2fefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf18b565-f72a-4bfb-95be-827c78b5bd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bdfdd915-8e74-4eb0-9f15-a7b7a53ef8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb181bde-ea08-4fa5-a933-c1a09bc4584b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4331d9a7-55fb-421d-8476-240d0c100682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9cb665-6b09-424a-a10f-68e713be77b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e4314e-c8c4-41ce-909f-68a72bb84036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0d84ecf-907b-4617-a3f9-771ebb261363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcf0a75-0c8e-46c1-89a8-2c10c4a9b4fe",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cae822-68e3-4557-a188-6dcc874419af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65d6098-a6ce-47d6-a729-0437eccf090d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd7c349-e6fb-4b13-bb1f-8b9877d40fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2344d3a3-c0f9-4673-b623-b68cc1b02f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5813c493-0918-49af-8947-4de3acf8feb0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c366676-af0a-47f7-8336-edfe1de27ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d963a121-b1a2-410c-8f83-11193ed5368d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93451566-3b06-4f3a-a2ee-07ed24a21a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "29ca5884-2e58-4e45-924b-2589d1c2e11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ac504d-9abf-4d27-8776-afbb33c83966",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4c8db5-6ff6-474d-b43f-133b0cda9384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950d26fb-d9da-46ef-a23d-4d1030a3485a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4f648c-d591-4afb-8f1d-28ef1f99b2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5f2620-223f-4092-822e-f02566a9aeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8cb022-cab9-4965-988e-d43a583bdedf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d96982-48e6-49dd-91ad-fe3560d291d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f22b6ec-e02e-4888-a9eb-931425480fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d6478c-5219-4148-93ea-7d4bc3209f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0a76d5-d915-499d-a2cf-ca62c9bfb79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c84f29-cb9d-4ef9-b0f1-e666f6b3fec2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d542b977-82f6-4f4a-ae70-21d541a1b571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231852f4-eb34-4e0f-9be9-8b1be9f2b29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397fe81a-edec-4417-8c47-144f15204efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "69d281c6-cdef-4b0f-aa55-da3b4340c0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64ac560-f067-4366-bc99-4ebab641a8f2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bf7ee3-4e07-4370-be5d-191595736c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c8f3d1-26e9-449a-b83b-175073bc346d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f790dae-4404-406d-a02c-af8768f1ee4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9de6b9-107f-4ae1-8af4-7c26097f04a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cddb486-c57f-4364-8826-2c50e71b833c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79997c5-23d8-46d4-99a3-9b7b04c22faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d36c42c-fc49-473d-9b13-266087887e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fd6933-90d0-4ce3-8f12-ebbe0df18b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db9dcb91-a629-4600-94e8-83880489ddd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15193e23-75cf-459d-a962-c7491c734fd4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62025a0b-ccb2-413b-882e-62f322b996fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5333d6cb-7f6c-4152-8cec-bbdfc477b8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7ee3cd-4c3e-4b82-97b0-d58a1de9314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4307e1-3530-46a6-aa8b-74b58189fa89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95511e24-fcc9-44a5-823b-88d3a8101911",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58dcd989-198b-4c63-9caf-90cb6a8c6e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f34e3d6-9971-467d-ae97-5f9ca9444ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c01e718-0d24-4f4e-b248-fdc20c99f298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3968b8ee-5a61-4a3c-b041-e83375a393cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52d79aa-a912-492a-a1cf-60046a6f71ce",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c89f3ae-1b4f-41f5-9799-8b6e30f47f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd10bdfe-3ba8-4f19-b812-9e71d668e203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c9bd91-2699-4081-9dd2-892edfcd8660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b899121-4350-401f-ac75-7840b34e2212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d8f44c-c0ec-4c0a-8bba-5d781a7816a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a748b7-9027-4a78-9ec2-7e275e5b7ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26681eea-42ef-4958-9e36-b5691d533b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4a3cd5-1bdd-4eb7-ab88-3e9c5f7a5afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ade1bdc8-a30e-474c-af81-88f5f697f7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffd7a01-8c29-4a33-b812-a0b09d4d581d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558007d4-fd81-4860-946a-667fb7553b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34baacb9-da77-436e-8272-39579f1b9270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6655cc0-fc67-4306-a9cb-61272404dc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae2dde2-4a21-43e9-87fb-9a1b5505fdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5c6c81-268d-439c-86bc-4ed889c42de9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1b1f0f-bc70-4415-bd40-71f1d4eee032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218265cb-ac9f-45ba-ba20-a4e6c2c8815f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f079572-db73-4793-aab2-eb842539f1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed306579-011c-4172-a00f-0a0424f87937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6a2c9c-ff58-4aaa-b083-c3881c25b9ea",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172727d0-e96f-4304-9379-0b4ef2bde228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21dd93e0-2a55-46cc-b83d-568dadb9fe0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53921c8a-3bc3-411e-ac52-495e20236c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e76487-5c7b-403d-b1c6-fb7d41bfe5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab7e93e-b45a-4212-bae4-ab6e8b2cdcdc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a933292-8146-45a3-8f4f-eae6c4f2563c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00549d1-ca53-4045-95de-416e6ba3a2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ab9528-d6fc-4d8c-af02-9a5bb78c895d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f5d1fe-d087-43b4-9b29-2f14212261c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfc330c-1e59-4241-a677-7fb2eb395ddf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12df615-7b37-4ab7-a9b9-62e3b3ca438f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b582a4b-f2d4-499a-9cdb-7b81aef28efb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a412a359-5d57-4c55-b648-f74b62f7ff99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66978ccc-5d3e-47cb-bd02-bcd6802b6601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18330d44-f7df-4525-aa92-170a02cc3bf1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0071b93-31e9-4aa4-b1e3-9ce555d176f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4076fb43-dd86-499e-bc2b-3c4755b34853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ffca77-14a1-445a-8707-739344015a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0e2fb7-72fb-4ace-abc5-8199b8f23d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb39a81f-7f95-44f9-9148-346b297f401c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5b6d1e-cd00-48d9-a071-140fbc38cf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1196157f-24db-4d38-a413-0d0496620660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9ce52f-3f58-4a8b-ab6f-885472a64558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "002ad5a6-26b2-45f4-b3d1-9231d6c11a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c781d1de-ef3f-4185-acbb-20155201c965",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99620573-db61-4676-baab-390e1a3c4132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d3a5bc-0d8b-46df-9fe7-f041f0e69f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cde8fb-878b-4509-8a3b-bd6db444ae76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9325036-70eb-4f5e-94f3-ce3bf66f4a25"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f0f0b38-f4e3-4f7b-929b-80f4cf774da9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db2708b7-11b6-470e-b0ee-e5c6a9a7938a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb832f4-650c-4b90-bab9-bd10ca12fb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a62cf1-2240-4539-9dbd-b139a0957a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "119c580d-8ff9-4b6e-a1c5-e4fc48545ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "178687b6-8468-45f5-ac89-1eb967356fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18c8fd8-dd1f-401d-89b5-00178d4c6dff",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdd05ec-45c3-4c88-aa3b-6a709c216596",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "15a14319-5979-4f55-b238-fc797c51034a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06297e6b-507d-4c33-ac09-9f367439dfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48c6e3ca-dc81-4e4f-b375-9ece15c76882"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "845b1107-f88f-4349-a3fb-3fcc8eaeee62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bb51e33-7700-46fb-903f-a0e1ce93eaea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a392a6f7-b9eb-4703-9714-3bb9fa76dc0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81914ddb-a948-4a00-a777-fc1453d84f3c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29c08c89-1640-4e73-bd3b-6a9c93b1a217",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "093d8db3-8b9b-4dd4-8c91-aa29fca0953b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e4e170d-8c34-4bf7-834f-3419d9c24670",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fffa2d60-bb6d-4346-bbc5-2bde09d219c3"
            }
          }
        ]
      },
      {
        "id": "288f5cd4-39c5-4e00-9fa5-1470031ef92c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0b5ecb45-324c-4bbb-a0f6-025f6d81f52b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be1d7514-7562-4e11-8a37-8331a5befb36",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0119f5d5-837d-4ebc-b7ad-8577bda4d226",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c19e500-9314-4f32-98c0-c1fd7c10c593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbedddb5-9861-47fd-8b61-2eb23d4d8a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6200c0e3-aa33-47a0-875c-f8a94f49fc5c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be5b1a6-d92e-40c4-903f-4f62727e8392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49497c28-3c9c-41b8-979d-88b7a2c0e725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720c0eab-9231-48c3-b894-46f355820172",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628d0312-2a4d-432d-8d85-35540af8489d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee4fa30-18ae-44c3-9d3f-42af9c1bd2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda82eee-14be-45f9-8537-81ba412de023",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7ec2bf-f0cb-4a63-81d0-04338fccd2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46d480c-d4a5-4b8a-9d09-4b10c092d38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711dbf76-483d-4c7e-a7ce-e333bb2b12be",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39467a3-75b9-4afd-9212-444650ebb4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced9abe5-5bfa-4591-b4d4-e5431f688ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ba0fe4-8577-4f9b-ac97-880ed31bc499",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6de0e9-9b4a-46a9-ae44-0a121777b25d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc41a16e-2919-4301-ba44-ae7c58057c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b86801-0164-4326-8f73-c779bb37e1b3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f971896-cfdd-48b1-9ddb-dd1430e98b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fdc218e-f2ef-4474-8980-b4127f7d44ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223c8171-da3c-4f94-af6f-34b6569c7af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200ddfb7-6b44-4d5f-a21a-846922ac7b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72925e68-14b8-4146-9f7c-3b1f01f156e4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c9f306-13f3-43ae-b0e3-ec82da9b5ccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f4c2024-1216-4c51-9a3b-f6ccdab60fd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d7fca5-3637-46cb-bea0-9ef627fa7124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c875ab18-4bf5-4ad2-90f5-afbed2ec275f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3248338e-55a8-41a5-bd1f-159dfa985936",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a549730-c80f-45ba-b709-f35db102f1cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea847fa-f9f4-4353-8945-7a03ab59bbb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1542c3-449e-4ae8-855d-7e9f62299f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0632ccbe-bb97-4649-8bcd-73974362812c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813c452a-474f-41f9-9f1b-de1126c443ea",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8978ade0-070c-497d-86c6-ef061a62f84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba3c247-c60f-4806-98e8-93df26d4e332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273c05b9-44bc-4fc5-96bc-8bc4fa212a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94455233-a9b6-4b75-94c3-1fc477b1a3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4865102-d109-48e3-9358-19a82180e21d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b85f8a9-b94b-4998-a4d3-8955349f288a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31da1c9-f85f-40f9-a3a0-d4e4a5af3529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c65edd1-ed81-4752-a31e-4c8150588483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5436d8b0-534e-4999-a3ac-7ed906a6fbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f89b10-a283-47ba-8844-78be9d9c1c2c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220f5462-1375-487b-838b-149ff8a6bbef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7989f473-ca9b-4a36-ab10-65be742f52ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dc6c7b-7bbc-4111-b568-160003b7673b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f373b107-3f9c-4dfc-8bbf-afe6ccb5c090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fdd2e9-f3ef-4420-b195-3961a8492f1d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2954838-3f7d-4e09-aed7-b1a0ce66ba96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8468d8ab-c1cf-404a-8f2a-036834a0b503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ec5b43-ec91-4290-b6f2-e9ab7298aa42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d1b0981-f8bb-43d3-b729-bf223d9ea42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa1a902-bcd1-47c9-931f-5f4b63081c2f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d56465-4d70-446b-ac69-d7dab3924f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49fecf63-5d21-4c90-b645-b78ec533b6fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f7c3a8-0a77-4f7e-972f-81991b70dfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e19b13-7b29-45c5-8aae-cc6bfce2c424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b576fff0-8537-4d7b-9904-55a5cf3dc271",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98b006d-a9f3-4469-88bf-26c08a0c42d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8db19bca-44a1-4456-947c-4dc185bdbd80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d02a01f-2fb3-462e-8b4a-6d8f54bb980e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76328130-5ac7-4ee8-a12b-a15f9993573e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a2625f-4bc3-4e6a-820d-c830a53443ef",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155cfd79-72b4-43c5-9b5b-b968c2e58398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6d6cb36-d7ef-40c5-9e93-1367ee67448b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e31d36-639f-4dce-a40e-7ff03e0d7758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bb71dd-90a0-44d3-b753-0c1275a4cce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fc5dd2-62bc-4cd5-81cd-6db76c6f05af",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cdd6ce-ce8d-4846-9183-1094eced5659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0018f0a8-db75-4eae-b61a-04978d8dfe12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6e8726-10f3-4f1b-992d-753e3a8986c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b7b019-332a-4f3d-b828-f65051eecafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ebd338-899b-41d1-aac0-c9f79c7f5352",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1268e1f8-65d0-4afb-838f-2f8676436eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad325c0-3b1a-4ef0-89f6-937ba9d4f79d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0d504a-bb81-4656-8547-48d996159c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88d4617-0f8e-40fa-a628-6d4b9649999a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36255e80-da36-45f7-8fa2-c070f04e3305",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa25e48c-da06-42e2-b9cf-541e071f3b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709c9a2f-d896-48f9-add1-10c79a532482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f4ee43-93d7-4b2d-9f5b-2a1b20c23516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26fb052c-ad5f-46d1-92cf-e5f4d6e0f098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11798b3-cf96-4322-beb2-5283c69a1ffa",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022639e4-db79-4861-81b5-6a4c42f3c4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f81a813-e994-4aa5-9e75-bb45ccaa38aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5900ff0f-4815-4b97-b50e-2bcbebdda431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe409c0a-73b7-4f40-b004-1fe9b511bfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543a990b-c459-4d5e-a0b8-b717f54b1665",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb93e6d-46a8-45ab-a8cc-3ecf5d538b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f420d775-f288-4bbd-a764-8ec0cf21214d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fe3a47-5690-48e9-b866-c75e17e98536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2282f4-0086-478e-a1d6-770f45ae301b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a610908-cfd2-4139-a585-1f64ade14dfe",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c4e51d-05b0-411e-8a01-215920dcf6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1124cd9-2802-4809-a06c-76173b54cccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6d41c5-7125-4e67-a1db-54a195b2dc4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2baa0614-57e4-4749-8dcf-8509460601cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332de021-15d2-4dd7-9111-1f2e825b44c1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8456cd7d-0d58-44ba-a28d-07bbe814c8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5636637-4b02-4678-9e06-f0870ea1d72f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f64e54-99ad-4dc0-9323-027c8fe7cc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590abd5e-b6cb-4536-8330-fee7961bd4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec62877-ffe9-4f69-9483-6b43b1378300",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47a8b55-aa5f-4a02-a039-c375bd58cd79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f288d13-4cc9-4897-8887-4b6d331ca958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdac7fb0-2547-4b66-86cc-b7402df3ce98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf79c2b-951b-4c7d-bf2b-a1450afbb335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52cf4fc-e866-42e7-8383-40a60a92372b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063c49ba-f078-453d-97db-4306f8c9b03c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3455a786-16ad-46b4-973d-bc588bc793fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbee7f5-a13c-4f0f-a5ba-b59c3a7b6baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6dbda69-5105-404f-b5dc-8daf63285e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae66249-d7f7-4175-9784-fe7224a2cd12",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810e7b6f-0313-4f12-9dab-64717d2dec0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91652940-0d09-4aa8-b518-f5c7b422f316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1205d150-51ad-4e8d-83c7-ee42c30de0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3165c903-3d45-472f-8a2b-7cf0b30ad539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce15ae0a-c658-4ce8-85a3-7ca1cd5cbf16",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a7d1a1-2694-424c-a6f0-4cb776f5d11f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd95f86c-c96f-4c91-ab4f-68d572914062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef43f5fa-2bfb-4770-bad9-ca157c3c8b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5fa484e-04c0-46f0-9f5d-10b09fd83fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a2d29d-552f-43e6-a740-9aaa98bf774b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c43c00-ea41-4127-9641-143ec75e7088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c687ea-51c1-41c7-a65b-f75af3feadbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0986ef7c-5d57-4107-8856-7fa9340cffaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e397f907-6321-4a59-a03a-56bbc3667d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef280ad-40c9-43b3-b881-a832ff25e387",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab4749b-004a-4a49-b17c-15936ba76cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775cd3bf-7074-493e-818b-f7df99068c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2ca809-159a-4df3-90b0-198e91dbf1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43376bbe-d51b-4e2b-bec5-e62e090067ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7420397-2a44-4ca2-8029-b346f005f5e6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c4ff4c-41d9-415f-9a58-6cd33b922aa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e17b830d-7ff2-4870-b5dd-067427ec16a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb263c97-5858-4ff1-b16d-d942088cdfd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21db71ca-4a7a-470c-a712-e76c41a07de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589a2bd3-2e90-4aef-9e9e-73861ed575f6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a900ddac-3035-4a80-a8c6-5de2118b66e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bef3ef06-2f0d-4228-8063-2b5266d2f9b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8bbc65-918d-4db1-89a1-d400948ecade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c772a9e-9733-4632-b1fa-806763074543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0246bbed-f5ff-4d72-b98d-34227ae4bcf0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba17aaa-6ea1-48dc-917c-29850366379b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "541a5583-4ab1-43a8-bea6-ed5ddc05b030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6c501e-bff6-4a08-9be0-51874530de2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af731a1b-2677-4b3c-8ccc-1cc820444555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51b3c07-117f-4948-9c4b-1215319b87ec",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a147daaa-b9f4-4650-a352-26e9721f431a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f962279-182a-40eb-8284-df94a0242c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242533ab-8897-4bd2-8f79-455adf77af48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3208cca4-cd5f-48c9-86b8-dbaac0c9108f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0811ce-1331-4b63-91be-e6131f8b2263",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab024a9a-d1d2-486f-bcc0-0ecff1f8d8ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b29f525-1823-4a88-9e9c-b2445baf69d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e0ac05-c6e4-4b0d-b0e0-5a28aa469238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3264867-c08d-4fe8-bced-3f8eb657abe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81dc527-a5ff-4edd-bb3d-fb2ea9be7bd6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5828fa81-6008-405e-b47d-255c3b353f9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "932d6794-1022-4778-9607-fb3325fb8b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3ac1ce-77e0-4017-bc36-8258d2efbe06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ddb577-af6f-438c-bc87-0cdc64ee35a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934291ac-2b13-4191-901a-378ce994d80b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82199bfc-955b-48a4-a90b-d47bcba419fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eac4098-184a-444f-8887-bf2d0b16a1fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da2882e-28a7-42ca-8e0f-6fc73edff812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc29745e-3369-4cea-b41b-83fe87105cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cead4a-d989-4e1f-919f-8adc9e704cec",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ec2100-9324-49c4-859c-d93be06fc703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663500b0-43ce-4a42-bf4d-65cc7073f926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea95698-082e-4a0a-b54f-85ac6e2fae5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef5aad1-a3c5-4aa2-9426-40c95c080737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea98cffe-2c47-4698-92cf-ed9c203cafec",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bf6803-744f-410b-92b3-c97c469786b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351b5add-fc47-407b-bcb2-b1888b70fd3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ad64d7-ebc1-4f28-ae54-7d0fb7c7966e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123e74af-64c0-488c-9e08-d7fd611cdf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee9e2b5-b227-4242-a3d1-89cfa6cb3589",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2850312-d770-488f-a974-8a2896647720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e7531b-90dc-499d-a14c-c463e26f1329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42b0587-fefb-4389-9ebd-a856e42346de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54437fa-9d4d-41a0-8404-361d79a6395e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d379fc41-355f-4a0c-ab1b-a336b7571c09",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d977d495-8386-4fde-b62e-28a2297fa0ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd13502-5c28-4002-a40c-3d72acf65c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07939290-27bb-4111-b739-3c948c7e01e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2344c07-8a0b-4fd3-b0b9-88b1328a7aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f2727a-eb69-48f1-ac68-7357d2ed1450",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec9a72f-76d9-4b51-996e-f10969f44094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ffe01b-476d-4625-8cbd-c145152cc855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b4c4cc-6ad5-4a95-a8a6-a9f282ad796d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0e4378-e778-40e5-871d-3525fd4f9187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fffdaaf-1eca-4d08-a075-d5b14839eb77",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a89c222-f19f-477d-a5d8-29b0b2d994a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b3d2b8-784c-440c-a5dd-e6e799d1f286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef8ad2a-a827-4d74-88fc-2bf1e57af170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236ccfb5-ad54-467f-bb44-c202837a55e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8feb6f-126f-4184-ab0c-a8067405fc30",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9f0c86-a876-4830-92e5-4a4ef3ca5b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86181e42-2678-469e-aa70-59ad6dfae09f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6755324b-b0e9-4051-bbe3-d0727dc82809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1420f63b-12f9-4956-8b2f-548d78434644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5724cd9a-122c-48e8-bb2f-4451f3ca28f4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884209f3-a897-4d22-8273-b19541b73513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c0dce7-f855-4254-b288-277b769ae47c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9e99e9-d22e-4aa5-a712-2f13670484b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7226f99d-279a-4805-8a92-a0ada94cfbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9e6c49-1b08-49ef-8261-de14ec6575c0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5feb4696-2fca-460d-86d1-4d528076199b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d576a283-9c5c-4e02-b23c-28f9e19775ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9defc1-53ed-46d9-baf8-f8883dd73da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172d383c-c579-4391-b0fa-40e593dee215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf77fbf8-b9ea-4ef5-b9c3-86d751dd9d2b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52de9d6b-ad9c-4c70-be26-77e030d5d66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096bbc4c-83d1-4c98-9540-dc8f74dca209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d93b1ed-937b-45ee-b168-fae4862defd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13015e82-17de-404e-a622-35367c95c50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc24052b-4642-4341-9fde-98244c791a20",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140af74c-c98a-4a88-8ef0-c7eb9e999ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb025ad4-b473-4c9e-b4a6-dc4d8dd6a03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33062a98-e2fb-4867-bf8e-620a69c437bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e06964-dd0b-4b73-aca7-2b30c2561796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05115a95-0c5a-48e5-8d96-62b92f7d1b0a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1128566a-e27a-4b30-96d1-c8de02acba13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb60a2ef-2548-47e4-8e77-5b24f58c4997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca2dd23-2c74-4a23-8ff0-e5012b4eba27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd31a1c-3a1f-4de6-a7a6-582490aed392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db52390-ce21-42e2-bec9-efd583f92aed",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e20f3a-de92-4a60-b30f-1be65e4e8b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6dc35a-da9a-486a-8758-b206b8d7dea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "875318d7-0a3d-4444-b161-210ee429d47a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc36728-40a1-44e9-89fe-8e5f359e13a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98305a0-6aec-4ab1-9631-480e976e249f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d347a02f-68ec-4fc6-a2b7-de7d99fee4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65b34ca-f56e-4dd6-bb43-d10f9ba771b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31606020-68d8-4c79-9b68-bd7ca3a55b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f739b4-25ce-4b9d-a9ae-6f7d646ca646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762131fa-08e5-4c93-a109-fc2d11f5e511",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbf09d7-f130-4dc4-87e4-cffb160019b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c51122-a241-4e86-ad9a-913c1427b345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaf44d7-0846-40b3-b644-23b2aa2b5d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db346031-6304-416b-be43-cfa6b778a0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567a5c33-44fa-4557-8905-766ce34fb6f4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd193032-432e-4fca-90d6-089f7f2b0f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5a4a19-03fa-4397-859a-ea618fc6c496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1470f449-48e7-4973-aa30-efc02d53215e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae545c2-c701-4b1c-8145-f7a2c5eaab37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b58c432-f24c-482f-8e04-2f7f8e4f5ef4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1b4c07-3681-4d8f-b960-ea119534f025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a594af-4a99-4f39-b0cc-27542bd21f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a78aca-0c33-4269-a40e-377f396f54ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96992b0e-1a23-46df-a3a1-babd750558e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8613d9e-bb3e-4029-b59e-bf598bac20cb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24edbd79-3fb9-4f4e-9f7f-c3bbf76356c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f501c489-0b7d-4b92-863b-8baaee003863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edab0132-339c-4063-965a-8ccf9970aa7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f7072a-d758-44ec-ba4d-536b0debd544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2374aa30-f3b4-4d8a-95e3-834f3b6eb03e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9cdbf7-748e-4a58-ad57-0964a987a241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7380fb57-5daf-4ef1-86dc-f89ebc23c3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6477a6c-2761-474c-a710-3abf34e800e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001d9d0e-cb12-4f3e-8d8f-e1a83563b8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711e4eea-90e2-45db-95d0-96d22563b8a2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609daf52-4a32-4fb8-890e-d95befb5384c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd899470-56d7-4e2d-a770-563852545fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8162ba3-25ab-4bdb-a943-1e7955addb59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcb7cde-fc3d-4528-8a98-c20072faba06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472288d4-f6fa-47da-9143-f7fb4e2ac3a9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf2fe25-d515-4be2-a23e-3051aa3d1c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554ac13f-7edf-486c-8c44-7b5347ec04a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dba2881-dd9a-4726-8132-f9e567a4c397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0089e617-b53c-4b1f-a9eb-bef5bc73edcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed60bbd-1c9c-4b54-8836-ba21ec343741",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3b9e0e-f1cc-493d-92d5-e32f5a004abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec897a6-a181-4461-ae78-9a5bc9056f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850b1fb5-5a38-4cd7-85af-e2bc4034af8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "015424d4-b5ca-4d27-9f51-60998dcad434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0986877b-2e10-490c-af2e-083fc4f9459f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590b0e47-dd88-46aa-a4de-ee389fdeffe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d98f27-a49a-4de9-ad35-cbce06f37605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125e958b-760b-400b-9dee-b70e041d39f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e8e755-e007-4f97-8541-44750952d9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5a8020-e2ac-49f6-ac68-48553d4adb9d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797207de-03db-4a8d-940f-cd6f51e501eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd89008-529f-4b31-8216-1a4142021685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895516a6-edb3-43e0-89e9-70c4681bb7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c70930e-bf99-48f9-b76d-7b6dbaf77b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80177d0-87c5-40d4-ad7c-2a07be103879",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255d5446-4e30-4744-be7b-15f7d33db2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab171569-c124-46c0-8eb0-f5c0c4852590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab9eb02-07b0-4db9-8384-c0b25ca172af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c561ef-e4d5-453a-a531-95a78f2bc6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65235457-9701-4c4f-81ef-5e20e2d93a8e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8a98b4-b34c-4509-a9f8-1d2f3bd4594c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfdd97d-b082-4084-b1b0-4bb87ebb267e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15511f22-28ea-4f31-974a-3f43a1d0604b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39eb482a-2140-4c02-8230-3fc8b06511fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266821bc-c5a8-493c-ba15-01e2fcee84c0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938715d2-2a40-4b47-905b-4c565909896d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d289c0c-502c-410f-a0db-f6b067111c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3365e39-046e-4693-8f05-5f8a7b51d7bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a580d4c-c934-49f5-8f65-c5da1274f411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91768a1-9a86-4c9b-9b05-4dc7c981b412",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08fb980-79ec-4bcc-b9cc-be4522d0dea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a75901-ab59-404f-8247-3baf2b986009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1204a9a-3249-4254-8d38-2de0752c3129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d393a3-dc19-415c-865f-46a5b1799142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617af9e2-cdf1-48c1-b58b-db5d805e6f58",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612f2e12-719d-465b-914b-5db697e513cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dac61f8a-6587-4ce1-b4be-6c6eaabbda78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e332c266-ec05-41f2-9a99-bdffe7249e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8a084c-3728-465e-b969-cc3889568571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e9082a-77b6-4886-9829-b8cf252c3d13",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40083ed-62aa-4c37-952e-bb09a0a40eef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cccac568-b3e3-4edb-9e68-781e853c4104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b022b3a5-2a2c-4fdd-8e1c-b5ef3a80dd5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cedacc50-f48a-419b-a5b9-765f703aa9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68e14f1-9a03-4c05-97b9-217ec0b312a4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e78e95-7f00-4bb8-86db-6f8e7acff658",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03efdfff-a028-4e33-9308-fb464651e864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec9be08-2bb9-49d6-a0d8-70d5ed9dce1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024883e9-9041-45ab-a6f7-3ad361f26780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92055cd2-b23c-4e48-901f-d05a55baadad",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48ef13b-6a99-4ecd-b109-12b91b3f91ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d5f8b95-8c95-4ae6-acb0-e638a0dfef7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b506255-33eb-4b8a-a4d4-1f903195c33c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e23bce-618c-4c1b-835b-a043b5a81041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aaf3b72-9aeb-4c38-929f-13e6ab31196e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cf00a4-492a-4f4e-bea9-5874d6ea3386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d5cad79-5885-4aab-b07b-35cf1ce8573e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abb4a29-5d1e-48c0-bffc-b3ed2a8506b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90595cc-0204-489a-895e-40ea401f9ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d018da9b-6403-450c-807b-7b39a6e0ee13",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf365ee-a38f-48b1-a87d-56d4db22cf8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c84ef89-935f-4411-98a8-b88f363da21d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948e0096-9e48-4c25-909c-86ff1007e8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9557ccd0-30c9-4a53-ab97-cd74e207728c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c06d14-ceca-42b5-9b07-3ecceac4ad03",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbbfe44-5212-4ccc-a9dc-bf13e2a47f93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d750caa3-e42d-4a71-9f9a-a53d7f3a71fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551ac732-b792-4393-821b-c56ebbe36c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2f05cf-ac01-46f1-aed7-e6dbb709429a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe06ff0d-d6e5-4e56-8bdb-4a5e98305b8b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcddcc0-70bf-4343-b459-0ac1a020fa5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3514f3f-c865-4897-aaf5-62c8b0c3be82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b2d474-33ca-416b-92a1-e0993da0f215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2728cd2b-f626-4add-baba-2f6eefaaaff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e55d572-5c41-4971-973b-44996286e5c9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731cae55-ca58-4826-b67e-ae9d0308f3c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fc4354c-4369-43d2-8022-bdb260921f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0f8c7b-b382-47c6-bee8-4e1d8b265602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7676c4a6-5f8a-442d-87f8-82453a9daae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405c5953-065c-41b8-97e6-6e8407223c2c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0f9bc1-6ea1-4a5b-9314-7f0f77af673a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff7e5cb5-9351-4900-b66e-e71b21b73487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d03a49-de4e-4626-b60c-66adfbac5cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d1f5c9-44ae-430e-995e-a4519e02807f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13231442-97b2-46b0-bbdd-aa16ea481d62",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b119c17a-02d7-4393-b473-ec03550dfefe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6517647-24a0-4f1c-ae59-9493b0cdc7e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2bf925-2cb7-4b91-8d6b-35343c8d479b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578cd8f6-fb42-49f2-aa63-caa310583a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148c8f6c-8d55-4664-a416-615d1a34d348",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06114546-41cf-4312-b737-d584994c3c75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a73052-21f7-4960-b945-4f82e600c23f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e021ca-a880-498a-a8bd-9baf7b48ecc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f1fbdc-73a8-485f-8172-07ac16f5b0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85a3357-98c8-4753-8132-e7103ab48230",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fcf163-b969-425b-ad4b-e38f588e8f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aecb1fe-6eb7-4a1a-919a-3645f378cef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c4b64e-37b3-467c-9a33-df0afc6781bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f02b1b-bcef-4ecd-92cf-a6eaf17fb1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cf611b-4b87-42dd-a1fd-1e518e1737b0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be4a5c8-c28c-477c-baa5-673e36cd8ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbf0791c-63af-4486-b527-3d7c92796d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9939f5-f117-4745-b383-f0f340aa77e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e456424-084b-466a-8ab4-45dcf726f430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d290f62-c240-4c8e-9b38-c05fead1e17a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9653e3-f5f1-4afc-abce-d97a12fb8fe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a1e8c1d-4621-41da-a1b0-9ad32433f1fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba7cb78-936d-4e5b-999f-19c37efa57a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4493adc-c6cd-41aa-9892-fe8a51c90aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b56614-d169-48c3-99a0-35b7e79aeb64",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fa473f-68ae-425e-b646-c6a73af0d37f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46749c90-82de-499b-9ae8-8d3a7c72100d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb90c5b5-a496-4413-9268-d712d8da28bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416aeb69-6a36-47fc-93d5-83e23f89c832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c4aead-4a1e-4625-aa39-6afa7ac6b3b2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15aad1a5-306f-4eac-bc0f-fc6c699ae5b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20a9cc4f-25ed-42db-a35e-d824c09ba115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b80fca0-edf0-4e72-b63f-899270fb88ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d6ff64-4806-4b2f-ba34-dd192fb14b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa23b45-5610-4cac-a4c4-93b2df0c3b63",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7fb4c4-f420-45a7-ae31-cc85fb83b52b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bfa6902-bb64-45b3-89ef-21a1c8e765b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6a86c9-6c5f-4e3f-a6e0-c14791120e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3adf60e-f4fb-40af-b158-394eecc7d8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa6813c-7ba0-4c2c-8747-1830a3912d32",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2eb158-208b-48b4-97f0-3af07e8b4ae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95149f3e-f713-456a-8e67-3ec3ed4dc7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161afdcc-ae51-4561-a587-fb35fc4b8102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89f0d29-3e7e-4c9e-b2ce-0e5ba84d360b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b1e76a-ed94-4760-b956-da31cb81e669",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e450bf7-250f-4fd4-8ec4-73266682fc74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8badb77e-64b7-4899-9cc6-6ba64443dba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad307d6-361d-41eb-ad10-13ddfcc69cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771b476c-0c87-4393-ba40-94c758a65f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb802ed-45bd-43df-b238-77c33558a3e5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827d5b5d-1ac0-4b5a-8d04-eccd7279414f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79d3570c-6424-460d-b245-db57171e18a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd8133d-98e8-48be-bbab-083a4cecdca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea888ad-c08e-4941-b15b-c405499fbd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7abbbc2-fda2-4a40-8242-5a77f1097fde",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ecfaa1-5335-42b8-b22e-15b96c622005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "344b19f2-f190-41cc-9484-bfdfa6542012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7074682-9679-48e1-814d-84579eb4bd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2c1800-ab35-4ea2-aa98-ae389965a63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e3afd5-74d7-4883-9822-7ee6aa44b9ec",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0d1129-0243-47b2-ae20-7c62bd65c0a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bb9f64c-9cf9-401e-aea3-734dffe3c349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3698a4-58ad-4122-8e3c-f30bd6851fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747899cb-e4ea-414e-af78-7501153799eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf66422-1541-4db2-9e0b-659eca0e2bdb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebb6bc3-da19-4e13-8a2b-3438883d338d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3be5a02-5d7a-4bac-a966-2099aff2a42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf21b852-64f9-47af-b03e-631d1fa5a82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea09442-caac-4424-86fc-61660cb62848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baba1914-e113-43b8-b102-dee25708e82c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d3c53d-642d-4391-a8bf-ef926fae6b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35ce18e0-31d4-42cf-a5bc-8f3aaeb35c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64b6e65-c8f0-4f86-ba32-bbad76167f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c71d5db-4ab3-457b-a9e8-ebafd9b0e21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d28bea6-5606-43c8-b2f2-b08bc38a43c2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2301c634-dc7f-4cbb-a7f9-9aa8c8297d07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dabd7c2d-1922-4e2b-b27d-0739c1f38165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b15ffbd-256a-46a6-af15-90d56560b899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929a66e4-80df-44c3-b570-93b4368984e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9366fd06-04cd-4cf9-a0d3-86fd1c3be7b3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22acb591-42e7-4b8a-9331-fc738db49e19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb3e89d-d5e5-4645-ab47-5675f91d5a6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08c03e0-6c52-4679-9ad2-36f0909e0cef",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb5ccad-2fa9-4d40-97cf-ce80a0a6a0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb16d86-91db-45f1-a10c-bbf85a1fe246",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4fed69-ac84-403e-aade-70664e35db58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e60911-2ee7-412b-88a6-ce24e174b0af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08654f7f-cbd4-4a1b-bef7-d3231106d597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0c3454-17ca-454b-b59e-e11e966ab160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eecc548-e15b-4076-8af9-ba4783f6ce8e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46909e4-927f-4c67-9187-5ca38d2f8798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7623a80f-056f-4d7e-9731-eaec741d59e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51fac04-37d9-41b4-a467-5def15b8a236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777eceea-38c2-4283-9237-d55cd2b62110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8676d193-6614-4c72-a344-e80c77dfa4d9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8da4db-8467-4443-ae66-192411f2b8b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3626a91-8bad-4bcf-96e7-abc0199c0143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f49177-c2d9-4d15-ab4a-5b85b3e3e751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b97ba61-9f29-4383-ad7b-a72f52fccec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9921866-8da1-4e7b-8dd3-c71be3af333f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19954826-5238-4262-aa05-acb381be5380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab2f464-029c-466a-b658-53e978dd47b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acd89de-31c3-4df4-afd4-ccacf25078fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb860dd6-5e43-4d88-b32e-a39de64683e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74baf26f-8a59-40d1-a5af-d9d87b10e58e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644176a8-c52b-4ad7-810e-3cf9f9066c6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cdc5c89-7d8a-4112-8964-e9f88b0432b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c778d7-54ae-422c-b97f-8f83db039c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499fe047-630e-401e-98af-a08e80225248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2552754b-d2b7-4f32-9b78-7724e4c4768c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb00e61-1a55-49c1-a930-fdbce0d9a535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05768c88-9554-4821-9543-b7ca911f2a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7262ef19-ea8b-4a33-97ac-b71c8c6b2ff0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b42dfaa-7aa4-4cff-8ca0-25f128df4f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e817a1e6-f9c9-4e6e-8628-470ce809dfdc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302ba2b8-9439-4e4a-a2c2-34649ad6a7c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11b5c584-92b2-46ab-94b6-f37ec4eb7db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9384b8-474d-4449-af6e-0c0cd939e073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb82b67-231b-4075-bd51-21ce423d473f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8790e39-3655-43f3-a5f6-9ca2a51f2bbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75eb00ab-1e5a-42ab-82ba-712eb9f3343c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70d428fb-1ee5-4fd6-9757-dcc090576691",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "124cf1b5-9916-4a10-be9f-386c3bd17af1"
                    }
                  }
                ]
              },
              {
                "id": "61aa9ea0-037d-4d60-973e-d82bee5afc2f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e14759b-0f1c-48b5-ba52-b8eeb7f126c6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874d4d01-126a-428c-9b6a-6f66e4fe4cd4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "220b75f0-e796-43ad-9505-b6a312862934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646470ee-b523-4a52-9746-0a0accecaeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2396c33f-5e89-40c5-87ce-97f43cbb2c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390977a7-c058-4e76-8eb8-326da96cd0e2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8e2daa-10aa-4a86-a4fd-901b8d646eb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "416b125d-b775-4337-a74e-9bb681921f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac92407d-da54-4f2d-b466-445cab185a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6500b945-603b-4b0f-9fe6-f8e010bad2be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff6e50dd-b28c-4016-adfb-f40e9f0025cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1aee2698-20a9-4a44-a512-a863d20f9eb1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "804e986f-b8b3-414a-b53e-11536c855cb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f7d2f07-50ac-48a4-8685-4963870e3c12"
                    }
                  }
                ]
              },
              {
                "id": "6262d21e-0e50-4e4b-b5bb-5af510e2068d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a58804fe-eee9-46cb-8bcd-fab29ea195c2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e311f2d-8d7e-408d-8bda-a149a72c73db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "853e534c-f779-47e3-95d5-bcf8e62aec9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b542e7af-c5c6-4ca8-9306-15cb7168dee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbbf633-cd34-469c-b639-4dd264addab8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a7c1ddc7-9ab0-44d9-9d00-4b2f8d3d1cd9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "438d7c91-c2e2-419f-8b62-597ce57ee0a0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e77a1029-aec7-4251-8130-f8e31c876700",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5b243f42-2447-4bd3-b8d0-79547dc9f1e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2666119-dadb-46c1-b589-456fe411d175",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb07e36c-b634-4a99-bfe5-f3243803b4cf"
                    }
                  }
                ]
              },
              {
                "id": "011a8b2c-7abf-4706-9b77-ad75415f6323",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13a9b658-31bf-40c4-95c4-7ed79cb15af3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "166b2e2e-868f-41ca-95fa-aa00c302eb39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a987fea8-03f2-48ae-a2af-cd9df964ae7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85d49c50-14ee-4913-bafc-60b0027959ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f22439c-608a-454a-9a12-0c4b96057e6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0ec05e5a-9273-49db-9e81-38064dbc86ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b28d7dd-453c-415f-9aab-f356699ac9fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19f73ece-b6c1-49b8-bf4b-0fe51071981f"
            }
          }
        ]
      },
      {
        "id": "b4248cd2-798c-4469-838f-88ece30f7235",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "efecadd1-ba2b-4a5d-9d32-7f93506650f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc61c7fd-5bd8-4841-85b9-69cd75dbe01a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a74e4cc9-9962-49e0-a1df-e9d002cc1052",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76db4a88-c578-44e3-a524-7ecc4e163a67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "17588d6d-c0a2-485c-b36d-4b9767e69805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40749b71-b7ba-4f6b-a1f1-c94748dd42f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04e7f124-0bfb-40fc-bd59-eea9d255dba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3126bf98-5c32-461f-a746-9363143b54dd",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0ec203-25c1-433b-ae2e-88757af7e9f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0c172b66-f02c-46ea-9b01-959671bab849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a768ed31-1c4a-472a-9ba6-df7a64732c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6daeed6-e64a-4b69-9757-755401b1d354"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f931dc42-1fcb-49e9-943c-7427f0d79fd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b88a3c4a-d983-4698-bd29-31e3c69cdbd9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad71ccb9-53cd-42c4-b86d-90110a2fd7fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3027ce2-e1c4-44cf-a0cf-b3e483780781"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62a43e8a-7d22-4c77-8451-be8e2c32ae72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fbd7ab7d-3893-4354-afd0-45a41cb84eee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec13f8a0-7c64-43d2-b6b0-162e15f6cf9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84b2f56f-5bde-45bf-b87e-de11224b3b4f"
            }
          }
        ]
      },
      {
        "id": "feb83bc1-d1ad-4813-a021-6077aee9f75f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fbb4d036-97de-4280-b1b7-55c857b57abc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "89361c94-e6ee-4c57-907b-dacfbf540b58",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3eb9fccb-7e25-4aac-8987-162e340ef8da",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc3cb97-0f43-484e-93ab-dbd64343dc18",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c0989e55-e225-4320-871b-8f3981b928e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3baa194a-8b8d-4172-8515-aefc9b577bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "025aa4e3-b92c-44b9-af28-efee5b59fab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85420711-f1f3-44f9-9f31-39e216c93597",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672c039f-fc95-462b-98e4-a86ad41a5898",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3bded724-2750-4af3-afe9-a85ae100e3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b9ebbd-5907-4944-bbe8-88e7dcc2f057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "173e83ba-38c9-414e-9224-03bb729cfc8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70f57bcf-d61e-47f7-a267-12e727c6f532",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "257de2d4-cae6-4d9d-8459-49a6b90267b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa32ee84-e878-4ed2-8bef-70ad95d76b8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ccaad3a-e23c-4e33-9fc7-9d7e9329b857"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07efae3f-fc23-4714-a00b-2db235555640",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3ff87ad9-39bd-42f7-a92b-3ed8215e1cd6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a047bcc-3421-4808-9aa7-0d0b9b33ed17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3344c85-249c-4548-af87-31b618f69f39"
            }
          }
        ]
      },
      {
        "id": "8fc3dfed-1a52-45b8-8442-18487a843f13",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d7160d45-3738-4929-a448-ae875df290b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d9caba9-53d5-4441-963c-683b1c2c7ea8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "264d3611-4b55-4e6b-aa7e-dd5d47e9630a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e81205d-45ce-4717-87f5-b2d1760b41b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ceb90865-e7a7-4e4a-8fef-9ec2d1791f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecd4727-084f-42d1-9911-8f6718eed2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d81ea15d-99c2-4ea9-89b7-9b603e3472d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4496cc7f-8c31-4a82-a1e9-3f5748f4f414",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af606a3d-91b5-4b0a-99cf-1485934d370e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "61c02a2e-dd14-4418-9ae9-f7b0f84a5ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1b851a-8de1-4353-93b8-057e35aa2af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c04fa4c-dc65-4c5e-9454-1eec9a33d524"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23580df0-764a-4752-97e4-e033157dc833",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a213777-919f-4b0f-b063-783562623f3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "888dfa5f-560a-443d-bea1-3eff6723f5f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf2c4bf4-61de-466b-b318-e6841b3a6722"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cd93ef5-a950-498e-a38d-299ee965196b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5b05146e-a918-4785-8ca2-a4f7afcd3d12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7ab164e-6184-4164-9640-c4854f7f5efb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee75bff4-9381-477c-871b-2b6430092da7"
            }
          }
        ]
      },
      {
        "id": "20f4cee8-4112-44bb-8ebf-45122992ddba",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6bfced0d-af13-458e-b7d6-f16db9d56907",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50f97895-1877-4a5e-991b-52f13924c10e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f6910410-8653-4572-919a-5bf8ce56c45d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a3e0307-65c5-4b86-9a3c-b4659acd7a3a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a4060e0-5004-41ec-beb7-4e733b35b462",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 82.28244274809158,
      "responseMin": 3,
      "responseMax": 984,
      "responseSd": 165.9357355053367,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674348100374,
      "completed": 1674348132351
    },
    "executions": [
      {
        "id": "81466077-8c11-41db-90cd-c273f0bf74aa",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6cc13c81-ca9f-437f-9645-a7c4b5361f07",
          "httpRequestId": "37c836c5-dc24-48e2-9dac-8dc9921f0ff6"
        },
        "item": {
          "id": "81466077-8c11-41db-90cd-c273f0bf74aa",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9a1e2d62-cf2a-4940-bc25-5327b13780b2",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "8369ca99-e45e-4828-a6d4-1a4222108974",
        "cursor": {
          "ref": "a2bedd73-b00f-4d64-8bf2-50bb69e509ca",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "937649d5-510f-4f8f-bfe1-c19354f4acde"
        },
        "item": {
          "id": "8369ca99-e45e-4828-a6d4-1a4222108974",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9e0ebac3-ed4f-42a4-9264-7a7edc0cbb07",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "4977bc3e-99dd-4d70-9f01-e13868f8b08d",
        "cursor": {
          "ref": "564661dc-d977-48b9-967e-68383d8d70aa",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6d43edd6-0326-46e8-bfbc-7558e15c988a"
        },
        "item": {
          "id": "4977bc3e-99dd-4d70-9f01-e13868f8b08d",
          "name": "did_json"
        },
        "response": {
          "id": "893d228c-2585-4ca9-bbab-cfd2e401a529",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2c4ec0-a9e3-4a36-9ed6-3d94f4ac1873",
        "cursor": {
          "ref": "63513d8e-681f-43e4-ae57-0b17c0aa3e86",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cff02e58-cb60-41c7-a511-1b833ba27ac7"
        },
        "item": {
          "id": "de2c4ec0-a9e3-4a36-9ed6-3d94f4ac1873",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f15a02f-40b0-4d7a-bde6-c3af63f2c73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2c4ec0-a9e3-4a36-9ed6-3d94f4ac1873",
        "cursor": {
          "ref": "63513d8e-681f-43e4-ae57-0b17c0aa3e86",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cff02e58-cb60-41c7-a511-1b833ba27ac7"
        },
        "item": {
          "id": "de2c4ec0-a9e3-4a36-9ed6-3d94f4ac1873",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f15a02f-40b0-4d7a-bde6-c3af63f2c73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99ba4b5-e378-472d-a07a-18d21a79425f",
        "cursor": {
          "ref": "1608f9e7-bb66-49e6-b6f0-801ca3ff30e2",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "465e6038-3b5e-41c6-a07a-94da0191bc34"
        },
        "item": {
          "id": "a99ba4b5-e378-472d-a07a-18d21a79425f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b9542cd5-077f-4c11-9453-0250302f4151",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d52d6cb-19ea-4019-b4b2-c0cfa1c03179",
        "cursor": {
          "ref": "8155db68-d811-4fbb-b79b-98136cee7a8d",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9dfb615e-a7a4-41e0-b4e0-ca9b257bc0fb"
        },
        "item": {
          "id": "2d52d6cb-19ea-4019-b4b2-c0cfa1c03179",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2f8ab32e-3d04-437d-90e5-2a410e0477cd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd35b38-2f7a-4788-ae61-cd62cb918310",
        "cursor": {
          "ref": "a4ee1183-fc93-47c7-a330-784eb97706a3",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6b70b3cb-488b-4326-b4fa-b3c5dc02263e"
        },
        "item": {
          "id": "cdd35b38-2f7a-4788-ae61-cd62cb918310",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "63b02a1d-b43b-4591-a71f-0972b0a0cebc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9773e3f5-76db-4e29-b237-a87197cae238",
        "cursor": {
          "ref": "ea9b28ef-8cea-4743-b11a-effee6f89400",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2ff6fbda-b7a2-4e89-84a4-6e477010728f"
        },
        "item": {
          "id": "9773e3f5-76db-4e29-b237-a87197cae238",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a16161f6-b491-4e6d-a31b-3875c8799fcf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9773e3f5-76db-4e29-b237-a87197cae238",
        "cursor": {
          "ref": "ea9b28ef-8cea-4743-b11a-effee6f89400",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2ff6fbda-b7a2-4e89-84a4-6e477010728f"
        },
        "item": {
          "id": "9773e3f5-76db-4e29-b237-a87197cae238",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a16161f6-b491-4e6d-a31b-3875c8799fcf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18003720-e80c-4333-ba83-c1f18f421116",
        "cursor": {
          "ref": "571e6851-6e48-45b9-8e05-413b3e5f3181",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8d70b100-d528-44d7-b93a-a30b03e53518"
        },
        "item": {
          "id": "18003720-e80c-4333-ba83-c1f18f421116",
          "name": "identifiers"
        },
        "response": {
          "id": "f32764df-8bf7-4e50-a340-d37c153acbfe",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2758b85f-b2d2-4228-847d-083a33767264",
        "cursor": {
          "ref": "a5868161-7dfe-42a1-abfc-b91987467e1b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b4823807-8a2d-4aa8-9c1c-c429a64ea742"
        },
        "item": {
          "id": "2758b85f-b2d2-4228-847d-083a33767264",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bf80e573-1a4e-4a8a-84da-92aaaebdbede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2758b85f-b2d2-4228-847d-083a33767264",
        "cursor": {
          "ref": "a5868161-7dfe-42a1-abfc-b91987467e1b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b4823807-8a2d-4aa8-9c1c-c429a64ea742"
        },
        "item": {
          "id": "2758b85f-b2d2-4228-847d-083a33767264",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bf80e573-1a4e-4a8a-84da-92aaaebdbede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443e0850-47b2-479e-9014-6971c31f7f44",
        "cursor": {
          "ref": "6fe19000-9be8-45bc-b913-b9ced0cbdeee",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "34153e97-fe22-4994-820a-6b1220fa1fc7"
        },
        "item": {
          "id": "443e0850-47b2-479e-9014-6971c31f7f44",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a3829415-aa26-4cd4-a8b6-d68f72849dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86f3045-c635-443e-b488-695e4971eb3a",
        "cursor": {
          "ref": "71c9ed52-d7bc-4e75-81f7-6f51919a90ef",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8e0d4f9b-6d15-440c-a9a7-1ca4c7ac6f84"
        },
        "item": {
          "id": "b86f3045-c635-443e-b488-695e4971eb3a",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "36ebdd35-bed7-4065-8843-1cc26537c656",
          "status": "Created",
          "code": 201,
          "responseTime": 546,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "968c2848-e422-4e2b-ba18-58d26138948c",
        "cursor": {
          "ref": "8d9f6f12-f08e-40f5-8ea2-012841eb27db",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ac108058-2bed-4e75-822c-62dda7bffdb7"
        },
        "item": {
          "id": "968c2848-e422-4e2b-ba18-58d26138948c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9de8e12b-3c66-4242-a631-5b440d183b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01abc3ed-2b1e-4e7f-8dd1-cda3e4e586a7",
        "cursor": {
          "ref": "e99732ab-3565-44a2-af7c-b25b7fb9ab01",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e021c82f-9b55-4e6f-9925-0d4a324b0a1c"
        },
        "item": {
          "id": "01abc3ed-2b1e-4e7f-8dd1-cda3e4e586a7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c082d836-d000-4c20-93b7-b7fe0d6f870b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281275a3-3186-40c8-a9cd-a0506e627d80",
        "cursor": {
          "ref": "94297092-a24b-4a6e-8e40-e19da1ad207a",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1d7b5cae-0739-4fad-9827-150de6e4df27"
        },
        "item": {
          "id": "281275a3-3186-40c8-a9cd-a0506e627d80",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1ba27d75-a17d-4e12-ba5e-342695a6d2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0888961-16b7-4144-96c8-363de2300e17",
        "cursor": {
          "ref": "c253e900-5cfd-4f4f-81fe-5ed2679ea854",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4cc88e6f-4d77-4350-80ab-7f9fed2367ec"
        },
        "item": {
          "id": "b0888961-16b7-4144-96c8-363de2300e17",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7c7c2c3c-0b84-43f8-986e-59a7782ebdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80077e6a-6b29-40f0-b924-881dcdcd2f4c",
        "cursor": {
          "ref": "d208e890-256d-4f21-b86f-959a9465c92f",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e9f47308-d732-4979-8633-edd5d602bdc7"
        },
        "item": {
          "id": "80077e6a-6b29-40f0-b924-881dcdcd2f4c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6747e72b-7300-4f81-b5ff-19fef7734107",
          "status": "Created",
          "code": 201,
          "responseTime": 518,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "fbac0053-7589-495b-9acf-1e54f1a84430",
        "cursor": {
          "ref": "24b2d66c-5017-4063-bb63-0a4065b0e4da",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3b5c57f1-a90a-4d8a-afa7-7942b4c8283a"
        },
        "item": {
          "id": "fbac0053-7589-495b-9acf-1e54f1a84430",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "49564d13-0d31-4c65-8f80-d672b07d0bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0cb48e-cfd1-41c8-b196-c87af4d8fa85",
        "cursor": {
          "ref": "47ee89e8-b9fe-47f5-874a-63cda11861d3",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fa4148b1-7fd9-49ee-9864-f2d78c5f86a8"
        },
        "item": {
          "id": "ff0cb48e-cfd1-41c8-b196-c87af4d8fa85",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3a1c8a2c-121b-4340-adb2-fe11b440bf36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ecf4f65-ab84-4765-87d4-e63060fbdb7b",
        "cursor": {
          "ref": "19da0a39-d116-4ddd-8773-588ca864695c",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5ac13985-9914-4915-9ebf-e0e857511dc6"
        },
        "item": {
          "id": "1ecf4f65-ab84-4765-87d4-e63060fbdb7b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8fb83c0c-a34b-45bd-b3c1-53fe37f961e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9854c190-e865-4d04-9dc0-54b55c563b0f",
        "cursor": {
          "ref": "ba1f6153-51c1-4572-aa48-f3359590de3a",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a040046e-9934-4290-b821-4109bc00a4fb"
        },
        "item": {
          "id": "9854c190-e865-4d04-9dc0-54b55c563b0f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dad20cc2-765d-4238-b8da-db62f44ff613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160217f3-8b36-46b5-b118-1e552e2468aa",
        "cursor": {
          "ref": "d3e104e3-6bc4-4504-8709-83f049b1cb8a",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a4902960-72bb-4d99-8474-0a68ec6fbd06"
        },
        "item": {
          "id": "160217f3-8b36-46b5-b118-1e552e2468aa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "86af8c4c-b720-4b7c-a750-c85981e2d2ba",
          "status": "Created",
          "code": 201,
          "responseTime": 535,
          "responseSize": 735
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "894c92ba-abc8-4bf3-b7a0-bf4bac13fbdc",
        "cursor": {
          "ref": "43834f43-e1c3-4074-b97d-c2703b0e4c50",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fb0a5ff0-7b13-4726-989a-f29d75b8486a"
        },
        "item": {
          "id": "894c92ba-abc8-4bf3-b7a0-bf4bac13fbdc",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "6f5d4aa8-3a66-48ff-9379-89bc3bf66445",
          "status": "Created",
          "code": 201,
          "responseTime": 984,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f9e15bde-6e38-4e3b-b1e9-66be25c91dab",
        "cursor": {
          "ref": "0a4c3b44-60f0-438c-82d1-a8c013dfa457",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ddc1eb1f-eb03-4767-804a-578b282fa18c"
        },
        "item": {
          "id": "f9e15bde-6e38-4e3b-b1e9-66be25c91dab",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "dd9d46f8-c6e3-432f-a5f5-01f2d96c222c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9bebab-0dfc-41e9-b436-a1e12cf7c0e2",
        "cursor": {
          "ref": "9e50e452-6690-4135-a0af-cf764a9e516d",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "af6e722f-2453-4279-8a77-75697f7a547e"
        },
        "item": {
          "id": "2f9bebab-0dfc-41e9-b436-a1e12cf7c0e2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "668c3f90-dadf-40f4-9421-14cec63c08f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0acafb3-c377-47b8-a487-25ab2e779a7a",
        "cursor": {
          "ref": "71faa145-1d90-4af6-9063-fa21a7ea2478",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e8cd00a3-49ab-4ce4-aa8c-ef44a7b5ab9b"
        },
        "item": {
          "id": "e0acafb3-c377-47b8-a487-25ab2e779a7a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7e537b09-c67a-4cef-bd76-3d9df12f2cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e8ac5e-fee7-43ae-8993-e0ec16eef16a",
        "cursor": {
          "ref": "1aa40fa1-c79d-462a-aace-be8374601f0e",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "830786eb-e76d-45c7-a1ee-0a098da2aa79"
        },
        "item": {
          "id": "64e8ac5e-fee7-43ae-8993-e0ec16eef16a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0c656e04-ba24-4502-94b7-8c44aa778521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10f0c4a-873e-4084-af1f-a4ddf8af799b",
        "cursor": {
          "ref": "273cbbe4-d657-4e4d-bd07-00821a089589",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8d86a050-0a0c-43f6-abe5-d7d7b560c370"
        },
        "item": {
          "id": "b10f0c4a-873e-4084-af1f-a4ddf8af799b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "85969c51-ff1f-4255-b548-9245ee633730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bc6112-c2df-46d0-865d-fba779a01f43",
        "cursor": {
          "ref": "7144a323-eb5a-40f6-a25b-cfd57439a072",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2458e391-2b82-46dd-9ea0-951359a89f2f"
        },
        "item": {
          "id": "38bc6112-c2df-46d0-865d-fba779a01f43",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5615a810-8ab3-45b5-9783-129cf2df7865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af137716-e4b5-42a6-9b11-5de9d6059ff0",
        "cursor": {
          "ref": "0d3d927b-a776-4d3f-8158-9357d3fa44f6",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ef0cdee5-31d8-4904-90b7-48d53e98c308"
        },
        "item": {
          "id": "af137716-e4b5-42a6-9b11-5de9d6059ff0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c338094c-f540-4dc9-b805-1c7ab1036b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cb588d-5657-4795-aeda-fce07477c5bc",
        "cursor": {
          "ref": "d97d73ba-53c0-4797-ba68-8419d236d7ca",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "aa52d69b-268a-4dcd-8e04-849c0b3a9d59"
        },
        "item": {
          "id": "d9cb588d-5657-4795-aeda-fce07477c5bc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e761ffd5-610b-4ab9-ac6b-65f44c70c67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d67e5da-35ee-4098-bb4e-2533e9ae3615",
        "cursor": {
          "ref": "a26ce596-29b5-4a83-be11-baba94d33265",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "48b4b2b5-9b94-4eab-9cc1-376a8c0d565b"
        },
        "item": {
          "id": "4d67e5da-35ee-4098-bb4e-2533e9ae3615",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1f3db6f5-fb18-458a-945f-0bd83777f147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbf74f3-fbd8-44b2-82ff-228b419b339f",
        "cursor": {
          "ref": "c703408d-a8a5-4843-9436-ecf45fbc4300",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "08ac3df5-d196-4122-9fd9-c55183bd8fbc"
        },
        "item": {
          "id": "3fbf74f3-fbd8-44b2-82ff-228b419b339f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "74b85b57-f6b5-47b1-bc49-9bdf66463d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3568fa-0010-4016-ac7b-b06ee56530a7",
        "cursor": {
          "ref": "a072e1f5-bdef-40a7-aa87-ddec7e3ab6dc",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6e2114c1-98b6-4d00-8fa6-e7e3483b65ec"
        },
        "item": {
          "id": "4e3568fa-0010-4016-ac7b-b06ee56530a7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ccab1897-170a-4708-9be3-52876c9af250",
          "status": "Created",
          "code": 201,
          "responseTime": 615,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "931f9f6e-2311-411b-8398-4ea4618c157e",
        "cursor": {
          "ref": "619afa01-acdf-4f72-bb0f-88faa8be832d",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "22e3aa64-246c-4347-93f6-60507fad8d34"
        },
        "item": {
          "id": "931f9f6e-2311-411b-8398-4ea4618c157e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "afa9088b-42d6-46b0-a52f-003980857c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca040ff8-4701-494d-b2d1-3c9475909722",
        "cursor": {
          "ref": "346f338a-d23f-4942-baa6-3b999464d17e",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d6ed6cf8-40c2-4209-8a46-8b89541002c6"
        },
        "item": {
          "id": "ca040ff8-4701-494d-b2d1-3c9475909722",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "25691eb0-b62b-4fcd-ae0e-2957954c5d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8652fc46-4c53-440f-93c6-91c0c004c158",
        "cursor": {
          "ref": "e22348fd-3ee8-409f-9b14-ae9c9ba291f2",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "08cc319b-6a1b-45e8-9dd1-a691d4702ef3"
        },
        "item": {
          "id": "8652fc46-4c53-440f-93c6-91c0c004c158",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b799b38a-19fc-463c-8f39-e6072379c352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187c4f0c-3934-4ff8-8199-c82b62ffa974",
        "cursor": {
          "ref": "4125c703-4678-4c03-a24c-6f3877f4b1ea",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b8912e45-50d4-4737-90d3-cf1a6414f15f"
        },
        "item": {
          "id": "187c4f0c-3934-4ff8-8199-c82b62ffa974",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0d7c9217-94ea-4f46-89af-9cb2a843335a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c5d5da-25b2-4843-a8fe-1b84bc8f7129",
        "cursor": {
          "ref": "fc4b36cc-c727-43b9-bb05-984c96fbf052",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f3fd4da2-3b92-42c1-9bea-a94062aa8b62"
        },
        "item": {
          "id": "b7c5d5da-25b2-4843-a8fe-1b84bc8f7129",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "04416325-662b-4e85-8fc5-3d3cb7e4db9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee9b707-e36c-4ced-97b8-fb4b4ee82c59",
        "cursor": {
          "ref": "a42d37d3-5b81-47da-b3ff-644a0ad4a620",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7c042074-10e0-44e2-9c4f-4e7099c49135"
        },
        "item": {
          "id": "0ee9b707-e36c-4ced-97b8-fb4b4ee82c59",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4ee1c1a3-3aa4-49e0-9066-87db027f22bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d523e05-19b9-4aa4-8d29-c4605281cce8",
        "cursor": {
          "ref": "3a9f6ef1-8be4-4b5f-8e7a-5810399b65cd",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1cb11542-6b9a-4658-903f-8a9cabea68ff"
        },
        "item": {
          "id": "5d523e05-19b9-4aa4-8d29-c4605281cce8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "420b9f6f-546e-4fef-bbc5-3bfc029716dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523f9dda-b04f-406b-8ed8-8bb8e763efed",
        "cursor": {
          "ref": "88c59253-72b5-4f44-b828-e3487d03543c",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b0f6deb2-56bd-4be7-9357-9a1f4b0777fb"
        },
        "item": {
          "id": "523f9dda-b04f-406b-8ed8-8bb8e763efed",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7ddf2585-7137-4fb0-86ea-dbebe8b3319c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a90e472-fe17-432b-a733-7dbbac0dade5",
        "cursor": {
          "ref": "20b7e870-c446-42a5-9058-e4698419c135",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "989f9fd2-5cad-4789-b333-d56a5c1f2786"
        },
        "item": {
          "id": "3a90e472-fe17-432b-a733-7dbbac0dade5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e2c2a3aa-e8dd-40e0-9773-b175abbb3b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4b1da2-b7b3-47c8-9ef1-2fbf84970732",
        "cursor": {
          "ref": "afa8b1de-e037-436a-9bee-75a724989e09",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "88b48dcb-449e-4996-8d55-13dcf5663ada"
        },
        "item": {
          "id": "dc4b1da2-b7b3-47c8-9ef1-2fbf84970732",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "43c6dd04-9077-4fca-9add-8005d35d50a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f2e3fe-1d0f-4332-b13c-fe1d5cee9036",
        "cursor": {
          "ref": "e7f6613a-6373-42ad-9dd3-8fc3b2a5c6ba",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d34ac385-4524-4628-ac80-7607de3abf0f"
        },
        "item": {
          "id": "82f2e3fe-1d0f-4332-b13c-fe1d5cee9036",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cc9f4084-77e8-4912-a3a6-c53151a40e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2501d7f-65aa-4429-9b3b-2bfb2eb38b78",
        "cursor": {
          "ref": "3eea9aa6-a248-40fc-9b19-b0f73e558ee2",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cf51d403-0e1b-4293-87de-efb99409e081"
        },
        "item": {
          "id": "e2501d7f-65aa-4429-9b3b-2bfb2eb38b78",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b40b5936-7da6-4ab1-b7aa-7a624fafaaba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1dd4667-017f-4dad-87ef-f85e4ecd2ab7",
        "cursor": {
          "ref": "903cd837-9a93-4911-820a-b65aaa210961",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2d27f17b-49ee-4461-a646-81480d739474"
        },
        "item": {
          "id": "c1dd4667-017f-4dad-87ef-f85e4ecd2ab7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "98ce1136-0b3f-45cc-b94f-6e441761dade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 377,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "cac66e68-f766-44bb-b5af-09a1e6ae845d",
        "cursor": {
          "ref": "ed3adac5-7589-4838-b255-585820d13740",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d3e2f7ee-9cd9-44bc-a207-8628946a8883"
        },
        "item": {
          "id": "cac66e68-f766-44bb-b5af-09a1e6ae845d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5ed6909d-3bef-494d-8285-26d31c71060f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38dd0207-7b26-4efe-a25c-fc3b0ea3c39a",
        "cursor": {
          "ref": "e84e5069-e6a9-4942-82fe-cda91a9681af",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6c8e01ae-3dfd-48df-8e4c-d39fa9ff7e60"
        },
        "item": {
          "id": "38dd0207-7b26-4efe-a25c-fc3b0ea3c39a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "14482232-2f79-4d18-8ca3-da15d2114124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d5139c-4824-41da-8e06-8ed5d816fcc1",
        "cursor": {
          "ref": "06f0c3af-0a17-4b3f-9726-51db5a5b101e",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "30075356-cf7c-493a-a039-14cf33add1bb"
        },
        "item": {
          "id": "85d5139c-4824-41da-8e06-8ed5d816fcc1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "77bb6e02-13b7-4448-a7ba-7f190e031688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731f1965-4650-4067-b5fd-d5b2bd8871ba",
        "cursor": {
          "ref": "cad03745-6068-4ffe-b058-5b75649d4a78",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d76bf082-d6f4-4fb3-9d07-954cee6924c6"
        },
        "item": {
          "id": "731f1965-4650-4067-b5fd-d5b2bd8871ba",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "975ad56d-47d5-4eac-b030-0196d57dc977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89322a7-b5d6-4914-afda-19ccdb82334e",
        "cursor": {
          "ref": "09e4820b-8a18-48f0-a295-1bb428f853c7",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f1a5a514-2744-4286-801c-d93f74b461f3"
        },
        "item": {
          "id": "f89322a7-b5d6-4914-afda-19ccdb82334e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7f86cc5b-4478-4e3a-b694-d63fb8a700be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b682be-fcc0-45b2-abc6-3a8ecee4d626",
        "cursor": {
          "ref": "839c720b-a561-4124-aeb3-9c934ab7aa67",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "571ce25d-766b-4a85-aea5-d8406bdd0870"
        },
        "item": {
          "id": "f6b682be-fcc0-45b2-abc6-3a8ecee4d626",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ea9cbd4b-f3e3-41f2-87df-c4e57bd602c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef41f7c9-f974-4835-8d53-e003bfe40945",
        "cursor": {
          "ref": "136d6874-681a-4dc4-a38f-bd9ebb75b58e",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3592eb01-e6ef-441f-b755-3d8a2cc72935"
        },
        "item": {
          "id": "ef41f7c9-f974-4835-8d53-e003bfe40945",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0c3f2ee9-e3cb-4a9d-a7a6-9e74ed5ca149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "2c4944ee-343f-4b0d-a2a1-447af6e344de",
        "cursor": {
          "ref": "75ba1294-8df6-4864-8c00-a05444050c17",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dc997766-6037-4a8d-9197-97c2f1dd8b2e"
        },
        "item": {
          "id": "2c4944ee-343f-4b0d-a2a1-447af6e344de",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "400963e3-3cf6-4fa2-8b85-10600545d14e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734a4c8d-bfbf-4079-adeb-057ab2e30cc4",
        "cursor": {
          "ref": "e7526f2d-8980-4d06-92df-3135f56e5ceb",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "49936348-a2a1-4aea-bc68-8352bf828679"
        },
        "item": {
          "id": "734a4c8d-bfbf-4079-adeb-057ab2e30cc4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8eae4b08-7045-46a0-951c-d46c4b84f186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b6a9fa-daba-4c7e-b0c2-2c95e895df91",
        "cursor": {
          "ref": "0c6271b2-6147-4b70-b488-3c2f7e8fe92b",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fc5d39ec-19f1-4600-97d9-81c705b856dd"
        },
        "item": {
          "id": "49b6a9fa-daba-4c7e-b0c2-2c95e895df91",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "182a592b-ddab-41f6-afbe-800e5fd5aabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d133e0d-ee89-4516-ae87-8f8281f264e6",
        "cursor": {
          "ref": "9b1be7e8-a31e-4f20-a873-d9f714b67701",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4a5f7d04-74b2-4b1d-bb8d-3e97509d692e"
        },
        "item": {
          "id": "6d133e0d-ee89-4516-ae87-8f8281f264e6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5d7324eb-0e89-437a-a4be-6499c174d113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8118ee2f-ade8-40be-91c4-93c4f0252575",
        "cursor": {
          "ref": "7149d499-3e42-4e02-9a1c-eda386b3bd42",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "76152677-2627-46d2-9f90-60e8ca736b36"
        },
        "item": {
          "id": "8118ee2f-ade8-40be-91c4-93c4f0252575",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d0fa418f-9fa2-4a5b-817b-76a7b020cf98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb740a6-5fb0-4588-98ed-65c3d19bf4ab",
        "cursor": {
          "ref": "3fa6eb57-c070-495a-958f-780f7c752ffc",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e2c26fa7-a540-48b8-8a61-97d6189faf8e"
        },
        "item": {
          "id": "8fb740a6-5fb0-4588-98ed-65c3d19bf4ab",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "71c4b4c1-9b1d-40b8-b0ac-f7d7e8d8910f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903cc539-bdd9-484d-b6d6-77818d56722c",
        "cursor": {
          "ref": "bdcd8217-754d-4b93-a57e-fb3cc250de9a",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e54a6989-45ee-42cd-a801-29d88913b014"
        },
        "item": {
          "id": "903cc539-bdd9-484d-b6d6-77818d56722c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0c234737-81d6-456d-a778-5f593a110541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae97ab74-30d4-421b-af24-5f5b91741222",
        "cursor": {
          "ref": "61fd291d-08b3-46ff-9d5e-ebe888fc25e1",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cbdc03b8-81ac-4bec-8bcc-8bd38fe4c77c"
        },
        "item": {
          "id": "ae97ab74-30d4-421b-af24-5f5b91741222",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8548cfd3-7077-462b-83cb-c1fee1824071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70bca8c8-a748-47f9-bc10-cdafa4ddd91b",
        "cursor": {
          "ref": "95de85c7-918b-4e39-bfdb-12ba2281acec",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "16c7b51e-1d68-4fd0-90ad-1f71c1d72451"
        },
        "item": {
          "id": "70bca8c8-a748-47f9-bc10-cdafa4ddd91b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "da701a62-a523-4414-8443-a3870e9fe102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4d049b-e19a-437d-819b-bf7f91e04fa2",
        "cursor": {
          "ref": "9c457e2f-6b09-4709-b5ce-085917f2a1ba",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fbd90aa1-1a91-49ab-999e-8079b55068f2"
        },
        "item": {
          "id": "0b4d049b-e19a-437d-819b-bf7f91e04fa2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "be5eb9a3-be0a-4c89-a1bd-f46b9464c105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee0db6d-199b-4d54-ad5a-9d62506af7ef",
        "cursor": {
          "ref": "33f88d14-7103-4771-835d-b0140f638575",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0c7e3ee8-1a69-4c66-b7ab-97e86d5d6cba"
        },
        "item": {
          "id": "2ee0db6d-199b-4d54-ad5a-9d62506af7ef",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "840cfc30-2b34-46a2-bdbf-86140b33049a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68257947-564b-479c-8b4c-fdd00ac90e38",
        "cursor": {
          "ref": "68067121-39df-4d86-a1b8-17d8106b4634",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bec4bf6d-9861-48a4-9074-34ff4f598260"
        },
        "item": {
          "id": "68257947-564b-479c-8b4c-fdd00ac90e38",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0d0b7c4a-c98f-4839-a529-c06fb42a1c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88d89ea-3be9-42c3-aab8-d631c2cecc62",
        "cursor": {
          "ref": "90b16edb-84af-424c-8d3c-fecc284ea3a6",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "01db66c7-6d47-46ae-b7b3-37d10a3fec5b"
        },
        "item": {
          "id": "b88d89ea-3be9-42c3-aab8-d631c2cecc62",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3c49d293-4d2f-4220-9117-8672abab2a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c288f04f-56ac-4f95-9f9b-219d70d9dcde",
        "cursor": {
          "ref": "588f518b-eec7-4e32-92db-31cc66f5b495",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cbc7be2d-eecc-4459-b532-43094140bc36"
        },
        "item": {
          "id": "c288f04f-56ac-4f95-9f9b-219d70d9dcde",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "84a705ee-69e2-47e9-a82c-0365b5ae54f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839f9237-e590-4ee8-a29d-577e8f6dc3b9",
        "cursor": {
          "ref": "1f088440-c517-400a-ae3a-8f9faa140c37",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "401f6ee0-dddd-491b-a351-9d7810ce5b3f"
        },
        "item": {
          "id": "839f9237-e590-4ee8-a29d-577e8f6dc3b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "419e6446-3dea-43c9-b4b0-139aaaed5eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2df475b-f87d-4dd5-8e4d-b829b54f3822",
        "cursor": {
          "ref": "2b76a388-bbdb-46f8-aa62-fe0467aeac14",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "638e6b4f-5ef7-47d5-a3a0-4d8bbdabbc42"
        },
        "item": {
          "id": "b2df475b-f87d-4dd5-8e4d-b829b54f3822",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "092f3f33-c02f-43e6-897b-66623d0b42b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c21e70-383e-4644-b8a8-97ddc073c6b7",
        "cursor": {
          "ref": "a52534c9-5a3c-43f5-9133-a9a9ee356a42",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4cfa6245-e510-43a0-a7b8-bdb50f64cf25"
        },
        "item": {
          "id": "57c21e70-383e-4644-b8a8-97ddc073c6b7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6cbd0e7c-9dbb-4fa4-a035-14e0f3d5c531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a8b655-c966-425f-9eb4-b0806671f5c7",
        "cursor": {
          "ref": "bdd5ba79-10a8-4519-9570-bda76c78124c",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "485436c9-f538-486c-9aa8-ef25832a7ed2"
        },
        "item": {
          "id": "32a8b655-c966-425f-9eb4-b0806671f5c7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d5a91358-a889-4179-9a8f-a9b02e4f5a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c27c5a4-d5a7-4f96-abaa-40a6bbd4cb91",
        "cursor": {
          "ref": "5c971098-c816-4c6f-9086-3796981f36ea",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "22056c19-1c00-46d1-aade-37149a54b530"
        },
        "item": {
          "id": "6c27c5a4-d5a7-4f96-abaa-40a6bbd4cb91",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a8b7964f-68b5-4348-b61b-649e5e5b02a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a351bf00-51b1-4670-9bb4-bad51209fcdf",
        "cursor": {
          "ref": "e84d12f3-c5f4-4b22-81c5-c5049756f74a",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0c2afe4a-3918-4868-8ae2-fb627863c1bc"
        },
        "item": {
          "id": "a351bf00-51b1-4670-9bb4-bad51209fcdf",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "657c09c3-8d4e-4d18-96ff-54065582088a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c7272a-d8dd-4ff6-99f1-e6f51af27979",
        "cursor": {
          "ref": "d9058359-6740-44a8-a812-03d15ac7796d",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d4fb5bc4-4e08-40a3-88cf-0bc8f8bd77cd"
        },
        "item": {
          "id": "20c7272a-d8dd-4ff6-99f1-e6f51af27979",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "eff411b5-344a-4af0-85a1-9d2affd2d3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccd49c6-b172-43e1-a40f-90cab3e3b834",
        "cursor": {
          "ref": "0d9d94bf-4862-4ccd-b86d-596b68c96601",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "88db4fcd-3ef9-45f5-aa5f-2d079d165122"
        },
        "item": {
          "id": "eccd49c6-b172-43e1-a40f-90cab3e3b834",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "466c5cc2-3185-4859-9aa1-c34f38d0c74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2776e7-6ad0-4e43-9b9a-370a7f42d044",
        "cursor": {
          "ref": "92d93384-4b13-42b3-becb-4d65a3acbce2",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "760651af-121e-46bb-b846-5632f794e04f"
        },
        "item": {
          "id": "5e2776e7-6ad0-4e43-9b9a-370a7f42d044",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9519ada3-f55c-4ae6-b3c0-02c695e816cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032fb2ed-22ad-4edb-be85-b1fc6bd411ed",
        "cursor": {
          "ref": "09425973-f59b-4c63-8610-a040a687acd2",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5ec03955-dcf5-449f-9daf-1a68fd1e51ae"
        },
        "item": {
          "id": "032fb2ed-22ad-4edb-be85-b1fc6bd411ed",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cd3d8be1-49d3-415f-a0d2-1558968de333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58788ff3-e3d3-4642-9b6a-0e8bad3c31b0",
        "cursor": {
          "ref": "13da3bea-ef19-4731-b364-dcc3957fc586",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "97bc4993-3acb-48b9-9338-9749b43a6000"
        },
        "item": {
          "id": "58788ff3-e3d3-4642-9b6a-0e8bad3c31b0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c0f2b7c5-2c11-4eca-bd86-1ecddbc84b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea44e80-fccc-4f89-8169-f982ff6c6407",
        "cursor": {
          "ref": "bf71306b-35a4-470a-a638-e2d0eb342b94",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d519e49b-419b-4c85-bc02-16a36127d5f0"
        },
        "item": {
          "id": "aea44e80-fccc-4f89-8169-f982ff6c6407",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "42f3f6d9-d0a0-4527-b427-fcb26d02328d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d72d57-b706-4f79-a49f-d62dccd51f91",
        "cursor": {
          "ref": "8aa806f4-5c51-4f83-bce5-ad94d6aaa314",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c8654e66-19c9-410b-b093-b31a4761ac81"
        },
        "item": {
          "id": "30d72d57-b706-4f79-a49f-d62dccd51f91",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6673cd33-dc71-4e74-bd4d-b8a84faf56f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd84130-8391-4085-8e13-e35d5137abda",
        "cursor": {
          "ref": "37a0a003-0d2b-402d-86f7-d7aad845118c",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bc1d06b2-f582-403a-a0b5-08a8f350f7be"
        },
        "item": {
          "id": "fbd84130-8391-4085-8e13-e35d5137abda",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dfcd4468-5dd6-4ae0-b050-d7325314de71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672a2cca-e105-4805-93c6-acbde8aa5a3b",
        "cursor": {
          "ref": "7a978096-45ce-4069-bdb7-9b35f2316be8",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fddddcef-c15d-4177-a96b-d68aca389953"
        },
        "item": {
          "id": "672a2cca-e105-4805-93c6-acbde8aa5a3b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "11276af6-7ae9-4eeb-8b1e-bd5a5ea6b931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292747d2-c692-4ae7-b1c5-add80df71318",
        "cursor": {
          "ref": "75ba1e36-7775-4ee8-9990-cc626c8bf8ec",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c099a2a9-a1cf-4677-a895-19cc330c5c38"
        },
        "item": {
          "id": "292747d2-c692-4ae7-b1c5-add80df71318",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8857ea66-d6a2-4c38-8d07-72eb6278f2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa11b17-0b06-4584-b232-75a7081e69ce",
        "cursor": {
          "ref": "379773fb-ed55-4c2d-9b6e-849343d77a12",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c106b20b-10d1-4f62-b357-2f4a11ef951f"
        },
        "item": {
          "id": "daa11b17-0b06-4584-b232-75a7081e69ce",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ea9cfc31-94fb-4dd5-a264-1be55ae204e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97d666c-04b2-4b00-b882-d89dbd079458",
        "cursor": {
          "ref": "1f82f873-8f2d-463f-a4d1-dfca57d57ab6",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "41ccf362-5f23-41c5-9847-cd62e971e65e"
        },
        "item": {
          "id": "f97d666c-04b2-4b00-b882-d89dbd079458",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "09c8fed5-94fc-4a7f-b83d-bd1dad0f7fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5490f6a0-d4a0-4711-a239-cfe3db152374",
        "cursor": {
          "ref": "5424a45b-6839-4834-811f-3ba0ab046360",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "55d2ddde-20b0-46d1-ad8e-1ecde9c8fd05"
        },
        "item": {
          "id": "5490f6a0-d4a0-4711-a239-cfe3db152374",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7c3c4d04-e627-4ee7-8574-20d9fdd0887b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8db352-f7ab-4a52-9611-e8c372361a84",
        "cursor": {
          "ref": "c6b09d24-d310-4998-a062-87eba6573d54",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c7dcbf72-0649-4ac9-9b73-0d22ccc16807"
        },
        "item": {
          "id": "cc8db352-f7ab-4a52-9611-e8c372361a84",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5c04189b-9f70-4dbf-a72b-8e6226b437b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e328810e-aab5-468e-bc1d-05c3ef7d9868",
        "cursor": {
          "ref": "90c7c334-f629-44b1-abd1-9cfd2b3bb3bb",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2cd8ac9c-c34a-4cb7-98b2-2bd8cde174c3"
        },
        "item": {
          "id": "e328810e-aab5-468e-bc1d-05c3ef7d9868",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7396c6d5-4ef3-41dc-aba7-1bfd7674c184",
          "status": "Created",
          "code": 201,
          "responseTime": 656,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "b46b1aaa-e197-4593-9cb8-e00d7be76e77",
        "cursor": {
          "ref": "37030822-dedd-407b-baab-e7279098794f",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "02e48fbd-b0ba-4140-b28b-f3959e965e4d"
        },
        "item": {
          "id": "b46b1aaa-e197-4593-9cb8-e00d7be76e77",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fc34111a-638f-4d01-b6cc-3adc76129839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2acc2c61-28ee-4348-9a14-652c1ee6c86b",
        "cursor": {
          "ref": "6d80a61e-b982-4e20-9ee0-5c09e341ae1c",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9c55ded7-be88-410f-886e-fcf9f2bfb838"
        },
        "item": {
          "id": "2acc2c61-28ee-4348-9a14-652c1ee6c86b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9c14671e-63fd-4568-9516-6eae7caaa412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aad1533-0dcb-46ee-8abd-f4f74f3d02c2",
        "cursor": {
          "ref": "f73e8a4c-8390-4054-a512-5465381180f0",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "81149b5f-8984-42a0-bda1-76eac79894c3"
        },
        "item": {
          "id": "3aad1533-0dcb-46ee-8abd-f4f74f3d02c2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b8ab0837-cf25-4802-8630-43cc93d41d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91bfcce-6f59-45fd-a626-99469098920c",
        "cursor": {
          "ref": "40e530c0-0cc2-4c06-818e-5ce95ca6e5bc",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "baa23357-9f1e-4cc0-b9c8-f7b34b1f34dc"
        },
        "item": {
          "id": "a91bfcce-6f59-45fd-a626-99469098920c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cc8e48ef-40e6-48d3-81b7-d1be11868ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa3aad8-82fa-4405-8493-80682d20e664",
        "cursor": {
          "ref": "02a0cc84-70e9-41d4-b2d9-6f0ef5643803",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a922e14f-e8a4-4260-8727-907a7e8ec065"
        },
        "item": {
          "id": "3aa3aad8-82fa-4405-8493-80682d20e664",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a50134a9-0202-4319-8ea7-6a2ffb73a651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e923931e-e604-4156-8103-66b4f3576293",
        "cursor": {
          "ref": "f4ca2d10-8265-4a73-89ec-f0dc14150011",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2158e741-6482-49b4-a926-f66d70e05dca"
        },
        "item": {
          "id": "e923931e-e604-4156-8103-66b4f3576293",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "42c5513a-fa61-45a9-9737-2cb941754e62",
          "status": "Created",
          "code": 201,
          "responseTime": 596,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "be8d3a77-1a22-41c7-9d06-6e7860d38a65",
        "cursor": {
          "ref": "cabdacd4-4d88-47f1-a07f-837560118ee7",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "153e633e-764f-43c2-885e-56671b9667ca"
        },
        "item": {
          "id": "be8d3a77-1a22-41c7-9d06-6e7860d38a65",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d85579f9-65fc-41cd-94ae-397be0f9a882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f7ba49-bcb8-45a3-92db-c49303e1ccec",
        "cursor": {
          "ref": "67db78d6-c1b4-4c43-b005-f4b91dd3e4f9",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7af79183-781a-46c2-9a75-42884ab81b4a"
        },
        "item": {
          "id": "27f7ba49-bcb8-45a3-92db-c49303e1ccec",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d93d9b84-163f-4f1b-8c3c-47151a02cac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b392eb36-5d3c-4504-b822-45bb2ce71e85",
        "cursor": {
          "ref": "5bbfb21a-ed5a-4720-a0ee-0de577c2065b",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "56758eac-7b59-42a8-a37e-a0ca7b82d119"
        },
        "item": {
          "id": "b392eb36-5d3c-4504-b822-45bb2ce71e85",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "936320d4-407f-42d4-8e4e-7e449b48ad44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f5d270-dd5f-4791-9e88-d000268a39ba",
        "cursor": {
          "ref": "fdc9f8da-6e3a-415e-b14e-459db40d4cc1",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "07d8c4ff-7bde-4a3a-ae03-632c0bf4cfe1"
        },
        "item": {
          "id": "26f5d270-dd5f-4791-9e88-d000268a39ba",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bcf722f8-954e-4477-8321-aaca34a0a7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7548c7-f2b0-4c43-8083-fe2129675f48",
        "cursor": {
          "ref": "f0242b47-ab84-411d-bd8d-31b583b0dcb4",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "310993fa-6e78-43a4-a57c-e6ad5a7d0c53"
        },
        "item": {
          "id": "3e7548c7-f2b0-4c43-8083-fe2129675f48",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6e00056c-d7eb-4f8a-9c8d-c1c3f86bc453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1558ea10-2281-4a62-b5f1-f4a27cd42f00",
        "cursor": {
          "ref": "bb6fa163-90fd-4b3d-8442-f8662a54de84",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "defda0e3-0787-477c-b14e-faba243d46f8"
        },
        "item": {
          "id": "1558ea10-2281-4a62-b5f1-f4a27cd42f00",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6b1b01b1-6c5e-431f-a206-9b41b047a80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdb4840-0f2f-4439-8a04-c825df33f856",
        "cursor": {
          "ref": "5d3cadb3-befb-40e1-b841-0b0aa6440827",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c10d189f-0e22-42ea-837e-0f541b7660b3"
        },
        "item": {
          "id": "6cdb4840-0f2f-4439-8a04-c825df33f856",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "75198c43-7e25-4b49-87fd-a0005a36ce95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29145d6c-3bb1-4181-b239-ec3eb25f7c2c",
        "cursor": {
          "ref": "9a7b7d6a-b64c-4089-8fd0-90e32e6dc407",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2391ba4d-af06-402c-8c1c-c00ec4ed8000"
        },
        "item": {
          "id": "29145d6c-3bb1-4181-b239-ec3eb25f7c2c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "872fd91e-de12-4e17-b9f6-4c8897806c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7fbd27-23ad-433f-9a49-0ee9b95c9903",
        "cursor": {
          "ref": "49957c96-b42b-442d-a6c8-1e6d16d72bd4",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "05dae3ca-ae16-429c-86a2-ccf105ea5e87"
        },
        "item": {
          "id": "dd7fbd27-23ad-433f-9a49-0ee9b95c9903",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ea2f327d-5655-45a5-82f6-98d9be1a9751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "83af873f-846d-4fa8-925a-81112532051f",
        "cursor": {
          "ref": "05085245-610f-4f34-8d19-698528e423be",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e31b7d4e-e7c1-493c-a18b-5cb08fe49350"
        },
        "item": {
          "id": "83af873f-846d-4fa8-925a-81112532051f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "748b557c-5ed8-47c8-9e60-931883b8c681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "3b30b396-fda2-4d31-bb2d-d1a999412226",
        "cursor": {
          "ref": "2d0c53e5-f8d8-4708-926e-04b5863ed564",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1794c2fd-2bba-4948-97b3-73f7a5abdf8a"
        },
        "item": {
          "id": "3b30b396-fda2-4d31-bb2d-d1a999412226",
          "name": "credentials_issue"
        },
        "response": {
          "id": "aca0d5c0-ed7a-4f45-8fe4-b1572ddf307d",
          "status": "Created",
          "code": 201,
          "responseTime": 611,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28d274c-8d6d-4cb9-a54b-870ce7014957",
        "cursor": {
          "ref": "9bb091aa-976a-4603-a2a5-ec7b92b4fadd",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d1710254-5a56-46c2-ba82-011e4cdcee66"
        },
        "item": {
          "id": "f28d274c-8d6d-4cb9-a54b-870ce7014957",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fea895cc-289a-4519-b000-3750f883b9e7",
          "status": "Created",
          "code": 201,
          "responseTime": 621,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ffd42f-4c3e-4bb3-a12e-a9f30b5001db",
        "cursor": {
          "ref": "074460e0-7927-41a2-90f6-ee79c7cfcec3",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c8e0bdc4-2c75-49c5-a8bf-f5c0bf7586c9"
        },
        "item": {
          "id": "28ffd42f-4c3e-4bb3-a12e-a9f30b5001db",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ccb60e9e-4a12-45e7-99a5-d49364b15908",
          "status": "Created",
          "code": 201,
          "responseTime": 642,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e25b269-d15f-4352-973e-efc4f54238ae",
        "cursor": {
          "ref": "54d8f956-65cd-465b-956f-be839485a742",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "269e4d98-11a7-4663-a66c-08a3e7a75545"
        },
        "item": {
          "id": "2e25b269-d15f-4352-973e-efc4f54238ae",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2ffa58dc-ff27-4e27-bec7-695a8b52f2de",
          "status": "Created",
          "code": 201,
          "responseTime": 607,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d505ae4-ef40-47d7-9aad-7b899d06e420",
        "cursor": {
          "ref": "d5e17f87-5c7f-464c-ac04-35eed5b42461",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6a61cc3d-730c-42a6-a45f-f4095139d5e4"
        },
        "item": {
          "id": "4d505ae4-ef40-47d7-9aad-7b899d06e420",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "83086c50-42b3-4691-a9bc-8c3bd4d5f640",
          "status": "Created",
          "code": 201,
          "responseTime": 601,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52bca7b-7e70-42d2-a7ad-7880a45f5a92",
        "cursor": {
          "ref": "aabc3164-8197-4344-b228-b324da5eb081",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e49bb76d-76ad-4116-8442-2f23ae97106e"
        },
        "item": {
          "id": "d52bca7b-7e70-42d2-a7ad-7880a45f5a92",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b62107ed-6971-4e36-a0bf-3f2dbc55a74f",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d52bca7b-7e70-42d2-a7ad-7880a45f5a92",
        "cursor": {
          "ref": "aabc3164-8197-4344-b228-b324da5eb081",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e49bb76d-76ad-4116-8442-2f23ae97106e"
        },
        "item": {
          "id": "d52bca7b-7e70-42d2-a7ad-7880a45f5a92",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b62107ed-6971-4e36-a0bf-3f2dbc55a74f",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "adbbae18-55b1-4347-96e9-2d6f9e2c4dc7",
        "cursor": {
          "ref": "db8a2b59-036b-4b89-a237-85182e1db0d9",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e02beb3c-6a0e-420a-b881-3a514940e26f"
        },
        "item": {
          "id": "adbbae18-55b1-4347-96e9-2d6f9e2c4dc7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3be6721f-869d-4966-b67d-636f68e1841f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "0ef29548-36d9-4cd5-8b04-678b1e77f6de",
        "cursor": {
          "ref": "a6e50bba-07ee-419d-8769-a1191147e510",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7ee62c08-0444-4b2a-9de7-f7a6c365b1d1"
        },
        "item": {
          "id": "0ef29548-36d9-4cd5-8b04-678b1e77f6de",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3ae2ec05-4472-4d08-bd42-c670f4568559",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ff7c8f71-1140-45cb-84b5-70c85c6270aa",
        "cursor": {
          "ref": "2aa55f7c-e3b5-44ce-8b4a-7d5ad591ba9c",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "70f49163-611d-4e38-8592-370707f8a795"
        },
        "item": {
          "id": "ff7c8f71-1140-45cb-84b5-70c85c6270aa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6dd9f1bf-eddc-4daa-834b-8389c23f9e92",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b8e1a108-d090-408c-90f9-a834a36a6f00",
        "cursor": {
          "ref": "c895181c-0405-458f-8657-8e1f7fd6fed9",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6bfb18db-726d-4274-8dc0-38ab4ac09313"
        },
        "item": {
          "id": "b8e1a108-d090-408c-90f9-a834a36a6f00",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "36a50b90-056a-4160-90e7-d52b12162dcb",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "6bc7e2ad-a553-4ccc-9871-2f0b8839e457",
        "cursor": {
          "ref": "4e8b3440-d86a-4ce7-a31c-92992d4f0d33",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d3120532-729c-4099-b8e0-67c5bd492b4d"
        },
        "item": {
          "id": "6bc7e2ad-a553-4ccc-9871-2f0b8839e457",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dd49eaee-58bd-44e5-8768-fc8e0fa23d65",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "70eb4bdf-e2e0-4f2d-81b4-ec99d04ff5d9",
        "cursor": {
          "ref": "455b7e38-7d62-421a-9b9c-c1103480600e",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d4b2faac-a317-463f-9d9f-f068f770fdba"
        },
        "item": {
          "id": "70eb4bdf-e2e0-4f2d-81b4-ec99d04ff5d9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "779ca9ee-3d49-426d-a49b-502cdfe8d403",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6c2ee47c-490e-4df1-9300-4efe8fc094a9",
        "cursor": {
          "ref": "f2220653-6bae-4de1-8a83-3aba15d7319b",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a3cd1a32-1eb1-437f-bb77-bcc2295ff71d"
        },
        "item": {
          "id": "6c2ee47c-490e-4df1-9300-4efe8fc094a9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c1f581c4-052f-4e52-b818-74a4234ddd63",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9684fb61-db04-4a05-b4ff-cf705d969251",
        "cursor": {
          "ref": "5dee8f56-4160-4ed3-aa38-abe6edcb1430",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7b51154d-579d-4d7a-967f-012cec6b3c0e"
        },
        "item": {
          "id": "9684fb61-db04-4a05-b4ff-cf705d969251",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "56d653b4-d817-46c6-a37e-460207eb7801",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c349e016-e0dc-46d6-9c0f-652389611114",
        "cursor": {
          "ref": "e5401413-7ea5-4ded-98a7-bce19401f0b5",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "786c2508-4e48-45d4-8295-3869ad509f81"
        },
        "item": {
          "id": "c349e016-e0dc-46d6-9c0f-652389611114",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e4dd85b4-6624-4c63-b162-af5d255dc982",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "56e02c12-7a56-4cb0-bdfa-2723f43a822d",
        "cursor": {
          "ref": "4b3010e2-f003-4525-9b8f-5bba5e1680f5",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cc15fe72-1435-4542-8a20-93189f5a43f4"
        },
        "item": {
          "id": "56e02c12-7a56-4cb0-bdfa-2723f43a822d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a5893778-2e28-4d1a-83ec-28e13a3b02da",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d3279db6-3e81-4521-914e-a9fb91b4bbc3",
        "cursor": {
          "ref": "2096fd77-fa5f-4bf6-9ccf-a89d83cf38ff",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "25c49f6f-a75b-4fe9-b7ff-26e11fb2b7ec"
        },
        "item": {
          "id": "d3279db6-3e81-4521-914e-a9fb91b4bbc3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d024ee40-2cb3-4297-966f-a02e777d1422",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bb181bde-ea08-4fa5-a933-c1a09bc4584b",
        "cursor": {
          "ref": "e8c839db-2639-48f9-8a8d-02e82a783030",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "46e556f4-31d6-49dd-be5f-bd3bdd578240"
        },
        "item": {
          "id": "bb181bde-ea08-4fa5-a933-c1a09bc4584b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "66fc6fe2-3ece-4985-ae72-67f86c4f5294",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "4bcf0a75-0c8e-46c1-89a8-2c10c4a9b4fe",
        "cursor": {
          "ref": "a79baeec-4752-4bc6-a9f6-fb68dcda1125",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "15870225-2e30-4d88-883b-03ab637b778c"
        },
        "item": {
          "id": "4bcf0a75-0c8e-46c1-89a8-2c10c4a9b4fe",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8c3f0061-e1ab-41c2-a22c-2c7fbd434994",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "5813c493-0918-49af-8947-4de3acf8feb0",
        "cursor": {
          "ref": "9daa4807-11a8-43da-8031-e6d3aef9e8ad",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4d439a49-17c2-44c4-b6f2-b1910b1c039d"
        },
        "item": {
          "id": "5813c493-0918-49af-8947-4de3acf8feb0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5bcdebf4-1509-46ed-b4ac-37aab0b5122d",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "56ac504d-9abf-4d27-8776-afbb33c83966",
        "cursor": {
          "ref": "2da25a87-2ebb-4676-956c-40d295621569",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "219aff66-90be-422c-b13f-3213b607e1ac"
        },
        "item": {
          "id": "56ac504d-9abf-4d27-8776-afbb33c83966",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2ba37109-92a7-4aaa-af19-d1a6209a2d43",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "8d8cb022-cab9-4965-988e-d43a583bdedf",
        "cursor": {
          "ref": "c9cc6069-824e-451e-88fa-a730846a0e0e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "43a33e2e-fa8b-4fac-b1c2-3e07eb8044ac"
        },
        "item": {
          "id": "8d8cb022-cab9-4965-988e-d43a583bdedf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ba689be1-7bf3-4904-8c74-a02b4a9beaba",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "30c84f29-cb9d-4ef9-b0f1-e666f6b3fec2",
        "cursor": {
          "ref": "887dfaba-446b-4de5-9141-8cf41f93f449",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b3963ce4-656f-431b-9743-8078e2047193"
        },
        "item": {
          "id": "30c84f29-cb9d-4ef9-b0f1-e666f6b3fec2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7b821bcc-d2f2-4c8d-a1bc-2b7367314148",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f64ac560-f067-4366-bc99-4ebab641a8f2",
        "cursor": {
          "ref": "31bdcebf-94fa-453f-86ff-ab0bc6546b1e",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9d0dd478-64d5-4cd8-978b-252227ab340e"
        },
        "item": {
          "id": "f64ac560-f067-4366-bc99-4ebab641a8f2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1755674b-8f59-4731-8e30-dbbdb9f41220",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "8cddb486-c57f-4364-8826-2c50e71b833c",
        "cursor": {
          "ref": "688052b2-fe75-468e-a63b-62b608e2963d",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0ad3e63f-a3b7-4e42-bd77-ec7b114543c8"
        },
        "item": {
          "id": "8cddb486-c57f-4364-8826-2c50e71b833c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c30d4eca-9eaf-410e-8d02-3889f97125f4",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "15193e23-75cf-459d-a962-c7491c734fd4",
        "cursor": {
          "ref": "974b8146-d703-457e-8682-067bc9419c09",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6faeb446-b8de-4959-89ec-f48693ee9575"
        },
        "item": {
          "id": "15193e23-75cf-459d-a962-c7491c734fd4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6e071d9d-c664-4771-b12f-e1deefdfcffa",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "95511e24-fcc9-44a5-823b-88d3a8101911",
        "cursor": {
          "ref": "9915ef7a-cbb8-40ae-92ca-81f29ba81aa7",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "78b41c6e-e63c-46f6-a8d6-cf776825b5e8"
        },
        "item": {
          "id": "95511e24-fcc9-44a5-823b-88d3a8101911",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "eae42dbc-af53-428c-a5ec-ff739c9f644a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c52d79aa-a912-492a-a1cf-60046a6f71ce",
        "cursor": {
          "ref": "f544521a-36f8-4598-aed1-7f3c49465782",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5be86981-3da9-4aa4-81cd-30681e53f2d9"
        },
        "item": {
          "id": "c52d79aa-a912-492a-a1cf-60046a6f71ce",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e8e791b0-ec09-4acc-ade0-82dcd401dbe5",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a0d8f44c-c0ec-4c0a-8bba-5d781a7816a8",
        "cursor": {
          "ref": "3ba3d217-87f1-4dde-b808-742072005f17",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f62b126f-bf57-498e-bfd6-29b26417cb67"
        },
        "item": {
          "id": "a0d8f44c-c0ec-4c0a-8bba-5d781a7816a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9d3f73ad-3d3f-49c1-8090-e37cee9602ce",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4ffd7a01-8c29-4a33-b812-a0b09d4d581d",
        "cursor": {
          "ref": "5f5a39e0-c76d-4bb6-8ef7-cecd28ee83e2",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b360daff-c301-4ea9-b448-ac0c4b05b342"
        },
        "item": {
          "id": "4ffd7a01-8c29-4a33-b812-a0b09d4d581d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "da2600ae-baab-4719-9a58-a14cddded18c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "0d5c6c81-268d-439c-86bc-4ed889c42de9",
        "cursor": {
          "ref": "2586f91a-621f-4e8e-9334-67547b7e375d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d231e83e-bc7b-494f-8426-81c5d30e611b"
        },
        "item": {
          "id": "0d5c6c81-268d-439c-86bc-4ed889c42de9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d63e584e-6383-42bb-89c9-f92c01ae49d0",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ab6a2c9c-ff58-4aaa-b083-c3881c25b9ea",
        "cursor": {
          "ref": "188c5abf-cb73-457f-9053-8761b0ddbe51",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "499a9028-a870-410e-90cc-8331b7a25ca2"
        },
        "item": {
          "id": "ab6a2c9c-ff58-4aaa-b083-c3881c25b9ea",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bf893807-44bf-457f-91d5-c7bc5e9c6352",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "eab7e93e-b45a-4212-bae4-ab6e8b2cdcdc",
        "cursor": {
          "ref": "06929e5d-c70b-438b-890e-996ad81979ca",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "edff5782-c027-4bc8-909d-e077f094306e"
        },
        "item": {
          "id": "eab7e93e-b45a-4212-bae4-ab6e8b2cdcdc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e4b71514-989c-4bff-af62-7d68dc1df0e6",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "7cfc330c-1e59-4241-a677-7fb2eb395ddf",
        "cursor": {
          "ref": "2bf79df4-2fd2-4604-b713-4fb721f4fef1",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "870c779d-e6e6-44ec-9040-0ca2fb0338ff"
        },
        "item": {
          "id": "7cfc330c-1e59-4241-a677-7fb2eb395ddf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2012ff9e-62c2-4d80-9d38-967dfbf5e11e",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "18330d44-f7df-4525-aa92-170a02cc3bf1",
        "cursor": {
          "ref": "37898ae6-8be6-4f2a-892a-9cd1ebfdba5a",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d1787be5-247e-4038-ba1b-042f8e02e200"
        },
        "item": {
          "id": "18330d44-f7df-4525-aa92-170a02cc3bf1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "064f7599-69ea-4f39-bb9b-0639f2dd60e3",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bb39a81f-7f95-44f9-9148-346b297f401c",
        "cursor": {
          "ref": "0b18f475-8661-428d-b5cc-234182f29198",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cf6f8fe7-c67a-4aae-91c2-fed7470b6b96"
        },
        "item": {
          "id": "bb39a81f-7f95-44f9-9148-346b297f401c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dde50988-9889-4b83-8675-d6f453e94b5a",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c781d1de-ef3f-4185-acbb-20155201c965",
        "cursor": {
          "ref": "0b2622fd-e39b-4fc9-ba59-ed3f0d0d1a6e",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8744120b-f6ae-4e94-8fe8-6fed40052f40"
        },
        "item": {
          "id": "c781d1de-ef3f-4185-acbb-20155201c965",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "411394d3-c9e7-4ed2-a5c5-139579b86384",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "db2708b7-11b6-470e-b0ee-e5c6a9a7938a",
        "cursor": {
          "ref": "a07a7f31-e849-446b-9479-a7341efe696c",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b35f0fab-1777-4576-a846-abe1f2e6effb"
        },
        "item": {
          "id": "db2708b7-11b6-470e-b0ee-e5c6a9a7938a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5a7b69de-4c58-4490-8f3e-5515da894757",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18c8fd8-dd1f-401d-89b5-00178d4c6dff",
        "cursor": {
          "ref": "2aa2fa72-c331-4622-97a6-a04fe5ee7fa0",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a4eb7ad5-d02a-49a1-b7b7-761b834dfc85"
        },
        "item": {
          "id": "b18c8fd8-dd1f-401d-89b5-00178d4c6dff",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e3a80668-e9d1-43e3-9b8b-5e7932441848",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0119f5d5-837d-4ebc-b7ad-8577bda4d226",
        "cursor": {
          "ref": "8959340b-6806-4214-9d88-269a3cbe93ab",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c3b34b29-0bca-471f-a4e9-e308a78e1acc"
        },
        "item": {
          "id": "0119f5d5-837d-4ebc-b7ad-8577bda4d226",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "81aab2ab-a856-455d-99c2-422a92d1ae85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0119f5d5-837d-4ebc-b7ad-8577bda4d226",
        "cursor": {
          "ref": "8959340b-6806-4214-9d88-269a3cbe93ab",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c3b34b29-0bca-471f-a4e9-e308a78e1acc"
        },
        "item": {
          "id": "0119f5d5-837d-4ebc-b7ad-8577bda4d226",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "81aab2ab-a856-455d-99c2-422a92d1ae85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6200c0e3-aa33-47a0-875c-f8a94f49fc5c",
        "cursor": {
          "ref": "a2ced43b-9946-46c1-8c11-8fe085d06b4e",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ca52dde8-896a-4552-b2b0-20fd85d30a9a"
        },
        "item": {
          "id": "6200c0e3-aa33-47a0-875c-f8a94f49fc5c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "66977602-06b2-4c88-8495-e79c023297ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720c0eab-9231-48c3-b894-46f355820172",
        "cursor": {
          "ref": "2842cdc7-cf03-4301-a9c6-b066938a1b95",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b3794d7a-dd4f-49c1-b878-67ae6ca28a29"
        },
        "item": {
          "id": "720c0eab-9231-48c3-b894-46f355820172",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8a93a792-de27-46fb-82e3-d362b140cd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda82eee-14be-45f9-8537-81ba412de023",
        "cursor": {
          "ref": "013949e1-45b1-4c45-8175-f4514a5c3160",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "030e90be-1705-4cb7-9e74-9ac983b851e0"
        },
        "item": {
          "id": "dda82eee-14be-45f9-8537-81ba412de023",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bda83886-10eb-4679-b000-915a83b15c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711dbf76-483d-4c7e-a7ce-e333bb2b12be",
        "cursor": {
          "ref": "45745b85-bfaa-4ecb-ba8d-f3c01288dbca",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3832986d-5bf6-4a89-a46d-dffd68f1fc10"
        },
        "item": {
          "id": "711dbf76-483d-4c7e-a7ce-e333bb2b12be",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c0b7a2a2-e3c5-40de-9620-8ba00df3991b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ba0fe4-8577-4f9b-ac97-880ed31bc499",
        "cursor": {
          "ref": "112a47f6-7ec1-4416-bfca-bf172754bd1e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "70e3b6b0-3285-447b-a9cf-09e6c4a7a20f"
        },
        "item": {
          "id": "23ba0fe4-8577-4f9b-ac97-880ed31bc499",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4bcf165c-ff4d-4f94-9824-b8331ec52be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b86801-0164-4326-8f73-c779bb37e1b3",
        "cursor": {
          "ref": "a43e494a-a3c6-4ec6-a9cd-8d8f6446565a",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fc01957d-1827-48b8-b83a-06e5de29393e"
        },
        "item": {
          "id": "b5b86801-0164-4326-8f73-c779bb37e1b3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3fdad18b-9671-4119-aee7-55f07d97fdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72925e68-14b8-4146-9f7c-3b1f01f156e4",
        "cursor": {
          "ref": "c2c8eb46-ebe3-405e-9e13-2630b12983ae",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1e223e24-47d3-4184-b33b-3eea2f28e0bc"
        },
        "item": {
          "id": "72925e68-14b8-4146-9f7c-3b1f01f156e4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d888cdc1-c77c-48ac-9127-628be3aeb88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3248338e-55a8-41a5-bd1f-159dfa985936",
        "cursor": {
          "ref": "2f2ece7d-bc9e-467b-bef6-ddffc5c7cb74",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d316233e-c523-4446-ac26-dbed1ee5aa74"
        },
        "item": {
          "id": "3248338e-55a8-41a5-bd1f-159dfa985936",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "90a8ce47-8ede-4171-b0f6-7cb271aea4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813c452a-474f-41f9-9f1b-de1126c443ea",
        "cursor": {
          "ref": "b9d70d26-f9cc-46be-8813-0e49c6a71f0f",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f64a5ca7-ac55-4696-886f-5278434f6fdb"
        },
        "item": {
          "id": "813c452a-474f-41f9-9f1b-de1126c443ea",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "303114d9-b656-4ac5-8078-e095576a6a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4865102-d109-48e3-9358-19a82180e21d",
        "cursor": {
          "ref": "a2439188-addc-405f-9660-6bad02a981c9",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "847eebcc-6b96-44a1-be69-59cba3f7ebab"
        },
        "item": {
          "id": "e4865102-d109-48e3-9358-19a82180e21d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "35cf5945-ea1c-4281-95b9-e709ac33ef98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f89b10-a283-47ba-8844-78be9d9c1c2c",
        "cursor": {
          "ref": "d93e7f1b-f9c8-4efb-a6a4-678555a36275",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8e92f788-5c1a-4334-bcfa-7ba0586f7cd9"
        },
        "item": {
          "id": "96f89b10-a283-47ba-8844-78be9d9c1c2c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5edc3799-3306-4688-b618-984805a76602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fdd2e9-f3ef-4420-b195-3961a8492f1d",
        "cursor": {
          "ref": "3166fe38-0bf4-42ca-997d-603b826d60ac",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0078d28a-e850-48ac-a018-8f60319e2098"
        },
        "item": {
          "id": "81fdd2e9-f3ef-4420-b195-3961a8492f1d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "71a94805-219e-4a3b-b8a8-e38c1b684687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa1a902-bcd1-47c9-931f-5f4b63081c2f",
        "cursor": {
          "ref": "4482e147-c89b-4bf7-ba4a-3f4187541fd8",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b4113015-3a9e-41a1-aac7-fa10554b33de"
        },
        "item": {
          "id": "3aa1a902-bcd1-47c9-931f-5f4b63081c2f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7dec8ec6-21c5-4b8d-879d-c65265c610b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b576fff0-8537-4d7b-9904-55a5cf3dc271",
        "cursor": {
          "ref": "12ccd8ef-cf7a-4f4c-bdf6-2da2aaff45fe",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c2f90dc6-855f-4df0-9f48-fc4c07d63feb"
        },
        "item": {
          "id": "b576fff0-8537-4d7b-9904-55a5cf3dc271",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "08b87492-844e-4f08-aa1a-0e74a7b32422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a2625f-4bc3-4e6a-820d-c830a53443ef",
        "cursor": {
          "ref": "7f1825f5-5aa8-4f85-b4c1-f62451c8ac1c",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8ead4724-bdfe-4b6a-91eb-03188656256a"
        },
        "item": {
          "id": "37a2625f-4bc3-4e6a-820d-c830a53443ef",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "de3070bf-56a8-45b0-9244-22dc17ab43df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fc5dd2-62bc-4cd5-81cd-6db76c6f05af",
        "cursor": {
          "ref": "44b1f9ff-83b7-4c3a-a248-3db498bbaf4b",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d4b14914-0e5d-47ec-a347-89a223e04cf9"
        },
        "item": {
          "id": "d0fc5dd2-62bc-4cd5-81cd-6db76c6f05af",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f93cf945-546f-4d91-b7e8-f1ed4bc2c5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ebd338-899b-41d1-aac0-c9f79c7f5352",
        "cursor": {
          "ref": "4ae1ecb5-6128-4dca-8bb0-776fbf0760c7",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1de984e1-7393-404d-b252-a3373044555a"
        },
        "item": {
          "id": "66ebd338-899b-41d1-aac0-c9f79c7f5352",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "60342b9b-6403-4f14-86fb-028650621b7d",
          "status": "OK",
          "code": 200,
          "responseTime": 619,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "36255e80-da36-45f7-8fa2-c070f04e3305",
        "cursor": {
          "ref": "d6c2f7fc-39ec-4c99-8913-cb088c1572d5",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "981b6456-77fd-49ec-9ed0-65f3168c60eb"
        },
        "item": {
          "id": "36255e80-da36-45f7-8fa2-c070f04e3305",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "61beca48-8bb1-4b15-9feb-18dc89f0de1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11798b3-cf96-4322-beb2-5283c69a1ffa",
        "cursor": {
          "ref": "7ba09211-1320-4be7-b9bd-23010ed87236",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1959af1b-db43-487f-bb7d-a79db7d18ee8"
        },
        "item": {
          "id": "b11798b3-cf96-4322-beb2-5283c69a1ffa",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "70fbaff7-872d-48cf-8c0b-4b965b7ff7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543a990b-c459-4d5e-a0b8-b717f54b1665",
        "cursor": {
          "ref": "a09f92b6-b1e7-4890-9efe-1ffab12a5484",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d54678f0-69aa-4ab1-99dd-2be63143652c"
        },
        "item": {
          "id": "543a990b-c459-4d5e-a0b8-b717f54b1665",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2e4b8c35-bc42-4a4c-af04-a8335fff5923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a610908-cfd2-4139-a585-1f64ade14dfe",
        "cursor": {
          "ref": "7c702fc0-ae09-4620-8c51-999e8ae9bc0a",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "03a8a1d5-1edf-4220-ba09-0e6bd009c338"
        },
        "item": {
          "id": "0a610908-cfd2-4139-a585-1f64ade14dfe",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4f4f3afa-ee09-4fd1-adbf-128949cca46f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332de021-15d2-4dd7-9111-1f2e825b44c1",
        "cursor": {
          "ref": "81344136-cc5a-419f-a2b6-c6926b9c181a",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d19c7baa-f739-491f-95f2-cbbc82fa9b45"
        },
        "item": {
          "id": "332de021-15d2-4dd7-9111-1f2e825b44c1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5f05c80e-7838-4201-affd-a01b6316e09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec62877-ffe9-4f69-9483-6b43b1378300",
        "cursor": {
          "ref": "5e8844d7-200a-4258-a124-3165b2a8f643",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "58209753-e9af-482a-ae45-2bbee07b7ef0"
        },
        "item": {
          "id": "8ec62877-ffe9-4f69-9483-6b43b1378300",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "aacca6dc-d6d5-4359-b4d7-db52942fd5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52cf4fc-e866-42e7-8383-40a60a92372b",
        "cursor": {
          "ref": "f0aaa971-7205-489d-8a67-28d238393b5d",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a5265488-5928-49f7-861e-4c6e858f556c"
        },
        "item": {
          "id": "b52cf4fc-e866-42e7-8383-40a60a92372b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1b51ec40-01f7-47ab-a000-6dc54181758d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae66249-d7f7-4175-9784-fe7224a2cd12",
        "cursor": {
          "ref": "3a80581a-f734-4394-ab47-7b1bf4abed51",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a1f6a831-51e9-42a4-80f1-8975c6409bb6"
        },
        "item": {
          "id": "4ae66249-d7f7-4175-9784-fe7224a2cd12",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5aafa0b4-e148-4cad-b283-dbcf3631a663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce15ae0a-c658-4ce8-85a3-7ca1cd5cbf16",
        "cursor": {
          "ref": "1d4335b4-c652-466e-baac-d2019f50a4da",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "af478e21-0269-466f-88e3-2cab3ccb513a"
        },
        "item": {
          "id": "ce15ae0a-c658-4ce8-85a3-7ca1cd5cbf16",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5e46ac9d-9403-4126-9c60-91b64e1af6ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a2d29d-552f-43e6-a740-9aaa98bf774b",
        "cursor": {
          "ref": "1239f2eb-3abc-4ebd-8100-f68d019bd7cc",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d7244b85-2fc7-4699-b13d-f1eb80cc00ce"
        },
        "item": {
          "id": "d9a2d29d-552f-43e6-a740-9aaa98bf774b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "eeb76e21-782d-4729-b4d2-eee0484add5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef280ad-40c9-43b3-b881-a832ff25e387",
        "cursor": {
          "ref": "1a65b2a9-7436-42ab-8a20-37737844417c",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b9a55050-b578-4db7-a1a4-5b2e3544154b"
        },
        "item": {
          "id": "6ef280ad-40c9-43b3-b881-a832ff25e387",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "584ce917-873e-45dd-9626-90ff2159662b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7420397-2a44-4ca2-8029-b346f005f5e6",
        "cursor": {
          "ref": "277dadf1-227a-4bf8-90a1-20b5296122b5",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6b2450ab-41d5-4eb8-b54f-24a58e696ee7"
        },
        "item": {
          "id": "f7420397-2a44-4ca2-8029-b346f005f5e6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7cede014-26bd-4017-83b9-7493a49ac06c",
          "status": "OK",
          "code": 200,
          "responseTime": 317,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "589a2bd3-2e90-4aef-9e9e-73861ed575f6",
        "cursor": {
          "ref": "9d23b3ff-d908-423d-aa49-17c4c4551e39",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5281aa0f-edfc-4d75-88e0-6e3661fd5088"
        },
        "item": {
          "id": "589a2bd3-2e90-4aef-9e9e-73861ed575f6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e5b9168c-f85e-4520-b260-d41f94e22dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0246bbed-f5ff-4d72-b98d-34227ae4bcf0",
        "cursor": {
          "ref": "0424e7d2-7b1b-4dd8-8fed-5c1a3511c107",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ff4c1257-a73e-4f23-8c20-29986b7a30c7"
        },
        "item": {
          "id": "0246bbed-f5ff-4d72-b98d-34227ae4bcf0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d84e07b8-d2f8-446b-93f8-6a92595e1b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51b3c07-117f-4948-9c4b-1215319b87ec",
        "cursor": {
          "ref": "6b53b37b-0187-4ab4-bd48-f3e4c43fc93c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "378d2cfc-ebdb-4504-a128-ba39bc630272"
        },
        "item": {
          "id": "d51b3c07-117f-4948-9c4b-1215319b87ec",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "67c40951-5047-4106-8cfe-a97dea00a6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0811ce-1331-4b63-91be-e6131f8b2263",
        "cursor": {
          "ref": "0b3fcce8-590f-4721-9725-7791ffdeb726",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f1a46881-24ee-4d74-94d9-40e7554fc371"
        },
        "item": {
          "id": "ef0811ce-1331-4b63-91be-e6131f8b2263",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b5d7a877-8b30-4022-81c3-96fea51886d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81dc527-a5ff-4edd-bb3d-fb2ea9be7bd6",
        "cursor": {
          "ref": "1afd779d-d3c3-4c9d-8a28-5581ac2fc2b2",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7954518b-8057-41c9-8cb4-ba816c1c48ca"
        },
        "item": {
          "id": "b81dc527-a5ff-4edd-bb3d-fb2ea9be7bd6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5689392a-25c1-4c42-8d46-a99b56e79ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934291ac-2b13-4191-901a-378ce994d80b",
        "cursor": {
          "ref": "a233c220-eb3f-443f-853a-f5f4c34b9f70",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "037de2d3-1547-4dfd-9a7a-66dbdc286f6f"
        },
        "item": {
          "id": "934291ac-2b13-4191-901a-378ce994d80b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c2366e53-4fc5-488d-b817-2dc6bcd4e13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cead4a-d989-4e1f-919f-8adc9e704cec",
        "cursor": {
          "ref": "ba69d72f-1915-4a71-896a-aa1f7e60ba04",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b00fc6c5-09a1-4eb8-a493-ad86029aff15"
        },
        "item": {
          "id": "69cead4a-d989-4e1f-919f-8adc9e704cec",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "82dabd15-57da-483f-8d16-845d192a7cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea98cffe-2c47-4698-92cf-ed9c203cafec",
        "cursor": {
          "ref": "72c785a7-724d-4221-9cda-6adbf165939a",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6810ff78-df79-4181-8e7f-13b5b895fcb6"
        },
        "item": {
          "id": "ea98cffe-2c47-4698-92cf-ed9c203cafec",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a4c51f54-aabf-43c3-b6cb-c7a8d76c64c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee9e2b5-b227-4242-a3d1-89cfa6cb3589",
        "cursor": {
          "ref": "368a1a10-088e-4cb7-8832-e3d0ab84315c",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c651b413-22ca-43fd-9e98-5ba156c4b6c0"
        },
        "item": {
          "id": "fee9e2b5-b227-4242-a3d1-89cfa6cb3589",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3a930be2-28dc-4ca4-b9f4-9de77603fe87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d379fc41-355f-4a0c-ab1b-a336b7571c09",
        "cursor": {
          "ref": "7555f445-fce8-4052-a773-bcb7ced77b43",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e00e8dbb-755d-4b11-acf5-b913eb697f7e"
        },
        "item": {
          "id": "d379fc41-355f-4a0c-ab1b-a336b7571c09",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d5509250-5d6b-4243-bf41-e60f732b4700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 519,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f2727a-eb69-48f1-ac68-7357d2ed1450",
        "cursor": {
          "ref": "18e226fe-4f99-4fe9-a009-e86f84b10013",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "63203c3a-f1dc-40c0-8346-6a52267d213e"
        },
        "item": {
          "id": "05f2727a-eb69-48f1-ac68-7357d2ed1450",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b819ac90-f593-4695-b330-f32d281fd516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fffdaaf-1eca-4d08-a075-d5b14839eb77",
        "cursor": {
          "ref": "17bab8f7-1dce-4a21-b573-eb86dd72abca",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "030bb67c-c085-451e-b417-d915c5258760"
        },
        "item": {
          "id": "3fffdaaf-1eca-4d08-a075-d5b14839eb77",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5c86e7cf-9aaf-4280-a50f-b0b56c3234de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8feb6f-126f-4184-ab0c-a8067405fc30",
        "cursor": {
          "ref": "213a040e-ae2f-435b-92a0-fb30444bf24f",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5275e432-aeb1-4115-8f45-f17343848272"
        },
        "item": {
          "id": "ac8feb6f-126f-4184-ab0c-a8067405fc30",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7beb91d9-3adb-414e-b560-bc02b0b2f035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5724cd9a-122c-48e8-bb2f-4451f3ca28f4",
        "cursor": {
          "ref": "56f600e0-4b81-4d2a-895e-3bf04b7d4255",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "240a549f-c32c-41a7-965a-5bea22edd8b6"
        },
        "item": {
          "id": "5724cd9a-122c-48e8-bb2f-4451f3ca28f4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3f427ec5-0ad5-4f5a-a9a7-1f1e1750ccd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9e6c49-1b08-49ef-8261-de14ec6575c0",
        "cursor": {
          "ref": "87d7d740-05da-4543-9229-4f7b8ebba13b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "26d63a77-0b79-430a-8a9a-599499584892"
        },
        "item": {
          "id": "6b9e6c49-1b08-49ef-8261-de14ec6575c0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0e40b70b-1188-4730-b5df-b8df83d02b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf77fbf8-b9ea-4ef5-b9c3-86d751dd9d2b",
        "cursor": {
          "ref": "2824767b-fea1-43e3-a05e-f14c81fd59a0",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "23abdd2a-dbf3-4812-9e37-54bfbc72cf03"
        },
        "item": {
          "id": "cf77fbf8-b9ea-4ef5-b9c3-86d751dd9d2b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "210f4237-8980-4dec-af26-f5391cebe0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc24052b-4642-4341-9fde-98244c791a20",
        "cursor": {
          "ref": "810d4fd4-1865-4a78-8a34-a5f873bd5a89",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "554fddb4-93ea-444b-a6f1-cea2d6659966"
        },
        "item": {
          "id": "dc24052b-4642-4341-9fde-98244c791a20",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "eba6efe6-e06e-4d56-b871-d34e6b40e5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05115a95-0c5a-48e5-8d96-62b92f7d1b0a",
        "cursor": {
          "ref": "df3527d8-9d49-4563-bc97-d474af1d943e",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8967d5ad-cd20-4ad1-8d5b-7c9e56d466c8"
        },
        "item": {
          "id": "05115a95-0c5a-48e5-8d96-62b92f7d1b0a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "06c7f9a9-6f96-4e7e-8e8d-ea14a187642c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db52390-ce21-42e2-bec9-efd583f92aed",
        "cursor": {
          "ref": "a722cef9-2d2d-4ff7-904f-13d2aea4db9b",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bfe15d48-0f1f-4a17-ae1c-2d2e55c2271e"
        },
        "item": {
          "id": "8db52390-ce21-42e2-bec9-efd583f92aed",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d8bc876e-6e23-4e4e-bf7f-2ba1839836f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98305a0-6aec-4ab1-9631-480e976e249f",
        "cursor": {
          "ref": "0c126226-6902-4148-bce4-42499ef0b7aa",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0bad95e8-04ee-4a25-8317-d93dd9a1e749"
        },
        "item": {
          "id": "c98305a0-6aec-4ab1-9631-480e976e249f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "dd519e55-2a67-4aba-ac65-423ec74bfdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762131fa-08e5-4c93-a109-fc2d11f5e511",
        "cursor": {
          "ref": "76770eaf-ee89-4285-931a-a6537ac6ef6d",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c1d28a93-0b22-4387-b5ae-00e0c7b90bf9"
        },
        "item": {
          "id": "762131fa-08e5-4c93-a109-fc2d11f5e511",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a8a52875-04e2-466c-833d-54bb299dce01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567a5c33-44fa-4557-8905-766ce34fb6f4",
        "cursor": {
          "ref": "d862d21b-e584-4450-a1a9-5d570f1dc4bd",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "226d964f-292c-4eb8-8dad-162af8172362"
        },
        "item": {
          "id": "567a5c33-44fa-4557-8905-766ce34fb6f4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a467bc33-5e17-44b2-848e-e725fca75cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b58c432-f24c-482f-8e04-2f7f8e4f5ef4",
        "cursor": {
          "ref": "44606de3-01a0-434e-a7a3-6ff7c7372bf4",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c9974f96-ee55-4ba0-a520-7857a7ed78a9"
        },
        "item": {
          "id": "2b58c432-f24c-482f-8e04-2f7f8e4f5ef4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "89196db0-cf6b-49ba-a1ec-a3d95e271c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8613d9e-bb3e-4029-b59e-bf598bac20cb",
        "cursor": {
          "ref": "eecdfe09-05fa-48b8-86a1-6b2569b36aaa",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fa74ec4e-4b73-4230-8325-fd720198d3ba"
        },
        "item": {
          "id": "b8613d9e-bb3e-4029-b59e-bf598bac20cb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "50b10892-dd3d-4365-9064-944015761a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2374aa30-f3b4-4d8a-95e3-834f3b6eb03e",
        "cursor": {
          "ref": "f3d0b571-ba41-463c-afd6-23df468bbb2b",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fa59965e-08c1-402d-a746-8616b58848e6"
        },
        "item": {
          "id": "2374aa30-f3b4-4d8a-95e3-834f3b6eb03e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a5d04c0b-6c29-4204-aac4-0ffd1cfa15bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711e4eea-90e2-45db-95d0-96d22563b8a2",
        "cursor": {
          "ref": "b0c69e22-55ac-4105-9653-42a3070e62ca",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "492dd2cc-0215-470d-93d3-9f75d0441fb1"
        },
        "item": {
          "id": "711e4eea-90e2-45db-95d0-96d22563b8a2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3960dde8-7687-4641-be7b-9d8ac316f3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472288d4-f6fa-47da-9143-f7fb4e2ac3a9",
        "cursor": {
          "ref": "720fba54-32e2-41f2-8cdb-a2c9e3f6c4d6",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "12b57c29-bb9a-4cd4-ac93-59175df8d45d"
        },
        "item": {
          "id": "472288d4-f6fa-47da-9143-f7fb4e2ac3a9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3227823a-2158-4b68-b9c3-1643d50f2d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed60bbd-1c9c-4b54-8836-ba21ec343741",
        "cursor": {
          "ref": "345545d2-1650-46bf-99e8-2000205667b0",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "def77157-a8d4-4d36-bab4-5c530fc384ab"
        },
        "item": {
          "id": "8ed60bbd-1c9c-4b54-8836-ba21ec343741",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "97022255-0807-43d9-b6a3-dc7bac1da75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0986877b-2e10-490c-af2e-083fc4f9459f",
        "cursor": {
          "ref": "dd3dea73-527c-4345-915e-2234b5a60e23",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dd195961-bb84-4b72-ba71-fd96e69e0801"
        },
        "item": {
          "id": "0986877b-2e10-490c-af2e-083fc4f9459f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b101ed26-0f2f-40fb-acad-15758c6a89a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5a8020-e2ac-49f6-ac68-48553d4adb9d",
        "cursor": {
          "ref": "1fe53bfd-05ff-4daa-90c4-08877c7e6318",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "95280436-c7b4-4bf3-85b7-36aac645c8cd"
        },
        "item": {
          "id": "cd5a8020-e2ac-49f6-ac68-48553d4adb9d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bc95e4a2-9e02-4484-9a54-583badd0128f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80177d0-87c5-40d4-ad7c-2a07be103879",
        "cursor": {
          "ref": "ec957b2f-cdf1-4745-8cdf-ce22b71ddcdd",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "00544a08-dd01-421a-a79d-3efc45a939ed"
        },
        "item": {
          "id": "f80177d0-87c5-40d4-ad7c-2a07be103879",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8158c58f-498b-445e-8ee1-c6ba610b94d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65235457-9701-4c4f-81ef-5e20e2d93a8e",
        "cursor": {
          "ref": "e4608074-011b-4852-8e0a-602e27b1f836",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f9c07553-773c-4ab8-9615-f367563af8e8"
        },
        "item": {
          "id": "65235457-9701-4c4f-81ef-5e20e2d93a8e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "799f530e-0767-485e-89e2-2d2f8245b623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266821bc-c5a8-493c-ba15-01e2fcee84c0",
        "cursor": {
          "ref": "7e3811bf-b42d-4322-a2fe-57a17ccb1541",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "559f4c06-9dc6-4fb7-a23d-4a1b2908aa37"
        },
        "item": {
          "id": "266821bc-c5a8-493c-ba15-01e2fcee84c0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7a7de76a-3cfe-4aad-8f62-f31fe4fe283e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91768a1-9a86-4c9b-9b05-4dc7c981b412",
        "cursor": {
          "ref": "60b64d9b-30dd-447b-b2ac-82cd89e3f28d",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "96d798a3-375c-4c85-b772-6831460ee58f"
        },
        "item": {
          "id": "e91768a1-9a86-4c9b-9b05-4dc7c981b412",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d8eb39de-05cc-4d64-ad7c-163b2aa9d2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617af9e2-cdf1-48c1-b58b-db5d805e6f58",
        "cursor": {
          "ref": "ba4ef57a-f093-476d-bdec-d1a9dbf86206",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "65952c29-0b4a-47bc-aaea-eccba773260d"
        },
        "item": {
          "id": "617af9e2-cdf1-48c1-b58b-db5d805e6f58",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9c5b680a-1b84-47fa-aac3-3bf5f24ef860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e9082a-77b6-4886-9829-b8cf252c3d13",
        "cursor": {
          "ref": "8a7b62a1-74ce-42e8-ba14-e2664dd3c0c3",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "150c5586-cdd4-4440-96a2-632d2f8cc371"
        },
        "item": {
          "id": "d9e9082a-77b6-4886-9829-b8cf252c3d13",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "175f6eb8-f74b-4427-928e-707b24227166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68e14f1-9a03-4c05-97b9-217ec0b312a4",
        "cursor": {
          "ref": "9d2d07da-f40a-4049-840a-9c40fa1ae1c3",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "12dcaee8-e155-4154-9fea-674ac91018a6"
        },
        "item": {
          "id": "e68e14f1-9a03-4c05-97b9-217ec0b312a4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2342d057-f828-44ec-973a-7c8e68bbb46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92055cd2-b23c-4e48-901f-d05a55baadad",
        "cursor": {
          "ref": "eae11067-dd94-4f49-88ce-4650aa857c1f",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6afb1370-241e-4c15-a010-e82dd7992537"
        },
        "item": {
          "id": "92055cd2-b23c-4e48-901f-d05a55baadad",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ed88dea1-bcc7-499d-a1e3-4955ee79ca03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aaf3b72-9aeb-4c38-929f-13e6ab31196e",
        "cursor": {
          "ref": "1747a051-173f-46c0-8d6c-0af13bd8f618",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2a01d210-9527-4aeb-8dc5-2c9e5294149c"
        },
        "item": {
          "id": "7aaf3b72-9aeb-4c38-929f-13e6ab31196e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a756da53-5620-4659-9516-5bf259f1befb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d018da9b-6403-450c-807b-7b39a6e0ee13",
        "cursor": {
          "ref": "bff8f6b0-bef1-448c-b53b-e2a0176ada62",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "364666ef-8377-4a7b-90c1-2862189343f6"
        },
        "item": {
          "id": "d018da9b-6403-450c-807b-7b39a6e0ee13",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d17dffe5-b9eb-457d-8fb0-4db054f0c45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c06d14-ceca-42b5-9b07-3ecceac4ad03",
        "cursor": {
          "ref": "0f26cac6-2988-4b55-a8b8-7bf5be84c20b",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e21bb97b-1988-4a6e-9b59-595cf05a7bf4"
        },
        "item": {
          "id": "99c06d14-ceca-42b5-9b07-3ecceac4ad03",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f942afce-d305-4447-b2cb-342132788afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe06ff0d-d6e5-4e56-8bdb-4a5e98305b8b",
        "cursor": {
          "ref": "e774eac5-bdb6-4425-adb8-278ca62d858a",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "076cca7a-3a94-4244-b462-d3d880b9148d"
        },
        "item": {
          "id": "fe06ff0d-d6e5-4e56-8bdb-4a5e98305b8b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7646cb9c-cbcd-4075-a061-a53c078002a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e55d572-5c41-4971-973b-44996286e5c9",
        "cursor": {
          "ref": "ca704bb1-2e80-48d2-9e06-62c01299e79f",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "32896f24-80fd-4f02-831d-e0a7567a6f15"
        },
        "item": {
          "id": "0e55d572-5c41-4971-973b-44996286e5c9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6f8b8f6e-1381-401b-94a7-865edd8bc04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405c5953-065c-41b8-97e6-6e8407223c2c",
        "cursor": {
          "ref": "9220253c-41fc-49a8-ad90-23a9a5eb890f",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "60ca40fc-bb67-46a6-a4df-40124234e648"
        },
        "item": {
          "id": "405c5953-065c-41b8-97e6-6e8407223c2c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "51ac79c5-cd8d-436d-95f0-e37baf6a3f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13231442-97b2-46b0-bbdd-aa16ea481d62",
        "cursor": {
          "ref": "b6c634a9-4900-41a8-92f5-59bb6af7409d",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "68f789ae-9bee-4c6f-adb6-b79af2c0295e"
        },
        "item": {
          "id": "13231442-97b2-46b0-bbdd-aa16ea481d62",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "50f4385b-d229-4ab9-a444-25e437628a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148c8f6c-8d55-4664-a416-615d1a34d348",
        "cursor": {
          "ref": "94fa034f-196f-4f77-ab11-70d32ef57226",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "13eba6c9-6d26-4c28-96fa-4ededd85e7f5"
        },
        "item": {
          "id": "148c8f6c-8d55-4664-a416-615d1a34d348",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4dcf63cd-1ee4-4b5f-8a49-c7e30359033a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85a3357-98c8-4753-8132-e7103ab48230",
        "cursor": {
          "ref": "7f1f3ba3-60b1-41a2-abc3-920eff9e354d",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f2886f14-fa7a-4acd-b836-72f5584bd7e6"
        },
        "item": {
          "id": "a85a3357-98c8-4753-8132-e7103ab48230",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "17217f22-0a48-454f-8f32-b610f4530055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cf611b-4b87-42dd-a1fd-1e518e1737b0",
        "cursor": {
          "ref": "ddc76081-40be-4157-b142-3225bcf1c5ac",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "94df75e2-0de0-4c64-88a6-c800d418b3b7"
        },
        "item": {
          "id": "f6cf611b-4b87-42dd-a1fd-1e518e1737b0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "261336f8-f0fd-44bd-ba2e-6cc5a8cb002f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d290f62-c240-4c8e-9b38-c05fead1e17a",
        "cursor": {
          "ref": "35716c97-fa0d-408e-889c-b876d12dde97",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "33d6ca0f-5568-4561-9b59-e938d9a0d8d9"
        },
        "item": {
          "id": "6d290f62-c240-4c8e-9b38-c05fead1e17a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "89162437-799d-4f6a-96e4-4be344af00bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b56614-d169-48c3-99a0-35b7e79aeb64",
        "cursor": {
          "ref": "d1c45116-084e-404e-8685-a412d54849bc",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1106871d-7627-496b-9adf-3cd8aa4e44a3"
        },
        "item": {
          "id": "c0b56614-d169-48c3-99a0-35b7e79aeb64",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "147d0a90-eff8-47e4-881e-765896ef2700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c4aead-4a1e-4625-aa39-6afa7ac6b3b2",
        "cursor": {
          "ref": "1ebcb0d2-09bf-43ce-adc3-584d7496fb2e",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4675ec3d-3c85-4dec-9db7-0bbdbbaff858"
        },
        "item": {
          "id": "19c4aead-4a1e-4625-aa39-6afa7ac6b3b2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e3ded79b-b7e0-4153-a78d-e3e5064bde17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa23b45-5610-4cac-a4c4-93b2df0c3b63",
        "cursor": {
          "ref": "b6bdefbb-4b9e-4563-aac4-4823964741ed",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c53d1831-b3fa-4bcb-939f-756eac22e0c3"
        },
        "item": {
          "id": "1fa23b45-5610-4cac-a4c4-93b2df0c3b63",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7b101a3e-11b4-4881-b281-c80eac26b95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa6813c-7ba0-4c2c-8747-1830a3912d32",
        "cursor": {
          "ref": "d6edd7f7-59fa-4001-bb4a-3295b1e29576",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0391bc39-2584-4896-9bc2-92ca3002501b"
        },
        "item": {
          "id": "9aa6813c-7ba0-4c2c-8747-1830a3912d32",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "993b4b61-955c-476a-9c46-25e5f08ba82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b1e76a-ed94-4760-b956-da31cb81e669",
        "cursor": {
          "ref": "f672395b-e0a7-4201-b499-6d66554613ba",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "41298fcb-aa73-405a-977b-4dd2210cfe40"
        },
        "item": {
          "id": "20b1e76a-ed94-4760-b956-da31cb81e669",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9a524ffb-15e8-419b-8f79-c5dde3acbabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb802ed-45bd-43df-b238-77c33558a3e5",
        "cursor": {
          "ref": "45138c72-4e3f-46e2-8de6-6887d7ec7671",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6a3c050a-4253-4672-bf25-b81fba0b7631"
        },
        "item": {
          "id": "6bb802ed-45bd-43df-b238-77c33558a3e5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "05e709ce-89d1-43bd-9a76-c21af2dcce1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7abbbc2-fda2-4a40-8242-5a77f1097fde",
        "cursor": {
          "ref": "4ce12b1b-1031-4357-87b5-77095171a444",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f8d7d2bc-a84b-4a2b-bff3-1cc2bf57931a"
        },
        "item": {
          "id": "c7abbbc2-fda2-4a40-8242-5a77f1097fde",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6fdd204d-e209-4888-bc0f-90d5452a0620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e3afd5-74d7-4883-9822-7ee6aa44b9ec",
        "cursor": {
          "ref": "0b84af62-0386-409c-8197-7e1682f8816d",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3b7aa71c-db1e-434d-a633-643b8f4363fb"
        },
        "item": {
          "id": "69e3afd5-74d7-4883-9822-7ee6aa44b9ec",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "671f6e9f-c7f7-47c7-936b-5a3ef830b19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf66422-1541-4db2-9e0b-659eca0e2bdb",
        "cursor": {
          "ref": "622e0c96-e507-4e28-8791-e2b60942186a",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "adb037cc-3879-40a3-ab65-58d5218cc223"
        },
        "item": {
          "id": "9bf66422-1541-4db2-9e0b-659eca0e2bdb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ac9edcc6-f5ab-4ce7-ac9c-cef5f83b4897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baba1914-e113-43b8-b102-dee25708e82c",
        "cursor": {
          "ref": "7f5c474e-2765-404b-9210-dff6f678651d",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "13c17a00-5339-449c-b324-d0c14a5f5dd9"
        },
        "item": {
          "id": "baba1914-e113-43b8-b102-dee25708e82c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4f5395ed-88f8-4cd3-8420-ee3e7c499da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d28bea6-5606-43c8-b2f2-b08bc38a43c2",
        "cursor": {
          "ref": "41b7470b-1915-4db4-ade1-eef0c661fc6b",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "05a33c0e-685e-494f-915e-95c9d7464dfe"
        },
        "item": {
          "id": "3d28bea6-5606-43c8-b2f2-b08bc38a43c2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0c66e73d-b3d6-4f05-bec8-95eaae746816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9366fd06-04cd-4cf9-a0d3-86fd1c3be7b3",
        "cursor": {
          "ref": "cccdc437-4a3d-4159-be67-1e685936c855",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "16c3416e-2149-496a-8be6-34b4082c0bbd"
        },
        "item": {
          "id": "9366fd06-04cd-4cf9-a0d3-86fd1c3be7b3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f9d72f5c-465c-4b41-a793-32fa98afc30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb16d86-91db-45f1-a10c-bbf85a1fe246",
        "cursor": {
          "ref": "c122a521-3514-4164-8a5b-8274fd137c23",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f288b11e-f8d6-4fff-a4b9-7d9204d13462"
        },
        "item": {
          "id": "9cb16d86-91db-45f1-a10c-bbf85a1fe246",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "16b5bc54-604e-45d9-9c65-560009d1b4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eecc548-e15b-4076-8af9-ba4783f6ce8e",
        "cursor": {
          "ref": "02d377f4-7780-4c9e-a30c-dccc55a0838d",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "18215e30-6392-4046-bc71-e37376a9bf51"
        },
        "item": {
          "id": "5eecc548-e15b-4076-8af9-ba4783f6ce8e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4f4ece78-040d-4ff3-ab53-0d5ecade5186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8676d193-6614-4c72-a344-e80c77dfa4d9",
        "cursor": {
          "ref": "2fb2890f-562f-4fd0-a55f-dfbc2ac701c6",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fd8ac002-9a29-4c11-85da-28d89d002105"
        },
        "item": {
          "id": "8676d193-6614-4c72-a344-e80c77dfa4d9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "957ccd53-2c72-46f6-a0fa-b5f2cb18ae9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9921866-8da1-4e7b-8dd3-c71be3af333f",
        "cursor": {
          "ref": "42107588-5c6a-4c48-91e8-868816b0b256",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ae091f37-9878-4299-b6e7-2d6573fcafdb"
        },
        "item": {
          "id": "d9921866-8da1-4e7b-8dd3-c71be3af333f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "58c1ff9a-26a4-44d1-b12a-bb6f4d467a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74baf26f-8a59-40d1-a5af-d9d87b10e58e",
        "cursor": {
          "ref": "00d554cf-d35d-46fe-b1de-b1e3b36729ed",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a3d9ba1b-ed43-47b5-862c-4bf7b1f34c84"
        },
        "item": {
          "id": "74baf26f-8a59-40d1-a5af-d9d87b10e58e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f81675ef-528a-4d06-afa3-2c53a264269e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2552754b-d2b7-4f32-9b78-7724e4c4768c",
        "cursor": {
          "ref": "069ae084-681b-40bc-94dc-c3093f1f7285",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "885653cc-e008-41ad-96d4-9ecd5368c7d8"
        },
        "item": {
          "id": "2552754b-d2b7-4f32-9b78-7724e4c4768c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e298eeb8-3fd4-4c36-a2a1-27cab5721de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e817a1e6-f9c9-4e6e-8628-470ce809dfdc",
        "cursor": {
          "ref": "2f2f651f-b78c-4b2c-a46a-a16ffde40614",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "df0ceaed-dd04-4846-be89-fda32b7601d7"
        },
        "item": {
          "id": "e817a1e6-f9c9-4e6e-8628-470ce809dfdc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "228cc4a6-8dda-4b3d-8ead-a4ed8f80e58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e14759b-0f1c-48b5-ba52-b8eeb7f126c6",
        "cursor": {
          "ref": "cd4acad2-8df3-411d-8480-84feb5796ad2",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4d22788d-b71c-4140-afce-593ecf469eb4"
        },
        "item": {
          "id": "1e14759b-0f1c-48b5-ba52-b8eeb7f126c6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a7595bb5-d924-4549-8ba5-bbe4f8630e0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390977a7-c058-4e76-8eb8-326da96cd0e2",
        "cursor": {
          "ref": "33faff07-8a79-49b3-ad63-17a7c428b6db",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a0ae7604-ab02-40bf-8ccb-d6d7b859e9d2"
        },
        "item": {
          "id": "390977a7-c058-4e76-8eb8-326da96cd0e2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d7617f81-4074-4796-98d0-c6d78620dfd2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58804fe-eee9-46cb-8bcd-fab29ea195c2",
        "cursor": {
          "ref": "88df78ce-e821-4530-ada4-dae386d657f7",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f5a0f3b4-ec79-45b5-988a-7c2356a628f1"
        },
        "item": {
          "id": "a58804fe-eee9-46cb-8bcd-fab29ea195c2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e05d239b-3dc7-4962-b4a8-a5f25b25f0d5",
          "status": "OK",
          "code": 200,
          "responseTime": 297,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "438d7c91-c2e2-419f-8b62-597ce57ee0a0",
        "cursor": {
          "ref": "de341f5a-3b0b-4b10-818b-40f5082ccc3b",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1683e316-a041-4729-a701-cb86e124f60b"
        },
        "item": {
          "id": "438d7c91-c2e2-419f-8b62-597ce57ee0a0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5620b3a4-f031-485b-83e0-e9ae30bd9e0e",
          "status": "OK",
          "code": 200,
          "responseTime": 591,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "011a8b2c-7abf-4706-9b77-ad75415f6323",
        "cursor": {
          "ref": "617ec66c-4e51-43bc-aabe-4963b62680b3",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fa8c4f6e-b2cf-48f7-b4f6-6b5c647b4e75"
        },
        "item": {
          "id": "011a8b2c-7abf-4706-9b77-ad75415f6323",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "573d4127-ef16-4e6b-a109-7cecfc302214",
          "status": "OK",
          "code": 200,
          "responseTime": 585,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74e4cc9-9962-49e0-a1df-e9d002cc1052",
        "cursor": {
          "ref": "00db6b88-24e1-472b-933c-7d4cee53964a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a598502-a24a-4809-9ea6-e5c967bc1326"
        },
        "item": {
          "id": "a74e4cc9-9962-49e0-a1df-e9d002cc1052",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6923bdc2-66ae-4b09-b76b-16aa273359ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74e4cc9-9962-49e0-a1df-e9d002cc1052",
        "cursor": {
          "ref": "00db6b88-24e1-472b-933c-7d4cee53964a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a598502-a24a-4809-9ea6-e5c967bc1326"
        },
        "item": {
          "id": "a74e4cc9-9962-49e0-a1df-e9d002cc1052",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6923bdc2-66ae-4b09-b76b-16aa273359ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74e4cc9-9962-49e0-a1df-e9d002cc1052",
        "cursor": {
          "ref": "00db6b88-24e1-472b-933c-7d4cee53964a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a598502-a24a-4809-9ea6-e5c967bc1326"
        },
        "item": {
          "id": "a74e4cc9-9962-49e0-a1df-e9d002cc1052",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6923bdc2-66ae-4b09-b76b-16aa273359ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3126bf98-5c32-461f-a746-9363143b54dd",
        "cursor": {
          "ref": "211f949b-a2b1-47ba-8470-43078585b99f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c5716a94-5d9f-49ef-8476-564e57f40b31"
        },
        "item": {
          "id": "3126bf98-5c32-461f-a746-9363143b54dd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "339eb9b4-5242-4fd8-b73d-b3a194f1df55",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb9fccb-7e25-4aac-8987-162e340ef8da",
        "cursor": {
          "ref": "fd6e7329-71c5-4ded-a4dc-073f129cfbcd",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "202dc28a-c2e8-48aa-bb6f-c53d7ae50ad5"
        },
        "item": {
          "id": "3eb9fccb-7e25-4aac-8987-162e340ef8da",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "462859fe-cacd-4d43-a506-268704f8dd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3eb9fccb-7e25-4aac-8987-162e340ef8da",
        "cursor": {
          "ref": "fd6e7329-71c5-4ded-a4dc-073f129cfbcd",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "202dc28a-c2e8-48aa-bb6f-c53d7ae50ad5"
        },
        "item": {
          "id": "3eb9fccb-7e25-4aac-8987-162e340ef8da",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "462859fe-cacd-4d43-a506-268704f8dd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "85420711-f1f3-44f9-9f31-39e216c93597",
        "cursor": {
          "ref": "ddd5b235-ec23-4aa1-9c6a-9d17a6f69f19",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a1b4e23b-930e-43da-a75c-213cdfe6a719"
        },
        "item": {
          "id": "85420711-f1f3-44f9-9f31-39e216c93597",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ed441c9f-dec7-48a7-8266-25d30026448a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "264d3611-4b55-4e6b-aa7e-dd5d47e9630a",
        "cursor": {
          "ref": "dba28aa1-4b0a-4514-8b56-5f73c51fee13",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d094cf41-2fa9-47ae-afac-4d6f1d4c541d"
        },
        "item": {
          "id": "264d3611-4b55-4e6b-aa7e-dd5d47e9630a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "731d840a-2853-4f57-a9fe-9c4d42230bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "264d3611-4b55-4e6b-aa7e-dd5d47e9630a",
        "cursor": {
          "ref": "dba28aa1-4b0a-4514-8b56-5f73c51fee13",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d094cf41-2fa9-47ae-afac-4d6f1d4c541d"
        },
        "item": {
          "id": "264d3611-4b55-4e6b-aa7e-dd5d47e9630a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "731d840a-2853-4f57-a9fe-9c4d42230bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "4496cc7f-8c31-4a82-a1e9-3f5748f4f414",
        "cursor": {
          "ref": "31fadbf5-8ea1-4ece-995e-fbc57b63369a",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1eabc922-c091-4a70-93ec-88dd6a013d08"
        },
        "item": {
          "id": "4496cc7f-8c31-4a82-a1e9-3f5748f4f414",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "416e63ef-103b-4f33-9c20-55a4b1376a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}