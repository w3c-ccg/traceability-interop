{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "21371051-da49-47cb-863e-d2a96a3f88d2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "78c90e86-3991-4333-90c6-0f2e12f8e9a8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27e89cdf-a640-4774-80cf-86cc2a87c9fa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d12011e4-34f7-4013-a170-91e3a7c36059"
                }
              }
            ]
          },
          {
            "id": "63d74a38-34f7-4eda-b621-29cc41b8d597",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ac29c90-c5c5-4191-9dc9-15b6bd822d0c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "def6860d-0536-4caf-ac67-980451cea2fd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "88557642-b4e1-45a3-8e12-287f2c392f63",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a4c5c3db-5374-4260-85c4-2fab281fc6df",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1aa8a648-07e0-4cc8-afed-f88f1dbd8a46",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7518969b-4297-48f6-be5b-f96866d4f882",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71529dc6-0934-4a41-bb5f-3337124fa0d0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "372933d9-4e7f-4a92-bb2d-ffe19eb47161",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "264841f8-95f0-4164-aed4-82c10e7617b3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cd4ad7c3-377b-4478-9a07-f6d7dcca19ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43c841a3-bedb-450b-befa-80dc1f805945"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24bd6297-171f-4452-8a3c-a68d13a13653",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c8f75090-bbf2-4a7e-b868-0cf81c7d67f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05a4c0ee-167c-4c58-b3d0-1d15ba603772",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abb82f50-6353-4d12-b62c-fbabbf0c6a66"
            }
          }
        ]
      },
      {
        "id": "ccd46586-6a0b-48bf-86de-ae3688bb3651",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a9865758-842e-4134-919e-95ea86deb182",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67707873-e78e-41f3-9077-a6cbe9fcb8c4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6591b7d0-4eca-4432-83e0-a44f30b8f902",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0691979d-6378-43fb-aede-3641084d9903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6de156a9-8fd7-403c-b9c1-84300709d717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b79336-69d8-410d-83c4-ae1b00b0b68c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f171bbdb-9729-4cc1-8682-926ae73829a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c6005d3-8f29-4cd7-a9e7-765e7a2b901c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846530f4-9590-47e5-a3f1-30564073b466",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d07b92-f850-4bfe-9d3e-50c347684ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1819d3fc-eeec-4456-b3ea-f93d98fec6e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1ba08654-b811-455a-8f71-61d615d5d14b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "612e7d40-91ac-42ec-9471-505905d55151",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a5bb25-e224-49b7-897d-5337fc3025ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7b677d8-f59e-490e-a8ce-5227b860e583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f615da9b-ba0d-4bd1-b856-180c847e5655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a1d52d3-f4c8-4264-bff9-0a778df77a11"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "88a0fa20-1dcb-4ef9-a2f5-754152dfc97e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4ca3530-4ca1-41f9-b743-48405adc9413",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e9bcf32-2fb1-4c21-8c02-58df340588e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ad99e629-0e93-4c5d-9ec1-bcaeda684abe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4eda1706-592f-4aa7-bc5e-fb649b39ebd1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "72c12e32-2b21-4515-8ef5-8cddf82de263"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5143dbc1-d4c4-4d80-8ce1-206632d53385",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3de1e6b8-1be7-463d-a44e-530fe4244602"
            }
          }
        ]
      },
      {
        "id": "ba61a82d-6a1e-4190-a9ed-c0f3dfb8adf0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "de64dc0b-bafc-4098-b0de-54d22aea937b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c630204-8587-4793-94d4-779c764f8538",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fcb17425-0249-4209-b217-317b06843ef7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e182cc-3d13-41cf-8d77-d385e7cafc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571e8379-6506-4438-86c3-8b12176b9017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d44f651-8df4-426f-be4f-dd20d07b5eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bb2b3de-50d4-477a-9cf1-45de1319948e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d05f6a4-b81e-4fd4-9587-fb0a229be49b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37aa09cf-46b6-464f-9373-f26dbc22c4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f386e02a-b3cc-4655-98c6-00f56b3bc22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bbe23a-1ee9-48e6-b6f2-a4d4490c862f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae667c41-d4f2-48bf-8980-515bf29da9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7f1217-b3f1-4cb4-acd5-4a260142bfdb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66662b6c-a204-424d-bdba-7e1c74b03d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecb88f0-820c-47ed-90a7-9a991b946dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522c5111-bade-4ce6-ac99-458739ada8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd3bb482-bc67-498f-b034-14576e094fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7702f30-3ade-4ffc-babe-a6bcd7e6ca0e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52a6c58-1316-48d3-86e0-5404a407447c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d5448b4-e5c8-4209-a182-50a2beb92d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf66dd93-5989-47ef-94f3-4f99a02451fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "748019dd-5ddb-46e8-91df-c8c1eb423ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e22df6-2ed5-42e4-a345-487c854e9b17",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2e941f-8717-4ab9-aea6-53975bf059a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86cf03a5-4f51-4a82-a730-f772fbde463b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91954760-5cb3-431e-9b82-948d5eddbfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "747c2342-b968-4950-9736-8c8b120ef56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb60814-037a-4162-91b8-5fcf9b9c24f8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4baae363-1b92-478f-9b3f-2f4093f09a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01edc76a-9eaf-4924-a4f5-479da594134b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987b65fd-7856-441c-ba66-993742464046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb14637b-aefa-4a49-bac0-e052ee389ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d82c30-99aa-43e3-bd1d-2d0a57d0946b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7168ac-ea42-42fa-a91b-4b16af168911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506d0860-109f-42c2-86d6-0a6a8f1954f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80463542-1b57-450e-b00f-81c35f50b1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d8e0cb3-9b53-417c-a16f-5059f56ec2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c853fd6-3b8d-4393-a66d-f0ddc671841a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11a35ad-0cc4-45d3-bb0c-644e8dbbb53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471e3fc0-d970-4bc0-b0dd-376d1faa08ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01146061-69a0-405b-91f1-e8056752c9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ab3c07d-b867-4367-832f-17e2f012e380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1099a851-faa1-4c55-bde6-c7f766c8fc25",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe900a30-3fd3-4bef-aa78-4e749c60a871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07fe69bb-96c2-4a48-82a1-619df902f37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ded8ba-74e5-4922-bbde-21471b6598d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "773f79dc-2551-4c1f-9201-890a988c85b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a822f5a2-2041-4b24-ad7d-fc1cb8d53b45",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffdab2f-93be-43e3-b8dd-9d634bd54423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196a0dd4-78fb-4438-9f5c-a40f5c4d596b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958297a4-b186-4e37-94d3-2ac023dd9710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dc07393-40d5-4e7f-b869-16e8e9e2716b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96a6a32-9b97-4761-875f-2dd93086d9de",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b97336e-8419-4d8a-aa19-080650482e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "869d0b36-d839-435f-a5c5-e347ab524a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3441b542-9d8f-4ee4-99ba-4d0b7262fbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80abdf6f-5a72-4573-882d-b680fb938c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c302af6d-2d50-486e-afd2-e77ee9fdefb2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4867a9d-6c38-45b4-b411-30232fa40444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8f3877-c188-41a1-b78e-496c8c85d853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305865f4-db28-48fe-a953-b52ebfc0f35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a3aa69b-ed5b-4f09-9146-fab03fe85eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d301bdd0-b5e5-42b3-bda5-e7f5f8ff0348",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1f696e-e0e4-455a-a5d9-9d99bc6be068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31361db8-f6df-4233-88d4-b658c351b10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87772b0-72cd-44ba-9b0a-7ef860681484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1352d092-8f98-4502-a792-9d557e036d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484232a1-d376-452c-9dda-3469b172b12c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78e14af-8518-40af-92a0-b9d2e0521c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff23b65-cede-46fc-b09d-642876b6d887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3f7cf6-82ed-4aa2-b985-4cbfcb341675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6b733a1-32a1-4d41-9573-028a2b78f424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33dca1b-1f94-4d6c-9ee3-4bd917844146",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470d32b8-7d18-4a01-bf18-d9c8a011bcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec77c147-b4dd-458e-8761-4ac2e72ef520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1626a0-76b5-4852-9aba-b441caba2502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2f373c2-b921-4cd2-9332-e36e69f1df3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e7cc3c-c033-4099-88f7-119c53da79ef",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54be2f6b-0f76-4b8f-8208-668656c6ad72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b30d6ec-cecd-44f1-8737-1febaf98a793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ad214e-a919-490e-9a01-bad54798b0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b7f4d46-010f-4891-a5ab-321bdd64d64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048d083d-0727-4d1b-950d-123965df72e1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e02cb0-996e-44b0-915e-1ea830cbc7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf522725-96c2-4092-9351-b75079b8ab19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3f0170-f277-4490-8ea3-38b73007b860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cfcbf62-7160-46eb-803b-5a083f0aa431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22dde069-25f3-4f1f-83cc-012332e81a3b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61fe8f4-f3e1-4cc6-989c-a4f53187ab37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381f386d-d6c4-4066-ab1c-7941cf3cdfe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f86777d-5e86-4db5-9204-4a511997637d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1543142-5ccd-41ca-a677-af0e64700771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5337ac30-6d44-4bdd-994c-3e7f1a953c01",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb75353b-65c6-491d-8f3c-32ee7639b2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988e6ae3-4b97-4d93-95dc-258165fd304e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3abe03-6d78-453c-81ef-84c358951a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34ca3908-c518-462b-901c-21755b40b09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7c3eeb-d71e-4c49-9d59-b59e830954b4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f0040a-cbfb-4e6d-9d27-167c7039c06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a12c05-efc0-4f42-a3ed-115f73f3fc16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee093b1-9ede-4111-bddf-254d98e33bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ba1efd7-a009-49f3-b6f7-21bd5efaa870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b633cd-586c-4cae-ae92-ebaf5ab4dd2a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07b02d4-98c4-4033-9cd0-5ad5f64d2856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5338232d-9867-43ec-83a5-820a63f236f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab65f12-6c8a-40df-994d-707c05cfae16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3def8a-e1eb-454b-b82c-993c6e04d5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85268f74-a732-4d0f-813d-0cb5b8fe8d3c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c6368c-bb4c-4196-a389-7ff355fa5b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609f02da-7b3a-4ce3-8b25-f74a515f35f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1f1b70-e55a-4d1b-bcc0-e8fab3a919d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4007cdf6-876c-4c7c-a159-28d756fa44a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc021fd-0621-4df0-837d-15065d652af7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbe4de8-abbd-4c9c-bc48-f83fbc0de671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1067409-9844-4ed7-b1bd-3c31783a2295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424423a9-dc8e-49a1-8aae-2ea060d422d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20dcd9b7-e3c1-4c9d-94f4-72ad3692531c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efac0ed-0f9b-4325-8f31-2f16726cc16f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e261ca7-894c-4cf3-8bcd-cbdd0bc7c10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8beb653-5a02-442f-9d30-1547a5c4d63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d894d8a-5561-440c-bbc4-fbf7d9b5fb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e3121af-524a-4c16-aa3b-af4ead7a3033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771758f3-b3b1-4933-ab7c-a44a77a9a192",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a47def-8a6b-45d6-8a7d-7e0397edb9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d68d4a-3e6c-4e40-8922-6a78ecdc08e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6bf6d9-e4b4-43b4-a5ac-d51a7a30988c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2543268c-8890-410d-86e0-37070c9bbbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2394f3-e2b2-4b1d-9dc9-59a680648bd9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94fc818-c468-4fec-8710-126ad5c9d37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "765e76ac-a183-4215-bd9e-177a69bd31a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55734a07-0689-475f-8b17-f5ccce1b4df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "649284ab-2d6b-4262-8a35-076581dc40eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59e8ff1-2fc3-439c-9f99-6a293bd2d6cc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b21e4d-3739-4f82-9a65-77252b6f83ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d04103f-8164-4a61-a3b1-f1bf8422735d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3312c2e-173a-42dd-856d-06ccc179480b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c239e1cf-2f12-4d18-b36e-2dfe4883e2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab94929-eca6-4275-8fbb-ee49a8796ae5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f04501-0a0a-4205-8b10-930fb4dcfc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc0cc1f-520c-4970-bc4c-22ef0fb7b331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d679dc49-2ba8-4c2f-b18d-c932f0cca02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db2fc7d9-1bb3-4582-a443-11e0cb54dec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1a0d15-ec7e-43cc-b3c7-8b0b07faebae",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81af25ef-f5be-45c9-95cf-8ff1c02e3c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be3a2e2-34ed-4d8a-b994-192cb3fcc14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08f3a1f-2d6a-4319-bfc4-d8e12194d2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "359b20de-7220-4bb6-b8d9-52fe4f66126f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0675a9d6-3d97-47e1-8f4f-4b79005f9279",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc94584-080f-43cd-8ae6-620bc8535158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902ffd4c-b1d7-4b8e-8466-f0b88197e091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5e75ca-bf5b-4f7b-b2e4-64396f85a9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f557073-28ed-4fd5-9329-7e0daa39d47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dba7402-437c-4283-ab08-ad31a4c7fa2b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3ae03d-eee9-4898-8340-d691a78b463b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c94d4e-760f-42b2-9200-3c4875b16619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecb41b6-681f-4b2d-973f-65e2217d634d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb20713c-9c7f-4392-9e3f-a29541ecac91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991f31a6-5740-45ab-85a6-f7fc25199294",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dd9201-65e7-474c-828a-9aa4a2c22e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45a128e-5b47-4bd2-b819-c7b86b4948e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a5e3fb-0f8a-4407-b201-cdbd192654a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5de4a7-17a2-4b9d-b223-4c2e54041e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37adb39e-54e5-45bb-815b-a8ff6308e6a0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5656e6-480c-446f-a29c-918ac61576bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7192d7d-9316-4dbe-b251-a087a6932092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026a4fbb-754e-4da1-876c-a335faf85a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bf71ca-1fc3-4afb-91cd-db2cb1626555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d28725c-c201-42b7-a4cc-83755c3b9a91",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9ed10c-4042-4c08-811b-5e2de17faa86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb24ce5-50b0-4197-8fa8-3eb3545bea3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57764684-8130-45e7-b0b2-8b855135bf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74508e6d-e7ff-4684-b82d-01c17316bef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd767d4-2023-4f26-9ffe-ee364845bf7a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e55337-9eca-48cf-bbd5-eb64c05dc579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcff533d-3a55-4ec6-81f7-4609a22e8e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74722166-53ea-40fc-901d-797f6075bb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1403dce4-81b9-40dd-a1ac-d09211a106bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9c248d-10f6-4ece-9486-6099afd2634e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d051b2ec-a692-480d-883f-cf37978cc37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "824a5a29-070e-4447-b40c-5aa730723b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739c5313-1a10-4895-b57c-7150ee9a17ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "faacbb5b-31af-4243-b6c7-f8c19737f44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8c8125-f00d-4fc3-ba85-b118ab1e741a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efea2cb-c7e6-4a1f-90bb-1f7369ca9cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317ec95c-7084-4ceb-8b86-4572f7b3b1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39e06f2-4764-4b53-bc28-2efb7c733602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ae4e75-0525-4ffd-ac23-d0bcf32c808c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84da261d-3121-468b-9bcd-ae9551d4e100",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74dbf22-3a2c-4d99-8a46-263263d9d868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6616743a-e245-4d63-bf12-3d9ac7dc4208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65cafee-cfc5-4585-a93d-35646a4aeaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd050a51-d116-433f-928e-f71ae2302446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fb5773-dc0f-4b72-842d-e4656504bd76",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2df9e3a-8270-4721-8ec1-d5eb69ced47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a09154-f906-42a5-a16f-e05944470405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4fe6f2-527f-46ec-b7b7-5d4b3a8af36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e7d829-b9c6-40b2-933b-121ddebd2e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0c6bf6-bd15-4d30-bc45-211e443570d0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc98fbb-4847-43ba-81ef-25d8b5429274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb37d480-198b-4aac-8dfc-71456b496ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba9d7e7-b51a-492e-8050-01cbaff04c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d90b65e3-75ca-4648-9407-b4b04d60250f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af56408-ddd6-4358-b212-75093294a6bc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91a6248-3c28-4615-a968-50bf7a537dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e628df90-b8b8-472e-be5f-ebaada285095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810f07fe-7e70-4579-998d-d53a179b7826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f61050c6-46a2-4a18-a0fd-ac9084a1073a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50e3df2-4cdc-4d8a-8eec-81841ce51e3d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b33669-c93c-4e9e-bfec-4670d44071e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc4218e-bed2-4018-8c6e-572b9499f6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a397a1-2479-4ed7-8636-12f1fc7c3a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a7bf15-b056-48cf-a3b5-906db8d63ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2194d50b-bb79-4f2d-ba94-6c6613598b5e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6185f75-316e-410c-8284-e368297aefc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc197dfb-b1b5-48ab-8da8-c7e641d066d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9386e8bf-c01e-4be7-8342-293517dccd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9073f36-dba4-4e8b-87a9-f19cdaf0b783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61b716f-fd47-407a-ae49-500300ffe1e6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff33883-738b-45e5-80ec-94ba8296297b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165720f7-db97-4f8c-ba0c-108c9625f8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5708feb6-8482-49cc-bb1a-c02861d32d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb92b4d-a26b-4e71-96b2-e402855763b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950a4fa1-f958-410f-8daf-e4af13f9d6e0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0ad740-431f-43f1-9b81-58d8deb5771f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4020ae95-e930-4c27-bfba-f12f773aaac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb80aee2-354e-4248-8fd9-9c4ca69fad3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b985bd8b-4bc2-45da-a15e-a77141d96e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7c35b1-7b34-4710-a54c-e0364a45f997",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a050a3c-73ef-434e-93a8-133a8ab49840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932ba293-cdde-4da7-a35b-e5f43aa5da19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc975c5-27b1-4d2b-aac8-078bb846e234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a68058b5-e010-4274-89a8-7ba3c11ff749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31267f49-2b6e-4055-96e1-0d82629768d9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68371683-4c61-4bc0-913a-bd3d7cb5cd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a3d432-9e80-482b-9e97-7e3e893d7e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1266f2b2-d5e2-4eab-a2e8-09c4fe295e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13f025c9-8614-4a22-9534-0495ae35a56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9e4f9d-e14d-4470-9af6-84a9217026d4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cfcb5b-b1da-4613-9662-f95c63fa890c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946d942c-e7e3-4266-9944-63a246263010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188a4665-066d-46b6-94c5-f699cd5bdf3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e110df8-1889-4e16-9fb4-f360228a3df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecdca3d-1a66-4222-9308-110b6429f4ef",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505eda33-3364-4ece-93e2-3c9dcbacfc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539692ad-a4f0-45a9-b998-001691e00861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd1ce44-5701-4528-af63-ca86de799016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bfbbc01-3a3d-436b-9528-d433c29a79b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b077d9a-8542-46ee-af81-a84b607bf951",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad38a6c3-3266-4643-8b1e-fea295a9ff0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37f2706-4e2a-44ec-8562-75f6faf3b395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde2cf4e-4f3d-4448-a0dc-73ff743d186f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39cd8431-fa7e-42e5-9aa9-767c8fb66376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4210bc-e5d9-445b-a4e5-8463ba43d860",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c18a360-63ae-4101-872a-621d87b52258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f22447b-96fd-4b5e-a062-e4458a45223c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effb9dc4-ea48-408b-a21a-cd1816b5f67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5083c67f-7ff2-443f-9e2e-4b91921ed1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd4a662-c47e-46c6-9e8c-2f4972727157",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b481516a-8c69-4c27-9d63-950ddd418244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c59bb0e-9951-469f-997e-8b22a905762d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa7c9c5-cb62-443e-8f36-26471df7d603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b7cfd3f-2aed-402f-bc0b-cf4a8ce8344e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d375e9-a3fb-424e-bae3-7fb2aad03df2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec44789-4d40-4408-a59f-ee458bdc28c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17571b5e-6bd5-44c0-8758-56eb084eedfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1bb20e-d0e2-4b6a-8bd7-8cf338d1fdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1407ef8-baad-4de3-aafd-607e78837d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708311ad-792e-46f4-8571-cc79052a8e70",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04ec587-077f-4f7d-a583-0b19835ce0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9fb715-fd97-4f4d-a3bd-3a6a918a19af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c04c13-8cba-4f88-bee9-b3686f45ffbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e213c001-b83b-4ad0-a5ac-25280d59cbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea63cd52-7093-4ac3-9735-039fe2eb2043",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b50fee-1a0c-4716-886f-64b8e1049395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74add55f-1702-454e-b527-0cc0611806c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4ca5a1-eb91-444a-b679-088826bfae3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0fdd25-6bfe-41c3-963f-e30dc8447e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc7aec0-6b40-436b-8a00-0b9393740233",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfaa191-1194-426a-8557-69b8301c62f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3b517b-179a-4b38-a671-be14ed57d9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dd04c8-40f0-45f7-a50a-2a214d822461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ba6e44-5d35-42b4-94f9-3a1993e28c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f440838-e9af-4992-9e98-3f4a960f9de8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c84770d-4d41-4732-bad8-66ad50bcb8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9613db1-4b85-4351-8431-94ee15b29e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa793bd-b99f-4908-960f-4a81bdc0743e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec07338-c46c-4129-a15d-0446d49ef866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ebcfe6-f11b-4b9b-afb4-652b9a40846d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85adc5a-e95a-45e9-a63b-f83882c4876d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4fa99d-d7a9-435e-b768-2b54068bf3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb426d9e-d9ed-4d3b-bd7d-36ab4b9cc679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "673fe3ea-a488-4d70-9351-4438a023e2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be53f9a-cb0d-40ad-87ed-4316d7c9dd11",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5064f3c0-528d-46d6-9c33-23e2928c51bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be9c433-6be5-40e6-b633-f89231083b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eeadaee-7125-4c1c-8e57-2e4d3906c1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e818006-89c7-49af-80d8-546bc2734fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aec42b6-3872-4d0f-9020-b46fa0c680fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b61afd-1ac3-4429-8dac-3dc7698a638d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2385fc1a-384d-42b6-8c67-340aea6023a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28877ca-2ece-4c22-8d63-e54c85c54d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cff9c40-962d-40dc-ac99-05da57189f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd38b68-640c-4b8b-b709-270933824550",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9979f4e9-0123-4f37-805e-180658eec042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de38e555-828b-49ea-8de1-ff9cee96a731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f165deb-1210-4edb-a38a-fd1cb58f9bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca61d7b2-73e3-459c-b631-d70615b3b58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db3ae87-0181-4429-9ed4-626f150f3e53",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85a638b-8537-486a-a7b2-d9f54e4de1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e008da-d887-4ca2-9493-4906a0f1588f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19a3908-a760-4873-b8e8-c2c567e7fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb56042-e94a-4050-89e3-6b9d9f4cc781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba358bb-3c83-4ce1-b0d2-772d68d67611",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f8f35c-6d97-479f-be49-69bca4b45295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d0049a-f6d5-4cb1-b96a-c6c80d9e1b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50fe633-e85a-40df-89b8-420c9b636601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb71335d-ae7d-4c32-b7f2-c1fb3b8fea7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6498cae0-f42a-4709-98ab-2b56206e12a7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c0a594-10f0-4ef6-be3e-c0cba0514373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc087e3-e8a9-4ffb-bb49-e140f97c06ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d0ff34-39cb-42ed-b356-905f0e61600e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0be4a5ac-293c-4cc4-9e4b-6f774d399ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedcb8c6-929f-4a5d-8b0f-cddf5afe2081",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003dcc96-979d-44f6-8072-1efb990cf612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0642eb9b-cb9e-4825-8e92-41d9e4a1dcfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4975258-ef81-4cd6-bec7-a15d4310e856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e971eb78-7a61-4a24-b1e2-2e48cec07bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2589380b-2c2e-4125-88d7-c2763e2d8144",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ead4b6-5f54-49ac-88d7-94cc2f3870d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de13005-0482-4418-95f9-606aeda3cd3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79c36c4-d604-4828-a47c-76547c8033f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e116a42f-0ced-47e8-b106-9929d1896947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cbdc33-7a5e-47f3-802e-7c8588720cb7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50e554e-45d2-47b1-a87d-3c1898a5070e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d9f0c8-395e-4ebf-a922-61c2ebf3e910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4426fbe1-5e24-4ead-a8aa-5407bcf5c160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d61d038-5a69-4bc1-9d23-bcafce1a3d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e408170e-2965-4535-8c30-073c7ffbcf0b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897ac693-2749-4433-8416-55b1c85acffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781cfd27-f9b8-4626-86e4-9413aac2014f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca1d320-c0c9-4c4f-8aae-c82e2573bb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2d48bc-69de-49a4-8de6-2a97bb8e526e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9316f80c-4f8b-4e6f-aeb4-4d1d3250bab1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697781ce-d75d-4c93-9fd5-cde2fd5afc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac81f00d-9d42-468d-a993-291b1dde7f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97851c1-0961-4bfa-a4da-52d7e8046e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "37b055a9-35e3-4fec-8d0b-84517f379c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de30289e-a6aa-4e9e-bd6b-3db4f6820f2e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e6f6ca-fc01-40ae-b4b7-aabaf2f8bc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894aacf5-6f5f-4649-87ad-09705eee9c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220baa23-808a-4769-8e6e-fdee1e9ad6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a2a55c-d15c-4dde-9354-cb4ae37533ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cce8cf1-9be8-401b-b879-2650c676f84e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "967ef18a-3c76-45f5-a74a-3e69c57e0273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86947a71-0450-4452-9627-6bbf1f0d87ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f243967c-085c-4d87-95c5-f0faed61ba1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e74c498-0dc2-434f-ac17-2eecaf6ce926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8a698d-5776-4224-88f9-ad656cf1e093",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf9bac2-4122-4103-aa12-d6b17ffb66f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a2eb5d-7f2e-43c0-a5e6-44bb5eaf73de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ee5765-fbd5-4b42-a422-e15564da7d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38fc0d30-0715-409a-a92f-bc3075d9ba4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655294ac-7ecf-497a-a547-a5ceb60bd698",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a96328-41cb-415a-a784-8b72c6f1a266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ff8caa-612c-452b-a8bf-5b00f3d1201c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6051e315-a184-47bd-a684-95fb46d15e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88069e3c-2200-44a2-9366-8253c5d823a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035016bd-1e53-44ee-9098-1043b6a9e597",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f29947a-66ea-4c9f-b4cb-2954a1eee6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75856ef-5695-42c8-8061-65525649b876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffaca51-551b-46e0-960b-f0f1ba3dc8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "865d3729-178a-4584-89ba-0375482d4efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248437c1-3ea3-49b6-8948-e58fb14787ac",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713698ca-9481-4982-b47b-ad3fbd4224dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d299ef-abca-4b82-b1cb-150001c9c648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1affa31-4eba-4ed6-8bd3-b08247e60b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e81d19d-9489-48c7-a10e-c194e97851a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989b2a0e-500f-4f97-9e17-304313a9b221",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8a6860-1b2e-4a5f-99f3-73cb8a9a7c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4959df-a6d0-4f2b-a58e-aa0aca5c16ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80d733c-b04c-4176-9a60-0dc6a10a03a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38aaec40-82bd-42db-8bc5-23c4af54fa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97847b8-c1a5-4a3c-8f4f-127fcf4c89e7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a7c160-a726-4d22-b37f-403f1b68c275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00be5fb8-a526-4921-95a1-28e72280b9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1e180c-cf9e-4dca-bf68-6b9d78a97908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c66bad-2159-481c-b506-5036678b707a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a4a765-cecd-4d23-a63f-d62b9d40874f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf699d8-8944-41c9-b6d0-eb62b8c842c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570e05a8-a5a9-4d42-836b-cd1d1d79cc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5df5612-c1e1-48e8-b5b5-0cf5829c1bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8764c74-a976-4783-b616-6d7a64672f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0d7356-c92d-4384-b2a0-28bdbe65a39b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e14d12-e294-4262-82bf-472cc94534fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ff20f2-bdc1-450d-b8c7-b71e91a8ded8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0b1002-8206-4605-997b-60ed6506bf1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a22ff02c-6e19-411a-8170-8de1a37e638b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b229d0-0faa-4cde-8360-4cabf3aaa43f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817afdae-bcd8-452e-8d43-56f59823cae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4975bd58-205b-45f2-8bf0-e2d501011ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d086bf-fed3-4e1f-8fbc-6a225a805d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69b7a5ff-0716-4e7b-80e0-40d52108bf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1bc947-5df2-4245-8021-235905415db0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776b26db-542a-45a1-ac2f-4e8289f350bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ba5e29-7b60-4d84-a944-ef704664ce56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c88601-dfe9-4cc2-908c-b5fca3b39531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f1542c-ebe7-4c96-b4fb-53027f813423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f2eb79-4de8-4ee9-adbf-d3b57bef675c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37da3bd6-8f17-4337-a7f5-3d94e377d881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572628bb-ef02-4756-a29a-4c2f432e7ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513c5e87-737a-44b2-bfce-6826284ebc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8293cf5-047c-4a70-8282-8b7e83350078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bee0d4-0b32-4547-8aa5-890a0dc9b1ce",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac6bc95-218a-4cf5-8612-4230758015a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cb1e96-0d58-48a8-991e-6b660ff6ef07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16d6466-c017-4d19-a9cf-0587f3094f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "782943a7-9511-4e17-a615-07680372a2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a415775-d88d-4643-bee7-f26ad7192838",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4face2d9-2ae5-42c6-9d59-a35fc5801be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f661d5b-3b75-4f51-b3e6-81f27a1bac28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1021d94d-e8cb-4b9e-885a-bafe71858f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47dadf8e-4ecd-4597-af9c-fa46c6087224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36dba91-db4c-438b-8d39-eca022b20aec",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1612b89-3df2-44bc-8bbc-1db73294ad21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4706059-1ef0-4918-bc14-3f52aed0fa28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a97f213-4527-473c-8cfc-ce04f875a6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "468a7554-92a6-4949-a099-5a03d20d59bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a254745f-aae8-480b-a197-68bc606d2124",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7b8836-dcab-4f41-8e81-2ee580fcae7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bab942e-dbb1-4bc5-b36c-752d24b78317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952284fc-d9c8-4500-963c-c01a77f08044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "646bb0ba-b4ed-4a03-aac1-a6576ea49954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db602acb-1c04-4985-af67-53079ab49e16",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739bfd16-0944-4f36-9e0e-596df5faf89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a7b313-1942-46a9-bcb3-c4304f68ec53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a358ac91-b380-4c4e-b562-a3aba04660a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "84541be3-abd9-4e85-886e-2693f879d50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f754337b-e425-4537-a181-abbe05c53be8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98a7ea2-254b-45cb-bd92-ab53eb26c8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407006d2-0603-4a4b-aeed-101a3f009c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1142354-43c8-4087-a69a-4e192c049b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3744b2-f7e0-40e8-b2fe-eed6f0ac1110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac1fd49-7c01-4e5f-a011-1b5c7d57d655",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cc9af5-5f43-4b4e-914e-aea213e5f449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f9369c-d7c1-4dc5-ba95-c44282adcd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d465d12-04bb-416f-beb9-83d3089c5ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "05f7810d-0f15-4857-ba3c-e33bae42da11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9e93e6-36a4-4dac-af51-524aa7d9f154",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7112815c-b940-4aef-8ba3-70288e3e10bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3680aff0-5df5-4c52-a1bb-509d31a479fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3e1715-55f2-4866-af94-215f94488750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "877c3d7f-7308-40a5-ac93-0391d65c03b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b9af66-0167-417e-92f9-8ec6cea0c356",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a08afc-3c3b-457e-857a-71f685fb86be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84214ac-dc89-4200-9d5f-1cddc110c8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3d8c8d-05d6-49ff-9127-d0eaf6d0f509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d16cd80-6220-47ca-a584-29d06c518dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d53b386-6e68-4fba-b8a3-a088ee43556e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e60a61-6058-4db1-917c-9db8a8eb13bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cc9a3963-efd0-46b5-8c4f-9d038bd40033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bf9374-6f9c-4986-af9a-47ed2bbb9e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6578d3ea-8145-4182-be3a-68e563316e59"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aab874ce-215f-4589-97bb-7298cc559eb7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34eb50c7-a884-4e4e-bedc-597424a02174",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea03224-3b85-4673-b90c-6bc6d35241a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02023bbc-8f5d-43e5-b93d-9e0809a9df23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4748951-d2b2-4913-a90f-04f13e8681b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e58db7d-72ac-45c7-99bc-4807e6965bd0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27008ef7-8ad9-4ef3-8445-5ed0915ffd14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95f8e6c9-42be-4919-b912-88fcec92bf5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e506e97-06b6-4b0f-813e-0e2300d07f01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e27a97e7-d049-4a22-860a-3e2e2d79f182"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f67a160f-5cf6-493e-863e-b1f6294bdb72",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f95fd17-e994-4fff-a538-39be93ed64d7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94fa4e83-6a40-47d7-90b2-1b8eb387efef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2069c93-e9ad-4c5b-add9-52c8a4b36922"
                }
              }
            ]
          },
          {
            "id": "85282b82-fac6-4f6c-ae83-cd358c6702a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6041e128-354e-4124-a40e-eb5d8482a9b9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "214020d7-5a66-4294-8c0d-20ebe37e3cb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a9bb85f-4181-47e3-a747-98d27b7de54b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25b21b69-df86-4291-8778-e14c24e2bc06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "307ce66d-322f-432a-8cd1-24d8cea8f544"
                    }
                  }
                ]
              },
              {
                "id": "25545259-9843-44d5-b823-9559b4b1f6b0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89af379a-8ee5-4bd7-a710-45dfd9a612d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1deb5d06-6d72-450c-9eaf-160cc2ddb10b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57dcce3b-9eec-42e4-8ace-0d38e1af7b86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe544e98-2a50-4836-af3b-537bb1fa5837"
                    }
                  }
                ]
              },
              {
                "id": "b46bd844-f0bf-4eb7-bea2-ef296239998a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8f6094c-65d5-4dca-9dae-dbeb71bd7851",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77dde851-7f87-4677-a639-118bf29e4197"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3df684e-f98a-42e7-97bb-e7a1ab4627a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5fda92ee-5da6-41e1-afaf-aed76eeae2a1"
                    }
                  }
                ]
              },
              {
                "id": "90d9babd-fc0a-42cd-96f9-4e9ab2e23b7a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8dcd998-7b96-4e85-a812-2ef06bb5c43c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49fbfed0-9be8-4e83-bced-1a3019298080"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a521375d-53a0-441e-8b91-b6e6874a21b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8a802fb4-45f3-4844-8604-5d1417d1597d"
                    }
                  }
                ]
              },
              {
                "id": "1cc82d5f-beda-4108-a181-595163b4f6d3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "155a8013-b7c1-4ad7-89fb-ae8481c135d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89b15d62-e2a0-4c01-b8d3-a2868bf045f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e3b776c-db11-4d06-987b-c3ed85b503ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9fb99f6e-6202-4af9-bb56-28fd2531a0ae"
                    }
                  }
                ]
              },
              {
                "id": "c372c030-b96d-4702-b520-4435807a1ff7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a4e1ab9-31d9-407f-ad37-ed80aec46b50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb40124c-5e41-4e6c-906b-61d1bc8e8356"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "329f18c3-0645-4a83-a55c-83474d81b6ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9efa0703-0cf2-47b4-a893-494bb6f964cf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f77bd476-63cd-468d-8ba8-b997ce64aa46",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "811e74ef-91d6-40e0-ae17-70c26d430105"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3b1aff47-c01e-4b2c-b327-7872aa0693b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "def9b19a-1333-4335-a98d-fe18a67908a7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d03a3cd-f37b-4ea6-a1a2-914b1cb02034",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "57116446-3356-43d9-b400-856e2dbd0731"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "717b7509-3f31-4cd6-ac20-bbc51ed1044d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bac01334-d6d3-423a-ba8c-d67325fb8ccb"
            }
          }
        ]
      },
      {
        "id": "3bf92a11-f556-4033-ac07-60bf4cc7fae7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a82de454-b032-4aad-b07b-902b37b2d43a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95429f01-d824-4f53-bbde-1294ca528349",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2f12c636-1ff0-420c-808b-0b666de9c79c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ac04fe-bd24-499e-a5c6-0ae69e863fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441bf225-e68e-435c-a7c4-d4521018534b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f68f357-7473-49d8-ae64-5dc25f3060ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5797902-ebfe-4400-ac1b-38f27941497c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40755d73-fe57-4a87-bf49-2329e0bc01f9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e809e9d-9b8e-4169-8b84-3192b22be81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f12351-3afc-465d-bd8a-9a6faf3a0efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d139f673-89fb-41dd-b5f1-0ca6923cfb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2020545e-4f14-493b-a9f9-406d13026b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e47e45e-4ab2-4ec4-bc7a-a8d384c4b38d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088eafad-8f7c-49c3-8009-ae47f6e8ba9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c03f697-9c99-432f-a72f-465c51e44946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ac7f32-30af-408a-9e0e-389ab144f73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90ed9e93-aac7-4f94-a034-6ee0741f4d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd37f78-6993-446b-b3f9-939d27776947",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1020f450-d946-46c7-b727-4078771ef9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb5ebb0-7519-4279-83cf-11d0606dcd8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014c482e-bd42-4eb7-835f-b077ee5c5c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ece2fc55-f74a-425f-9623-4291ebac416f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901be236-0e94-444d-bef0-b224784b2381",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94992a26-dac6-4099-a93e-70f60473b080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f32342-f48f-4f12-9b5f-5faf0428fa89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411b0421-c1f2-484e-850e-47a2c1753de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9acff934-2e26-4b79-a16b-272ceb1e6099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b53f2f4-b108-400f-b13c-40e034a06f60",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00af55a5-5d00-48d2-8dd7-10612ae5972c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb56255-5192-4d79-95b8-7a5f7ec15f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94af99e-1219-45b9-8c67-e4e2fd1cef23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7854b1f-d59e-4e74-9aad-c2b14f33ad03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12a0cae-9ec5-400e-af46-90f4a5181650",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fe3959-4dfb-432a-ad8a-d87a4991fa69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a807d674-fcd2-4962-af54-24c400b0d4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09aa2654-98b6-484e-b815-d5af59c5df60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1793fae2-34ca-45a8-baaf-4d5bdffbd2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec66d7b6-eedf-4a26-9656-49a56a5b90cf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf5435f-9c71-43fa-8f15-9856198cfb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d101a58-5c54-4925-a56a-0206c9d8eb98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c729aeb2-4ee3-4821-9691-d186a00be9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "233cadb4-cb99-477e-9b3f-ce91e3ed7c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedee0b4-a5db-4f70-8d50-e0ea9e05b13c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77389250-32ee-41e6-827c-f1d71dd2065d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1e04ae-5ee9-45cd-9e28-4160ff1f0f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7724d04f-0475-4a4f-8cf4-2fe5626035b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c936b8c9-ff3e-4b7f-b027-1a3bfe1edac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3033d09-1a9c-4682-a242-c47986357400",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798d294f-3cd9-475e-9ebc-0a8fe32bdb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcebf589-4417-4a12-9a46-2cf4858aa40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57e8c4f-1735-4f7a-a104-dface4cf892e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97aaaffa-e160-4c82-9bd5-b98ea548b9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01211df9-f29d-4cf9-9864-082fd8ab86ae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3849fc2f-d930-44d8-9370-07c39548256d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b035cba-c63d-4c8b-8bca-631400f0c4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4789369-ae49-4b8b-a332-4ed305e07820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b70be3f5-056d-43ae-9cc9-34b81597c97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35bcdd5-3143-4a52-bfe1-d0592ce08956",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f3fb6d-c035-4984-b553-cdc313be07e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0a003a-0d9f-4354-b2bb-2af15a226d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febaea22-fd41-4bab-b241-83026b07a29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df843ffd-2055-422f-853b-0872601a96ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c6503b-55bf-4890-9959-5b3b3b96aff0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c714ba95-e407-4ad5-806d-1938efbf5b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd03754-f4e5-4302-a492-c4bab7242ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e1df5c-cd0c-4684-800f-45c995430373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2af61917-5c14-47c8-b0f2-9070958359cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e56c679-f60c-4238-a1d8-4321ca1e3363",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c02bb0b-5f97-438f-b46e-810bd14451f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ae71ee-7e69-40a6-b688-31415359ef1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab461c3-4edb-4e45-8aed-4dcb185f5b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0c0e43-73a0-4774-b54b-a94aa485e35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c326f3e6-4c06-4d07-9647-88c1a12b8832",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729e1432-8f2d-43b1-992e-48a7cd0a0abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814ebc9d-abb8-4390-8fdd-11efaa6b7011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc83f90-42b9-4e82-9cb7-0023201c94d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "428def99-b5a0-4f98-9a10-9e15d1a1c414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c704f590-8dee-41b0-b671-fe97ad542274",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21535f1d-71b1-4048-b261-c6a2232e16b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7154446-1394-435d-b077-44fcc223a63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0640b2-4e00-451b-8e26-03d566dd3230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "960e6e58-88f7-463e-9f04-81ec8af313b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9595d75-d3d7-4ee0-8156-301f44d2e2c2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0d4155-6935-4b5f-8fc6-47e5e4ebd429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ad4055-4e8c-4cc6-b4a4-36e917bbc4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c27cfb-2ef2-4cf0-a559-8449d6003dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "79ff6df2-86c6-40d5-8260-e89803b6a361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d8204a-9e61-4fae-8787-74d35c6bd528",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c45971-473e-4525-a6e3-59259f7bb77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd627854-096f-49c2-99c2-a9206db7e41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb08c389-9f17-4516-810c-d5f6bf088d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "efcdf67e-0818-481c-8755-b76e723ca7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0aaff0-eb47-4381-95e0-b9bf46006dd3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a539173-26bd-40c4-9295-074b27d71892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29191705-85eb-4c1c-8d63-7a4113f21edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3814bb37-af4f-434a-b0a6-8682a27ad135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3afcce1-0e2c-4790-a9d1-f7c90bcfe7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9544e18-f3f6-4ce7-bad5-a4e1439d8a9a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503a3190-5855-42dc-bab2-76a3ac594b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4013d76f-7600-4131-af52-96bff549ab6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54718212-45b3-48b8-ac4b-0a9da2de9760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "497a48a2-e931-42c1-a269-30930c29efaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b8f975-fb13-4a13-a734-e59d5d98383a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23335c43-aeae-4547-b01b-87efb47adae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75f6460-68ff-4f06-aeb6-0fdd71a5b21a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85dcee6-203f-4a1d-8fdd-c87966bcb5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2008019f-f336-47ab-be87-482d84c24399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a6c783-98cf-45ee-a189-906b269e1515",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e61b130-8b74-42b2-86b8-276df156ba01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd545f52-eac5-4eb2-81ed-5b3fdcb6c876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c923baa8-2490-419f-88c7-1e8bedb7926a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd51352-d169-4f78-92dd-61eb3c98705d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c47e44-e8ef-4199-8427-04490bc7bfc7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc7f48f-66fb-4436-9ac6-b685c3340e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2c5a81-b610-4247-ac19-331f9b360497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038113cc-0f57-4fd0-bf21-b40846c35ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edacb88d-db5f-4199-aff8-40abfaf8784b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f520d54-a3ca-479a-9c55-807b7c3a64bb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ec47c5-f701-44e9-b95b-9d112f62a507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "876e083b-b7c8-4fa4-8575-7602af8bdbb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983c6828-b6a5-4df5-95a5-b009f22168fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6134eb2e-93b5-46a4-a89f-edb07367e7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd91530a-734d-43f3-9d5b-ca16c509d29b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8187b72-5b09-4118-93e0-aba0fe89e44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf47f07-8fb8-4734-b909-6017cee61435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acfb86c-a69c-4c5e-9ded-8f3d79483da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "740d10b5-65ed-4f17-9ded-e64aebccbf62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fe2b07-f4ab-411d-ab97-5bd6bb9b337c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe6bb26-4c60-41c4-b3f3-d83224c969c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451299e9-f9b7-480c-afc3-10c52e6b48ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1eedfc-c50a-4b95-a0a6-79dbf3af530c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88b8a208-428b-4191-aa6d-922c2426951b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbed3b0e-497a-445d-ac0d-3c4b70a7c02e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a9287e-d2a1-49c5-b3a6-973343e5f262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afd23c9-98f4-43e8-b3b8-8bbb8ae54a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00ddc1e-d3d7-4caa-9432-90d5f37b9a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5696279-5a94-4039-af90-c04d420f5f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e08e1e9-e450-4b73-a626-aedd788837a4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f22767c-266b-44a8-a055-6029d42ac5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989c00cf-5ff5-4103-a828-6abbaa2ea5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9b6503-0aad-447d-8b86-38127a5a8595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb35084-0586-4cec-86d7-9713c8ef5f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13567c00-baae-425d-9672-c08863e992ab",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915e5c50-5e4f-4afb-b8bb-608c6bbe51d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb079236-355d-4051-85ea-cdd2466d106e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef9d93a-ba8d-44d6-b02d-79e087f68b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daf13c7b-39a8-4708-9f92-fb9f35069b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf55fd7a-cfbb-49b2-a843-88473bf5a19c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee64a1a-8fca-47be-bbda-4a1c88a2d83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c1280e-b752-44fb-a042-3b444237e75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6974dd58-9407-48b5-9cb4-5871dc849b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c8763bd-5b6e-4ea3-b5b0-d720189d118d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e15bb1-72ec-485a-b8f1-b2562243ec81",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af17c5c8-434d-443c-9d0c-31c3515f0c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17251f0-674f-48c6-9685-ca431730dff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c8c518-f6f3-4738-8374-b21b7e507868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b27954-35e5-4908-9250-3b48e4d95da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87cf224-a85a-4af1-b321-04a9a2398740",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e9e7fe-0fc2-41b0-a5f2-f91d214fe3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52b2868-c071-4374-9ef5-0e356d212b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5f0e23-11e8-434e-a264-cc55cc0dab92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c49bcae-d22d-4fa4-a223-e8f500693c02"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c294d944-6cce-4928-a8a4-972fd44ce399",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa3d6d91-ccb3-4b85-835a-16e101a815ef",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222cac6d-c1d3-43be-a7f9-f847b33824f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b0aa2274-0e79-4797-b190-809703553f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b55a0d0-6e5a-4f75-970d-b64b3610c66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1d88921-a078-4b4c-bcc3-48d3c09da08f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77ae3ba5-0915-4e4a-b352-6bb2f5253318",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7e324b0-5288-44d0-91b6-eb9e94dd9714"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "461088f9-d9b5-4d4d-82f2-73283c5f0c71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb70e6c6-7732-41f4-a74c-eaba744c68a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d40d55b-8832-4ef0-b5ae-35bbfac492ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6512529f-20cc-4b3b-8495-9717af8e68e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb26d52c-6842-42a8-8b0d-0e06ba9ce7e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8238227d-68f7-4129-843f-45cfa818b17a"
            }
          }
        ]
      },
      {
        "id": "6ceb6c89-13b8-4c51-b712-0c5f1e76dd48",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2ad5f71c-9a3f-4ffb-816c-6bfadc0d5b40",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1478c162-6627-4068-870d-b3e3f476761b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bf2a6dfa-4d9f-4178-8c9f-120d928c5f0d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89db4102-a5b6-45d9-9049-5ec6de661747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6382bf-369b-4696-8fc6-63219f3ed79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b30263d-9605-4347-b212-405500beccf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9e6ec4-c63d-4bec-9f8d-2234795c387f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203c6495-b668-4938-a8d6-d6a53b9f5ed4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c36a0c1-a662-4292-a3f2-c630224605ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f526000-1784-4394-bebc-be9462c602e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04148195-c29b-4308-a1aa-bb9643d35130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "168ae2ba-ff1d-444c-a29c-9ee77de2feb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bc93e4-5f14-4a78-835c-950371eae827",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fe97c5-4891-41f3-99b3-738235ed6137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82cc14e3-6474-4d01-ae35-e814edefc3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee7b773-219a-4ce9-8ff5-31d101c17ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3de00813-e1b9-4663-b104-5ff52004fefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c031d1f-1840-49d6-84b0-c57b4004b1b7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504a7764-52a0-420c-9027-a30b9175ccd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02352e61-51ab-4bc4-8f1a-b973cd6ccc08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc404d5-ef64-4459-b5f2-03a1c70c58e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dce8381f-0166-4749-8918-28818af81caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05eb11f4-b94e-40c0-84e4-0800c0bf18f7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebf6d11-df4c-499f-89a6-7aef24b6eeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1da3e8b-7f4b-4cf1-8ef1-a694596a721b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54e1850-1a9c-454f-871a-cbe95d7238cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8473c717-75a1-45d0-86f5-af0083ba7b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920ade31-4ead-4b04-9f34-f4f36bf93d31",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b5570c-5d1c-471d-8be3-94173eebea95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d0bf72-4c25-4ff7-9734-07f7255f055b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a87f32-8d49-4290-a352-91b181060e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8eb83ac-6f7e-4e7b-bdb6-e35f9c470def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0494c9-9ca2-47c4-a8e8-9d527f6696cc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d531fbfa-adc3-4921-9f34-ccc199db490d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad95204-290b-4f09-9ca9-c2aff914fadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c6ba78-602e-467d-b6f6-f2544256ee30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab587bc2-8728-4943-be79-f2a0f066cae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1e9140-4027-433e-ba3e-c2732ed010ab",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d91a6f3-e575-4fe0-83de-34901dea67fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8536a6fc-3f5d-46a7-83f6-b4d6921aa707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41ab650-7c19-4268-9b2a-0901b8b0c584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c84ae93-7c41-4f16-ad64-6166acba3e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502c6800-fc7d-49a5-ae6e-c8fc3d27d7f5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e75cc38-0d70-45a5-abd6-f7dc747339ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51a8cc9-2161-4fbc-b632-b07ac0c6068f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f15c91-2b3f-4d11-b0fb-eaea95f46b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36fe9e92-87d6-41cd-98e5-c7586206140f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed59583d-5d18-4e0e-8a91-e4d737dc157c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be554b39-e12d-4e4c-ab41-65c7fd97b486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bdd4ad-4687-47c6-b2ea-3146a2650d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbf5fa2-dfd8-4e18-ab50-568cf850bc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e01da59b-3d06-438e-81b0-a32c3267454e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec9ec4f-85aa-4ca4-9b05-a157be038939",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4e4721-6cf9-4468-9ae9-9cb8566daac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53688cff-f07c-4a16-bdf5-410a6a7feec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944641fa-b856-4429-9158-cff705b62838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e579ba-3c25-457a-b59a-716c6353decc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec44036-880d-4404-b381-709a7dadcc2f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f13ef3-9e89-4a02-8210-acf0c63a39f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c59f0a-2f63-40ae-9eac-af21f1359581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235107f8-74d6-4924-98f1-6ca24432d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "107d15f3-1b16-4499-8043-4fb3ae185312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8a48ef-5256-4077-a7f3-c57c78ed20f1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb4a5cc-0277-46a9-915e-d03bed62c35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c60a259-8c31-48d2-997b-407896069120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb7ca7d-19f5-47de-a9ab-5dca8b9ac936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6453aea1-8ddd-438f-b340-fa3baba377c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c03927a-50e4-4c34-91b7-c1c0e4bde4cf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389f4a4f-6b4d-4baa-9708-d5653485790f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4163e69-d688-4591-9bb9-7d742f983194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29d2855-6be6-4e83-8791-18064c9699c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "569f150f-2592-4834-8ac8-5de9bf3afb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacad289-fb74-4105-b44a-3d34ef76fac4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b16e59f-3132-4eb1-9551-644af5ed6ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0eb2ca-3b79-4c3e-bda7-47ba830bd617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05a6a38-3096-4423-a487-b52836c41ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b05e059-7e80-4a56-9d81-0759db90a010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b67c38-cf4e-447f-b719-a1e508c32fd6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1938a6-5784-4e55-9a21-7085ce919148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff73b893-6ff8-4e7a-a15a-08f0fc50cb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec8a30f-76fa-4007-891e-cb6928277c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc63174-d8ce-4177-ace8-f41dcde17b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd788197-d41c-4338-8086-a6baa00750ea",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56de3a36-e689-4821-b82d-01610569a3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39afd3bc-0a49-4e6c-af6e-40add35aa274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95ed854-a0b9-4455-8954-1f2f073b5e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "83433934-a46c-41dc-8e83-13846ee407ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf0e7d9-0fdd-4466-ac2c-04de263779ba",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c884dc-f207-4d27-adb1-9dea90e177e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78ddae3-fd3b-4c43-9901-2e68cae341e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9426a348-32ef-424d-95d7-26a400b93f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1697a53e-2cd5-4816-9efd-da32d7b39846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ab7b7b-31fb-4b05-b402-a6629720ad10",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36d4064-f4b7-4102-bce5-b7a6f1bc4e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee5b25b-93db-4f0a-8c9c-5f0808f3524b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272ff6d3-b642-4390-9062-21ebe659c47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e8745e6-486d-422e-a9de-c0e5a836389e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa61d20-4766-4653-bf09-8e334eaed331",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bb57a8-73e0-470c-949f-381799f193d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd701aa-da2b-459f-959e-bcd10da0e962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdf976c-e075-4636-b19d-8115ee8746fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6dcdc5-4eaa-471f-b686-e339ce49c1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fed1cb-a68d-4482-b56a-2a09d2de9d44",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce38b87e-135d-4c00-b85d-f083139b8a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c136a0-c276-4486-8c1c-42fa826e0dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae440b8c-a745-4983-833e-7fd17712c38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e23168f7-dd35-44c1-902e-7d98c8deff30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bc7691-086b-4ece-a9b2-07e64f9f58df",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b480832-cc0c-4c79-89cc-d4f37a65c2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aace58a3-48d9-4609-a992-82b7149936e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0389be-8f6b-4013-b0c4-307ad19d4d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b024970e-28b1-4ab2-9499-ec0ac424cafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00e6fae-91ca-469a-bf0a-bccf4bff1333",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35899b9-9b8c-4d7f-b121-f7f1eaf142fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f431044-5080-4af5-9f90-25f4fb2ed8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9c4767-3567-42c4-b5f1-8a54d6c62949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc9f1ff-8f27-4936-a90d-936c66187eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb117235-605c-461b-8123-d84f9362b33a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d5560a-2869-45eb-9758-4e8f2f1a6709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b529de-d8d4-488c-b958-7e472d3f7df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a487fa7f-a8b0-4aa3-a763-99895eb01644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a622d77b-4f3d-4290-ab43-3acffa1531ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e98b8a1-e705-40e8-8b3e-4682dfcdc9bc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c2d0c8-5c7e-47f7-9d5d-630b6edf0566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55157a19-c72a-4dd8-8123-1288fe127d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82df77bc-8e95-4a94-9c65-01a3805649da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c464f5-a529-427f-aba1-bc3e9e9facc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542af3af-da20-47eb-98e0-65cd9b3d4a9b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d178347-e1f0-40fb-9428-75cc3f6f5f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2945be29-d34d-42b3-ab0d-b5b0b4eae1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbeb41c-cdea-48f9-87bc-5edec881d6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9c1f0b-1818-45db-9db9-07c1b3da3ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d4abb4-a9e6-4f9c-8b25-52a386376e4e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1033de-ad2d-4d92-9c54-5633eddecab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5b2183-cae5-477e-b699-1944151155e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e398a9-f36a-4913-bddb-bdeccc796389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c6cfdb-1eda-4333-98a8-be59000645c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4f0f1f-7d1e-4c4e-bb8b-21a477c144c7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae4455a-6cca-4aee-8ac1-fa4209a50987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9c1b2c-1d37-43c8-9a3e-c98c4c048d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d284d7-5e66-49a6-bbb4-7cb1a11f1463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d998fc95-2724-452d-8c07-2da6106c2366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436fbba7-90d2-405a-a761-1882126e7381",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479acfd3-cebe-4fcc-9de1-9e144cba875f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79321e77-f8c2-46f8-9ca7-c450691b04f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d07348-239f-41b2-8257-f93740d47adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "631e099b-dd24-483c-839a-aa4bce0c53d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e874320-80bc-47c0-aaa7-521c0fc71fb9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb4ad2a-164e-40ea-b320-68e709d056db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9230da8-6fbe-4007-90b4-f5b07223f49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10fb67a6-206e-4324-987b-e0b55ccfbd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af2225eb-9f02-4625-96e6-7aecee59df0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7782a6-fc40-4b5c-8bc9-b4f2c2c1e294",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039abf0b-aecd-4379-9930-3e5fd88bcc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf54017-1e1d-4092-a4ed-6c8023d69b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96949fc-6354-4ba5-b5ab-cc1711e8e43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e1f3bc7-73a7-40dc-b24b-65f1836343d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0501e61d-9265-427b-a930-8f3259e8d06d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6685562-f754-474a-8c52-6ced2320feda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e15f71b-97fe-4133-9e3a-daa955818b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8abaad-460c-4bf5-81fd-c86c80ea3b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d80511-813b-42fa-a4bb-3158e90f8fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7077d160-beb8-42a1-9e7d-d7c0d655cac1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d26662d-a4ff-4568-bf9f-6693474ce322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215659ed-b6ea-4b63-be33-5ce805a2b10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b5451d-fc63-464c-b8b5-fea46bff7807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54217940-b942-459f-9377-60751eae5d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c33bb7-a34b-4561-9be1-f6e04391b54e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0281b3b-eab8-4265-8d59-3dcf205be98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3eccff-d649-4261-ae03-06dc0d48dcd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbd109b-739d-4ef0-b148-6bf64f55fcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8e079c-1c8a-49bc-98bd-86dcf13a94da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55252216-371f-4cc5-8b34-f9e3d3dbfc42",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0791d2b6-6eda-4acf-bbca-ec89904fb8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52bb7f3-3962-49f5-b7d4-d34d841b53ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1924f94-3992-45f6-82aa-b1fa19e514fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1afb836-80bd-446c-b420-33ca0ad6888e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276629e2-9097-45b9-ade8-4c21d67a9ab7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cd6ca6-5609-47ee-ab1b-ea733be235c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5919a23c-73d4-418a-8ce8-59e9d55abd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae3618e-9986-4b0c-aa17-7ba2a59da651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4f35c5-2414-428e-9bb3-0dabd2be091e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba27f556-e29e-4371-ac75-048497adf1a6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd36ace4-58ed-4e77-81eb-eb2f262888b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612e8845-09b5-4539-8b66-4e10861c0b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db074e4c-f3e7-42bd-9850-670693fb49dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e55d74c7-5005-4bf1-b9a1-2436fe774b6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "38569e38-8553-43b7-92d8-d68951fcbe4a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da61f45c-871d-4368-bc01-2109e1e9e715",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d8d843-1a0e-4818-b0f6-4eb273967436",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f4cef3-9e54-4e35-8c6c-d761dd10f653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0b238d-46bf-40f1-91c3-11292522e0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f5b74c0-131c-4bee-8b27-2667306fb6b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f69c873-4255-4ae9-8a7d-46f7db99fcbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4c4e5cc-87f3-43bf-8a3d-cf863d9af115"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "349333b6-4027-4b92-8829-30d629d7ac95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76c56608-75d5-4c22-aa75-4501608671af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fcdb2cb-78b0-4a29-9a16-8a96929694f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5cbce584-1ec0-4db4-a1f7-f6b68ee5bc7a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9da67d67-955f-4bbb-aaed-206af9d8f24b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3bf33010-5444-48ce-95be-9a3775fdfbb1"
            }
          }
        ]
      },
      {
        "id": "80f965f2-d3c3-4375-adb0-701fb04799aa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "33e0650d-4f52-4865-89a3-c5a956a0e8e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85c29d2b-2755-48ce-94fe-7c308b4ba354",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c3d14869-29be-4ca9-a8dd-cfff7106e564",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7190a7-359d-4ad9-94ff-099a8eedff2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b373333-8870-4415-8e06-f3c901cdf4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19839102-0326-4bb3-8c5f-d4d0566f557b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80f143a-756d-4ffb-9efe-15cf9182506f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dcc8eb5-65ca-4fa7-90d3-61792bfb7766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633a95d5-3aac-439c-a171-615010c5a177",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841a4b58-18c4-489b-ada9-b0082fd0117f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c98bb9-db01-4776-8976-cddb778736b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55eb2144-3856-4ddb-a55c-24fa157b4864",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4375aa4-05af-4d2b-9579-004c38dba4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd5474c-fca6-4113-9e7b-a67364ba5bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033ca11e-5762-4554-889a-fc5aade463c6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49afdefd-961d-42c6-8d41-17d00b09902f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65b459f-e7b8-4171-8fbb-77d5fe4be6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b924491c-987d-4af3-9879-a263603d86de",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31effccb-199a-499b-820b-7956439e2e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa45542-7fc6-452f-8f95-87ff8f70446d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e55871a-1216-49f9-99d9-53a4847777b4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db1995e-2625-454b-ab1c-460ffcb9f18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35646ded-1286-49d7-852b-9c50e49c251e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64f5f53-3fee-4d61-b156-0e6061cea7d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81dfcfa0-82b9-4412-917c-e578d962cbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a086494f-d9fd-41a9-aa19-20a592685162",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819546ee-e90e-4852-8097-1debf1e98c1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56eb7a47-eee4-4798-80a5-6f895f5d8d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6a4ff3-5c4c-48ac-9c88-e82db2b5498d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f72c3d-7608-49ce-8420-a7761ed6076c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def14828-47bc-4104-a994-bce00667b696",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec88351-cd20-4071-bd13-60c6b0592b63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67c3fbd9-408c-4858-9df6-c0e79a185137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7941e42-4905-4b10-a3d5-1c12b3179e2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a5c776-d565-4c59-80d5-cb765582b1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeba2363-2a06-4975-ac3c-88138a05c2e9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feddb7d3-f7ee-4118-9cdf-848f8ef24d06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7af96c0-1995-47dd-8a32-f7b9679f60e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d553716b-428b-4150-bfc8-7a24616511dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab79f175-4b60-48ea-8fef-b989a5773c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd59412-86f3-4322-9ca2-937a4a6b433b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472802c9-a932-49a4-a233-17a62d4ecb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bbfafda-9b06-419e-8d2d-d8b4c59c487c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82e7c33-9774-45ea-baf8-f55ddc2895b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e54c1d-5c55-49bd-b4bd-2dc892b91baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e448cfe1-597e-4185-ac78-f2febecb7338",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58aeb55a-5084-446d-86a8-6cd49ae9fea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da13190b-414d-480c-a561-d1855e93f97e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74801d55-5183-46dd-b22d-90e2bbbcf10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b13624-105b-4852-bf61-ed9c436de189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4108fb-06de-4a52-958f-16a69ab4c7e0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1bee16-e168-41c6-98e7-e2a3003ba5f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8dcee19-9e81-4c70-b71c-37d8194b1da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ced24f-a1b6-4884-8dd3-a809c2b634b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc74dcf-69af-441a-bd37-ae894b450c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7957268-267b-47ec-9b17-fe0adb7fa841",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f263a65-ae4a-46a2-ba59-d97fcd6092cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bb26a36-0b2b-4f99-847a-a5922ef60d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2488af2-5af2-499c-8ae3-661eb0241487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7e0483-b947-4cd5-bc00-0db643384a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93f79d4-8dce-41fd-aa22-f55a484a8288",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980db39b-86d2-4a1a-9c94-a58e82c11585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d220692d-7b45-45d6-afcd-026ae6fa3d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5436e010-9ec8-4744-9c8c-b7189ef22e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921f9e20-8437-4e31-8942-f1d839fccd65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ed3119-99f3-4cac-9e26-6edd9d8e0471",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f951912-8d7d-4e95-8a1e-c5b8025c6be4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93a571d3-3a91-4a6a-93f5-2e0514f9eae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc0d709-3c2d-44d0-b825-16e958848f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8772a92-5115-486d-a589-9befa5a446bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb274d23-32fa-4f61-baab-f0aea047e070",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d18687e-e467-4bf4-94a7-d240ba8d9160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6bba57-d12a-42ce-8b1a-ba1d6b5e6454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33be6d2c-fa74-4aa2-a9a2-ecbfa6bdcf67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a05efb-7936-4c12-97e5-1b9a6d46f8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f638b1-6dee-4ad5-8933-13bf1adc1654",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3a0d9c-2c65-454a-b7e1-d9ce35b54fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f490248-2078-4768-8ee7-bd2851defe66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f3fe86-21dc-4ee9-9520-bb2bbad1a288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23fa556-a781-48a7-85d0-ef6772ea34e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690aaad7-47e0-4ea4-a217-6a03ae9d80af",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff263a1-6579-42f4-b30c-7a6fe6fcc49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57cdd0f6-4428-4f6a-8d57-024094d99bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a58c37-8952-4959-88e8-29ec089276a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a475c2d9-e873-4ed1-8466-e65984ec0bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f44da0a-17f3-463f-a033-c35e7f055248",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94076f9-073d-425c-85bc-680b60cb67e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757f9ef9-e14d-4b78-9805-8a4cceb9e3e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803b55a7-42f9-45ac-aaa7-6976d3e2947e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc836371-ebb1-484d-bcbb-61779ba2bc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719c9460-d108-4799-b596-262324d8ac82",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d1295a-daaf-4c3b-9550-149aa5d2f556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4715a5-d961-4a23-91d8-bf55c421f5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6e02e7-a6d6-4f23-89aa-c05a6d70d165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f93677-7427-4fd2-aad3-4544097806e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c766ecb-f32a-49c9-8013-a8b0c391d9f9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b6690b-430d-4099-b26c-70831f1c3f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc531fb-b91d-49fd-8491-9fc9f838af6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52530364-8718-445d-b84c-27160aab358e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1f4575-c4b5-4756-81a4-9532caec5dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dccb31-9895-4a3c-88b9-1ba6f20463e1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214822b6-2f40-43f7-b9ca-74512a4e2461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d239385-55b8-4bb1-8aa5-295b3cffbf5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba3c7cc-d263-480d-894f-0df071cfe7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d60d4dbf-9ab3-4f5a-af78-aecaed7b085d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55512d84-04fa-4545-a420-cac3975fb917",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed18a79-40b6-40e8-8566-35247154aa32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14840d64-7146-471a-b68f-3835a176747f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a61879-9f7b-4525-b8e2-a09b19286a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e31152b-7a92-4d00-bd15-dc66afc49485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a7e044-72c9-4573-a7dd-d02cd0feb1eb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2f53f5-1cc0-4b5a-a63b-a7e55fee8acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d111035-7515-4470-b711-39de3f4fba29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c81eeba-0b79-435a-bdf1-f7bc7df9d939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a068a0b-bfbb-40fa-bb3d-d94389b893b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ec9ed8-8a4e-4e1e-a262-49bb6c48d692",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcb5bd9-f166-4567-be74-6cbf7f823e55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee293298-ed49-48ba-9bbd-7f3341b6b6a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1cb473-b800-417a-8e8e-9ac8627ddaf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a90126a0-41d6-41a3-87e3-71d28f4cdf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8001e25b-8daa-4027-86c1-02b0eeab225b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66880696-00ea-4c5e-8942-8ce08f849b49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd33c91-5b6c-47dd-b50e-7f3233a66ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba5f4ab-d487-4b67-a8d8-5f405f5cca30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42003e25-fc91-4e87-b86a-1093c5619f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e9cc10-3aa6-4ef4-a3a6-49303322e417",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21166f2-1149-491b-b1a3-b20277231b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64588752-bb84-4dd7-ae83-ddfa13381497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b47e313-2907-427e-b975-834841bbc63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5df910-cb90-460b-b03b-345a12e8fa93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070fc974-2849-453b-858b-331997586155",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58112491-1ac5-4f5d-9715-21add4456a48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba2cfb11-f843-43d5-86e7-d8dc543fc058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6699683b-2ce3-410e-b2cf-a6336c31bcb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3614bb4f-4c05-475c-9324-f5b6309f3a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912ff69c-db61-4155-9937-cbd4e03add90",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619ebddc-b9ce-4450-b864-1d19d9aa74b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1efe742-20b4-4f74-94e3-31b1537132f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f065420e-1506-4d6f-9dc9-0091727b40bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f8dcb5-d9f6-4254-9f28-3fc4283e879c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba2ac01-f4ed-4610-9338-f8efb15a0202",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9487674-6e39-47c6-b39c-4b485de1f7e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "455ebc53-5a6b-4d14-a41f-6d74973e778e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dfc53c-dfd4-4d9d-897b-88081faa73d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc92a988-2307-42c2-aef7-a2b21f271a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57246ac6-f10b-4392-8dd2-ddf8f3b6474c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c22dbd4-25b1-4ce6-a3dd-5ee6dae3204a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4598196-934a-46cb-bb74-c6a80f346b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b857156-2bb4-4443-acab-ad2cc488518e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8f2380-ddbe-4680-a375-3ba472932910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5338780-8e35-481c-a9a5-7cd125317bcd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82da4df-c9c9-45b2-96d4-314da3ad87b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53f00fad-0146-41db-a31a-ee779a8dcdb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3f1cea-f214-4109-a0f7-564e8f3742ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655fd48b-f2ad-43ce-a0f0-3ea1585a139b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416cebc8-95b6-40e2-9d65-8e2f7ade451c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8f138d-deda-45ab-9e9b-e47ac438f2a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27b0d214-2ae4-4aa3-98cf-1b679ed2e1e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba75ee9-fdc3-457c-862f-8e9d0351a653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad7caf2-73ba-490a-a7e3-06fe7502f876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41735ac-49e7-4ab1-a209-992ebf6a51b5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4ac946-752c-4f72-8d27-ec7d69852bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7323d631-2780-42f7-885f-6ab4599d908d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85cfcc4-9fa2-4909-a228-5f984d591f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe5e086-34c0-4b34-8843-12f1ff6cb708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1aca29-d14a-4ccd-977f-110b0a7b98fb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57a6c65-d283-40ce-8fea-6a129f4d4896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fcee73-be42-4354-b7d0-dc963a00ff90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb4625d-6c64-4787-934c-841647684089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85bc7f4-297c-454f-a648-4b5b96f00e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f204455-0758-4943-97e4-b0f78c697558",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2390aa9-fa31-4f06-b198-31a5fa25d817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb682a3-f257-42d0-9a57-547d6b8492ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1f8670-9845-4541-acdd-bffffbd0e061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca91ff8e-c3c5-47ae-b7eb-c48416fa662f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100505fe-d3ac-424b-bd18-284791b96720",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d939c5c7-2f70-40fc-bdc2-778b23e36e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e7bd88-aa68-4334-a820-7cda15fcb2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40db5ca1-7e27-4722-82aa-7d93e1f67f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d5137f-63f6-47d9-85b0-434450525817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9f97ef-43cb-4c5b-9d8a-decbbf95e6d9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6310da5e-1fcd-4a76-8904-d9c768b4968d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3cba4d-7ca6-4c3f-927d-fcf81dae57f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "156cb856-cc80-4ac5-8227-a0f4ec6bf407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1258466b-eb07-4a97-b536-12082209a747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70336c5b-0e6e-4725-8cf2-cde3097e513d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d705d60a-d39e-409c-bc5b-05b2f4e834f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5fffcdb-c13b-4b64-aa7b-cfb932fa14ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cec537-9aad-4f4d-9e72-4bb8c80a23b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e84d43-1c44-4345-a37b-6ce46bbddd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f24736f-fde0-4d34-a908-acf45568f5e0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e99e88b-2cf0-443d-b047-6a699f223ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1859cc6-0174-48ae-9a4e-a167ecccf257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee69a96a-f403-4aa2-9101-2f631eec3a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d92ea1-18e8-4c55-b7bf-5fe54aeffa5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bb8db7-e698-4c2a-9b63-c7517a3ccfd9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e5f5be-acf6-4ca9-a026-08cb6cea7b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aaf6e65-dc6d-4b02-9804-9dfa1d7c3bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8016ec47-bf05-4ee8-82bb-27084c3a9d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb73663-7b11-4540-ab98-3198f6a3d6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336ef0f9-36dd-4fa0-a153-730ada4b7eb9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7228d850-cb2d-420b-b712-acda022a3ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab0c5de-85be-480b-8dba-4a2c902c0643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb7402f-038e-493a-af11-fc449857a06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6785a5d4-de1d-4199-972e-dccadedf81f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c01c5d-b123-458d-b6d1-c63a3ba9a1e4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67bc4cb-88d1-4239-86cc-e2c5ec7c9718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e20010-3ccc-4623-8406-d368bbb74c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61cfed0-9368-4ee2-9330-307125ebd9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c2d65a-63a6-4985-803b-2a488641575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f4c6af-2822-42f2-ad85-2bb08734e738",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f4175b-ebd4-4ff5-bff9-c921ce543666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad913180-5298-4f07-8f91-ddb98b898ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5077548-1282-42dd-84be-ef6a24c0012a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70561d8b-746a-460d-8632-5a6530b029f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421d1735-5daa-4937-8b70-f966faddace0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f34036-00d0-4758-b632-8744704be54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78d7162-9fdb-4e81-8c0a-132081793509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44901c2a-1e86-4120-b3f8-d8bb81421a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd01110-3704-4bff-9c08-8e2793e4dc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a37bede-0997-421d-bb07-f0e11a0e8740",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfa6c7b-44ba-418a-9f2d-3b01e4f50454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9446f794-a7d7-479a-81c7-bde4379d3dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e99c488-a8f7-499d-b982-24afe78f72ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200d404d-4661-4581-a25b-1f84cd9b5a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa05287-c3ca-419e-8b0e-76b8ecc983e3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f16ab1e-6eb4-4a20-ab16-12ee0e48745e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10c7cb9-b8ce-4305-b8ed-f944a320bd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b2a9bf-25ce-451f-ac32-1c5d05948503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34068284-3de0-4dd3-9320-e4fdca4df8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369e7276-4598-4425-837c-0cef1fcd09c8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd8cffa-7bbb-4330-9bd2-9340eb2550d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b028d0-f229-40a5-9fae-98e8857312d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6daedde3-8560-4dea-b271-ff67808694ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc9c733a-5169-4235-b5c0-c19162be3962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed59421-f30f-4e30-bc3e-ab539711ac08",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639b9ef7-2e15-4fa4-98f3-a1f270c0725d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239aa4aa-9218-4510-9b09-8a54006b3473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f1b7b8-4d03-4ec3-81c6-e401659e751c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52a97e3-d26d-477f-b996-788436b75242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dd7f4d-9976-40e0-8859-bf51f5113595",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c86c016-b10b-431c-a4c3-65084bc4974f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae20ee2-bb55-496d-b5b9-cf3202f99fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36e01e8-de71-4d6c-9f7e-7fcd9c44f09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca42936-8da0-412d-b43e-39136a65813b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c945826e-ce23-4160-ba7e-accacf459993",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7eac09-3aff-42d2-bb07-5827a0c290f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf8c6ead-e994-428b-97d9-b8fabcfdfd0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6ba384-102e-4357-947d-8942d2176ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38000f0f-eb21-4af9-97e1-4496141f2407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66565993-b592-4c3f-8d20-680e36cb1280",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2db3c5f-20b9-49af-809b-e9d487673c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbaf7c83-683a-4bab-94cc-98c4cd803511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fa9168-d4b1-4ee5-af52-51964ebf6211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe9e9c2-ab73-4563-a2a3-ec452f6af60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04560ce3-c1df-4156-8c3d-8e592723e46c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a05feaa-0371-4ab4-aaaf-4dbbc214d854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b532535f-db4c-45ec-9b7a-61763a887b0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8737c25f-4f94-442c-9431-cd5d8a10bdc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca6e47c-68bb-454a-aaba-bf7deb629029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc2ca65-8e72-476b-9f81-cad01d84792f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f418b72-7d48-4cea-8256-4b2072ce6387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5cef885-2912-45d3-9e74-da067d30527a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bfed2d-f28c-4edf-a835-93d8e8b72277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23757d65-1a11-43f0-b789-ceac7115f1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4046a89a-dd56-4082-b285-9eade0bb4f65",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3a0164-b21a-4f5b-8fcc-a264ea9e2f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ffb5d15-d122-4042-b1f0-75408d02352f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e6d124-350f-4b10-8d06-1818c73daf82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e26df63-bcce-4ec8-aa58-d95eacf2599d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20510ab2-786c-4b97-b396-f045d3ac0883",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299438e8-fccd-4017-8546-18419dd58296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea89749-58d0-44d6-a9ce-1495cb74560b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b025ea5-9bd8-4d48-a742-8884fd5f46dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149bf5cb-7e6c-4a44-8252-743fc5f8642f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0244f536-4e19-47fb-aa57-85a20f4ccb78",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d548f44-0848-4a50-a58f-14b455ed28a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a51857-80e4-4fac-b871-f02d85f9058d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40be6cd0-6243-47dc-a916-38377603ea19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284f089a-aabb-470e-b364-31456d0fc8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95078795-f916-4754-9ea9-63993ed7828c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8eb70d5-8820-46f9-9700-41c4629ff335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7459e7a1-3b7a-4bb9-aac1-420f742794a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48192bac-08d9-4213-9b58-b7e7fa3c9328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e448279c-a5f2-409b-94a9-ae0d1662a05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ea089f-74d3-45fa-9ac0-3a0142476107",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320556e3-b62b-4ede-803f-977368779fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11a68d6-33a7-4372-b1b1-d60ecfd0fabf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe86138-8103-4026-b181-ee90dae04679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d0b378-0bc4-45b8-b90f-624a851b037f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f63d00a-3dbe-44c4-b298-696c55732f4b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "babae705-8a7f-4064-a561-0dd9cca82d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052453ff-86ec-4e0f-ac96-75783f2440a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dd290e-dbf9-4809-aed3-a030733502cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae7a4c3-c3c6-4e0a-b28b-57565abef80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6d5c56-b0aa-4580-8575-e0fd45395c89",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a336a418-bd7c-4450-b7de-c30ddd58549d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b1eacd-8587-4a59-a6a6-94abcc6ccc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ec7944-9fbc-43fc-8411-d40661df2b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8394fefe-b315-4e4a-bc18-a61f8803d898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1427299-3444-40e4-8d7e-5f63ebbbca55",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da201d87-74b6-4f70-a258-f61b4cb0a093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb4cea9-f224-42fe-a9a7-d910d44ab1f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "780ef9ae-1fee-49e9-8507-278634a931f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9d1810-1c88-408f-9e92-8ed484132dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1db0c2c-1cdd-4df3-8dc7-fe1b58c4e8e3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50669845-f4b3-4277-aef3-d1214793c7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "612af7e6-7138-4510-8958-d19d2098fe3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "224b0cfb-97d4-466b-a468-1fa95ed064a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514bb792-3a8a-44df-97c0-6fc72b4792ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e1bff7-b84c-48ea-a566-0e3b55384abc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c56354-e375-4d33-b8f9-af683b35179a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed80f4fb-9f40-4ff7-97ba-0cd55ee95780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37566a7-9e3b-4929-8c02-e972fc0b63b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd1db83-9905-4d11-b601-271b0cec9ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ee0985-9e13-45e1-825c-42f6c1f4b452",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d648cd7e-02a8-45bf-9f77-cea7ddbe3153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d1b48c0-0548-4311-87aa-a8ec4dc6fda9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86693943-5b21-485b-b05d-2db95120a952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e43113-65d3-4e79-8ba0-f3ab63cd9a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1dee38-69f9-455b-8c28-4d804c1386da",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b23c22c-015e-447e-b081-1ef4b9244086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62a1a2b-997a-4e41-bc38-5289f9beb937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb9209a-9668-4ac2-a38f-028443c02cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66aa309-55d7-428e-938d-376953980d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800bdadd-ebd1-428a-8aa9-f64b0ed3c9a9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e21c2c-0715-413e-b7c2-3e879aa06692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9967aa9b-14db-40a9-adaf-a994b7a5a086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a747b7c-3aea-4b75-bfc9-d61555d1493e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b135b6-0115-4ee7-acc8-5031af97f52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f433d2c-ae7e-4e00-a8ad-6926f52f565b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc406f96-7094-4e8f-aa5d-71f0707e5535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa6bc414-2e1d-4ce2-a82f-38dd465e93b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d47c30-8602-4f9d-9412-cd190072de54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40c062b-5c70-4fd4-bc05-b132b3fab85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968361fa-b6ff-4b93-8367-69ebc999aaee",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a04284b-5c0e-40c8-a436-a29a74ab3c5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f4f36d1-87d0-4eab-9072-bb6e9eb5f54f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba5c43d-e8ef-4c01-93c8-565ddfd476f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbff8dd3-e086-4c3b-838a-cff00a68b084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66ffdb6-aeb2-4df0-881d-4e1fff2db261",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011bf52a-b91e-4639-994a-37473523f216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f3f98f-93fd-44fe-b2b1-59dd37a0ff01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cfe9cb-5d2f-492f-898c-f9f8881505f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5462c2fa-80a8-46c4-8081-b4e15102926a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89337cf-3b5d-4eb9-9f3a-2228f414be47",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38339bc0-f592-4a3e-a8bf-3c72a19ad5e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01f0db17-3840-42b6-a82a-f2c75c076335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdf9c3a-8d16-456f-ae24-9e7ebd0b3698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be0124c-4900-4f2f-85fb-a6a111072d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650220f6-f249-401d-9b7c-dfc5c812c8d3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c06472-5cec-4723-88d4-75caadd896e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca8ed20-477d-4115-b12a-be10018e0bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5548219-edfc-4a78-87a5-fcd9aae51ee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac37c25-8dcd-4883-9f43-e6da96a795fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5686fb72-e95b-4085-9a2f-a914b2fb7828",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8130032-ba71-4ec0-99c3-4941447d772b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceac6eee-c012-44dd-a381-5d83320bdc26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613be5fc-8f1f-4fe4-9c0e-0adb7cd77d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a1198e-543e-4fa9-afd3-7f24a1bfed28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1491d3-6306-49cd-a740-bdcfddbc94fa",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4513af-809d-46fe-8e16-d755a541dbc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0e54c8-cf8b-423a-8d73-eb68798c83f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43823fd3-1a52-48dc-a269-cea5807e6f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ae519c-8dba-44eb-876f-be184a6c1245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159c7123-eb54-4852-b480-e79103443c2d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957ac765-b8d0-411b-83ae-faf6a2871cb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55882555-8775-4da3-be70-3cb462940b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b65e57-e44e-47d0-b5ec-16545c60d384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d173a0ae-8504-479f-88b0-c465c5db629e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2fc679-f633-4c78-a654-16305a07c526",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f07a0a-a5cb-44a3-987e-9e3e0a767218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "862ee788-5c8f-43b3-bca9-f7d546b443fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e99419-caee-4ff1-aa44-1a69e2340cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb899c3-c511-4c1b-bd05-201e3158cb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fbb2f6-0711-4c88-b87a-7130c74d5c4f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a978e69b-01f6-4293-bc82-6c2bec31d293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f6f17d2-077e-4763-b584-1135456052bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3157b0-b790-4ba0-9b8f-9a38b84303cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b6e8f3-8987-4b2a-afed-f5bcb938b407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623a9a27-9573-42d6-b5f9-37e48fc30222",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409bc0a6-0194-4180-bce3-2d22d9b5793f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "866d895e-f62d-4f3e-928c-0f765c32f4e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc25a663-f818-4187-8887-8a2af6d493c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378c9419-8823-4665-89e1-72013fcd7c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bbb07d-32da-4f85-88e5-876d95bb0ea4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a46b2b7-0e00-4687-8c17-2b41b42d8d5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da564ce5-9dc1-4fbe-8a2e-75b6a9c6392d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b13add8-cd76-48a7-b464-f8eef5966697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a601e7-7330-41f7-afce-bd9ba9d0b845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf7d395-da1b-4851-aab4-46c971cba925",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709506ed-9ca2-4f93-bc80-540af8193533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eada427a-e8c0-4a5e-a886-ce9602f69c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7135970b-a162-46be-9282-646eb2a3fe8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf8aac1-5657-4c2c-a767-647294f3b80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9cd2ee-b502-47e2-8d58-a0dd54127592",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7744c493-7c37-46c9-b200-d73109ea02d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "647a5f33-9f67-41c3-8dff-1345e4b5d136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae02641-ffe7-44d4-af6e-060287ba3fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b966a20-d988-4e86-b46f-9a166224aff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6240c87c-fcba-4aba-9354-447aa744db75",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b985dd26-4a97-4dd8-8def-842962f60a5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73f77599-ea1f-4bf1-878a-c6abb690a4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a87c64-511f-4307-b6f5-0a8a5d13b634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a17704a-3690-4a0f-b872-6ff522dd958c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cadfb63-292f-4b84-a553-a6278f649bcc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf12762-88e5-42f1-8743-ba8b978e6077",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9044150-c437-4c3b-82b7-cb4710f72920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7445d4-ed75-4038-96ef-5cd323026eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac40092-e787-44b0-be71-00fb32e735ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81459b93-86a7-4e81-b74d-04ceb2014d1c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0a9935-f33d-4cc9-a6c8-f5dcc3cb3899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "756ef89b-57e8-459b-93b8-86280c8a57ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1c6a2a-e213-4137-94d1-1eb2ec577dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c8ef5c-5254-4cde-b9cb-1c9aa86fa53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d32b0a1-3cea-41d2-8db0-d2b4a71849ad",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cff8e01-6ac3-4327-894c-6041390956c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ba9efd-ddf7-45f1-a888-4067e0cd7cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fb7139-264b-4fd2-afba-9636a6bd7ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ce477f-c6d3-491e-aea2-249db3367117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a312c8-ebb3-4793-96f6-45a1cc42411c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23214716-ced1-4b51-8599-0a3d6e698d13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db2bd2f8-6cab-4db2-89a3-5a6a6234fcff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e9efca-69c9-4769-9970-dc1e3500ddf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a149e1a-55aa-4465-9dbb-ac407325100a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1de6b4a-e884-4188-b204-1c91a7376bd9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb0b77c-c111-4c06-a3a5-407544d15f33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3eb045b-67f2-424a-a34f-8cb8daadc35c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef58c3d-d39c-4a6d-b614-3675afa14250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfea7a0-2df2-43fa-9957-a472b0ada3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8c4cf8-0f9e-497a-816f-8f7d74fb0061",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2360012f-8067-4d14-9906-115f98858a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16776cd7-ac48-4b9b-a2b3-93d947a25b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e70f851-6609-4972-a968-5d9c9924e3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45167bad-be54-4565-a028-17d326ffbc8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb03731-63c6-4952-bbe2-69861c11f1ef",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c39518f-4a7b-4fbb-97c8-e38e06b1d1e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c317d9ca-4e62-4371-b438-68f4d5bae473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc974b95-ed51-433b-97cc-1095461be266",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a203e36-fa71-46db-9463-75569a05fbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f8b227-98e7-4ad6-a062-36a92f81aa28",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57da7b77-96d2-45a0-a727-a30ba5d7534f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "badf1633-dde9-4d29-a7f1-49b30f7f81f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7d49a6-b655-4103-a108-0b4498d99a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b37c27c-906d-4fca-9bb7-7bebc730b5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc856c6-4cbe-40af-b528-1541f1cc1318",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35ff6f2-1afd-439d-b907-79af1f037921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff0c4680-4ea9-4d3e-84ce-bf2f9f3e2b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c065caf4-1218-4150-8d16-20ce8e242c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b2194f-63d5-48ad-9792-2d9c196fe2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ef1a9f-3fb6-4c5f-8324-e51e10af497a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9440774-58bb-4e19-a013-70796e685d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63de6814-1fa3-47f9-a24d-ccd1361b8a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760f55ff-0945-40f3-8b4c-33b0fcbda90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911baf37-0b34-47bd-86b6-d6a4aca152e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477cd695-805d-4b9f-a4b3-d2b21d019d8d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2742df38-b1b1-4e14-b5a1-218ae2dd5b84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cccbd632-7bd4-4333-ad31-d67c62b4265d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6080bc00-a24f-44f6-8165-6b7c2dbdc107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aae15dc-73fe-45ce-bc07-a31f4c91f5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746a3fe9-0916-43c8-aafd-da60a90b1da6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcf7fef-fe46-4af2-b954-8eca7739e962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ce94d99-e3e7-43eb-9d53-42985542cf41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc00c282-1687-41a3-9a01-4b7d3e9bdba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7b4d3b-a9ff-47e0-86b8-7c5dbe214996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d07a54f-390f-47f8-95c2-f32ef8d505e2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc73036-ccd5-460e-97b4-f7fbebd292ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5172918-f147-4464-801f-ab22b33598a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b91b71-e4a7-45c2-ba8f-8f730e4ae80a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8addf8bb-ff60-4b4a-8bf7-c83b7e187b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1f57a9-c590-4a8a-8639-ea62b6a1687a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05907c2b-ce9c-4891-bd89-f5df16fcac88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5c6501e-9b06-427a-b70e-2a186fb1953e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4922e3-66b9-4f98-887e-2be2b887ed86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2997b37a-25f3-4069-b703-0f029399aaf5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b3b5851-443c-481b-b9f8-2e24a748edb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cd27341-5a29-403b-a6a9-7250a68f5b7a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb849726-f25b-4d57-a552-eaf375404caa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac729959-7a63-44ba-9641-7c30c0884b47"
                    }
                  }
                ]
              },
              {
                "id": "af2da261-83c4-4aa9-9af7-35bb28cdc432",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8bfeb4c2-5b89-4aa4-9ec2-1538f52b882a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7fa0f1-2b48-4e8d-ae59-bc3b72e8cc57",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8ba5f562-9758-4c5f-b474-7f26939470c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a44103e-eb7d-4057-904e-4acb7a94cc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "204f1ecf-bde3-4508-958d-4f5bb1fa75ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6b08b0f-339c-4c48-9a85-06d4d5da4cd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79d990e2-aac2-481e-8931-bf96bfd8b9f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccec1527-721f-4a4a-a4ef-2dfb98c0d250",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb40f87a-cc36-440a-a42d-4308c8b8d8bb"
                    }
                  }
                ]
              },
              {
                "id": "11190fc3-9d9e-4470-9054-7e905fff5657",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d03eea00-a5ed-456a-95ec-e56962b7402e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d7dd03-a488-4623-b353-2180fb9bb703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b49177a8-78ec-4237-a067-aeb85b4500f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251f46fa-85e0-4f22-83a7-f9476dfdca52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbb9ca5-9036-4c62-b52c-458054aed065"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "32fb7042-e1fa-4cb0-883d-c787a94b1ed5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f74bcf10-e16f-4b2c-8694-0091fd32da40",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1204f67-4eb3-4e39-b5c2-82183e24ae07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "543798a8-b0fe-4b6d-a540-8d04e454c5df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6821fd9-499e-402a-989c-ba12a3b64ae8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d1b8b27-c2b3-424c-ba24-0fbeaa432793"
                    }
                  }
                ]
              },
              {
                "id": "060a32be-ec94-4841-9a74-51cf8211650c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "716aceab-4faf-4a1d-b34f-33e28f1ab7dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9c97b77a-f165-470e-a8bf-636e8bdc7468"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94caeb56-a4e6-45b1-bfe9-272a14446f06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dee98767-e992-4810-9ca3-0289e069a21f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0b2fd78-69c1-45c3-8877-3fe427079d16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ff8a719f-2749-4394-9c99-4880307974a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5b59a25-ec7b-4cfe-be51-47139c72f48a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "461950de-81bb-47a8-8c16-e30da50ad1c7"
            }
          }
        ]
      },
      {
        "id": "05ab0007-2c16-404e-a54e-2caef8a945b3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cd43d162-e2f7-4d58-9182-c9d7781cad87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c7e6a07-8204-47c4-ac09-8292caac7814",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2838f334-7b12-4439-b156-c3a69cfff535",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8dd91b7-3f10-4e26-b9d8-dcf1eb8995a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6fa8cfe0-24cc-45fb-bf91-38f0d8da0e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c16b2db-4202-44c7-a681-a9187a1be1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a39d85f5-d966-405a-9b89-8c55623b7cde"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46e86adb-9c87-4195-82ac-19ec19956450",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94bb9dcd-0ecd-4f07-8e1a-32964ff3be94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91d68c42-5161-479d-ae26-2ef8f0e0de98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bec1c78-ed6e-4713-aa84-37a8cf9a8f40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "926bdb28-327f-4f1b-838d-3d3cec8ef01c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c6f5265f-45a2-42e0-94ae-91cdb28dbae8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01292ed6-032a-46e6-bdae-633dbaa4ca61",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bda898d-7880-46a3-87db-a46411f3580f"
            }
          }
        ]
      },
      {
        "id": "1fc77bf1-a154-42e1-b1d0-e75d0f6e06aa",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "69727d26-69ce-4b75-bb9e-2b5be1efeeaa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4109da13-8c54-4f60-852b-cac06c78b80a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cc44209-f474-46e8-ad20-4b59ccf955c1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d10fb1c-8170-4ed4-ad8d-76c2062f230d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5247e6eb-3703-4a12-b7e3-12d1097f9069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46c06e7-0763-4ea3-92de-0ddd7595fd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9d9f76e-e5b2-4aec-afed-d0c47f1a5daa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "056c4e6f-3cc1-4587-95d1-c742d9470248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eae6bba7-f9ab-46bc-b1f8-f716c2c9a738"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6703ba12-5d4d-422c-b986-d7e4c9738522",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c30631e-a33b-4587-8988-dadbcc7fef8f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45d86f5f-bed8-481a-8215-c6465be5e294",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "221d3d16-7493-4132-a30e-1557d550ca2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72aa85c1-bd92-4052-b619-8031f27e678f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "847b130e-5c4d-4c29-8ba7-576c8b4849b1"
            }
          }
        ]
      },
      {
        "id": "fe087c86-90a1-4588-a62a-3139f19b4c8f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3eb1e48d-d176-4657-a082-c9bcc4e4732f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f47be31-84bc-4bfa-9400-5909d1f11308",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a0a0ea9-e11c-4b9e-9cb2-7cf01bd8a3db",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ef02fc-7fa8-49bf-a820-67b3cc4f7d24",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f96e7b1-19ed-4af8-b6d9-25924538ac73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c55ced-a3f9-4944-9246-d1cebd6fc3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "406b3753-0858-4450-8198-ace5def3915d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5987105a-9858-4bf1-9010-198741594bef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0b1dee5-ef48-43c0-8304-a681c2dbd65b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e360f4cb-f8b3-4614-9aa9-609b3cb729c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48dddd11-0d44-4721-b015-e1390822b999"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efc60388-961a-46bc-8cca-4be672475722",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60b7f5c2-7d29-4670-a2b1-af68f2eec0b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8614e39-7c24-4bab-a88b-10ddcd55cf9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a42f70f-cd76-49ac-9eb3-42f3631419c4"
            }
          }
        ]
      },
      {
        "id": "fa59ed46-0552-4acc-9854-672ec4a7f576",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30f1652e-4249-45e7-ba5b-75acbe80aae7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c8b3f1b-569d-44df-a800-a6259e7f5973",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "49d6cb58-22a1-4b24-b687-6eb84f3b4f03",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d9f879c-570d-40a3-80d0-f15b7b85daba",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b90db91-dcfe-43c0-a1af-7078e19ba436",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 159.42253521126764,
      "responseMin": 7,
      "responseMax": 2202,
      "responseSd": 251.09208859889003,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692577923969,
      "completed": 1692577984584
    },
    "executions": [
      {
        "id": "78c90e86-3991-4333-90c6-0f2e12f8e9a8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2a749d71-6466-4be1-995c-433a964a560b",
          "httpRequestId": "9f06cc1f-44dc-47c7-88fc-229ca18728d4"
        },
        "item": {
          "id": "78c90e86-3991-4333-90c6-0f2e12f8e9a8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "69d1bc7b-2355-4d4d-875d-1e4ff46038bb",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "63d74a38-34f7-4eda-b621-29cc41b8d597",
        "cursor": {
          "ref": "b13c833a-1467-4a35-bcba-98961ffd4c89",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "756b2445-2120-4792-a2e5-b7443c022ba8"
        },
        "item": {
          "id": "63d74a38-34f7-4eda-b621-29cc41b8d597",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "91ab9f66-0066-46c5-9dbc-bb768ffb7a5a",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1aa8a648-07e0-4cc8-afed-f88f1dbd8a46",
        "cursor": {
          "ref": "8e91b493-763c-470b-b0ab-174bf919ecc4",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4b1dbd24-b965-402c-a604-6b72dd35d629"
        },
        "item": {
          "id": "1aa8a648-07e0-4cc8-afed-f88f1dbd8a46",
          "name": "did_json"
        },
        "response": {
          "id": "d4397c24-cd71-4934-80b2-a99550328fbf",
          "status": "OK",
          "code": 200,
          "responseTime": 473,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6591b7d0-4eca-4432-83e0-a44f30b8f902",
        "cursor": {
          "ref": "499f070a-b33c-49e3-85fa-21380d55f9ba",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bb3c68c-7b6d-4964-b2a6-e78f822c10a3"
        },
        "item": {
          "id": "6591b7d0-4eca-4432-83e0-a44f30b8f902",
          "name": "did:invalid"
        },
        "response": {
          "id": "daa502b5-352c-42a0-a077-32d86278ee04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6591b7d0-4eca-4432-83e0-a44f30b8f902",
        "cursor": {
          "ref": "499f070a-b33c-49e3-85fa-21380d55f9ba",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bb3c68c-7b6d-4964-b2a6-e78f822c10a3"
        },
        "item": {
          "id": "6591b7d0-4eca-4432-83e0-a44f30b8f902",
          "name": "did:invalid"
        },
        "response": {
          "id": "daa502b5-352c-42a0-a077-32d86278ee04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b79336-69d8-410d-83c4-ae1b00b0b68c",
        "cursor": {
          "ref": "ff58993b-41f7-42c1-8a7e-3eca39514888",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "76d5268c-66b9-46cb-bab0-903927fabc3b"
        },
        "item": {
          "id": "05b79336-69d8-410d-83c4-ae1b00b0b68c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c16a6b10-4d36-47f0-a596-56531ef97adf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 150,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846530f4-9590-47e5-a3f1-30564073b466",
        "cursor": {
          "ref": "04a35f57-66e9-44f3-b0ab-971adfac5fd9",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b06214b2-e8f7-4b80-90c5-67f9b1097900"
        },
        "item": {
          "id": "846530f4-9590-47e5-a3f1-30564073b466",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c50d8c4e-e7f3-4591-be63-73b486ce1413",
          "status": "Not Found",
          "code": 404,
          "responseTime": 104,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612e7d40-91ac-42ec-9471-505905d55151",
        "cursor": {
          "ref": "40734a1b-0aa7-4ae7-84c9-93d8920fd21c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cbdc95b6-668c-4b88-a878-3061c1ecae19"
        },
        "item": {
          "id": "612e7d40-91ac-42ec-9471-505905d55151",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3f021f7b-8e0a-4437-93f1-d481ea16dcf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ca3530-4ca1-41f9-b743-48405adc9413",
        "cursor": {
          "ref": "1b0f32c0-928a-4363-b84f-82c4cc7c3980",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "16a82d14-42b2-444b-8284-dee9b0f52807"
        },
        "item": {
          "id": "b4ca3530-4ca1-41f9-b743-48405adc9413",
          "name": "identifiers"
        },
        "response": {
          "id": "ef405780-328b-4cd6-9361-3a015f316c20",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb17425-0249-4209-b217-317b06843ef7",
        "cursor": {
          "ref": "60d63077-db6c-44e9-ab2b-d782254095a9",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4c5dcfa1-dedb-46ff-bcf7-9e261015bb84"
        },
        "item": {
          "id": "fcb17425-0249-4209-b217-317b06843ef7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "17617561-64f1-4f66-a9c9-0c5721aa8319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d05f6a4-b81e-4fd4-9587-fb0a229be49b",
        "cursor": {
          "ref": "e4820342-5dfe-412b-b63c-7e284f4f41fa",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2b19bd92-ba5d-4031-98cc-8d018efe092f"
        },
        "item": {
          "id": "5d05f6a4-b81e-4fd4-9587-fb0a229be49b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c1405877-c8a7-4c80-a766-ee65c8a08fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7f1217-b3f1-4cb4-acd5-4a260142bfdb",
        "cursor": {
          "ref": "47320303-b2b6-4934-8a9d-57dbf775ff1a",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cadaf5ab-2b6d-4795-a85a-104cdf4da71b"
        },
        "item": {
          "id": "2d7f1217-b3f1-4cb4-acd5-4a260142bfdb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "356230c7-f898-40f5-823b-6a56d5ab92de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7702f30-3ade-4ffc-babe-a6bcd7e6ca0e",
        "cursor": {
          "ref": "c8f33b17-fd81-4d05-9039-1470593b5248",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "71b407ab-09bc-49a7-bafb-ce3440350f78"
        },
        "item": {
          "id": "f7702f30-3ade-4ffc-babe-a6bcd7e6ca0e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fe83430d-ba63-482f-84ea-9d35bea05f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e22df6-2ed5-42e4-a345-487c854e9b17",
        "cursor": {
          "ref": "310ee84d-8e0c-4838-a8dd-0653e1a91d27",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8ba66396-2712-42ca-86c4-e52291a28153"
        },
        "item": {
          "id": "e9e22df6-2ed5-42e4-a345-487c854e9b17",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f750bcf3-ee8b-438f-baba-91d608c94a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb60814-037a-4162-91b8-5fcf9b9c24f8",
        "cursor": {
          "ref": "4219eada-6dbe-45f9-86c8-4bd5e221bf66",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7f1c0109-f1d6-4031-8aa5-5b5e26cc3c42"
        },
        "item": {
          "id": "1fb60814-037a-4162-91b8-5fcf9b9c24f8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7839a96a-3bf9-4eeb-8948-abe2ac2e4235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d82c30-99aa-43e3-bd1d-2d0a57d0946b",
        "cursor": {
          "ref": "d5b71c24-65b1-43cf-a03d-907938f8c022",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d6be1967-aa68-4af2-97a0-be2952043141"
        },
        "item": {
          "id": "50d82c30-99aa-43e3-bd1d-2d0a57d0946b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b81e049e-f594-4417-85a4-b0304759aed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c853fd6-3b8d-4393-a66d-f0ddc671841a",
        "cursor": {
          "ref": "d6ac2b58-abc9-461c-b37e-cae58a5cab37",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "36a8d67e-0ca5-4dee-a39b-1aa28d394f8d"
        },
        "item": {
          "id": "2c853fd6-3b8d-4393-a66d-f0ddc671841a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "df4b4318-645c-4275-9e4a-c4a07aff1545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1099a851-faa1-4c55-bde6-c7f766c8fc25",
        "cursor": {
          "ref": "7a7ccbc6-2d4b-4d7d-b4fa-9838c95e3d3d",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1eebcd08-fac6-418c-a1c1-7a3d14fd40f5"
        },
        "item": {
          "id": "1099a851-faa1-4c55-bde6-c7f766c8fc25",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "63111d69-74f0-4a47-ad5e-c0bd6a4f15cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a822f5a2-2041-4b24-ad7d-fc1cb8d53b45",
        "cursor": {
          "ref": "ca5691d6-f9b1-4b06-9d07-47f4f3d452d2",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8aab00ea-f5e0-4e8c-be1b-f68c8f3eace2"
        },
        "item": {
          "id": "a822f5a2-2041-4b24-ad7d-fc1cb8d53b45",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "99f30028-f230-4cef-8546-134325508ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96a6a32-9b97-4761-875f-2dd93086d9de",
        "cursor": {
          "ref": "8bd173cb-2b21-4a8e-bab2-f615af142591",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "78196757-1366-42b0-a87d-f5a040500e8a"
        },
        "item": {
          "id": "c96a6a32-9b97-4761-875f-2dd93086d9de",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fc6dbe06-72df-4ba1-9401-4558ac8f5afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c302af6d-2d50-486e-afd2-e77ee9fdefb2",
        "cursor": {
          "ref": "48a7b25a-288e-4993-bdb2-b8b984a1d4a5",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "739c2511-5625-43d0-9eb5-46a5d7dd4e18"
        },
        "item": {
          "id": "c302af6d-2d50-486e-afd2-e77ee9fdefb2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ee6c94be-3131-49f1-8f65-247de10f4298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d301bdd0-b5e5-42b3-bda5-e7f5f8ff0348",
        "cursor": {
          "ref": "5eb840d5-ac4a-44b8-8261-95767f6e4bea",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2a00366a-f3ab-49f6-ae32-b8168b892797"
        },
        "item": {
          "id": "d301bdd0-b5e5-42b3-bda5-e7f5f8ff0348",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9a4a8bf7-38ea-45ab-b9d2-77ffea972b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484232a1-d376-452c-9dda-3469b172b12c",
        "cursor": {
          "ref": "6e9447cf-1668-49e8-99cc-ad0fc2228f4a",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f82ef50a-0c78-4d62-a611-deb1951f03f0"
        },
        "item": {
          "id": "484232a1-d376-452c-9dda-3469b172b12c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6e9c3a19-1af9-47aa-955c-77511c882260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33dca1b-1f94-4d6c-9ee3-4bd917844146",
        "cursor": {
          "ref": "a3962b02-2173-44ee-9633-efacb4e6db93",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a5a2a910-a8c3-4408-9161-96e8ad16133e"
        },
        "item": {
          "id": "c33dca1b-1f94-4d6c-9ee3-4bd917844146",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "36483121-1b86-490b-9cd6-cdb5ade41916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e7cc3c-c033-4099-88f7-119c53da79ef",
        "cursor": {
          "ref": "b6ee1066-c853-4151-b605-af7612c9cab0",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e4b49e51-99cf-4db1-a8dd-c021036e2ec7"
        },
        "item": {
          "id": "64e7cc3c-c033-4099-88f7-119c53da79ef",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2daf26ab-845a-404d-8580-98cfc6120842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048d083d-0727-4d1b-950d-123965df72e1",
        "cursor": {
          "ref": "2d29d296-6f94-4735-b007-efc87c002843",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "af168b5c-80d8-49fe-9e99-7c6547cde7e5"
        },
        "item": {
          "id": "048d083d-0727-4d1b-950d-123965df72e1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "41601957-3f5d-4566-bcba-babc2514163c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22dde069-25f3-4f1f-83cc-012332e81a3b",
        "cursor": {
          "ref": "50ea878f-a5b3-430b-b8db-149446419405",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ff3e1a10-b664-46f9-b204-6b9763db3503"
        },
        "item": {
          "id": "22dde069-25f3-4f1f-83cc-012332e81a3b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e7788b89-a3de-4865-8bd0-0fd1f31e69a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5337ac30-6d44-4bdd-994c-3e7f1a953c01",
        "cursor": {
          "ref": "23624a92-c1b2-4a61-a9c9-1c9b0e63c591",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3f98e489-73a8-4414-9c23-3eb1009e8db8"
        },
        "item": {
          "id": "5337ac30-6d44-4bdd-994c-3e7f1a953c01",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6d22fd0a-d99e-436c-904c-8549a20bbbe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7c3eeb-d71e-4c49-9d59-b59e830954b4",
        "cursor": {
          "ref": "2402e7d0-5327-443b-9bc3-b4f5a41333a7",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2fdf1673-5df8-4c09-9912-918eef960d88"
        },
        "item": {
          "id": "9e7c3eeb-d71e-4c49-9d59-b59e830954b4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "31541256-05d2-4b06-a159-af87c99b4afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b633cd-586c-4cae-ae92-ebaf5ab4dd2a",
        "cursor": {
          "ref": "5aa0955f-0c74-4fb6-a4e9-b18c075b2813",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "391705e1-756f-4048-b0d8-7cda1d0461c2"
        },
        "item": {
          "id": "43b633cd-586c-4cae-ae92-ebaf5ab4dd2a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fb6c81c7-8c20-468a-81b9-b05312ea9092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85268f74-a732-4d0f-813d-0cb5b8fe8d3c",
        "cursor": {
          "ref": "6674e141-9c80-4b40-bb3b-27f63637b2de",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cfa64eb2-aad2-4de7-bb82-efdd7fd2a4dc"
        },
        "item": {
          "id": "85268f74-a732-4d0f-813d-0cb5b8fe8d3c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ecaaf4bf-b5c1-4f43-98a1-6065190de3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc021fd-0621-4df0-837d-15065d652af7",
        "cursor": {
          "ref": "3ec4be30-268a-4302-8a0f-07f0156cb3b7",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a99a5a5b-021a-4bae-84e9-b5f6b3af269d"
        },
        "item": {
          "id": "fbc021fd-0621-4df0-837d-15065d652af7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6b649de6-9c02-4f2b-abf8-44569e46f1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efac0ed-0f9b-4325-8f31-2f16726cc16f",
        "cursor": {
          "ref": "b9fc410c-a079-40f3-a5d3-25a4405ae9d1",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4582d7ba-58a1-412f-aa0b-097921e3c14f"
        },
        "item": {
          "id": "2efac0ed-0f9b-4325-8f31-2f16726cc16f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "81f199b2-2146-4524-a686-ae35cb296beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771758f3-b3b1-4933-ab7c-a44a77a9a192",
        "cursor": {
          "ref": "af99136c-9101-4d6c-872f-90a8597841b9",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ee7f53d1-1f18-4ff8-b19a-f53c194bbb14"
        },
        "item": {
          "id": "771758f3-b3b1-4933-ab7c-a44a77a9a192",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e26d043e-497d-469f-92bb-ee9470a97349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2394f3-e2b2-4b1d-9dc9-59a680648bd9",
        "cursor": {
          "ref": "9ea35443-dd43-4a53-8348-d65cdaa83563",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fbb00d30-4837-408b-bcec-9a439d0a4606"
        },
        "item": {
          "id": "8a2394f3-e2b2-4b1d-9dc9-59a680648bd9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "923e8bd2-6bac-43c4-a011-915434aaa028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59e8ff1-2fc3-439c-9f99-6a293bd2d6cc",
        "cursor": {
          "ref": "3833e62c-a911-426c-a399-f802dc139a79",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9448890f-1515-4dd1-b0df-ae5743c6546d"
        },
        "item": {
          "id": "b59e8ff1-2fc3-439c-9f99-6a293bd2d6cc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f04bb497-c4ed-439f-a4f1-126e09659f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab94929-eca6-4275-8fbb-ee49a8796ae5",
        "cursor": {
          "ref": "c2ae3d7e-0d52-4f75-a93f-828abda9bc0c",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b4e16fd5-37a2-4efd-a855-8597ea725040"
        },
        "item": {
          "id": "aab94929-eca6-4275-8fbb-ee49a8796ae5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c3c144cc-c3ff-47ec-ac7e-fdcd8b3d3b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1a0d15-ec7e-43cc-b3c7-8b0b07faebae",
        "cursor": {
          "ref": "38ae42da-bf4e-4c8b-aef1-42cfe7c858bf",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "18cca5f5-80be-46d2-996a-25eba255c577"
        },
        "item": {
          "id": "ec1a0d15-ec7e-43cc-b3c7-8b0b07faebae",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1579b37f-ec10-482a-9314-82b21c5eed7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0675a9d6-3d97-47e1-8f4f-4b79005f9279",
        "cursor": {
          "ref": "e422cb0b-c05a-47bc-9b43-f392827beaa8",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c9b2b5fd-b702-4d2b-81ae-2f85482dd02c"
        },
        "item": {
          "id": "0675a9d6-3d97-47e1-8f4f-4b79005f9279",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "577876cd-325b-4ecf-9d0f-501f264d4756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dba7402-437c-4283-ab08-ad31a4c7fa2b",
        "cursor": {
          "ref": "51e73ced-2832-4e6d-821b-4f7f0c1db5df",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a4037ff4-44f5-43f9-945d-b4ea24f24e8c"
        },
        "item": {
          "id": "4dba7402-437c-4283-ab08-ad31a4c7fa2b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "41233780-3fc4-4164-bec8-d8ba8a73bf34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "991f31a6-5740-45ab-85a6-f7fc25199294",
        "cursor": {
          "ref": "3e2dfbdd-a347-411b-9950-bafd05c7fb5f",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0e28c764-2977-4dfa-844d-a894fc5fcca0"
        },
        "item": {
          "id": "991f31a6-5740-45ab-85a6-f7fc25199294",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "35360e7b-42b4-442f-b93b-cf0de6a3d07f",
          "status": "Created",
          "code": 201,
          "responseTime": 2060,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "37adb39e-54e5-45bb-815b-a8ff6308e6a0",
        "cursor": {
          "ref": "46d16c98-62d5-426e-a858-dc511ad3deac",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c2e33bdf-c98d-41d0-90ce-614977c1a7b6"
        },
        "item": {
          "id": "37adb39e-54e5-45bb-815b-a8ff6308e6a0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d01b49ee-91ea-42f8-b9dd-06240107b664",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7d28725c-c201-42b7-a4cc-83755c3b9a91",
        "cursor": {
          "ref": "487537bb-286f-48ad-8904-4864c01323a2",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c58817f8-ca59-44a8-9f33-17cf94fb0c81"
        },
        "item": {
          "id": "7d28725c-c201-42b7-a4cc-83755c3b9a91",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c0c7ed65-1865-4151-9d2d-ac1b9422b3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd767d4-2023-4f26-9ffe-ee364845bf7a",
        "cursor": {
          "ref": "f43903ac-b488-46d1-a5a3-b434905fd6c6",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7d1cbf79-b1f6-4d5e-8186-973083413737"
        },
        "item": {
          "id": "2cd767d4-2023-4f26-9ffe-ee364845bf7a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "19596045-7cc5-4a78-8d06-ff84dd776e67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3f9c248d-10f6-4ece-9486-6099afd2634e",
        "cursor": {
          "ref": "803419eb-0db0-42aa-a2a2-cd2fc2dda456",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bea9e160-8d90-4e25-b458-a0359fa9c324"
        },
        "item": {
          "id": "3f9c248d-10f6-4ece-9486-6099afd2634e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dd61689b-d388-447b-9777-28347b2159c0",
          "status": "Created",
          "code": 201,
          "responseTime": 1498,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2c8c8125-f00d-4fc3-ba85-b118ab1e741a",
        "cursor": {
          "ref": "66f0895d-8370-4e53-a5e3-2ae9c6534c81",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7a0bf1fe-ecb3-4483-8497-f88d71621f83"
        },
        "item": {
          "id": "2c8c8125-f00d-4fc3-ba85-b118ab1e741a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fcb8eb0f-724c-4766-9cff-a5c42989c475",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "84da261d-3121-468b-9bcd-ae9551d4e100",
        "cursor": {
          "ref": "ace011d6-1580-4d90-a7df-d2ce1131fff3",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "93003028-373a-4ed7-a18e-419c61600d47"
        },
        "item": {
          "id": "84da261d-3121-468b-9bcd-ae9551d4e100",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8f395cc9-9da1-4de0-98c7-666a28c7543b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 778,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "81fb5773-dc0f-4b72-842d-e4656504bd76",
        "cursor": {
          "ref": "4707e169-f5b4-40b1-be6d-035786c6deac",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5089ca03-f661-4765-9ad6-0b9f7a0c8400"
        },
        "item": {
          "id": "81fb5773-dc0f-4b72-842d-e4656504bd76",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f4b31a83-48af-4906-abb6-e4e3e8797001",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0d0c6bf6-bd15-4d30-bc45-211e443570d0",
        "cursor": {
          "ref": "61c5e2a0-9bc7-4b59-ba8d-63d2266d1871",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9410bc4a-2de3-4ec1-9b57-a3d6037a33cd"
        },
        "item": {
          "id": "0d0c6bf6-bd15-4d30-bc45-211e443570d0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "845a6ba4-1fa2-404b-8947-801f4367a496",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4af56408-ddd6-4358-b212-75093294a6bc",
        "cursor": {
          "ref": "5f161711-8400-4871-8135-3f9e4352586e",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9f0547e8-6ebb-4ccb-8a08-e0ca8003e829"
        },
        "item": {
          "id": "4af56408-ddd6-4358-b212-75093294a6bc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "894d8dc9-edb1-48a5-9ef3-08ca6cc9b7ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c50e3df2-4cdc-4d8a-8eec-81841ce51e3d",
        "cursor": {
          "ref": "b619dbe3-10bf-4aff-a7cb-a87e983b5f46",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "15d1220e-f8f6-4677-b8c8-2441b778f839"
        },
        "item": {
          "id": "c50e3df2-4cdc-4d8a-8eec-81841ce51e3d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5c1309e0-4b8d-4b2c-8198-2a9edfa02ae3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2194d50b-bb79-4f2d-ba94-6c6613598b5e",
        "cursor": {
          "ref": "64dbc4db-0d18-44a3-ae60-a38fea11049e",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "39969d47-0f3e-457b-871a-ee0763a4f2c6"
        },
        "item": {
          "id": "2194d50b-bb79-4f2d-ba94-6c6613598b5e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5b907fa3-ceb4-4fde-86f3-9cb48774c968",
          "status": "Created",
          "code": 201,
          "responseTime": 1009,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b61b716f-fd47-407a-ae49-500300ffe1e6",
        "cursor": {
          "ref": "f3a41943-0547-4912-8d5c-1cfa1de366c0",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c37329b0-1624-4269-b91a-0b475afe5283"
        },
        "item": {
          "id": "b61b716f-fd47-407a-ae49-500300ffe1e6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "53f70e4c-4364-409b-b663-ff1a9223d95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950a4fa1-f958-410f-8daf-e4af13f9d6e0",
        "cursor": {
          "ref": "06bbccc8-0a1c-4745-93e1-e9b06c4bbd88",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7b00c0b6-ce8b-443a-82e9-975aaf5facb9"
        },
        "item": {
          "id": "950a4fa1-f958-410f-8daf-e4af13f9d6e0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b814d9de-90fc-43aa-96a3-e22611c4e1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7c35b1-7b34-4710-a54c-e0364a45f997",
        "cursor": {
          "ref": "20bc8d25-39a7-4ecd-8e31-ca322259313f",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3a8971c2-5107-4345-b29d-bd9876ad2b84"
        },
        "item": {
          "id": "ea7c35b1-7b34-4710-a54c-e0364a45f997",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "60d6cf8f-dc02-4fd8-ac06-1250c8e1639e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31267f49-2b6e-4055-96e1-0d82629768d9",
        "cursor": {
          "ref": "2cca615a-ba26-42d0-b1fc-4223e454eab0",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0d3554c8-ab7f-4a36-87c8-690f0b528b04"
        },
        "item": {
          "id": "31267f49-2b6e-4055-96e1-0d82629768d9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "30edd371-ac6f-473e-ba1e-fdf19519cceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9e4f9d-e14d-4470-9af6-84a9217026d4",
        "cursor": {
          "ref": "b22317e0-bc45-4b54-a903-21a9a8f8f105",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7ede4c15-75bf-4df0-80c3-b3460644f59e"
        },
        "item": {
          "id": "ec9e4f9d-e14d-4470-9af6-84a9217026d4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c7f3d6de-bebe-4e9a-82bb-f0030f2accfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecdca3d-1a66-4222-9308-110b6429f4ef",
        "cursor": {
          "ref": "3e4a2502-0580-4431-adab-9bf1548ff13a",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6fbedf13-6976-4b18-a89a-e4be21cf8f40"
        },
        "item": {
          "id": "aecdca3d-1a66-4222-9308-110b6429f4ef",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1c6dbdc3-5b29-4a9c-ad9e-cbd6253a9efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b077d9a-8542-46ee-af81-a84b607bf951",
        "cursor": {
          "ref": "8ddc9801-d111-4350-a74f-9d3717038270",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "94e44d3f-424f-4480-a46b-9df818bc71bf"
        },
        "item": {
          "id": "5b077d9a-8542-46ee-af81-a84b607bf951",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4b568a99-7643-47b9-a3c4-fb23ba71c398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4210bc-e5d9-445b-a4e5-8463ba43d860",
        "cursor": {
          "ref": "2cd3926b-0ced-44f1-afaf-30d51ff9b2d0",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fe4862f3-d3a4-4226-bea7-4a444cacb9ca"
        },
        "item": {
          "id": "5e4210bc-e5d9-445b-a4e5-8463ba43d860",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d930e85b-c22c-472a-abdb-73ded36979b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd4a662-c47e-46c6-9e8c-2f4972727157",
        "cursor": {
          "ref": "45614d0c-0ccc-4484-8327-4399a61b8d32",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "37eba346-62ab-4ee3-848d-4cbe92f979c1"
        },
        "item": {
          "id": "8bd4a662-c47e-46c6-9e8c-2f4972727157",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4ef71517-b12a-40c2-a2a1-366e95193a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d375e9-a3fb-424e-bae3-7fb2aad03df2",
        "cursor": {
          "ref": "885ac475-52aa-4f78-9e82-e71afa9e12ed",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bbf29709-3abf-43ea-9bb4-8fbc907cc34d"
        },
        "item": {
          "id": "18d375e9-a3fb-424e-bae3-7fb2aad03df2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1dbac1a9-0fc4-4c85-a06d-5b54c773b643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708311ad-792e-46f4-8571-cc79052a8e70",
        "cursor": {
          "ref": "8e3c8fb3-635b-4d21-a4d4-d1cc9078209d",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d6b5647b-0e40-47e9-87b5-5452bad2db03"
        },
        "item": {
          "id": "708311ad-792e-46f4-8571-cc79052a8e70",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "29cefdb0-5670-4e70-8636-5e09d02c44a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea63cd52-7093-4ac3-9735-039fe2eb2043",
        "cursor": {
          "ref": "d1e62ecf-f3a2-48ca-aae8-cf9bb8f7e82d",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9c12a8d3-02b0-4af5-abb3-b4eb60c8c1ce"
        },
        "item": {
          "id": "ea63cd52-7093-4ac3-9735-039fe2eb2043",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e7de4a0d-10d2-429f-b972-0168799b457d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc7aec0-6b40-436b-8a00-0b9393740233",
        "cursor": {
          "ref": "931c824b-c9f7-4651-a489-9d3cb1a2642e",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d1963694-edc0-4ea5-baa2-ed3af0b0f69e"
        },
        "item": {
          "id": "0fc7aec0-6b40-436b-8a00-0b9393740233",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9b871af6-9876-4627-a68d-dc781c7f8aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f440838-e9af-4992-9e98-3f4a960f9de8",
        "cursor": {
          "ref": "fe59889d-ecf5-4b3b-897c-62d4e94be63e",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "98882117-45ef-47da-b639-bba4a10d553e"
        },
        "item": {
          "id": "3f440838-e9af-4992-9e98-3f4a960f9de8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f5125a49-36a7-45f8-9f91-1e94a113e04b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 744,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "92ebcfe6-f11b-4b9b-afb4-652b9a40846d",
        "cursor": {
          "ref": "56d5c439-f4ca-4efb-b6e4-38235cd4f7bb",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6634b803-0c0e-4a9f-ac8e-088592d2a532"
        },
        "item": {
          "id": "92ebcfe6-f11b-4b9b-afb4-652b9a40846d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d880790a-ca2d-4d04-a8f3-3389817d0797",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 761,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "0be53f9a-cb0d-40ad-87ed-4316d7c9dd11",
        "cursor": {
          "ref": "3c74880a-893c-4846-91a0-89b2568599c6",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "def60bd6-6192-44ed-9108-59759797e1a1"
        },
        "item": {
          "id": "0be53f9a-cb0d-40ad-87ed-4316d7c9dd11",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fc920b3f-6653-46ed-abbe-2dce43798d49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9aec42b6-3872-4d0f-9020-b46fa0c680fa",
        "cursor": {
          "ref": "4ecadb14-b2b7-455a-83f7-0d6b19134168",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "be15c788-55d4-4d8b-a1d2-327d993fc903"
        },
        "item": {
          "id": "9aec42b6-3872-4d0f-9020-b46fa0c680fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "51e5060d-ba76-486a-87ab-9eac675cae43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 763,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0cd38b68-640c-4b8b-b709-270933824550",
        "cursor": {
          "ref": "7e5ec256-3ce8-4f9c-bdea-b70b28cd61f3",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f96b5191-90b1-4bcc-8b54-33d64d4cca4b"
        },
        "item": {
          "id": "0cd38b68-640c-4b8b-b709-270933824550",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "00da2f6e-27ac-42e1-8a72-f83a93d80121",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6db3ae87-0181-4429-9ed4-626f150f3e53",
        "cursor": {
          "ref": "6f980253-45e9-40c9-80fb-d9b443d4886c",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0c995a76-f1b1-498a-b628-be673c00ad5f"
        },
        "item": {
          "id": "6db3ae87-0181-4429-9ed4-626f150f3e53",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "95ad8a5a-15e4-445c-9c2d-d3dd1f0c8df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba358bb-3c83-4ce1-b0d2-772d68d67611",
        "cursor": {
          "ref": "f9f148cc-616a-452e-aa73-8e0ef3a3ab26",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8424676d-c5df-4f23-b242-287af699d189"
        },
        "item": {
          "id": "7ba358bb-3c83-4ce1-b0d2-772d68d67611",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e5c95d7c-00cc-49b1-9c87-d6863527c18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6498cae0-f42a-4709-98ab-2b56206e12a7",
        "cursor": {
          "ref": "b956ba0b-0dda-4e0e-b034-65aa11a1bf90",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a8b36b86-a84a-4d1a-9494-3c701d4ebc1d"
        },
        "item": {
          "id": "6498cae0-f42a-4709-98ab-2b56206e12a7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d7fb5094-6b2a-4ce7-be08-472bd5ce943f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedcb8c6-929f-4a5d-8b0f-cddf5afe2081",
        "cursor": {
          "ref": "22f261f6-6379-4d6c-87b8-72700f251833",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "55a20912-f9ca-40c2-a400-804c98489dc6"
        },
        "item": {
          "id": "bedcb8c6-929f-4a5d-8b0f-cddf5afe2081",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ed86b613-e811-42fb-a91e-8de1a3866246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2589380b-2c2e-4125-88d7-c2763e2d8144",
        "cursor": {
          "ref": "06112cfe-7fbb-4447-aa4d-5acc8f24f0f2",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5edd922a-a77a-460a-ac8e-eea78245de64"
        },
        "item": {
          "id": "2589380b-2c2e-4125-88d7-c2763e2d8144",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "413812b5-ba0e-42c6-9e61-64063173bda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cbdc33-7a5e-47f3-802e-7c8588720cb7",
        "cursor": {
          "ref": "ceb21a98-32fc-4f5c-8caa-3de6860378b6",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "644e867d-d701-4b79-ade7-a05d0526b661"
        },
        "item": {
          "id": "d6cbdc33-7a5e-47f3-802e-7c8588720cb7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "59b830c8-ea68-4b68-852a-3096914c9196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e408170e-2965-4535-8c30-073c7ffbcf0b",
        "cursor": {
          "ref": "32bffc66-5c25-4b7f-a373-26689f26e138",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e82d7cda-e3a2-4dd6-a281-fb4d819fa0c8"
        },
        "item": {
          "id": "e408170e-2965-4535-8c30-073c7ffbcf0b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "97acd4f7-03c1-4a8b-b570-17355e360184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9316f80c-4f8b-4e6f-aeb4-4d1d3250bab1",
        "cursor": {
          "ref": "074f0931-1ab4-4161-879b-611ba81a4cee",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3c93ae06-33e9-455b-9d68-b26584003ac6"
        },
        "item": {
          "id": "9316f80c-4f8b-4e6f-aeb4-4d1d3250bab1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8b7fa138-1058-4f61-b247-73a79558e36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de30289e-a6aa-4e9e-bd6b-3db4f6820f2e",
        "cursor": {
          "ref": "406305c9-1ef8-4e57-81ee-898eb641964d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "022a157a-ffa1-4b42-8c2f-c79cc3aa92bd"
        },
        "item": {
          "id": "de30289e-a6aa-4e9e-bd6b-3db4f6820f2e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "850460c7-cad1-4cc5-a627-74d6430b9e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cce8cf1-9be8-401b-b879-2650c676f84e",
        "cursor": {
          "ref": "d45a5587-b99e-44dd-947d-0c3240c53049",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "42caffd6-9943-48f7-bc90-e74856999a87"
        },
        "item": {
          "id": "5cce8cf1-9be8-401b-b879-2650c676f84e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5e3fa82e-79ec-4d1a-9a36-05c0cc0899a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8a698d-5776-4224-88f9-ad656cf1e093",
        "cursor": {
          "ref": "339aed10-8f94-458f-9532-8918d51c4e92",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "61bdc34f-cc54-4b99-a302-8822c28dbfb3"
        },
        "item": {
          "id": "7e8a698d-5776-4224-88f9-ad656cf1e093",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "92422b51-8aac-4c47-a6b7-34faedf5adc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655294ac-7ecf-497a-a547-a5ceb60bd698",
        "cursor": {
          "ref": "613158e7-7bf9-4b29-8d38-ac4d717ad7c5",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "45ec4bab-cba2-4d49-9482-c0d559ac905e"
        },
        "item": {
          "id": "655294ac-7ecf-497a-a547-a5ceb60bd698",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ce58b634-6f7f-4f39-b837-a0c3d13f2535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035016bd-1e53-44ee-9098-1043b6a9e597",
        "cursor": {
          "ref": "f32e3cca-c5df-4e96-89c4-eadfa32b89fc",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6094bf62-fa14-4532-b56c-050ef78f6feb"
        },
        "item": {
          "id": "035016bd-1e53-44ee-9098-1043b6a9e597",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bf8742ee-6277-4f6c-86ba-f3ad42a71c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248437c1-3ea3-49b6-8948-e58fb14787ac",
        "cursor": {
          "ref": "d44aabaa-1b8a-4eff-9559-63b0fd9c9990",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ed9b4cf2-68b5-4ab4-8ee2-cd1f7ae9783d"
        },
        "item": {
          "id": "248437c1-3ea3-49b6-8948-e58fb14787ac",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8cf89f52-4e94-4c3e-baf3-bc6c8d3dd066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989b2a0e-500f-4f97-9e17-304313a9b221",
        "cursor": {
          "ref": "ece90e3e-18b8-44ea-b4ed-82926cba30c0",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "53520e8f-3ee0-4f2c-b4b5-064aaf38c239"
        },
        "item": {
          "id": "989b2a0e-500f-4f97-9e17-304313a9b221",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "51c842fd-41cf-4787-98e4-228b926b6f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97847b8-c1a5-4a3c-8f4f-127fcf4c89e7",
        "cursor": {
          "ref": "cf7da40c-13a7-4812-8bf5-8909c5db4c02",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ae4d4bb6-ea06-4331-848b-66fa0244313c"
        },
        "item": {
          "id": "c97847b8-c1a5-4a3c-8f4f-127fcf4c89e7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "35bf8667-d7d4-4489-b780-bf7ae1742332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a4a765-cecd-4d23-a63f-d62b9d40874f",
        "cursor": {
          "ref": "59323a56-f9b7-491c-858d-30bf3cf4a874",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e705da39-02b3-4475-bfb4-770114769a69"
        },
        "item": {
          "id": "d5a4a765-cecd-4d23-a63f-d62b9d40874f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c3d9000f-276a-454c-875e-58f360cfb4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0d7356-c92d-4384-b2a0-28bdbe65a39b",
        "cursor": {
          "ref": "feb35782-710f-40b8-b8d8-d23cef542fe1",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "71efd1cf-8606-4028-b183-3120554d365d"
        },
        "item": {
          "id": "5f0d7356-c92d-4384-b2a0-28bdbe65a39b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9d10aad6-2b48-41fe-a2ee-c16fa4a45820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b229d0-0faa-4cde-8360-4cabf3aaa43f",
        "cursor": {
          "ref": "0e6f4aaf-d524-4013-86cb-fb5712595b91",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1c0db5c8-2c60-4225-9e70-24abf06db507"
        },
        "item": {
          "id": "83b229d0-0faa-4cde-8360-4cabf3aaa43f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f1a0a33e-2e9b-4836-a740-9a74c7aab0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1bc947-5df2-4245-8021-235905415db0",
        "cursor": {
          "ref": "c03f3060-c05a-4457-b058-99fed1eda2d2",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "957c5e17-6d83-4453-9cd5-6192b986f11b"
        },
        "item": {
          "id": "5d1bc947-5df2-4245-8021-235905415db0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f0aa0d97-4b99-4170-8ccd-2e019afb69f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f2eb79-4de8-4ee9-adbf-d3b57bef675c",
        "cursor": {
          "ref": "e836ad02-797b-4206-87e6-108568d29b71",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2b0b7036-0290-400c-aa0b-b7cf643b23d7"
        },
        "item": {
          "id": "63f2eb79-4de8-4ee9-adbf-d3b57bef675c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e54bddf8-eb46-4808-a62a-495fbe74bf4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bee0d4-0b32-4547-8aa5-890a0dc9b1ce",
        "cursor": {
          "ref": "7c146fb9-87fd-4a0a-a673-14d537def928",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "941fde90-56ce-4ff1-8fa2-5a1a6916e90b"
        },
        "item": {
          "id": "f8bee0d4-0b32-4547-8aa5-890a0dc9b1ce",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9080612e-74e4-407f-83c0-ba2b0075cf3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a415775-d88d-4643-bee7-f26ad7192838",
        "cursor": {
          "ref": "0087377f-c2ff-4bc6-9896-41f660c49695",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3e73707a-60e5-43aa-8db8-34b6a5e9940f"
        },
        "item": {
          "id": "0a415775-d88d-4643-bee7-f26ad7192838",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3c82c6b0-3231-45ee-8e53-fce7c872f5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36dba91-db4c-438b-8d39-eca022b20aec",
        "cursor": {
          "ref": "e0ee1422-0a5d-4f47-a6f1-f78729c3045c",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c7090795-5558-488a-84e5-114ce9ca0d67"
        },
        "item": {
          "id": "c36dba91-db4c-438b-8d39-eca022b20aec",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0913f383-41ac-4e9e-b118-625b8e6ee523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a254745f-aae8-480b-a197-68bc606d2124",
        "cursor": {
          "ref": "50c91f28-343e-4acf-bbc8-d6a90240072c",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "18f33537-ab34-483c-82f7-b462b724934a"
        },
        "item": {
          "id": "a254745f-aae8-480b-a197-68bc606d2124",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "db826860-e0f3-4f53-b3f3-ff6964d4edeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db602acb-1c04-4985-af67-53079ab49e16",
        "cursor": {
          "ref": "ffc7d28a-d1b6-4153-b8f7-0b05f14b0181",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "acde4eef-8569-4100-939a-1a03905c5350"
        },
        "item": {
          "id": "db602acb-1c04-4985-af67-53079ab49e16",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "74a5134e-0609-40b3-b6b2-ba012fa3be7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f754337b-e425-4537-a181-abbe05c53be8",
        "cursor": {
          "ref": "4ff87376-97fc-4114-8588-22fa70e29325",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "23643faa-61fe-48dc-ac16-63c5d1466521"
        },
        "item": {
          "id": "f754337b-e425-4537-a181-abbe05c53be8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8652a885-c3b8-49c9-8b34-d8d789fc1b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac1fd49-7c01-4e5f-a011-1b5c7d57d655",
        "cursor": {
          "ref": "ebafbdb0-6546-466b-a681-060f3b007a11",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3ac29b41-1eb2-468a-b5a6-8c586b2c8b20"
        },
        "item": {
          "id": "bac1fd49-7c01-4e5f-a011-1b5c7d57d655",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3b3fba44-275f-4ec4-9227-8bd7684ff62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9e93e6-36a4-4dac-af51-524aa7d9f154",
        "cursor": {
          "ref": "73c0eeb7-1197-45a2-9633-a3cbec299eb5",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bf5f438e-da85-48e7-8741-3fc106159876"
        },
        "item": {
          "id": "5a9e93e6-36a4-4dac-af51-524aa7d9f154",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f0c5fb56-7228-407b-8214-dd13ce6db938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b9af66-0167-417e-92f9-8ec6cea0c356",
        "cursor": {
          "ref": "626ba054-bd12-424a-981e-2d9255f2a93e",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ec39a067-801b-4b80-b453-9c6ef5ddfa46"
        },
        "item": {
          "id": "d9b9af66-0167-417e-92f9-8ec6cea0c356",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bc627c6d-618a-4e04-8ed8-18d965ffe47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d53b386-6e68-4fba-b8a3-a088ee43556e",
        "cursor": {
          "ref": "8ee5c8a6-6726-4ef9-9b75-f4c8381ef8f6",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e900e382-1015-488f-8aa7-956b7420127e"
        },
        "item": {
          "id": "6d53b386-6e68-4fba-b8a3-a088ee43556e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bacc8c86-bd5e-4c25-ab3a-ab96bfdd1b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34eb50c7-a884-4e4e-bedc-597424a02174",
        "cursor": {
          "ref": "2aad3f8b-3b13-454c-a24b-4b3cb916300e",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "279d8e02-01be-44a8-9f68-e4ca8b312e97"
        },
        "item": {
          "id": "34eb50c7-a884-4e4e-bedc-597424a02174",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f5916479-8e72-426d-9c3c-904ed7e52ebd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6041e128-354e-4124-a40e-eb5d8482a9b9",
        "cursor": {
          "ref": "7e71f670-45b9-4789-858d-a42188e9609d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "58aaecb9-335d-4408-9f27-1295674cfd6d"
        },
        "item": {
          "id": "6041e128-354e-4124-a40e-eb5d8482a9b9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c3947aba-6ceb-4cd5-9765-816a756c215b",
          "status": "Created",
          "code": 201,
          "responseTime": 1550,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "25545259-9843-44d5-b823-9559b4b1f6b0",
        "cursor": {
          "ref": "28dad40e-b14c-416f-8f4d-f18fa8346480",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f875253f-5895-4338-9e40-c4e0a6b1f4cc"
        },
        "item": {
          "id": "25545259-9843-44d5-b823-9559b4b1f6b0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "66439a75-e606-4434-9fa8-fe51e129e0e5",
          "status": "Created",
          "code": 201,
          "responseTime": 2202,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46bd844-f0bf-4eb7-bea2-ef296239998a",
        "cursor": {
          "ref": "aeb6cc93-318a-41cc-bae4-3d9381be0d45",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "31ad3a39-ba9f-499f-b102-2781f7344f28"
        },
        "item": {
          "id": "b46bd844-f0bf-4eb7-bea2-ef296239998a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "df07c709-5a6d-4c7c-ae86-e54f749e0c36",
          "status": "Created",
          "code": 201,
          "responseTime": 1019,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d9babd-fc0a-42cd-96f9-4e9ab2e23b7a",
        "cursor": {
          "ref": "34bc8c33-c053-450b-8b2f-e8f9af411f40",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "997a25a2-96e5-434e-aece-3be7f02d916a"
        },
        "item": {
          "id": "90d9babd-fc0a-42cd-96f9-4e9ab2e23b7a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c8c0f700-3360-4d94-9dbc-4d7b57544e26",
          "status": "Created",
          "code": 201,
          "responseTime": 1031,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc82d5f-beda-4108-a181-595163b4f6d3",
        "cursor": {
          "ref": "90659798-7a4d-4755-8ae5-a5302e2bae8b",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5670d5d6-ce8f-4d17-88b8-3e4307348de2"
        },
        "item": {
          "id": "1cc82d5f-beda-4108-a181-595163b4f6d3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "388555e2-d5bf-4fdd-9b4b-177b5e08ec9e",
          "status": "Created",
          "code": 201,
          "responseTime": 1118,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c372c030-b96d-4702-b520-4435807a1ff7",
        "cursor": {
          "ref": "30d88dad-92e4-432d-b123-2281a2ee82e3",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a45d600f-9c9e-463b-8eb6-e01c7b82cd36"
        },
        "item": {
          "id": "c372c030-b96d-4702-b520-4435807a1ff7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "17be8e7b-ad39-4c7e-a93e-e2b7c0233e46",
          "status": "Created",
          "code": 201,
          "responseTime": 1098,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f12c636-1ff0-420c-808b-0b666de9c79c",
        "cursor": {
          "ref": "771deb7e-eae4-4656-b1a5-6f5f61c7ccb1",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1362bd0b-25ad-4a55-ad69-a58cec02194f"
        },
        "item": {
          "id": "2f12c636-1ff0-420c-808b-0b666de9c79c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f9d980a7-77ec-4713-9b25-6659173b2f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40755d73-fe57-4a87-bf49-2329e0bc01f9",
        "cursor": {
          "ref": "1109b268-d7cb-4a3d-a65e-85812857dd02",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9754bbc2-ddd7-4872-bc77-d785bd4d01d5"
        },
        "item": {
          "id": "40755d73-fe57-4a87-bf49-2329e0bc01f9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ba4331d8-c6e3-4c5a-9a46-0a9d711bd3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e47e45e-4ab2-4ec4-bc7a-a8d384c4b38d",
        "cursor": {
          "ref": "05501e7b-fe4d-4e49-800b-1e5951ccc8f6",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "71b876ae-e5ba-4ee2-8afd-83b52455f470"
        },
        "item": {
          "id": "1e47e45e-4ab2-4ec4-bc7a-a8d384c4b38d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d81100fd-a6dd-408e-8a58-65364106d6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd37f78-6993-446b-b3f9-939d27776947",
        "cursor": {
          "ref": "582af93d-391c-488a-aded-771996ce051b",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fee5fc29-4368-41d0-ab76-82a6655ead59"
        },
        "item": {
          "id": "afd37f78-6993-446b-b3f9-939d27776947",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a4046ecc-56e0-4d4d-809d-fa2748726162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901be236-0e94-444d-bef0-b224784b2381",
        "cursor": {
          "ref": "25100471-9dd7-4d6c-8bb0-c7ac118c0f54",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "80e9cc32-c809-4ca7-b53b-737590d9bf42"
        },
        "item": {
          "id": "901be236-0e94-444d-bef0-b224784b2381",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4dd1f024-e60c-4293-a6a4-4215e6727d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b53f2f4-b108-400f-b13c-40e034a06f60",
        "cursor": {
          "ref": "de93222a-f5b6-46f6-9d66-5ca91f92568a",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1e872c5c-6643-4d1a-95fb-ac6fce85bb07"
        },
        "item": {
          "id": "1b53f2f4-b108-400f-b13c-40e034a06f60",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "98427cc3-fb97-49e5-8dd5-c5d6122b86d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12a0cae-9ec5-400e-af46-90f4a5181650",
        "cursor": {
          "ref": "df76d168-df42-41a7-9bc2-e84fdc6728e7",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "64ae35fb-9847-47e9-8d55-7760d15a31e2"
        },
        "item": {
          "id": "b12a0cae-9ec5-400e-af46-90f4a5181650",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6be19dd0-603f-4e97-9c5e-b9239ec12920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec66d7b6-eedf-4a26-9656-49a56a5b90cf",
        "cursor": {
          "ref": "3be4ef42-d64e-4cf0-b99a-fec04571bedf",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "65c8c212-0afb-4493-9586-18b4ead6cff2"
        },
        "item": {
          "id": "ec66d7b6-eedf-4a26-9656-49a56a5b90cf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8e8cb316-a59e-4e43-823a-19072d8c68b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedee0b4-a5db-4f70-8d50-e0ea9e05b13c",
        "cursor": {
          "ref": "e29f409f-dc78-4512-b9e5-a9a85368ae15",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "edc6ac04-0cad-4cce-ad9f-26d7d338068f"
        },
        "item": {
          "id": "bedee0b4-a5db-4f70-8d50-e0ea9e05b13c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "62c633d4-be36-4c23-bd4a-1cefd5c9b265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3033d09-1a9c-4682-a242-c47986357400",
        "cursor": {
          "ref": "793d20bd-d496-4c77-b8c7-e5f5446fcf3c",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "43fff1ad-46d4-4aac-89ab-eca405e90db1"
        },
        "item": {
          "id": "b3033d09-1a9c-4682-a242-c47986357400",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7752c376-99bc-43bd-b720-7874d9f42a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01211df9-f29d-4cf9-9864-082fd8ab86ae",
        "cursor": {
          "ref": "0d4ddff6-6c40-44a1-8c5b-3bfd2a997326",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d9f1a9e8-42fc-490d-8a82-06f62eb7f561"
        },
        "item": {
          "id": "01211df9-f29d-4cf9-9864-082fd8ab86ae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "50f59aec-548c-416c-b8f8-54a22cee700c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35bcdd5-3143-4a52-bfe1-d0592ce08956",
        "cursor": {
          "ref": "2370dc38-8b2b-4bce-ae48-b2aaa5ffd11b",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8704824a-82ee-4f22-b915-7889e0369016"
        },
        "item": {
          "id": "a35bcdd5-3143-4a52-bfe1-d0592ce08956",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "894fb5e9-a5c5-47f8-a972-79c887a289b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c6503b-55bf-4890-9959-5b3b3b96aff0",
        "cursor": {
          "ref": "51c3733d-c3c9-4319-9353-6bd951ffb1e5",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "488dd6ac-8948-4fbf-906e-3abd23a8e208"
        },
        "item": {
          "id": "61c6503b-55bf-4890-9959-5b3b3b96aff0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "67a1904b-196c-4239-9360-fad362f1ef5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e56c679-f60c-4238-a1d8-4321ca1e3363",
        "cursor": {
          "ref": "9950b09c-6bb7-4331-8fa6-4f8140cf8b89",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fc5187a3-7912-488a-8c28-48e6e523c4b3"
        },
        "item": {
          "id": "6e56c679-f60c-4238-a1d8-4321ca1e3363",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ec2bda13-6f79-4ec4-b741-cab72eef9494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c326f3e6-4c06-4d07-9647-88c1a12b8832",
        "cursor": {
          "ref": "6ae90bd8-7dc5-466f-891f-a65ca8326219",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8c360678-8e20-4f84-853d-cef76afd7a91"
        },
        "item": {
          "id": "c326f3e6-4c06-4d07-9647-88c1a12b8832",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "24f1e99e-ca65-4d04-b9f9-2c343c3632e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c704f590-8dee-41b0-b671-fe97ad542274",
        "cursor": {
          "ref": "6ff007fe-ff64-4797-a548-1ee5cf3afd0f",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "be5c941a-c3bd-4fee-8b1e-4ff05c342050"
        },
        "item": {
          "id": "c704f590-8dee-41b0-b671-fe97ad542274",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6b994f4d-df66-4231-8558-77653b596ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9595d75-d3d7-4ee0-8156-301f44d2e2c2",
        "cursor": {
          "ref": "eecc639e-79aa-480f-a0f6-d50a0df8c4c0",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2f742c83-4f47-411e-a379-c78cb9f33444"
        },
        "item": {
          "id": "b9595d75-d3d7-4ee0-8156-301f44d2e2c2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "11fbaa9a-bd75-4981-83e3-57d7ecf4640f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d8204a-9e61-4fae-8787-74d35c6bd528",
        "cursor": {
          "ref": "bd480895-5eb5-4854-8440-48fc3ead4872",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "872b71e8-994a-4e9d-9079-5a166477e954"
        },
        "item": {
          "id": "84d8204a-9e61-4fae-8787-74d35c6bd528",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ee7a7a1c-9757-4c72-a902-1da280e3e304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0aaff0-eb47-4381-95e0-b9bf46006dd3",
        "cursor": {
          "ref": "89d2e187-1dce-4f40-8bda-78b112059b71",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "383d2958-6661-4dbc-81a8-687f9e169337"
        },
        "item": {
          "id": "4b0aaff0-eb47-4381-95e0-b9bf46006dd3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ce945d04-a8be-4dac-a619-0a7acaf1c61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9544e18-f3f6-4ce7-bad5-a4e1439d8a9a",
        "cursor": {
          "ref": "9a242a08-8646-4800-ab4c-d70766dc98a4",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "451ff7b6-672b-411b-a87f-d596517387fe"
        },
        "item": {
          "id": "b9544e18-f3f6-4ce7-bad5-a4e1439d8a9a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8b7a95a7-df06-45a0-b060-9e5d141e3113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b8f975-fb13-4a13-a734-e59d5d98383a",
        "cursor": {
          "ref": "eea5fbb2-58cc-4874-a604-b518564e6363",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0be26ec3-0c0d-41dc-8494-bb5e0a5edcae"
        },
        "item": {
          "id": "17b8f975-fb13-4a13-a734-e59d5d98383a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7d483473-be2c-46bd-9e01-d8b662a5d2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a6c783-98cf-45ee-a189-906b269e1515",
        "cursor": {
          "ref": "976544dc-10d3-497b-a794-6db061600598",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ce93c2ce-a209-4e66-87be-0e63ea4a24e6"
        },
        "item": {
          "id": "43a6c783-98cf-45ee-a189-906b269e1515",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9be6e216-f237-4759-b343-af4b317f998b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c47e44-e8ef-4199-8427-04490bc7bfc7",
        "cursor": {
          "ref": "434107d1-f9c1-4ed8-80b9-9f1809501c24",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f376f3dc-ea5f-47f2-ac5c-b06626456b9f"
        },
        "item": {
          "id": "34c47e44-e8ef-4199-8427-04490bc7bfc7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "03553945-316a-4436-b8e3-b9222b6a5485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f520d54-a3ca-479a-9c55-807b7c3a64bb",
        "cursor": {
          "ref": "2d779a2c-6783-4b27-9517-356416719235",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f06be4dd-0cd3-4abb-9f61-40877886d583"
        },
        "item": {
          "id": "8f520d54-a3ca-479a-9c55-807b7c3a64bb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "25c3aca9-8aab-415c-b166-d9e112f3b6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd91530a-734d-43f3-9d5b-ca16c509d29b",
        "cursor": {
          "ref": "5ee8bef3-3856-4f68-93c8-e6a056b6b8ee",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9caec9ef-8483-4112-990c-5a97c1ee7856"
        },
        "item": {
          "id": "cd91530a-734d-43f3-9d5b-ca16c509d29b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d2992127-92b4-429a-8b44-cfca3ba8d1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fe2b07-f4ab-411d-ab97-5bd6bb9b337c",
        "cursor": {
          "ref": "f80fd6ae-d5b1-4749-8e0e-30a6f67d5f9d",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ea14da9a-bc3d-44bf-8994-fb5cd178f311"
        },
        "item": {
          "id": "02fe2b07-f4ab-411d-ab97-5bd6bb9b337c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1cdfc595-5c11-46cd-b628-63059ad6b9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbed3b0e-497a-445d-ac0d-3c4b70a7c02e",
        "cursor": {
          "ref": "47f740db-9e16-4a9c-850f-e4a93a9fc441",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e038e1bb-32bb-48bf-adf4-2e99648f1048"
        },
        "item": {
          "id": "fbed3b0e-497a-445d-ac0d-3c4b70a7c02e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dce9e317-01e1-4c05-a312-766ed6ccf6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e08e1e9-e450-4b73-a626-aedd788837a4",
        "cursor": {
          "ref": "484865dc-1569-4076-8449-a445df0e8b8a",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fcac91a5-2f66-4549-b871-91039119a1b8"
        },
        "item": {
          "id": "1e08e1e9-e450-4b73-a626-aedd788837a4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3cf09411-2146-4d4d-8909-6edcff9366f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13567c00-baae-425d-9672-c08863e992ab",
        "cursor": {
          "ref": "b9f9c454-9e09-450a-b5a3-3ef901591c1f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1675d457-8dd2-4b13-ad8e-1f32e2c73fd5"
        },
        "item": {
          "id": "13567c00-baae-425d-9672-c08863e992ab",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "16ab99ad-9ab9-4e94-81fe-9bf30be6f7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf55fd7a-cfbb-49b2-a843-88473bf5a19c",
        "cursor": {
          "ref": "21e0786c-d96d-4d87-96c2-46a561d8d308",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5b73b5e1-34fd-4fee-9b59-eb7c30b6104a"
        },
        "item": {
          "id": "cf55fd7a-cfbb-49b2-a843-88473bf5a19c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "af42f89d-b169-4025-85ee-ccb5291add52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e15bb1-72ec-485a-b8f1-b2562243ec81",
        "cursor": {
          "ref": "b2168492-191d-4e12-b67d-53b7e10adaf1",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d5ef2f1d-5344-4274-bfe7-f756b0fc73ea"
        },
        "item": {
          "id": "28e15bb1-72ec-485a-b8f1-b2562243ec81",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "70eb5ae5-a06f-4e25-8289-5589bb7794a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87cf224-a85a-4af1-b321-04a9a2398740",
        "cursor": {
          "ref": "cd8ac7af-7d6c-459d-9a49-f7bb7ff8cc52",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "33b75859-a48b-465d-b6c9-bacced951be8"
        },
        "item": {
          "id": "c87cf224-a85a-4af1-b321-04a9a2398740",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "867fbe79-ae23-4054-be7e-d1dfe1d59b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3d6d91-ccb3-4b85-835a-16e101a815ef",
        "cursor": {
          "ref": "59dd4873-2456-4c13-8766-13414feee610",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e587e160-459c-45f5-ae3f-f068847c9a49"
        },
        "item": {
          "id": "aa3d6d91-ccb3-4b85-835a-16e101a815ef",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b9c9f12c-52c5-4632-8ced-50733175f8fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 115,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2a6dfa-4d9f-4178-8c9f-120d928c5f0d",
        "cursor": {
          "ref": "e102901f-3c82-4028-9b1f-724787efde23",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "510a76f5-1fa4-4ea3-8399-9ddaca976ded"
        },
        "item": {
          "id": "bf2a6dfa-4d9f-4178-8c9f-120d928c5f0d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d27eb7d1-ba30-4d8d-a9bd-3b1d369dfc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203c6495-b668-4938-a8d6-d6a53b9f5ed4",
        "cursor": {
          "ref": "c7a0237d-3486-459f-bf75-1573f0501b36",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eccff4e8-6440-4723-b2cb-93bec0f481b5"
        },
        "item": {
          "id": "203c6495-b668-4938-a8d6-d6a53b9f5ed4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7dc3a3de-d90b-4abf-b3b6-cd2ebddea431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bc93e4-5f14-4a78-835c-950371eae827",
        "cursor": {
          "ref": "cc1e4ed7-dab6-4dcf-a61e-90bc46df1f1b",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e87f118e-d223-4e53-a390-c60e25e6166f"
        },
        "item": {
          "id": "51bc93e4-5f14-4a78-835c-950371eae827",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4ccb1cad-bce7-4203-9b19-527df4a4a85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c031d1f-1840-49d6-84b0-c57b4004b1b7",
        "cursor": {
          "ref": "038cf7c3-8615-47ed-916f-62800ce42fe2",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dc6fa571-2328-4ac5-af17-9ab61c0a8404"
        },
        "item": {
          "id": "5c031d1f-1840-49d6-84b0-c57b4004b1b7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5e2b3dc8-349a-4079-a652-52de418a7904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05eb11f4-b94e-40c0-84e4-0800c0bf18f7",
        "cursor": {
          "ref": "de624979-6bdb-4e4a-bd52-3af303a0c882",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "971ec601-036a-4793-9063-a959294b14ac"
        },
        "item": {
          "id": "05eb11f4-b94e-40c0-84e4-0800c0bf18f7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "93721382-c47d-4017-8913-04f09391291a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920ade31-4ead-4b04-9f34-f4f36bf93d31",
        "cursor": {
          "ref": "d88aff94-4ae6-4f61-ae8e-6e435cb64b8f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "18504ac4-8acd-4dc5-9350-8cca9b512f51"
        },
        "item": {
          "id": "920ade31-4ead-4b04-9f34-f4f36bf93d31",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "482fc09e-3127-4d23-9e54-968fc3dabb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0494c9-9ca2-47c4-a8e8-9d527f6696cc",
        "cursor": {
          "ref": "f53b1224-7787-4cf9-b1a2-b00ab1ca649f",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "074b2757-0e26-477c-8681-7860978e372f"
        },
        "item": {
          "id": "1d0494c9-9ca2-47c4-a8e8-9d527f6696cc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c35e4c55-7197-4c2f-b865-b172f1a9d3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1e9140-4027-433e-ba3e-c2732ed010ab",
        "cursor": {
          "ref": "95bd9509-c698-4697-a7e8-467c69ff9249",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "95eb55ec-cb4b-4900-8981-f34171be8e8a"
        },
        "item": {
          "id": "1d1e9140-4027-433e-ba3e-c2732ed010ab",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5bbb6e31-cc3a-4bba-bbc6-885f6ff2e708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502c6800-fc7d-49a5-ae6e-c8fc3d27d7f5",
        "cursor": {
          "ref": "3a0c0567-4d96-4bc4-a0ab-b34e20a9cfb8",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "be223d33-8721-4282-a3d1-0a31e977ae17"
        },
        "item": {
          "id": "502c6800-fc7d-49a5-ae6e-c8fc3d27d7f5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cd8aea26-cd80-45b4-a7ad-c3643ea8e434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed59583d-5d18-4e0e-8a91-e4d737dc157c",
        "cursor": {
          "ref": "fa950383-b90c-4741-95e1-a97cb03ca23a",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "02ee55a1-dc51-4672-9262-36bcd0b5e731"
        },
        "item": {
          "id": "ed59583d-5d18-4e0e-8a91-e4d737dc157c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b85a8e77-8f01-4a09-b84f-5314c3a412d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec9ec4f-85aa-4ca4-9b05-a157be038939",
        "cursor": {
          "ref": "c4470409-245b-4991-a368-49a9a236e72b",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4ea1dd12-bacd-46ad-aef6-ac510b1d9f0c"
        },
        "item": {
          "id": "eec9ec4f-85aa-4ca4-9b05-a157be038939",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dc31af07-1b88-4222-a768-8c437412b6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec44036-880d-4404-b381-709a7dadcc2f",
        "cursor": {
          "ref": "d29c1d87-88b9-42b9-8701-c1eda1e958a7",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "87d5a2c3-74f5-4c37-be39-7598ef0b3e17"
        },
        "item": {
          "id": "2ec44036-880d-4404-b381-709a7dadcc2f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1446011b-d5a0-4f43-9db9-85bc8a111ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8a48ef-5256-4077-a7f3-c57c78ed20f1",
        "cursor": {
          "ref": "f64e1b9f-092f-4400-8509-2912ae374ce4",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0344490c-829c-4388-89d2-80a7dd4fa50e"
        },
        "item": {
          "id": "dc8a48ef-5256-4077-a7f3-c57c78ed20f1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a04a6a45-2a2c-4d51-827a-80dbc803f242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c03927a-50e4-4c34-91b7-c1c0e4bde4cf",
        "cursor": {
          "ref": "cfa4645d-cb56-4921-a00a-6a92978ea20a",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a2b081e6-5cd3-4b41-a20f-0d47613b0c26"
        },
        "item": {
          "id": "4c03927a-50e4-4c34-91b7-c1c0e4bde4cf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dd98fafb-6f01-4d02-96d1-2199d92b3494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacad289-fb74-4105-b44a-3d34ef76fac4",
        "cursor": {
          "ref": "73f12d46-bcf3-4127-8195-38baefc5989f",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "efee4c62-b916-495a-a1be-b9befd30febd"
        },
        "item": {
          "id": "cacad289-fb74-4105-b44a-3d34ef76fac4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8c8bcc8a-d385-4aeb-a49f-5cf60bf29766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b67c38-cf4e-447f-b719-a1e508c32fd6",
        "cursor": {
          "ref": "3c0e98d9-ff4a-4e98-b92f-7c04999dc278",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ab7bd640-1143-4060-8f7e-999934772cb0"
        },
        "item": {
          "id": "b1b67c38-cf4e-447f-b719-a1e508c32fd6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "500b7043-e0b2-4331-91bb-f398d9d88e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd788197-d41c-4338-8086-a6baa00750ea",
        "cursor": {
          "ref": "6dceae6c-52e6-496e-bb20-466e0dfe0af2",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8535288b-811d-46c0-ac72-66cb4ea627cc"
        },
        "item": {
          "id": "fd788197-d41c-4338-8086-a6baa00750ea",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5a300093-f31c-4508-a9a5-d31d6bd8b107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf0e7d9-0fdd-4466-ac2c-04de263779ba",
        "cursor": {
          "ref": "1907472a-ab83-4838-afbe-ead1d4e11927",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "13c78dad-7b1a-42a6-83a6-12fc552b87d2"
        },
        "item": {
          "id": "3bf0e7d9-0fdd-4466-ac2c-04de263779ba",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "aa7a1c15-2cdb-4222-b8da-98308e6ffaa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ab7b7b-31fb-4b05-b402-a6629720ad10",
        "cursor": {
          "ref": "333cd8f8-b165-4451-b0e1-a412bf895eea",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7835ed77-364b-4426-bc03-addf4413de58"
        },
        "item": {
          "id": "29ab7b7b-31fb-4b05-b402-a6629720ad10",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1428d4b5-5d76-48d7-9d72-adf3b4af305f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa61d20-4766-4653-bf09-8e334eaed331",
        "cursor": {
          "ref": "0a78a39f-cdc7-42a5-aab6-f572b6f806bf",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d2700344-03a8-46c5-a346-891ba268a68c"
        },
        "item": {
          "id": "2fa61d20-4766-4653-bf09-8e334eaed331",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "84b116de-cb5c-4082-8536-807a879b12f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fed1cb-a68d-4482-b56a-2a09d2de9d44",
        "cursor": {
          "ref": "7a97d8f1-7e9d-4ebf-87b9-d0e2f3906f0e",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d1cbdac2-e810-4e4a-b244-0aff70ad8622"
        },
        "item": {
          "id": "79fed1cb-a68d-4482-b56a-2a09d2de9d44",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bebde316-facf-474d-a56a-04cd8ca84735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bc7691-086b-4ece-a9b2-07e64f9f58df",
        "cursor": {
          "ref": "c69d4158-b43c-45b8-97eb-1d1feee78ec7",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "514005df-21e2-4c06-8e1b-8945429d9e4e"
        },
        "item": {
          "id": "a4bc7691-086b-4ece-a9b2-07e64f9f58df",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "98b87727-a4a6-467b-8f3b-b1261b054a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00e6fae-91ca-469a-bf0a-bccf4bff1333",
        "cursor": {
          "ref": "06e70256-c3f3-4f3c-bea9-54553297175b",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "54e6ab4d-a496-4347-bebe-d81bc12382e6"
        },
        "item": {
          "id": "d00e6fae-91ca-469a-bf0a-bccf4bff1333",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9c13b890-7a7c-47dc-90d5-e3d1a8055973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb117235-605c-461b-8123-d84f9362b33a",
        "cursor": {
          "ref": "5e91383f-940f-4753-a318-3f3abf3c5546",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8ce641e2-695e-4361-b051-991e68528a97"
        },
        "item": {
          "id": "eb117235-605c-461b-8123-d84f9362b33a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "506cea87-1b02-440e-9cf9-845f61cc2174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e98b8a1-e705-40e8-8b3e-4682dfcdc9bc",
        "cursor": {
          "ref": "0bd47af4-4336-4455-ace2-d63e7ad9d640",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fb946534-da8b-4f0e-80e8-46ba5fef38cd"
        },
        "item": {
          "id": "1e98b8a1-e705-40e8-8b3e-4682dfcdc9bc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ae15533b-55a1-4b5c-8949-62b5862ffd20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542af3af-da20-47eb-98e0-65cd9b3d4a9b",
        "cursor": {
          "ref": "7b262a1e-aa8a-4796-af43-40c02a2b3f0a",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2bbca629-d504-4468-a3b8-6ca44ee59eea"
        },
        "item": {
          "id": "542af3af-da20-47eb-98e0-65cd9b3d4a9b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0d38790d-c5fc-4bc5-94ef-c80322825639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d4abb4-a9e6-4f9c-8b25-52a386376e4e",
        "cursor": {
          "ref": "f66b6ad4-92d6-4a0e-83a0-d7cbbed88a2e",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e3933ef4-8179-4821-a47a-ce21d79dcd7e"
        },
        "item": {
          "id": "35d4abb4-a9e6-4f9c-8b25-52a386376e4e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b48dde39-8746-4a10-8181-ddcd4c3f557d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4f0f1f-7d1e-4c4e-bb8b-21a477c144c7",
        "cursor": {
          "ref": "db10a8bd-d9d2-412f-80fe-99e5dc2d983d",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bab7f9d4-3319-419c-86f0-9c623915f746"
        },
        "item": {
          "id": "8f4f0f1f-7d1e-4c4e-bb8b-21a477c144c7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4ed970f5-705c-49a7-bca5-2a11b4cdac6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436fbba7-90d2-405a-a761-1882126e7381",
        "cursor": {
          "ref": "9de458f7-9868-41c0-90f5-04de64e27b13",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9b273b7c-01d5-4764-8888-1f61bc154b90"
        },
        "item": {
          "id": "436fbba7-90d2-405a-a761-1882126e7381",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7877864b-7cf3-4313-95d1-58bd7454f422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e874320-80bc-47c0-aaa7-521c0fc71fb9",
        "cursor": {
          "ref": "21e2cc48-16af-4b88-aee5-5a7c29ed95dc",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bd39584b-e32a-440c-9e29-a29790aba672"
        },
        "item": {
          "id": "2e874320-80bc-47c0-aaa7-521c0fc71fb9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c4171ce9-a389-4f25-bb6f-5a47fac72461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7782a6-fc40-4b5c-8bc9-b4f2c2c1e294",
        "cursor": {
          "ref": "71ed6af2-db0b-43c6-983e-a8c35065bdfe",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8d7d2d29-b68f-4c09-8d5a-231df16d5d8c"
        },
        "item": {
          "id": "ed7782a6-fc40-4b5c-8bc9-b4f2c2c1e294",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d729e186-4847-42b8-9a43-ca1bbd6a142a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0501e61d-9265-427b-a930-8f3259e8d06d",
        "cursor": {
          "ref": "5d276598-8315-429f-92a9-e8ee7f2e9e99",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7c278480-d984-4509-969a-a3aafc84debe"
        },
        "item": {
          "id": "0501e61d-9265-427b-a930-8f3259e8d06d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e24f5a9a-6435-4f9d-a5c1-0296c23ce76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7077d160-beb8-42a1-9e7d-d7c0d655cac1",
        "cursor": {
          "ref": "a404650d-6fcf-4b7d-9959-f91f4d8d494c",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6c18643d-81ce-40a9-b61a-c91c62daa0d8"
        },
        "item": {
          "id": "7077d160-beb8-42a1-9e7d-d7c0d655cac1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9bc16566-c80b-4e4a-9d59-10592908b3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c33bb7-a34b-4561-9be1-f6e04391b54e",
        "cursor": {
          "ref": "1972f493-95c2-4104-a4a9-8113abb46977",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e2b8fd87-e0ac-4c2e-b911-d35d0d6a6763"
        },
        "item": {
          "id": "b1c33bb7-a34b-4561-9be1-f6e04391b54e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bfc5fa76-4680-4537-9bca-ea7123d17e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55252216-371f-4cc5-8b34-f9e3d3dbfc42",
        "cursor": {
          "ref": "b62d4e71-7b59-4823-8c00-335c220cbe10",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5b25c79a-6cb4-496d-813a-cf8516d08a30"
        },
        "item": {
          "id": "55252216-371f-4cc5-8b34-f9e3d3dbfc42",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1350e183-98eb-42c2-a370-40f110e7f103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276629e2-9097-45b9-ade8-4c21d67a9ab7",
        "cursor": {
          "ref": "d12642ea-f9a8-4758-999a-9a3108ed4d4c",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ca1c18e9-2d9b-4d1c-a243-01657388cb3f"
        },
        "item": {
          "id": "276629e2-9097-45b9-ade8-4c21d67a9ab7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1b67f1da-f3e4-414d-89c2-6f33b4af9f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba27f556-e29e-4371-ac75-048497adf1a6",
        "cursor": {
          "ref": "b54695b9-e92f-4ae6-b0c0-f44a85e41d56",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cec06d49-97d2-4faa-ab70-c37cdfcbf8a5"
        },
        "item": {
          "id": "ba27f556-e29e-4371-ac75-048497adf1a6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "55ee5c63-195e-40a4-b29c-6347eddcac41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da61f45c-871d-4368-bc01-2109e1e9e715",
        "cursor": {
          "ref": "5804e326-a947-4da2-8327-65e7e6ce6e9e",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4d82aee3-8c7c-4291-8049-ee7a8fca9d4a"
        },
        "item": {
          "id": "da61f45c-871d-4368-bc01-2109e1e9e715",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "046e6fb6-5c6d-461b-aa27-fed7fa4bcdd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 110,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d14869-29be-4ca9-a8dd-cfff7106e564",
        "cursor": {
          "ref": "80971693-66f0-41d2-b29c-922bf486dee4",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "80b15c40-12bd-4b76-b7eb-89a83236738a"
        },
        "item": {
          "id": "c3d14869-29be-4ca9-a8dd-cfff7106e564",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "52a90148-b1ef-4e04-9ccb-7793f08f1e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19839102-0326-4bb3-8c5f-d4d0566f557b",
        "cursor": {
          "ref": "64f1d202-604b-4251-b417-87e95bb5ed1b",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ad9ef5f0-15ed-49d2-8abb-e59cb8314140"
        },
        "item": {
          "id": "19839102-0326-4bb3-8c5f-d4d0566f557b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "399c5386-f722-4855-b55f-51d89412f374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633a95d5-3aac-439c-a171-615010c5a177",
        "cursor": {
          "ref": "3621d007-bad0-41c8-b838-42e59377b3b9",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1bcad260-2827-4e30-9c8e-f76584fb746a"
        },
        "item": {
          "id": "633a95d5-3aac-439c-a171-615010c5a177",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e3279898-9457-4f0f-9b49-e34fd952271d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55eb2144-3856-4ddb-a55c-24fa157b4864",
        "cursor": {
          "ref": "3bd9441b-02b6-42c5-924c-f0181bcfa81f",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3c5b9c09-e796-4045-a0a0-9cfc386487ee"
        },
        "item": {
          "id": "55eb2144-3856-4ddb-a55c-24fa157b4864",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "de425054-69e5-4125-b6a0-cde98ea45ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033ca11e-5762-4554-889a-fc5aade463c6",
        "cursor": {
          "ref": "3e2ad2c3-8a54-4fbd-b99e-72370aee96fb",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5390653e-939e-4a25-af6e-51ce3901162c"
        },
        "item": {
          "id": "033ca11e-5762-4554-889a-fc5aade463c6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3fdac4e6-870f-4d03-87b2-c623f39aa515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b924491c-987d-4af3-9879-a263603d86de",
        "cursor": {
          "ref": "ee4f0963-531c-4dcd-a3eb-baddca707fae",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ccf6422f-118e-4be6-b227-83209ba28330"
        },
        "item": {
          "id": "b924491c-987d-4af3-9879-a263603d86de",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "01e3ddd5-4105-40ae-b6df-3325d43ee1fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 127,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1e55871a-1216-49f9-99d9-53a4847777b4",
        "cursor": {
          "ref": "139d22f4-fc20-49ee-9828-01e4d83b144d",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "67c4cc86-b186-4a80-b0c9-df643b050ae2"
        },
        "item": {
          "id": "1e55871a-1216-49f9-99d9-53a4847777b4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "152894b7-6d89-4b3b-8b57-8d855f88fc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a086494f-d9fd-41a9-aa19-20a592685162",
        "cursor": {
          "ref": "0266833a-be66-48f7-9688-c5bb3cd50b23",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6442c656-a2a3-4824-94ce-52c6fa5c1ecf"
        },
        "item": {
          "id": "a086494f-d9fd-41a9-aa19-20a592685162",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c15364b2-56b2-476c-b624-48f43b13bd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def14828-47bc-4104-a994-bce00667b696",
        "cursor": {
          "ref": "0ba5eeda-5535-4169-9b19-a7a7724290c1",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7766bd9a-83fb-44ce-aabd-61b4f368b792"
        },
        "item": {
          "id": "def14828-47bc-4104-a994-bce00667b696",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dbbced33-883d-4984-9225-c9830f20d06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeba2363-2a06-4975-ac3c-88138a05c2e9",
        "cursor": {
          "ref": "3fb2144b-976a-4ba6-a972-f5f011b9dcb3",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a46dec7e-cb59-4d8f-afef-831d03faad91"
        },
        "item": {
          "id": "aeba2363-2a06-4975-ac3c-88138a05c2e9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "53f95f48-2bc8-47b5-aa84-03c25d324b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd59412-86f3-4322-9ca2-937a4a6b433b",
        "cursor": {
          "ref": "40340159-4cd2-4fba-b854-6a3610525d3b",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fd693a84-e291-4220-8040-a3a724496153"
        },
        "item": {
          "id": "fbd59412-86f3-4322-9ca2-937a4a6b433b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e45207db-9a1b-44ea-9527-2ae2012047a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e448cfe1-597e-4185-ac78-f2febecb7338",
        "cursor": {
          "ref": "183d3328-275f-4586-a2ea-ca818e2239a8",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7fb84964-07ba-4d23-8690-88180e53fd19"
        },
        "item": {
          "id": "e448cfe1-597e-4185-ac78-f2febecb7338",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "048ea5c3-f61c-4ad6-8eba-6b6edff13f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4108fb-06de-4a52-958f-16a69ab4c7e0",
        "cursor": {
          "ref": "72eb248d-434a-4eb2-9d59-65b67e2819b7",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e79afc45-1885-4c7f-9cb9-d5a71f30bbe3"
        },
        "item": {
          "id": "7d4108fb-06de-4a52-958f-16a69ab4c7e0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4f7010ec-f7d6-4d2d-9406-26caccd42e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7957268-267b-47ec-9b17-fe0adb7fa841",
        "cursor": {
          "ref": "dbe865b4-56bb-4daa-b5f5-43cedee7ab10",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c5597815-62f8-473a-97fd-9479157efb50"
        },
        "item": {
          "id": "c7957268-267b-47ec-9b17-fe0adb7fa841",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "10d20bad-2df4-4046-964e-a97403a9d196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93f79d4-8dce-41fd-aa22-f55a484a8288",
        "cursor": {
          "ref": "01832e4f-0649-4fdc-a6b1-21cd6f483a05",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8b633cfa-8c9c-468b-80c7-2bc9453c71c1"
        },
        "item": {
          "id": "a93f79d4-8dce-41fd-aa22-f55a484a8288",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b6aaa361-1c18-494c-b54f-87d5ef5caf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ed3119-99f3-4cac-9e26-6edd9d8e0471",
        "cursor": {
          "ref": "6a40acce-5beb-48b6-9847-bb18352a429c",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3a4993a8-50a9-48ea-bf31-8ea0a86dd53c"
        },
        "item": {
          "id": "d9ed3119-99f3-4cac-9e26-6edd9d8e0471",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7cf12c95-5959-4e68-81e4-d704242424ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb274d23-32fa-4f61-baab-f0aea047e070",
        "cursor": {
          "ref": "5527792f-84e2-4cee-acf7-43f4dac07065",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ca7581ba-11fc-4a91-9c9d-7726ec1f0cff"
        },
        "item": {
          "id": "eb274d23-32fa-4f61-baab-f0aea047e070",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "652156b0-2167-4d6c-b296-d57742a21bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f638b1-6dee-4ad5-8933-13bf1adc1654",
        "cursor": {
          "ref": "d04401c4-a923-4dee-b0e4-5a69f86de195",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fc401b76-ab52-43c8-a84e-f531654d380a"
        },
        "item": {
          "id": "26f638b1-6dee-4ad5-8933-13bf1adc1654",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "04ece606-6315-433c-ac29-fc9497e55a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690aaad7-47e0-4ea4-a217-6a03ae9d80af",
        "cursor": {
          "ref": "42be78b7-0a7a-4a22-b3e6-e9c3c6bfa295",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f115fb61-0af9-43da-a2e9-290638924489"
        },
        "item": {
          "id": "690aaad7-47e0-4ea4-a217-6a03ae9d80af",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2a407ea0-5820-48c3-9fa3-8a6dc486f525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f44da0a-17f3-463f-a033-c35e7f055248",
        "cursor": {
          "ref": "47e5c681-f6a2-4594-be74-3f0a23e8eba4",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ee5ebea0-ca3f-49bc-be58-afc2351ce91a"
        },
        "item": {
          "id": "0f44da0a-17f3-463f-a033-c35e7f055248",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0b370360-bac1-464b-ab37-e463a5019425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719c9460-d108-4799-b596-262324d8ac82",
        "cursor": {
          "ref": "f7dee34a-2b41-4d06-b8d0-a5297310f3dd",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f31579cd-7b00-4f42-a559-d4837d894014"
        },
        "item": {
          "id": "719c9460-d108-4799-b596-262324d8ac82",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "29bd9f7d-2209-4265-baca-7e984b596a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c766ecb-f32a-49c9-8013-a8b0c391d9f9",
        "cursor": {
          "ref": "2f94b3d8-f63c-4d80-b83e-78790ece6ac3",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a7558ca9-140f-4983-bd0c-7db5d529de00"
        },
        "item": {
          "id": "7c766ecb-f32a-49c9-8013-a8b0c391d9f9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "61e96fc3-7145-4403-81cf-e7b3216e7cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dccb31-9895-4a3c-88b9-1ba6f20463e1",
        "cursor": {
          "ref": "1c45fe93-5cd4-42ff-b6ba-fb90b709c55f",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "31d98ebc-42c4-4f8a-b96f-b7cf3f33d70d"
        },
        "item": {
          "id": "f7dccb31-9895-4a3c-88b9-1ba6f20463e1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6765e538-d2a6-4ada-abef-9df673a58b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55512d84-04fa-4545-a420-cac3975fb917",
        "cursor": {
          "ref": "867a7314-6ae2-4db7-af2b-fe8e4ee9adab",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e836d700-d898-4cd2-a22b-17b14fbc5d06"
        },
        "item": {
          "id": "55512d84-04fa-4545-a420-cac3975fb917",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "98d4cbf7-c28e-4286-a3d0-aad0c7e6a186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a7e044-72c9-4573-a7dd-d02cd0feb1eb",
        "cursor": {
          "ref": "54b43094-932e-40e1-98b8-29fb86d5ce6e",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f8fd2edd-ad4a-46e7-8a97-a885febaaa14"
        },
        "item": {
          "id": "e8a7e044-72c9-4573-a7dd-d02cd0feb1eb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "107fea0b-a05a-44eb-bd8b-c85e058d6b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ec9ed8-8a4e-4e1e-a262-49bb6c48d692",
        "cursor": {
          "ref": "8bacbb71-635c-4fbf-a12c-e1bab10a5e32",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "78b4a2dd-8e5b-4cde-b1cb-b6998f42a164"
        },
        "item": {
          "id": "65ec9ed8-8a4e-4e1e-a262-49bb6c48d692",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "45a274da-f0b1-4a21-957a-b1e9b75a9535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8001e25b-8daa-4027-86c1-02b0eeab225b",
        "cursor": {
          "ref": "a5af6e35-d942-4b03-ba37-17b9b476ae97",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d036020d-ff40-46f3-b502-40fb65835b90"
        },
        "item": {
          "id": "8001e25b-8daa-4027-86c1-02b0eeab225b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "df1631c5-53e7-400c-8ab8-736cdb6faab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e9cc10-3aa6-4ef4-a3a6-49303322e417",
        "cursor": {
          "ref": "95b0a316-fae2-4f96-8b95-6dd42f6bba3a",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4af64a3c-2f75-488c-94be-e3aa2a9c210d"
        },
        "item": {
          "id": "45e9cc10-3aa6-4ef4-a3a6-49303322e417",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9e31cdee-9617-4f6f-808a-abd5436c8b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070fc974-2849-453b-858b-331997586155",
        "cursor": {
          "ref": "98d6d8a3-1044-4e77-b89f-27ac65fcd4a6",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a3dc4e4a-9773-4bb4-8ac8-baa5033c6cf8"
        },
        "item": {
          "id": "070fc974-2849-453b-858b-331997586155",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a088d29c-6d47-4185-b2e2-559b02f3d528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912ff69c-db61-4155-9937-cbd4e03add90",
        "cursor": {
          "ref": "c78bb645-29ff-470d-a0a1-f0e82bff9636",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5e8c4b04-2a82-41ea-90ad-c05640521743"
        },
        "item": {
          "id": "912ff69c-db61-4155-9937-cbd4e03add90",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f97eb06d-87eb-49af-862d-dad09afcc4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba2ac01-f4ed-4610-9338-f8efb15a0202",
        "cursor": {
          "ref": "9a168757-f15f-4726-8255-b50c3c12f9a7",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a217afac-ac27-4e4b-b570-3f1d77ebbf88"
        },
        "item": {
          "id": "bba2ac01-f4ed-4610-9338-f8efb15a0202",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fef12df6-4f30-4490-ac2d-812bf9288188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57246ac6-f10b-4392-8dd2-ddf8f3b6474c",
        "cursor": {
          "ref": "0e44741e-0953-4473-9d80-8d87144c43e3",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b99473bb-c366-4b1b-b773-30410e98f537"
        },
        "item": {
          "id": "57246ac6-f10b-4392-8dd2-ddf8f3b6474c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3536a4ad-1701-4ceb-8bea-6edbd77e1cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5338780-8e35-481c-a9a5-7cd125317bcd",
        "cursor": {
          "ref": "2be76ea1-b2ff-42a7-859c-b7433bc10169",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8905cc5e-a1a5-4888-a0f2-4f6b86fbe806"
        },
        "item": {
          "id": "c5338780-8e35-481c-a9a5-7cd125317bcd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fb0c9244-e369-4745-95ed-44551138e8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416cebc8-95b6-40e2-9d65-8e2f7ade451c",
        "cursor": {
          "ref": "acb0cd52-0fc1-4469-b910-54320437b394",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b4284dd9-be4f-4ada-93fd-3697174449cb"
        },
        "item": {
          "id": "416cebc8-95b6-40e2-9d65-8e2f7ade451c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2eb7968f-88ef-4508-b448-5e46362ce222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41735ac-49e7-4ab1-a209-992ebf6a51b5",
        "cursor": {
          "ref": "03686614-157e-4d96-b15e-738c4053a557",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8310d0c9-4f46-40a9-9080-41732bea477d"
        },
        "item": {
          "id": "b41735ac-49e7-4ab1-a209-992ebf6a51b5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e18a1fc1-0e2d-451e-a458-ce207cce3cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1aca29-d14a-4ccd-977f-110b0a7b98fb",
        "cursor": {
          "ref": "2572bd01-e566-4223-8c25-64798e96c16e",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "98a76e40-c7f0-464e-9611-d19606485936"
        },
        "item": {
          "id": "6b1aca29-d14a-4ccd-977f-110b0a7b98fb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fc8af78c-42fc-4a1a-a7a3-9dd2dc5a4086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f204455-0758-4943-97e4-b0f78c697558",
        "cursor": {
          "ref": "23d16b0e-6a04-430d-b310-a71d47e4c286",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a27b9dfd-fd51-44e4-93bf-15a6996a91c1"
        },
        "item": {
          "id": "5f204455-0758-4943-97e4-b0f78c697558",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4f2f92c6-4469-45b0-b04d-69031e392172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100505fe-d3ac-424b-bd18-284791b96720",
        "cursor": {
          "ref": "baf5094c-a5dd-4e8f-9a6f-49d3a0bbd686",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d974e8d0-63b9-4937-a998-2b864006df6c"
        },
        "item": {
          "id": "100505fe-d3ac-424b-bd18-284791b96720",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5558a6e2-1f84-42bf-bb8a-bacf8b7c300c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9f97ef-43cb-4c5b-9d8a-decbbf95e6d9",
        "cursor": {
          "ref": "ccfe6602-d867-4724-8712-82372c1c1047",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1659869d-7982-47c0-bfaa-eb7ae907db35"
        },
        "item": {
          "id": "ca9f97ef-43cb-4c5b-9d8a-decbbf95e6d9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "75e77e32-13de-4254-9766-04784b5ddd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70336c5b-0e6e-4725-8cf2-cde3097e513d",
        "cursor": {
          "ref": "c8e72025-fdd9-4d69-8ef3-cbeeec1dd178",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4c85a6d2-6059-4148-96b9-270270f064a4"
        },
        "item": {
          "id": "70336c5b-0e6e-4725-8cf2-cde3097e513d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "02a0aa17-4460-4998-bfd0-a51dd78ccfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f24736f-fde0-4d34-a908-acf45568f5e0",
        "cursor": {
          "ref": "e36fcc9e-fac1-454f-8f08-5fe1c234fcd8",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b944a4be-fc21-45c5-a6bb-9ab14dae3d0e"
        },
        "item": {
          "id": "4f24736f-fde0-4d34-a908-acf45568f5e0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "09eb48a9-ea5b-4f44-ba08-62571ee50916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bb8db7-e698-4c2a-9b63-c7517a3ccfd9",
        "cursor": {
          "ref": "083525a0-ff8a-4a32-aa1e-42ab38ca684c",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4c7869f1-0b1e-4196-85fa-952d66b8d66d"
        },
        "item": {
          "id": "14bb8db7-e698-4c2a-9b63-c7517a3ccfd9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ccbf6c4b-a034-4bb4-961a-cfc0af434f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336ef0f9-36dd-4fa0-a153-730ada4b7eb9",
        "cursor": {
          "ref": "751f72ba-749e-4f7a-8893-ebed6021d4cf",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d76f933d-6dbf-4101-8ea5-5948db175e8a"
        },
        "item": {
          "id": "336ef0f9-36dd-4fa0-a153-730ada4b7eb9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f4936068-439a-4638-b16a-28b16318cf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c01c5d-b123-458d-b6d1-c63a3ba9a1e4",
        "cursor": {
          "ref": "82c1c561-dd91-40a4-bff3-6586ae78992d",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bbdf6b6a-81d6-4f57-b362-65e02e895744"
        },
        "item": {
          "id": "e9c01c5d-b123-458d-b6d1-c63a3ba9a1e4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c16bdc28-19a3-48ff-bae1-f36235241e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f4c6af-2822-42f2-ad85-2bb08734e738",
        "cursor": {
          "ref": "852ef74b-e769-4045-8d97-e1c11932c41f",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c6f6cbf2-adb4-41d1-93cb-d39967f27663"
        },
        "item": {
          "id": "c4f4c6af-2822-42f2-ad85-2bb08734e738",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3e269828-aced-40c2-9df9-f4746b5411f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421d1735-5daa-4937-8b70-f966faddace0",
        "cursor": {
          "ref": "5f87b9cc-feeb-4917-a33c-40bf9ae92a4b",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "303d94f8-cf13-4081-b197-7ee7e54382f3"
        },
        "item": {
          "id": "421d1735-5daa-4937-8b70-f966faddace0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6c6acc22-fc31-48d3-8853-4a10c499b38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a37bede-0997-421d-bb07-f0e11a0e8740",
        "cursor": {
          "ref": "489464a0-5db4-440a-99a5-35f7d20918ee",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "77348a29-4fc2-45db-a26f-ed7e5cae0b7b"
        },
        "item": {
          "id": "6a37bede-0997-421d-bb07-f0e11a0e8740",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0f248c65-2e8b-41dd-a16c-9575b06248a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa05287-c3ca-419e-8b0e-76b8ecc983e3",
        "cursor": {
          "ref": "3b412704-58e4-4734-a803-2d3ee1fe77e0",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2a8fafe6-a066-4b85-aba1-b4a12450b0df"
        },
        "item": {
          "id": "7aa05287-c3ca-419e-8b0e-76b8ecc983e3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "898bc868-5ddd-4829-8795-6fb931b85856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369e7276-4598-4425-837c-0cef1fcd09c8",
        "cursor": {
          "ref": "150858d7-4917-4f4e-8d61-4bd458917fee",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bfd76d16-efc1-4c07-962a-8912685931b6"
        },
        "item": {
          "id": "369e7276-4598-4425-837c-0cef1fcd09c8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5c422e52-1edb-423c-813c-eb247cc4087f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed59421-f30f-4e30-bc3e-ab539711ac08",
        "cursor": {
          "ref": "c3843938-deda-44d8-9dbe-dee55d482c9a",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9fb88d5a-2a99-4648-97ed-cce42a02c26e"
        },
        "item": {
          "id": "7ed59421-f30f-4e30-bc3e-ab539711ac08",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "812cc984-d820-49d5-9af6-5a9a2bb7f2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dd7f4d-9976-40e0-8859-bf51f5113595",
        "cursor": {
          "ref": "f3e67060-55bd-43ac-8e54-b16d98d97e42",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2572ab0d-de07-4a5d-a4f6-bf16fd36c543"
        },
        "item": {
          "id": "f0dd7f4d-9976-40e0-8859-bf51f5113595",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f1762085-a3ac-48e2-8753-23fd310f1eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c945826e-ce23-4160-ba7e-accacf459993",
        "cursor": {
          "ref": "61219d2b-4f84-4c84-b4b6-d2dbe155c54a",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e9cf4015-b076-4188-96e5-b633d8b56691"
        },
        "item": {
          "id": "c945826e-ce23-4160-ba7e-accacf459993",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ce32b6a3-d556-4e6a-afe4-b2a0754fe605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66565993-b592-4c3f-8d20-680e36cb1280",
        "cursor": {
          "ref": "ccad012f-a71b-4eed-86ca-4eed6954dc51",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "525a52ec-f53c-458c-8ad3-63138e283d70"
        },
        "item": {
          "id": "66565993-b592-4c3f-8d20-680e36cb1280",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5ef13b84-6995-4f0f-ac01-9d9011b3e2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04560ce3-c1df-4156-8c3d-8e592723e46c",
        "cursor": {
          "ref": "599ec91c-3f0c-420b-8eb1-a43a07910abf",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7e4c1554-7dda-4221-9168-5351bc645544"
        },
        "item": {
          "id": "04560ce3-c1df-4156-8c3d-8e592723e46c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "96707fb9-dc0a-4171-be51-a810de66e540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc2ca65-8e72-476b-9f81-cad01d84792f",
        "cursor": {
          "ref": "4a88941d-83ac-457e-9359-8b851e0ddb5d",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ee234a90-dccf-45ae-a471-2f13628a843d"
        },
        "item": {
          "id": "8fc2ca65-8e72-476b-9f81-cad01d84792f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3a57d0e3-1535-4d1c-a204-5899aa79b68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4046a89a-dd56-4082-b285-9eade0bb4f65",
        "cursor": {
          "ref": "275b6f96-c574-487a-80af-bd14af0b00b0",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e38aebf0-0937-4eaa-af8a-d4a34caf9fda"
        },
        "item": {
          "id": "4046a89a-dd56-4082-b285-9eade0bb4f65",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5a6556f8-e14a-4fbc-b207-0c691bd99be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20510ab2-786c-4b97-b396-f045d3ac0883",
        "cursor": {
          "ref": "c798b955-d79e-4339-9a48-9fd03bfb7680",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bfdf39d6-1fea-44bd-a6bd-f4bf32b79130"
        },
        "item": {
          "id": "20510ab2-786c-4b97-b396-f045d3ac0883",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "947c9138-6d91-4ce2-838d-a870b9b6a313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0244f536-4e19-47fb-aa57-85a20f4ccb78",
        "cursor": {
          "ref": "86193068-2a9d-45b0-91d2-465f9f3851b8",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ed1139d0-a398-467e-9667-41a63ae2cd91"
        },
        "item": {
          "id": "0244f536-4e19-47fb-aa57-85a20f4ccb78",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "629861be-b35d-4731-b11d-c4b6fa690e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95078795-f916-4754-9ea9-63993ed7828c",
        "cursor": {
          "ref": "98e53d1d-13e0-4f34-9f18-3db7bba0f10b",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "69c576e9-38fc-4d1e-a751-780f8b4cc36c"
        },
        "item": {
          "id": "95078795-f916-4754-9ea9-63993ed7828c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7fc07930-93cb-4df8-9b88-2718f73b232f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ea089f-74d3-45fa-9ac0-3a0142476107",
        "cursor": {
          "ref": "54224ba0-5c0b-4d61-ac7e-3846431f558c",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "05d34f3c-40a5-4edb-8dd5-435769d7ca13"
        },
        "item": {
          "id": "01ea089f-74d3-45fa-9ac0-3a0142476107",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aa3ef1d2-e360-48f4-97ad-21243b95db6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f63d00a-3dbe-44c4-b298-696c55732f4b",
        "cursor": {
          "ref": "e04dd4d3-db44-4a73-a9e9-a48e33cef798",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0d35c354-963b-4a51-849f-833a2f6678d1"
        },
        "item": {
          "id": "1f63d00a-3dbe-44c4-b298-696c55732f4b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "672549e0-c467-4262-90b5-75f5032b1c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6d5c56-b0aa-4580-8575-e0fd45395c89",
        "cursor": {
          "ref": "f81e7ea9-6a70-436e-9ffa-e1766ace9090",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d5d9a3cd-349e-4f45-b7d8-1d21aad1fc03"
        },
        "item": {
          "id": "8f6d5c56-b0aa-4580-8575-e0fd45395c89",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0ab3b2b0-ddbd-4499-b5d6-bed580342dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1427299-3444-40e4-8d7e-5f63ebbbca55",
        "cursor": {
          "ref": "ad2f6c08-e33d-438c-ac1b-abe33c65b5dc",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7c550da6-13a4-4601-90ca-75df2741146f"
        },
        "item": {
          "id": "b1427299-3444-40e4-8d7e-5f63ebbbca55",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5d6353d8-0e98-462d-9108-fe418c7c8531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1db0c2c-1cdd-4df3-8dc7-fe1b58c4e8e3",
        "cursor": {
          "ref": "ba82c20c-85ac-44f6-b991-7af6575e749f",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b8e15eab-2e92-494a-8e00-e8e8a9b89b7b"
        },
        "item": {
          "id": "e1db0c2c-1cdd-4df3-8dc7-fe1b58c4e8e3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ca2e72c2-b1cf-4b37-8443-a3434c5db2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e1bff7-b84c-48ea-a566-0e3b55384abc",
        "cursor": {
          "ref": "25e1958e-125e-4c6d-bb29-9fbf2c2e7fe5",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f253471a-6b71-4b9d-9392-f54c9b105296"
        },
        "item": {
          "id": "e2e1bff7-b84c-48ea-a566-0e3b55384abc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "02d9efe7-ade5-49d1-941e-fac2ec830442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ee0985-9e13-45e1-825c-42f6c1f4b452",
        "cursor": {
          "ref": "7bb21c07-b41f-45f0-a5f5-4ac3e4b34b0e",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "23d6c4e5-059d-4080-a5d0-9fe08d455eda"
        },
        "item": {
          "id": "81ee0985-9e13-45e1-825c-42f6c1f4b452",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f903830f-fb2f-488a-86c3-3669e877fe07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1dee38-69f9-455b-8c28-4d804c1386da",
        "cursor": {
          "ref": "ffa0298e-606c-4afb-90d4-ac0735898307",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0c0f2a18-9a70-46de-8ecf-1c0be8312eed"
        },
        "item": {
          "id": "4d1dee38-69f9-455b-8c28-4d804c1386da",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "112afab0-0a52-4120-814c-5f40ffa49dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800bdadd-ebd1-428a-8aa9-f64b0ed3c9a9",
        "cursor": {
          "ref": "5060c987-dd52-4bf4-ab90-4d00c9ccad98",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "904e3516-e3ed-4830-9750-949567d020b3"
        },
        "item": {
          "id": "800bdadd-ebd1-428a-8aa9-f64b0ed3c9a9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e8b1f42a-3446-449a-9491-100fdf1c6fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f433d2c-ae7e-4e00-a8ad-6926f52f565b",
        "cursor": {
          "ref": "c75641d6-5e6a-4ecb-9cde-c531323827ab",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9196dc0a-f836-4492-9949-f033aa04a2ea"
        },
        "item": {
          "id": "6f433d2c-ae7e-4e00-a8ad-6926f52f565b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "69614340-f384-4364-be58-af9ce8226020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968361fa-b6ff-4b93-8367-69ebc999aaee",
        "cursor": {
          "ref": "9702f6b6-0226-4e68-9a5f-54de3101b651",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1c96717c-fa8f-4d82-b05c-d9699c406804"
        },
        "item": {
          "id": "968361fa-b6ff-4b93-8367-69ebc999aaee",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0cb02bcb-f7b4-4e46-8c3f-2752aa5a8891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66ffdb6-aeb2-4df0-881d-4e1fff2db261",
        "cursor": {
          "ref": "37c561f5-9229-4b31-8d06-3b10d0dcd46d",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a2b07a21-cd13-4d61-ac1d-2f8c4d11f00f"
        },
        "item": {
          "id": "c66ffdb6-aeb2-4df0-881d-4e1fff2db261",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "590cbe5e-21e4-4400-b710-02d8b4bcf160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89337cf-3b5d-4eb9-9f3a-2228f414be47",
        "cursor": {
          "ref": "11cfb72b-7c1c-47ae-ba72-26478d890995",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cd208d8f-483c-4001-9e38-873e5903f504"
        },
        "item": {
          "id": "c89337cf-3b5d-4eb9-9f3a-2228f414be47",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bcd9c9dc-121e-4bd2-ae2a-5039d46e419c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650220f6-f249-401d-9b7c-dfc5c812c8d3",
        "cursor": {
          "ref": "2e16fa43-8e9c-4bbd-b628-3bb0ba2376bb",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "eac5a546-0ebf-44a8-8a29-06b59c6c14d4"
        },
        "item": {
          "id": "650220f6-f249-401d-9b7c-dfc5c812c8d3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ea2f888e-0fbd-421e-9808-d2d488c42eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5686fb72-e95b-4085-9a2f-a914b2fb7828",
        "cursor": {
          "ref": "2bcac736-637f-4748-9962-927803f26217",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0268388e-561e-4d8a-bfe8-077ca028b51d"
        },
        "item": {
          "id": "5686fb72-e95b-4085-9a2f-a914b2fb7828",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6a302518-6ea0-4e51-a8dc-301aa6608081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1491d3-6306-49cd-a740-bdcfddbc94fa",
        "cursor": {
          "ref": "b14e3553-9d87-4f19-a14d-49de09aaf4f1",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "dd58125b-50b6-4214-a3dc-a75cf9357677"
        },
        "item": {
          "id": "ad1491d3-6306-49cd-a740-bdcfddbc94fa",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "80a8ab27-8457-445e-8b39-7f5ad7a6ec09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159c7123-eb54-4852-b480-e79103443c2d",
        "cursor": {
          "ref": "fa0d8142-b21f-4a68-9d11-a91693097c21",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d7f3b3f3-421d-4b72-bbde-8cec566e502e"
        },
        "item": {
          "id": "159c7123-eb54-4852-b480-e79103443c2d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bb35e640-b8e6-41c4-b5e8-87426718de06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2fc679-f633-4c78-a654-16305a07c526",
        "cursor": {
          "ref": "9679a4de-51b6-4e76-961e-5cfc3b272095",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0232f953-5f83-47d6-ab98-f986888adec3"
        },
        "item": {
          "id": "8f2fc679-f633-4c78-a654-16305a07c526",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fd681a49-4c4c-4ba2-a42b-4c9db886aa0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fbb2f6-0711-4c88-b87a-7130c74d5c4f",
        "cursor": {
          "ref": "7e406f02-3629-4e78-9958-ded1a6be547a",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d9bf51a5-59eb-4dde-b1b4-2448447b83aa"
        },
        "item": {
          "id": "35fbb2f6-0711-4c88-b87a-7130c74d5c4f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9b87edaa-bb90-4e6d-adfc-10c2bbe0f90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623a9a27-9573-42d6-b5f9-37e48fc30222",
        "cursor": {
          "ref": "9451bade-b86c-46e0-9610-eabe80f5843c",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bc5d21b9-eb7f-42b5-95a1-81c564986de9"
        },
        "item": {
          "id": "623a9a27-9573-42d6-b5f9-37e48fc30222",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "03a1dcbd-4ab3-4785-8bd6-5e600ae3fdfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bbb07d-32da-4f85-88e5-876d95bb0ea4",
        "cursor": {
          "ref": "477d1876-1964-4cc8-b45e-9c64e421c487",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b9f604da-e2a6-4f45-8c87-f391685ece62"
        },
        "item": {
          "id": "c2bbb07d-32da-4f85-88e5-876d95bb0ea4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9f1d671f-f067-4804-bc4b-12340d59ef71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf7d395-da1b-4851-aab4-46c971cba925",
        "cursor": {
          "ref": "9179e10c-46cb-4744-9a95-794dba1619a1",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "2aa62938-d707-4737-8ccc-3c502bcf8bee"
        },
        "item": {
          "id": "2cf7d395-da1b-4851-aab4-46c971cba925",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "632dde7f-09de-4a36-b83b-74049df615fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9cd2ee-b502-47e2-8d58-a0dd54127592",
        "cursor": {
          "ref": "7e809ca6-8a6a-42be-89db-1322ae78461e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a61ab115-4ee9-4f03-8565-bbd60f561ea6"
        },
        "item": {
          "id": "4e9cd2ee-b502-47e2-8d58-a0dd54127592",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "07b356b1-48a2-4e85-b60b-07dcbd63725e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6240c87c-fcba-4aba-9354-447aa744db75",
        "cursor": {
          "ref": "2219727a-ba9d-4766-acb7-fce2d03af38f",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "68a3f403-b892-4670-861b-4fce3eaed92d"
        },
        "item": {
          "id": "6240c87c-fcba-4aba-9354-447aa744db75",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "37ad07f7-f80b-4298-85db-6359b1634289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cadfb63-292f-4b84-a553-a6278f649bcc",
        "cursor": {
          "ref": "1822837b-68c6-4516-ab88-d654d5968280",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d46b70a4-b61e-420e-9fc6-3b72101668df"
        },
        "item": {
          "id": "2cadfb63-292f-4b84-a553-a6278f649bcc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "98209871-fd7f-403a-91cc-2c0dc15cfb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81459b93-86a7-4e81-b74d-04ceb2014d1c",
        "cursor": {
          "ref": "c6213df6-cc35-4250-8ac5-441dd8b8fdd1",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "97152d22-85e4-4360-b9cb-bbb65eb9e22a"
        },
        "item": {
          "id": "81459b93-86a7-4e81-b74d-04ceb2014d1c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cd82d7bf-071e-47d7-8aa2-71ca485a3326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d32b0a1-3cea-41d2-8db0-d2b4a71849ad",
        "cursor": {
          "ref": "4038dff3-6b68-4fe1-a44a-bcf48d60909a",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "bd4fef6b-5c1d-4300-a561-fce182e0ac2e"
        },
        "item": {
          "id": "6d32b0a1-3cea-41d2-8db0-d2b4a71849ad",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "937189eb-3544-43cb-8538-1262e98a718f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a312c8-ebb3-4793-96f6-45a1cc42411c",
        "cursor": {
          "ref": "825e5e23-ae63-4069-9f5e-b5f9be0c0f40",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "71d7f667-c4eb-43d0-a7dd-f62396a39c5e"
        },
        "item": {
          "id": "34a312c8-ebb3-4793-96f6-45a1cc42411c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9064a4d9-1d7a-48f4-a235-be5e3c48c6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1de6b4a-e884-4188-b204-1c91a7376bd9",
        "cursor": {
          "ref": "0474df05-301e-467e-9c11-6740eae1fb9e",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3ef83b71-2678-48e6-ba4c-3ec21c5446fe"
        },
        "item": {
          "id": "d1de6b4a-e884-4188-b204-1c91a7376bd9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2b49723c-2597-479d-9a3f-c3fed1aa7043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8c4cf8-0f9e-497a-816f-8f7d74fb0061",
        "cursor": {
          "ref": "650564e9-8269-4458-a919-ce7dcf941f60",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4cda8069-8a93-4b46-9bf4-95ebdf69f20f"
        },
        "item": {
          "id": "3d8c4cf8-0f9e-497a-816f-8f7d74fb0061",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1f0d2e1b-a206-4fd6-a6cb-ba7a7f8380da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb03731-63c6-4952-bbe2-69861c11f1ef",
        "cursor": {
          "ref": "c9efd6a2-6e92-4557-9ead-a012c8c89bcc",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "9386b723-754d-49ad-8e8d-d77bd5b4830f"
        },
        "item": {
          "id": "4cb03731-63c6-4952-bbe2-69861c11f1ef",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c6295d4e-3d8e-400c-9126-0da3b9c36e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f8b227-98e7-4ad6-a062-36a92f81aa28",
        "cursor": {
          "ref": "dbe34b70-1bbf-4b12-ac67-06eef0538cf1",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b7ad59f2-7fd4-445e-a2dc-f001999cb214"
        },
        "item": {
          "id": "50f8b227-98e7-4ad6-a062-36a92f81aa28",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9b73a7f0-5ab7-4135-8b75-1bbcd0628b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc856c6-4cbe-40af-b528-1541f1cc1318",
        "cursor": {
          "ref": "8d90fe6e-99a8-4c39-a6e2-3077910ffbb0",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d7d8fb4d-8baa-4399-930d-3c3447e070f0"
        },
        "item": {
          "id": "bdc856c6-4cbe-40af-b528-1541f1cc1318",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9e4adc69-7075-47c9-96ae-c31e03954dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ef1a9f-3fb6-4c5f-8324-e51e10af497a",
        "cursor": {
          "ref": "6f19e408-2e1b-4ab6-b31d-30cf7605dc42",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "8b2616de-8d03-41cc-b822-078ae75386b5"
        },
        "item": {
          "id": "09ef1a9f-3fb6-4c5f-8324-e51e10af497a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b343940b-4f5d-43f1-b386-b16b52ff678c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477cd695-805d-4b9f-a4b3-d2b21d019d8d",
        "cursor": {
          "ref": "4df019f2-48b2-4994-90c9-a30f57e50405",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "098a1145-5044-494c-9cf5-e393eae74f51"
        },
        "item": {
          "id": "477cd695-805d-4b9f-a4b3-d2b21d019d8d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "016c6eaa-c05c-44b2-85e4-cccf515efb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746a3fe9-0916-43c8-aafd-da60a90b1da6",
        "cursor": {
          "ref": "6f52fe82-9986-4fc8-b369-9f04f15fcbf4",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9dfbb34a-637f-4be6-82b0-4890cafb0665"
        },
        "item": {
          "id": "746a3fe9-0916-43c8-aafd-da60a90b1da6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "715ccc05-49bf-40a3-9fa9-4d5615b1c079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d07a54f-390f-47f8-95c2-f32ef8d505e2",
        "cursor": {
          "ref": "50bc96dd-ca23-4560-a8b4-0cd8d0e1a8a5",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a3ede7b0-a942-4bd4-ba31-297e1120ed22"
        },
        "item": {
          "id": "5d07a54f-390f-47f8-95c2-f32ef8d505e2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "26eaf28d-a53d-45ea-b4f7-5d34e6f3570b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1f57a9-c590-4a8a-8639-ea62b6a1687a",
        "cursor": {
          "ref": "c9995340-5ad0-4393-98b5-28327c543673",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0b941183-3b1c-437a-8e32-05d56259a513"
        },
        "item": {
          "id": "1e1f57a9-c590-4a8a-8639-ea62b6a1687a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8f43d07f-0309-4856-9490-029a750a41f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfeb4c2-5b89-4aa4-9ec2-1538f52b882a",
        "cursor": {
          "ref": "8a756979-49b7-47cb-b4b0-27b41de672f7",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3e2c9164-160a-483f-8de6-4a7afb8e9477"
        },
        "item": {
          "id": "8bfeb4c2-5b89-4aa4-9ec2-1538f52b882a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b2600dd7-efcb-4910-88e6-dcd902b818d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03eea00-a5ed-456a-95ec-e56962b7402e",
        "cursor": {
          "ref": "7998e015-367d-4555-8841-128137993cf4",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7f0823df-f424-43f0-af59-7210b3248f4d"
        },
        "item": {
          "id": "d03eea00-a5ed-456a-95ec-e56962b7402e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4ae0f9d4-d8e6-4c64-b0e9-d7e0321994f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "f74bcf10-e16f-4b2c-8694-0091fd32da40",
        "cursor": {
          "ref": "2d03e012-55bb-4b99-b7ae-1cf82d1bf629",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "03f96977-cb76-415c-b178-1c0ae76a5d44"
        },
        "item": {
          "id": "f74bcf10-e16f-4b2c-8694-0091fd32da40",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ac501f53-bd6d-401b-9470-8e79765b809d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "060a32be-ec94-4841-9a74-51cf8211650c",
        "cursor": {
          "ref": "036de5db-2d6f-40d6-8a56-57bd4d16988e",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9e0312d6-fc78-4f7d-9cc0-1fb781dbf2c8"
        },
        "item": {
          "id": "060a32be-ec94-4841-9a74-51cf8211650c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "619d9d54-7aee-41e6-9613-39ec96685d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "2838f334-7b12-4439-b156-c3a69cfff535",
        "cursor": {
          "ref": "836c5cc5-7beb-45e9-809a-aa2ff080e21f",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "37ad3e2f-ccbc-4c02-a3a3-5b1a57b2a289"
        },
        "item": {
          "id": "2838f334-7b12-4439-b156-c3a69cfff535",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f81d15ae-f84a-4797-90af-ba2dab1fe449",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2838f334-7b12-4439-b156-c3a69cfff535",
        "cursor": {
          "ref": "836c5cc5-7beb-45e9-809a-aa2ff080e21f",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "37ad3e2f-ccbc-4c02-a3a3-5b1a57b2a289"
        },
        "item": {
          "id": "2838f334-7b12-4439-b156-c3a69cfff535",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f81d15ae-f84a-4797-90af-ba2dab1fe449",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc44209-f474-46e8-ad20-4b59ccf955c1",
        "cursor": {
          "ref": "3ac56d5f-c174-4204-8c9e-e0027abdc38f",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e80edcf9-87e6-422b-a749-04b08167e351"
        },
        "item": {
          "id": "2cc44209-f474-46e8-ad20-4b59ccf955c1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c8831895-e7ae-477c-9e46-b05deb55026d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0a0ea9-e11c-4b9e-9cb2-7cf01bd8a3db",
        "cursor": {
          "ref": "613e29b0-9e9c-42fd-9004-9a16ccefddb9",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b88729be-fb51-4a06-bca1-baa68332c835"
        },
        "item": {
          "id": "5a0a0ea9-e11c-4b9e-9cb2-7cf01bd8a3db",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e6af12eb-6beb-4f92-aec3-7d16d4723821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}