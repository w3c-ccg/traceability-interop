{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "37a6af95-f164-48d1-8328-59c1973842b2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fbc999fd-3061-41cd-99fd-88d3499f81b9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "505f0130-4867-4275-9d94-bff1d9d14162",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8f1c9b06-3a7b-4858-9fd3-8032f60cb98f"
                }
              }
            ]
          },
          {
            "id": "52d9f285-1a25-4bf2-8717-5e6e5383c9e5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8afd3e55-71c1-44fb-8687-60d53287c0b3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c068ec85-2953-4197-b9bf-aa0eca23a389"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5f67acab-0f55-4024-be63-376f4be0c817",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f59288be-8ae5-4bd1-a029-291ea8398729",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8cdd6dd5-98a2-4ff2-9191-5c096b017b39",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14b68b87-0121-41f0-9f68-2ebf21f96676",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0dfcc23e-353b-4946-8b3c-ab29524fd3af"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e132ba21-01c6-46d2-ae3d-321d3d247fb5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81ba6b87-abba-4736-8934-5349860b72d9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3ad4e40a-8e87-455c-b617-462fc615165f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b4e2a89-5d9b-49fe-a8a4-af63e9b1b996"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea2e260d-058e-4b8e-a50d-7389828791b7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d06a6dee-a5c0-45fc-ae18-0c284eda5ecb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "deea8f9e-4875-4b32-830f-19c87ef19418",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0294ddb5-bb2d-4dbe-9f21-375cdaed8efe"
            }
          }
        ]
      },
      {
        "id": "ab3796bd-6e04-4034-b3b1-5df4a23d7899",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bc71a5a8-7999-4413-af11-6376b131e24e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a42dc23d-7003-4815-bda7-30eb6bf2647e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "052a7ee7-b02a-40ab-9f3b-06216e42e067",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa649076-edee-4d40-963d-11523e2fa8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f6663cd-2fd2-4560-9834-a97f9d4a93cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf80c28-a0dd-443e-827f-e3041ec623d9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4503b39-99ee-43cd-ac1c-0c8ab8d68289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2073c10e-d7b5-4a9d-84e9-7b7e6baa66fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b88487-91f4-42cf-89a7-340c4a445c96",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bae6c1-ebe6-4c55-9763-52a3b4bf4158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0c125f0-620d-461a-becc-7269f567dec3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "97212d0a-bb62-4462-b9d1-d751be4f908d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63628757-4753-4126-9749-47057bcc2a28",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488f14f7-94de-491a-ac8e-85668d213395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7eea68d7-970e-433e-9600-dd3831210b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f98bda-5b9f-48bb-8618-5e8a3adc2d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd148af5-91a1-4330-b2fe-63d3fa2b8ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aecb308-b145-4bd1-a6d2-3c776702514b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b1781d-4382-4d27-9c92-9729e5591c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eb16b66-fb35-48f5-bb55-e42c28949746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17b4770-1230-4e4c-92eb-9e56f369fb58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "60c97a22-3f99-4dd0-8724-b4334856a28c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "487e1557-294a-4870-a674-c3c253782a20",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e9cf9b39-49df-420b-9a8f-f7bfec6cda19",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8643bc47-d908-4a98-be56-8a0282ef7299",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2e192d18-ddd1-45ef-bafd-9acdae613e17"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb514fcb-fe2b-4874-b281-30654d18b12f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "cac0d51c-080d-4c90-9ce7-4024038519c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88700727-2d19-4b9e-9dbd-28e8a15eeacb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9df0e6f-506d-4c5e-b83a-a77b536da156"
            }
          }
        ]
      },
      {
        "id": "ccf377ac-c3c7-432e-b636-51cbe1e97dec",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "81806b2a-57ad-4b18-ade9-154f3787c84d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7a3d364-8ca4-44c8-81be-d04799b2245e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "45f9b7d0-a023-42e7-92e4-38da838f3d55",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b800a04-5512-4c1e-a425-9a8e391f732c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d59359-5212-4b34-b0ca-f2f5bd0259a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0e5570-6fb5-4289-962a-ca55e441105d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d218ad67-d374-4038-960b-11a3c65d8e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0412c241-80bb-4eed-a2e0-373eb2af2722",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2cb3d3-102c-4ec7-b162-4329b09b6c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13de3aea-ea78-4182-977b-c2bd458ea838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a691acb3-de0d-4aab-8a1c-02b46e1d8bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0d76292-48e0-4ad6-8329-122bd55db693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7c312e-9b52-41a1-92a6-700b1a556253",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467c8385-62dd-4393-9da3-5fd2f2d747cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef816a56-4a07-4771-989c-e92d752a122a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f512321-94a1-48a3-ba4b-a3e8f2a205ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19cd1de7-6dd5-4927-aaca-c2e18d33d43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80903c89-d870-43d7-a16b-7c2533883b9d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450192f9-4722-4697-ad3c-d876f4f78b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3724e4-b458-417a-ab94-7d955f4b892f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fdd417-612c-4f1b-8ce0-0d2a74ac6d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb16b988-938f-47d5-b324-af3113a0a372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961fed33-d0e4-48a9-9c67-27be8ca48821",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7523f96-70f6-4448-a950-90d229b85b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b74f91-e337-457f-b193-4c0046a72e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70798f83-c69d-4dd6-a3eb-4ed6cdbbbd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f0d2d0f-6f7d-49ff-a062-c083cd80adc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afdfab9-5862-4f39-9072-36c339024b48",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35684cf1-dcdb-41e1-807c-003b0876cd4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e212a1b5-02bb-4267-8c64-568a184f3551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6afb06-7ec2-4622-9977-17d281b2c93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c049360-a1cd-4b98-93f9-4d5bec7f758b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a32193-4622-4349-a976-dca9aea2f09c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03ddd71-36f7-4e1a-ba6a-292a740ae229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638ba667-f1ca-49b6-9b1f-929c99bd66b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be479729-115f-4faa-a95f-b2273bf96b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1569960-d3fa-43fb-af53-b029dafb9337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43b26e6-1898-4037-b368-5f98c223f716",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a4a4f2-3f14-419a-bebb-a5c071c01030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c51c7e-7792-4689-89da-40230bcdb173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548672d2-2ffa-4b68-9abf-3a3029a4bced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36f8c35f-db7a-4c37-b6ad-23af31fdbb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64753b57-d07a-446d-940f-97693c95deb4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e53a8f-1be8-44bb-90bd-1250f0b9b7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b33d0a-ba45-4309-aad3-2706e71b6d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a052ac3a-36ae-4666-96a0-3429599444b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "741f2557-be2f-4986-af44-b1368a79cb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b198071b-bc39-4b72-a337-b46204eb274c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97366816-aaae-47ee-bf50-03ec8609a7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973eab6f-372c-41ff-9c03-80c2cd52b489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef9d36e-cf11-49c5-9f97-20d4cdb1e19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a89d20b9-a7d7-4e38-b240-934f7d7a91c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91034b87-6194-49b0-80b1-643069841a01",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b486658-4584-47f5-8700-1e8891c72777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3b18dc-a6b0-4194-9af1-1348ece19077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23911b9a-a502-420c-9fdd-85fd200dc797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2f60792-c95d-4fbf-beeb-6bc3fec23310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65e9cd0-e119-4d4a-9676-04c9b3b92b85",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1a28d8-2a29-4096-8a5d-f510f95664bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befec502-a248-4a47-95c9-cf024ab7ca15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a755ce-db64-402e-a330-b26b71b7f2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13bf70de-9e14-4d3e-844d-176558577c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9a7718-28b0-467c-be06-38f2d68f5977",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bf789c-06df-4577-83c2-2d9c2274e8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3195aa6c-cebb-43b4-b9b8-07a15ed6e759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adeacdfe-2151-4a54-9238-0568ba5e7731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6174ebd-76e6-4dbf-ae70-01645dcc8898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6273096-9dd0-400d-a354-681926dbe673",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e0eb5e-c296-4a07-b94c-30519d0d723f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b97ba85-edfa-44f7-b49e-5ea30b6df836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487ceb14-3b5c-44c9-bbd3-71267ef19964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d544900e-1e69-4802-97e5-24a8333d9154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97642ee-3c77-43ee-9397-30b446948d28",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f03325-e3ce-457a-98a5-0558492dc28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5cd571-2efb-4abb-83e2-19484705c73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae02399-c1e6-4a59-8c35-39598781f2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "141e4fd1-6d8d-485c-87f6-dba93ef96f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47711f42-2f0f-4ee6-b460-a450ef9543cc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32fe554-42c0-4f87-a069-d414a6ada3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80400bf3-baca-4d66-9371-de74e288d5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef247c3-493f-41a3-a5fd-02fb89c425d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1d3cf8a-17c9-4b01-b6c0-93531046bb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec29e4bc-c1a0-4b25-875a-ba189dba724b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7570cd-94cc-4e12-9daa-9b4d8a43717a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cdab5c-6bac-4044-b016-ec05e3f49510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010b45ea-ed0c-4c25-a279-36f7c174c41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f39701a-9899-41fc-932a-989863dc9f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b490b7-aa97-47d4-a1d4-68e2079d8702",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a76d06-60e9-404a-b41b-39c69949d797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956fa416-d701-406a-a552-08a79f0479ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9de211-0ebc-4c27-bd9a-45b9a018a317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae95df3-4d17-4161-aa74-2a3b7859d2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6151b6e3-d686-4c50-92d6-19808aa98bdc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19572098-7063-4c42-90ac-66063c2714ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa617fbd-b0a5-4530-8acc-b8ca9a1583c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee134c2-d9a2-41b3-a4e6-d9a698661ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a33db07c-2abf-478d-8f98-63381749167c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60d297a-0b67-419d-b88e-339523bca87a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986fd2af-9d2d-426e-8ead-1f331a146df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3900f758-87f1-4a48-8a92-43642bf300c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfca11e3-23d3-4761-987e-4fd5fe0ff219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3496424c-747d-4d4c-9fbc-0d2d6575f643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6886eaa-c025-4ef8-959c-f4a264e3024c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c41f94-cdb0-4337-ad66-2f6b4b53f574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a374e72-e183-4c52-8893-e8e183b3c0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84216e5-99d3-477f-bea4-5f13a6f14873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7eb8a5b-36ad-42ef-9b60-ca5248c905bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1b53f9-dacf-41c8-9270-0dce01a12ed4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1d743b-c4c8-4292-957b-0939c73c9e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b500a3-e52c-4774-9ce5-238c52de832b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f5274e-f6c2-40ef-80ad-315474daebb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19892761-7e86-4101-aa66-3e84a65a902f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f819175c-0eb6-4e49-a3d9-ee3cab69b95d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91451b95-fca2-4a84-8d99-47f15616f22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893d2887-8106-4153-a7cb-52194db44e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a00ec47-bfe6-4ab2-bcc2-2c33ab33de85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e37f385d-4b95-452e-8cad-f28156157627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83d5285-330f-4f26-8b34-d6bbe1aecf55",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc32286-819a-4285-82bd-1c345d7f3c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1017e71-333b-42ca-b002-b520b92fcc24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586f1fb6-2e00-425a-bc9a-87eb514aff06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b155c08-47f0-4ca3-818b-07016e3f2d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390ac8c7-1384-42bd-ab26-9287b0b7c987",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a4056c-e848-40b2-b01c-928815ac78da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9ee873-1db1-487a-b726-5e1c0cb6fddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cc1f46-d8e5-4e89-ba8b-d08f1ff1c09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d35bc45-cf6e-4403-8063-be08971c83ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbdfabf-72e1-4b8d-9ccc-f3740366642e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67100529-bd47-4222-91aa-846861ed4cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f0a297-93c6-4fd5-9923-a47333960936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02ee814-a50d-42bf-b7ac-2f3c7075ff1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6becd07e-7f80-4eca-b0f7-2c66f2c3df9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ca76d5-5af5-4ddb-b747-2df0aee0a867",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b1f7cc-309a-441f-9389-e51a024334e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600c39f3-62b3-4347-a556-f7a3202ff089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb9ed81-1900-4230-9098-c064886d3203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1019b55c-0359-4bac-b762-6c5ce518f726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47835b4f-e461-4cf6-97ed-07f941623ade",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0682ad6-9b1c-4783-abe1-c84e4a47d34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd1e737-2f43-44f9-ac6b-b5f8eef1fa07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bfdd4d-6f74-41ed-a3b8-96419ac54857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "944f8d19-1df8-429e-bd48-be846f68782e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732a2d32-7758-4d71-93ce-99b52b78c402",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c009bb9e-9c57-4e5e-aa19-f0fc5f37fdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d72bec-7fcb-4518-862c-93636419213d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b709c4-6cc7-48b8-b450-aeafeec21a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90e4e71a-ea78-4433-a547-8976fa27e6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b89f17-e74e-4990-9263-a0bc4ba2fea8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bb612a-f6e9-4909-b689-389472fecad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c46bdd8-b229-4226-b1c9-eb61270f0d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d74466-1113-4075-b965-0690572ca38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ddea38-5466-473e-bd8f-762d8c9719eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171e69d9-2307-4bfb-ac66-c37878a99ccd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e9210e-ee05-4d62-b5be-6341b586a079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eda45d1-aec5-4cd2-9e46-9903bbc2d9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313f26c1-0f57-40fb-9458-5e0ffcdbb552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc61fc6-fd79-47ff-a172-551ced125e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ec5c16-32b1-489d-b5e8-6374b200dcfc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9909e572-44c6-438e-b009-d0906bb99c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8c51c6-7ea5-4c8b-a034-840668319b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa051bdb-9349-4abb-96cc-9aae00f92894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "115501fb-7c1c-4b03-8410-d04a2a3f5977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bed094-5060-41fd-a92b-27689f7261c1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee31acb7-9eda-4ecd-b266-c6f26c10680a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02bae787-7f05-4d08-9ff6-32d0fee095d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ed0a4d-3b33-4a49-999f-da6c77e0fdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4fe5dae-d19c-49b1-b418-a94bed413471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24477e26-aab1-4986-b582-382f03266b4c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f0d56d-e137-40ee-8a24-ae621d2530a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73b2f0c-002b-4ed7-acff-6925de764275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c42c2f-d775-4995-9409-c06a2293b5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6fa5bcc-81b0-4e80-80df-d995a59812ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fbae45-0090-4be5-8838-767e14d0d00b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f96144-2121-44a1-acef-b7222fc02132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9b7d10-d179-44c2-840e-10c4eb276f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bd4d77-2808-489c-8ff4-afa3060286c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "acc292f2-c2e4-4d6e-9cc8-13290f0ee0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3f74e9-d0f2-426e-aa5f-a053bed6efe2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244d9e77-a01d-4a0a-8a03-1d1e9c5241b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a749e4ec-c455-42b1-9f64-41437c7ead17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e88df4b-551b-4e34-ac8a-0a60e5808c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf87a1f-ed1e-4fdf-b942-2a380a604632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4dea9d-fe61-4c8e-9297-94b1aeb0c98f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b3fbeb-81f6-495a-81f9-a9bf36f6e0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb1cc6f-ff7b-47d3-a025-1be90511c6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c11053-e253-43cc-95d9-d58b93feb7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5828f722-8255-4a7a-bbc3-41b43d1673e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa473a34-b98c-46f3-bf2b-41130b5b7a50",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f960b0-a165-4017-b371-036bcc2e6288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5b7cb4-56f5-4f89-a583-a4f0f7c150f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddb7f42-f29c-46e0-af8a-2ceee41765ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a3f445-3e3c-4c8b-a22b-31c188c5b361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd3dfe0-0970-4c72-937c-a01ee0513c76",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa1e2fb-6af7-4104-bbbe-a90d14ba2100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756d03e2-f262-4afc-a3ae-e0595028a038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bed1480-b452-441b-9e16-4561c317ae68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db715730-6ccc-408c-8fd0-25b21f5bd1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600b69be-68f0-44b2-ac19-87cacbf1fad0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f79838-ac22-4671-8502-d0fdeb920c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ecff01f-e89f-4046-8410-c7abbe6d4dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60a0bc3-638f-4942-b291-d71f57d82ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c66541d-0b38-41cb-9b0c-8374e6ef2d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7dcf53-05f7-45be-8fa2-fc5746d73588",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427c9ee3-6fd0-496b-b265-fae64d48cc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af4f657-8c54-49a7-a3de-afc11260aacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501c487c-243c-40f9-bf21-87e03b8b52f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a96e5cc9-f1f7-432f-9450-285e1aa0d0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f346c24-4279-4abe-a050-94cd94295421",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c87f31-777b-464d-8df5-0fb13ffaa949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe89d20-f3e9-4411-9da3-dbf7866ab1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4513c5-c2e3-43c2-acbd-7bda2886f942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "36516fc2-0fc0-447f-a110-0364748a5a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb71b3b1-15f2-4b50-8293-236fdf546e00",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2803cb-767c-4caa-9cfa-2bcf3931a706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9bc03a4-30a2-496b-97cd-c2d00f973c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417ea1aa-7db4-4b80-8b2d-3c6d27318a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "998de975-89df-4274-ae0f-c26855aa4077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a550cd-1ea8-4ab3-8c38-6352e0eaa968",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede9111b-236a-4da3-aa7d-8442175f4963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c508740-6c9d-4a83-b351-18991a8487f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fcf805-a6cb-408a-812b-0cc97bcb0c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a39ba93-3f52-4c7b-9387-a322174b3c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8442f095-e0cf-42f7-9409-36128b430dc3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67043bee-6d26-4c83-b8f7-dcd632793e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f2dc96-b660-4fb6-a53b-4334a4daf921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a5f543-420c-4a36-a5b1-ad61539a7368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8112e9ae-6921-49ba-880f-a5dfbfd76791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39f5053-1507-4e4a-9d17-338a15216ac8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76eec30d-133f-49b2-bc56-037e307c2d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc66dd2-2f74-473d-b6d1-f00c17e27136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ce7f46-3fa6-4802-8327-8f56ce20d8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6549d5db-e176-49b8-8b73-4cdb44eca8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118680c0-3421-444b-9bce-f46c0a889106",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a998507b-d373-4baf-a920-44fd284cb72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b81bf3b-bce8-4192-b810-069b1b3d67ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599aae5b-45ad-496a-9497-d1b44e116584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f372397b-64b1-4a8f-9cf7-a87ab4f9c580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a248b4-4164-45a0-ab92-a663aac964ba",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6196e145-2500-48af-8f40-6de509504fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a05cd6-705f-403f-a64a-9ef151c1db12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5131b2c5-8fbe-4750-855a-5749253c98c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7f7a8f-3d15-4cb2-848f-29261815ad8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7fffe2-1f87-4969-bc20-d3c3cc57fe32",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad59f74d-1535-4949-b96f-f6cdcd5fc9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c39179d-2bb6-48b1-9663-e43334d090bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91028fdd-3205-4fb2-92bc-c7e4f649006f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d914f06-7a9d-4c3e-be97-e4b45aaecfb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f7ec9d-ae6a-4ff2-8172-6837784f57c3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a927367-1777-4c1e-a1b3-51b95b9e76c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518c79d6-66ef-4e3a-bae1-17be4237eec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12abf0a8-6391-47b3-a868-78b4fd5b0043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "500a4572-6ede-44ba-9478-2aa873dab536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9558988d-bb85-47bb-93c5-cce623d98069",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e50645-f5f9-4807-9aff-a9d8e19c142e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ad9a14-7acc-461a-afb1-35b48b7fcbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef77802-737f-40ba-8eb8-21d4c7a8a4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "46163f3a-100e-420a-a45a-d2f066346ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c937474-2f92-4a4f-9c57-f645eb54b2da",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f746dd-f3a2-48a0-80a0-8f344bd692d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e37aa3a-41a7-490e-ab94-5b20ddfcad0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928add00-4cae-4b4d-9747-93db7d8336e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53302d0d-7ec1-4d20-8b02-b667f6967bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebf6c49-9882-4d48-b8af-502f9f52da1d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725c9b1b-bc56-4ee2-9d58-1587270d4fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b595d2a0-2f43-45f7-a1af-ee5476f21201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cd2740-3a2c-4c8e-8445-6d47fe9f8f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "098f2879-5679-41f1-b635-d4383d952aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b2042b-9749-4d76-a34f-e211ba9252b8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf7dbe6-03e4-49a6-baa8-2ad0a3be40cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05511e90-6ffb-4107-b2ed-4187ceb32f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4858eb-431f-4ff3-a877-f04b43de7dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5486505-b2dd-4662-9615-cd6b55f6df93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56379d5-e61c-4f1d-9aaa-dff7ea9e5b72",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1d0a33-fdff-4ea6-8222-5b98b54bb4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb72189e-1a32-4b99-a476-c10170d18221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bea4617-5e95-45f2-aa64-13a3a95591b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "947d7fc3-63be-4fb7-a68e-4f0a6cc1da5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9435ca43-a8f4-47fb-a534-59f0668536da",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0ed714-7874-4f92-b56a-e53bac04196c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dac4c97-2c28-4614-a831-c0382c73848b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2dbc76-33a4-4b92-aa04-e6ebff4c742d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d28d41b6-58d3-47ed-b62b-43f36ebb2980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c8e3e7-e2bb-4c77-9bc5-ba6c89aa169c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba438434-36b0-43da-b7cf-9d6ab0d1eb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1df2eed-94e1-4937-8f75-a748f6dc958a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194cd0e7-7a77-4141-8f75-e6b2231aae6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3d9113-c39a-4f88-a450-262365928dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26dfa3d0-14e0-4487-a33d-c99892e0744b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8878cee9-561a-495c-ac45-f1e34251199f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2055286e-ffe3-4886-af5a-5aabe487ed83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7d89ac-6291-495e-9bab-3e21abceb9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6f06d9-e792-44ef-a0b1-1e57e9904e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3432b34-e6d6-4418-8a90-6566255fa85b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e32202d-f1a5-48e8-a5f5-21bd871583bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b64a650-f676-4009-9e1f-2d6773effc09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab56bfe3-8907-40ef-87f3-770d5d4adf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbce2d03-b6a8-4b46-b3f9-df9a1391c4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8c84cc-b776-4c6a-ae15-78f71e673003",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c9d679-976c-4816-b975-9c2b7fb376f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b00a36-0ea6-43b2-9984-9812a48c45e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd15f758-6f50-452f-a062-2cd70e5be6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b71725-8d8b-40e8-ac61-068d654d8f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c65b62e-ab36-4c8c-8e1f-570e33a258de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf890bd-8206-43c4-8ced-98bf9edc1b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfee13a6-e834-4180-a7d3-d7df7f524a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9728f6e9-cdb0-43c0-b746-835b58ebb264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "96ec5e5b-6b2c-4c43-81b4-84351b9bca3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2930a7-52a2-49d4-bf69-c904d5bc251a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9386ab4d-8d44-4334-a4a7-bb8e721c5c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868dd62f-0f95-4d1a-9893-6b7306eb2531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926b48d2-1748-4e68-8450-1ea3143afbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ecb6d97-c6f6-455a-b2e8-e019308a06ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8432bed9-ce94-4d6e-a6ae-4a6b95566ef9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f897f253-4525-4df1-9154-602edbbd1258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299dd064-2632-4c67-9615-da0e50094cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6352429-2b3c-45c5-a90c-03a28961c080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8db7b5fd-34e4-4283-a821-8baa181cef09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53b655f-eed6-479d-a151-62d129edfbee",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cda104-2228-40f0-b1e4-e89191c0c197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268228fc-57a5-4532-80f3-1fcf5c0a0667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0998de15-1f47-480c-9c8d-d92a54736203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc828c07-9e63-4e89-acb5-6248cac29aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d365df3-7563-48c7-b171-8a249c7a1df0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9b51bf-aa2c-46cd-9e1b-c272f4a680e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feee550f-78f8-4a84-9daf-a5e73b7f88cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1775732f-d5cd-4c17-81d0-7c48cbbd3daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7962fe-349f-4c10-b543-508fcf291d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cebffe5-c1bf-45e1-9677-b0a6c3cabee0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fdc36c-0030-4918-9e52-37d1f5d7e5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f603f55b-1dd9-4199-8657-b71fb801099e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29684ea0-f560-46b1-b9a4-deb19743d157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7580b9-8566-43ba-a0da-9b4bca72aeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8274b7f-592a-4496-ba37-1154604a2b0f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9d6a15-fcb7-43fb-aff9-d9f9c5a10c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8946a6fa-c8b8-4c97-8974-e5e50b7ffc12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5149aed-e906-48da-884e-b0a45893ea6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e28878a-c29e-47af-92e4-1ad43e5ad8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ed08bd-8437-48ae-ab33-9d6e60229094",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c629ccd7-9392-4a9b-aa63-f2543306df83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757e7ce6-5d9a-4c94-a1c2-fd680c017e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d605ee16-9c1f-4456-acac-cb4fd183b6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "acdc4695-7aa8-4589-8725-0c6039c684a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adde5014-7918-480e-acea-5a051145b0b3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73351058-2492-428d-b018-62ccf8d33f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1d407a-8460-4158-af80-1c527a3f9141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd28785e-b6b6-4b9e-920c-76698021d04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bbb678e-02a9-407d-8caf-f5314e3db96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b6d94a-27a8-4804-8cfe-c32de6788822",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf698fb-3989-4cc1-9ed5-bd6494d03dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25cb95d-591b-4a9d-a423-7d68942b796e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ff1af3-875a-450f-8da3-650a97e58d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22158910-8c33-4c81-8185-3bdb7b77dac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6e3c96-e7ef-4492-9cda-580886cd32d2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e54aff8-c265-40ff-88a8-16a6457d8726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ff95d3-604d-43d3-97bc-da699045ffe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4d1391-9c91-4fb1-820b-3ddef1324810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4d7d55-e88a-4323-bc23-05b92b5416f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5755fd2d-8de0-4bd9-ab63-f62425726d3d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008107a9-f70f-470b-a92d-3801f2fbcf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba73082e-ae3b-4846-a680-c39536466ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f1e130-e12b-4f6f-a3ea-79139ea15493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3f2b5b5-4a64-4c00-9f63-92f336f7591a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd67d097-df23-4892-8b20-6847f5762fac",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13a6292-efb7-40ce-afa3-2dd1d2778a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6408a6e6-2b73-447a-ac8d-5221598abb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4da690-a1a9-432f-b4b3-31e299fd2caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4442587-0bd1-4e80-bc0e-2a4634b3d76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356e6233-2340-41fb-a570-4deb0bca3724",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c3c587-1fd3-4890-b7ca-6f8631dbfc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeaa7d9b-94e4-45b1-b054-211734cd6cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cdb42f-f8a3-4715-8686-f637af09a44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59e09ac1-5666-497b-82c2-3e36fbb04310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cde91d-52da-4e6f-a7df-4a885308ddb2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895a0f2f-62bc-4ba2-8346-69fee19c27e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4ee7ed-4401-4903-ae5d-c4f2ba222008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a940995-f392-41c4-aa22-cad802fd3156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ccaefb-1815-4c37-b3fe-19f25a04087a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c21a2b-e2bf-4273-a80f-3972ffc92bb7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a764ae1-bf09-40ab-ad34-80c41d9ca2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1d85d0-a5d3-4719-80d7-9204fa146dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738689db-52be-429d-b5f0-da5287f2df1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "820677a4-1168-454c-96b6-fd548d95029c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4000c15-9f33-412a-a4c4-d298c52f5d4e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e418b28-db5b-4184-8589-5f7b2cca5c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1e264a-3790-4eea-8114-fd297477e23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754f410f-fef7-4d4d-85db-5e48d0288018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e799d80-3910-446c-9211-429a726f9569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77af754a-d3ea-483f-b1aa-7960c0ca4126",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a4fe11-8266-4161-9324-8a2baa4fd0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a27613-959a-4954-97ac-ee4baba5ca79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e750b41-5852-404b-b4a2-52942eca5efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7cdc10-b463-480e-9820-62bf72eb2d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7c45a6-ea6b-491a-8631-7d706aa5ca62",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b92c096-bffe-4ae4-857c-b118af8f2837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80b7913-97c1-41ae-a642-fb256165f574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79d6086-915c-46e3-a13e-5c5d12faa4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37fadaa2-840a-4e0c-ac33-5cc8d5dcaae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea20520e-ecbb-4a07-8c03-6be36afc1e26",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3491c57-d567-41cc-bfec-0af3c2911872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63aa6ff-1312-4e3a-a71a-121c5f4f73e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d100426a-3340-4932-a49a-10f227ed0a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc14f4c-3035-4e3e-b1d0-af54bc3aec72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffcecf6-f182-4be1-83f4-beab40ed5a89",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146554d1-9ce5-4900-8dc0-7c19aa87dbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9967b7c-ff2d-4183-9d87-0d4b86b5cd37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9ee70e-5654-4cdb-b98d-db73673c60a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "92c70e60-5969-4edf-b6c0-5a4ae8e72b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c45ebb-cbf2-429d-b8d7-a81e88bcdd1f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc39321-318f-46a0-82cb-20b2db3eb57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe9e2b7-70a7-44c0-8613-dce0b7968a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50106f8d-aade-401c-8b6d-ba653d511ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "875c6f06-7d70-4833-8575-5b888a285c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80645075-bfc3-42cc-a514-bcfee418f4e3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc296ec-8592-4a24-a441-160192138861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a869847-85d1-4455-a2ca-b6d9a53accfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39098f00-f3dd-430c-8013-ffe9ba779711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a19e90-e3a6-467f-959f-1a2c55444cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8518d7-672e-4f78-b2f4-41543739fa31",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4455165-05ca-42cc-9f11-6a37eb21191b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb4306c-a0d7-4f48-825e-e1bcb8e44609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9db7f42-49cc-4947-8f57-d77585b2d03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4ded5a-da84-43ae-b454-ad00c4d0f43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c46c4e8-1e22-492d-96b0-28844ad35ece",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0a08a5-33e0-49af-abf0-bca4292c2d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7fc1584-3e0e-4c3d-a235-639c09d0be78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a77cc0-65d9-4b11-a736-2caef4afd23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a74d3866-478a-4b76-86bf-a82e54d49d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5e78e0-d14f-4f3d-bb6c-0dd6b1a90363",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0fa77b-ca82-4189-86dc-63b103b2b388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ae5963-fc19-4792-b101-f8d5c262bcba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ec321f-9de5-4234-875e-c8adf9a9ef0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7d8078-5e5a-4047-82b3-9116fec6a058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc468b61-6ac9-46a4-9c44-194746256548",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6c4952-bce1-40b5-914c-06f5cb06d5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105d84c3-9619-45c8-9db9-19f6799371ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85969af0-f36e-4af7-8a33-4e513da3bc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9a1e55-44cb-4d87-9e8d-716afe518138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009f82d4-5107-4847-91dd-6610ac19acc8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d412ae8c-ba39-4455-a5c9-051320e5e4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e13f521-c4f2-4a1b-a8e3-6b774f0e5115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b8eaf1-8674-463e-b096-3ad597c2d72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "89ffcc9e-709b-4407-a0c6-4f9fc0d9bec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc6bb3b-6ca5-41bd-9069-257e474bb2bf",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e489c1-6187-4071-bd9d-b56b788d9f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd193210-089f-486a-a202-7a72af22ddc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ba61b8-7646-498a-ac2b-acfe69e6c27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5739a39c-9de6-4ba3-a97a-f484c2fabb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df6875b-9c2d-4f70-9a84-9417e1cdf63e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f17718-092e-4f98-ac0a-79f38b1cb997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef966fe-4c84-45b1-9a57-c7e20415d4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ea9a15-835b-4d81-8d52-0e71037f13ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a0c399b-3d56-4804-b087-dfc487d15b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a70c150-4ab4-4e73-b822-eccf38970ef1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1f35ac-80d7-498e-9101-15813a0cd4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89cc325-b551-4086-9982-5c8c790ca9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea7f9c1-d179-4834-97dd-ccd2ac369362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3856f0f-9b92-40d5-9d37-0ea075614af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1526108b-c9ce-4661-9f1a-c2aad7e14b04",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7dd5a33-7162-49ec-b9a4-82de90863e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "71970e91-d967-4fed-838e-07f4a34ae2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022444d6-eac4-4188-a78e-e5e57843110a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "36133593-cd25-4bad-8fbd-57dd9886c6c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90109b49-6efb-4a24-8360-344a916b5de5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac452f43-e33c-4d76-bdd3-e98f0d288659",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ece4ca-93d3-4324-aa8e-9c665b313a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74916466-6263-4b65-82ba-0653290ff316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce2ddb2-e797-4354-a8ae-58d52ec62eea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5cb7344-e97a-499f-98ca-dffd95b2d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb541cb-8794-48a8-8b80-33cccb3453a4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1579317-191b-465b-b734-699164f127d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9aeb81c1-fe7f-436b-bf8a-70f3dc2b2bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a850810-e0e2-4888-b698-a563bf7fa367",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8a01000-b347-40aa-a3ae-b8b7463f8c08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00c073ea-932f-4c67-920f-a91e166f4327",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c03eb342-da53-4c8e-aaea-cec717a3bd16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3f21030-ad32-4789-947f-cbf26b87685e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "999b0301-80e6-4289-8660-46717e11c470"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ee63a621-0f75-473b-ba9b-75087247be00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "52a130f7-1137-4b0a-a1aa-3e88bce0006e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64789fb8-1d1e-48c9-8d71-5231fddb2c6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86c9226b-b510-4be5-b9c6-61de11cbe7de"
                }
              }
            ]
          },
          {
            "id": "1076f9ac-1deb-4954-aecc-a4d13fc98757",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7cc7eff3-ab4a-4c1f-993e-7d141e7fdc8b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f1ab0be-046a-4101-a438-bb8d330d39dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87477594-e207-41ab-8349-c6fcca4ece31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f135a72-4fc9-4526-8e96-5683af118215",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8447e0e-2efb-4600-8a87-79295be1a348"
                    }
                  }
                ]
              },
              {
                "id": "7d9cbce4-10bb-4189-aef3-4d325c36792c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "846982b5-e50c-40ae-9d1d-d1ea4958bd1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07fb533f-9905-40d0-8a3c-5849afc3c43d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32f0bfcb-372b-4703-a7a6-d819e93e20e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9b97b8bf-e438-4dcf-a785-b21d7a03d0e0"
                    }
                  }
                ]
              },
              {
                "id": "6b7c617e-bb79-493b-b798-3158b0cac998",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fbc5bc0-98d6-4964-958b-e774a18a0023",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25a29403-03d0-473f-84bc-9b39537e3b15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddc9da79-16e3-4b97-9d8c-b647132da07d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "86de349e-8677-4612-861f-d8fc6118fd03"
                    }
                  }
                ]
              },
              {
                "id": "7c898286-579d-4ed7-8777-7166534f3e98",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec1213d3-eaf0-4da3-b08b-d8fb083e505b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46dfc680-9189-42a2-bb53-def3b4f35a92"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca99aecf-70f1-4407-9311-0bc5fc630190",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0f4aaa91-ae32-4500-88b5-06ef704e7c8b"
                    }
                  }
                ]
              },
              {
                "id": "491f16d8-ba9c-463d-b24c-c0730c3726a5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d812b462-020f-461e-bf8e-56a77a531ff5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50a8224e-fbb4-48a1-bf66-74444e8699e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1564f57-49e5-46be-9f48-d74c03a2228e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd128032-269e-45b4-9747-4a9f99315959"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "85917ed1-467d-456f-8b82-b2f295b324f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0cda888e-2035-4068-aca3-4d1e63fb94a2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad16129b-9dd4-4850-a6ef-c0a5c0471d2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b0adf90-f121-4859-bd3c-8ad7ce2e5c92"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ca4d594-d202-40a8-941e-e1890449c8f3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0257685f-4bf6-4621-9f0f-06d96355264b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8cb0dba-0123-4b89-9009-5f0a86072dde",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ea9f51d-24ef-4d35-923b-d7f02a6158df"
            }
          }
        ]
      },
      {
        "id": "cef8d554-0b28-471b-9f18-fb2835a37c90",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fdff0ae0-27b1-4b4f-929c-ea6c748527f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5740b4ff-6b70-40bb-beff-4c457a7eaa5d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f877e27c-3fb0-4819-bf43-d7e856435a94",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434d4172-ea3e-4b7c-9d65-b24188109aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f101c7e-c3aa-4bf8-a724-9e789001a45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd369ea9-0dac-42d2-bccd-e0455edd9ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eaa218a-f082-4bbe-9e14-2067eecfacff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb005c58-0bbe-44c8-bdea-3992b018d502",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673ae816-e035-4d9e-a5da-12446e2251e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa8e680-4d9f-4a72-beec-ae957efcf3ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08cfd1f-b132-4965-a802-106529a05e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b196ad37-d1eb-4851-8e0a-0e2164253bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb08174-591d-42f7-bda6-71f7ae0cd374",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fba692d-0bb1-463e-9581-976cc1d8b72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131b4c47-39f9-4319-b8d6-fa55003f6083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b95d37-8eeb-4d3c-bfa8-b6256b9e4a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "470b99c3-a412-4148-8d83-528696a52a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a819df38-6612-4bf0-9dfe-d964e20df261",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498c86c6-1763-45a4-8cf8-005f4a85f0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edab63a-c3dc-43b9-b915-e6dbc5a17633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad3f7dd-ad06-450e-93c8-719a221cec9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0193845-865e-4cdf-b8c7-0b7ba8e36aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8880c30d-685a-492c-b941-e71b4e149e71",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6329c8-1e82-493d-a35a-4eac354b5489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee2234a-b9a0-4519-b87b-a1b43a7f2230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c7a21-dfa0-4e54-a8a4-f1c30bb3874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce70b9d-4371-4df4-919a-b5277aed00bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d74acb-2da2-4fcc-bc08-4332ff0a49ae",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7cf945-423e-4b97-af93-0b8de184fee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6163292-aae8-4680-af4f-e874725f87bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567fd140-129d-4fe3-92e4-41a68fed3f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a72001d7-000f-4b2d-bff1-73dbca2b3eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462246df-9cf1-41f6-91b1-a250e2165513",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d29d4ec-1f69-46c1-b0c0-7f3cff7d68f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e481dba2-bba5-447a-9df7-27cbeb142b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4dfa8f0-8e60-4439-8346-200301fe5aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff29f11-985c-42f9-8887-605e466f5bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6261ed-36e9-47b7-9f41-ab522f8f0390",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86156b95-d570-4ad9-b081-008889da1343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a6c67d9-ac57-427b-926b-026e123d8a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38854ad3-dc1c-4cec-879f-a0bcaab63efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3f11a4-c297-4ff7-9ca7-5b14c8e21a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d339a6-2f20-4c95-bf36-f48a0a3e4611",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2dc99d-878e-4049-bcc8-3a1d1e5d8be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9840672-f4b8-480f-90bc-523866361ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5039360d-8933-4ece-be52-16576b3e68b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbab4c95-fb93-420d-b1d4-76c8a63efd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687912ce-ed21-46f2-b17e-afe8e1a19e75",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7973e14e-b517-4116-b234-fe667c934d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc7362a-177a-454f-ae18-ea49fb18718c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1a287f-8b89-4f12-8839-82910e710c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db89af8b-3136-4a55-9efd-680741891731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507efe4f-9164-42dd-b733-80e796e1222e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063fd605-c01b-4078-94f0-33eebfe92d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eaea31d-e011-4b35-86c9-e942b5da5a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e110d3de-052a-47f2-b6fe-8a98b366cb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d8201e67-80f4-48fe-b6d0-541e8a4358db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98208d2d-3eeb-4764-a2b7-5a6061aeb9f9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b0242e-bd96-4053-8846-0d79e7a9ab2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2ed94e-4cfc-47df-9780-f66e6d93b521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415974fd-4218-47ea-877b-16b42a2337ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7813984f-b2f4-4428-aa4e-6daa91fd7932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51b33a1-2519-4287-8772-596534ebe68e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834f8b04-e5f5-4724-b8ac-a00fa49e0966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399a96e6-c29d-40c4-8781-453db8d5fbe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864388e2-c5ef-45d1-9fc3-9f4d66487614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0413e07e-2205-4633-8b4d-a6b949776066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770a0263-4fe9-4eab-9dd9-2b5fe094f1b9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d4f036-ceac-48ec-a3cd-15797c77fd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0f96eb-732e-412e-8499-9410d7fd988b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f396ece9-45e6-41d3-9203-3c1bb6823268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "11a82d40-b7f0-43f6-a435-63053bb5744e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5847bf29-84c5-4362-ac50-3c6abb669465",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b977fb1f-a064-46c0-9c49-f7c7e8d00378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb28410-4d58-4f3b-8a8d-97ae02f03985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c39dc4-2c50-4465-90ae-880189558c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2487e5df-9a80-4495-be10-886272ecfd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931a547b-a6c7-47e5-a208-dd374052d9bd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0d4bc5-0629-48fb-b799-3ba58316fe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366bc9af-db52-4b4d-be72-ebc34e1e3271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afafc541-5fb0-4c5a-b401-e68e98031708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "febfd83b-ce22-461f-ac3a-ca1ed0b50be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eed6286-1953-4fe4-a3d4-496f6a93f60c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62135a8-b9a0-4b61-8591-8dab20854e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2bbef0-b0a8-4ebc-bb74-6b2e24b12c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a65165a-ec1c-4ea5-8057-ed6554599dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e22d9448-396c-4c8c-a932-94913bc7139d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8124e0-c8f7-4cf3-87f3-9666dd714774",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3bebdb-a7d4-423f-8bed-5d73574364bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c531dd38-6aaf-4c8b-9b99-afcc4eab58e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0115173c-ede5-4220-92d1-77eb016bd317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e645650-4261-40e8-b49e-8071d0ce4df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c13360-72c9-4bb9-bc5c-70e06396749a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2deefd88-45cb-4405-96cc-b987ba2b77f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f6183a-454e-47fe-bc48-c178de1ef58a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5d9fcb-b7b1-4a67-a47d-56bb827a3829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61e1b6c4-8904-4e3d-82f5-d87c5e31d56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cb7fee-ecda-4232-990a-1fb9cd4e687c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9b24ed-0cd5-4f87-ba3e-9904301a5c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1c17c5-c426-46fa-bd2c-5caf6ee3ecfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61e6b53-bdb1-4884-bd8f-f9c106272f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d454a990-9e1d-4a43-8494-5246f33b7ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79beb87-1592-4c86-8a59-3da04c9c1849",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8f1666-9668-49fb-a106-179d8ea1355d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e025a2-a07a-4619-af6c-3297ba33eecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35b2eab-928a-4f8a-8012-f5084d3e6a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "360d28e9-b14d-46fa-b18d-84121901428a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848ba240-9eec-492e-b38f-dd10034a47f8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e881d7-e214-4bb8-b9e9-6d88d94b03ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a137b9a0-f014-4fac-bfaa-b963a09693d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398d5ebb-e84a-43fd-b866-cadd685f088a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd16c447-dc00-4863-8918-ad9d503d9163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96118437-fbf0-41df-9d88-71bbc8e217ed",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53537144-2cb1-4ee2-a279-c0f5e6d5d21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b1b9d6a-7867-44b5-9569-7a3fd5d25cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406e85d4-c9a5-4ea9-81e4-6d4d312dc678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbac7c4-6ee9-4d5f-8c16-c11653a8b38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0012be-9edd-4c62-9877-73a23531546d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d272c88-870a-45bc-a977-56a9136b69eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ac0c64-8598-447a-a6e6-cfa46e4ae2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04dee28-1dd6-40c7-a27d-86be0fc4551c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69b5e9a4-6308-45f1-bfab-adf3f7e61578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd2fbfa-3102-4d1e-9766-3a31711ef4a4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5441417-de61-4d0e-900d-339d8f0783d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8637cad-c2a6-4c6e-823c-54df38025537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48a3a92-1e0d-4876-9473-6f3f0c91f1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "830641a7-1eb4-45b5-8dd4-a44ecd41516e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30546431-f592-4130-98d2-b91a5e536f89",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544b962d-9e02-4e77-a764-8305ee2d6f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac68b2a-c9b6-4d33-bfd5-ba40adc00d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6fc06d-a378-4ad9-a59c-3cd8341f3da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b01214-4be8-4ae5-958e-08bc52b38fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afe4494-9e0e-4b18-b455-4eb432743297",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f256c108-563c-4246-a473-2be4bda8370b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca55be58-5cea-4efa-944b-38d5d3438461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb2b341-1b97-402f-b71a-ba5c5ff3f6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c36452a-9ca9-4988-8bf5-34da0773fe4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204f58a9-e448-435d-be65-228b991ad91d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5518684e-123f-4bd9-9b79-8849d347a92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6ddd88-4c25-4f52-8301-32c79fd0d269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc65ca5-8b17-4ab2-b3bc-964972ebbf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e190455b-6155-4628-90e6-580795aa82cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cbfd8e-b66c-4c8f-a159-90366f132cb0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56879e30-489a-456f-a986-131f5c7ed4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11687115-9e7e-4c17-a559-65ac6bc5cf43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9353f6b-c3e6-4a1b-aa41-8ce95c01204e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f79807e-3d8d-4302-9fd0-9941161ad9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891cf407-2433-4474-b396-575f1255e647",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9554472-1c7f-453d-afe8-2361b3bce722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97985371-8eed-4bd5-86c1-55165be65978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a680f5e2-e322-4e74-a020-c7c8bbd89630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0a884d-17b3-4242-b94b-39372f8c0568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdec522e-a259-4453-af58-1bdffe8cee30",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c109f8-f3a8-4ef3-b7cd-8984448a30d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2642eab0-8660-4233-b3f0-f82fd4d6cc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b06a406-52e0-4fc8-ba84-5fd631a1c6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4051e226-b6c9-423a-a801-f8d0085fd119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcc15b0-85db-4afd-9842-4b68ad0941d8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba502d9-c78a-4498-ac1e-e4c1578149f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c40a4e5-92ff-4d61-9fe0-be64db226345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703715ba-44fd-4d75-bb3f-fed31cfbb52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3183ec95-387e-4300-8c88-819afb29dfaf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c66d630f-2ac0-42fa-8d89-0124d44128ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12efd41c-adc3-41bc-b36c-333dc101c4be",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a44ff8f-6e7c-41c1-95f2-66a015ac2cd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cb560da1-bbb6-478f-ac2f-96347cc21d89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4cb78e-c72d-4348-9cd8-ead511ab8ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44d50c8c-7a86-426d-85d5-714b0d1dd88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8643ed-668b-4e48-a7e0-427ebb896ea5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804b112b-6afd-44cd-9ed9-b8e05ef5dc7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7d9a01-341a-4c20-9828-2cf9e0ebc7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e6c5d0-2433-4984-9628-fcc64a27233c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6441da0-a39b-4d58-91bd-5adf09864cd1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58755114-95e9-4ba4-9896-1f9953b8f465",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c86c86c4-72ad-4ca3-b143-51d79253efb9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "258d7ca8-8ffd-4f6c-acde-eb932e90ebcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd79b594-618a-4a78-bbd6-23f47cc19c20"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02cee150-c5cf-49a2-95b1-2091fd0b7130",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "798ad63f-7bea-49fc-8623-ae26b796579d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a115dec-2406-42f1-8841-9204e45748ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02229be5-ee7c-4cf9-bc4f-a626de34ed7c"
            }
          }
        ]
      },
      {
        "id": "52c74218-2ecc-43a8-a689-45cc52f2f488",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "58923ef2-6c81-49a3-814e-96e6d8cd028e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bffc5ac8-7582-4e7d-8f2f-23119789eb06",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d054ccdb-813d-409e-b8f4-9ce2d150e9c1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9e9d14-1dc3-400c-971d-0ae831ce28f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf9e513-b06c-4b55-987d-b7d983053730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3ca8e4-eeae-4399-aa55-9d3ffdd67955",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bf199a-c49d-4143-940d-d02f40b08369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b879fb07-9f8c-493b-99b7-9b909a53c1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0204828e-7cbf-45cf-8ebc-6e79bbe98a5d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72646b51-bc3a-4bdf-bc54-9f48bbe8c562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7578f77-3535-4777-b43f-f80e68f8fffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f67fc0-ca76-4697-8f0f-3c3ec1b9f782",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617fea99-d616-4908-ad97-0d3d044d12e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cb045c-8b46-4603-96ff-31fcb770ade7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc4b3c8-c078-4c4e-b8a8-5087d1c1c4ba",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ff0d9a-f3d0-4e9a-9acf-668d318340c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac56fe57-d413-4477-b43f-d69a4b6542d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0ff2e5-baa5-464e-86b7-32bb05fd3c60",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5d1074-75b9-4b52-9296-6d5a4a778192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795d49f8-4a04-482c-94f8-ece51d192a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85712a5d-c842-41d8-8977-0388a9be7b4b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecad6751-93b2-4524-b6fd-d93e9b6c1a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43756e7e-9541-4304-ae97-8df192d3ca9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b654b84-ac64-4672-b623-366918ff0a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327b76e9-fcd6-4b4e-bad5-0e2644845fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438691a8-4330-4606-8604-807ece58d5b3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9b80f2-6e1c-4b2e-b06e-30eb7812de99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8769aa3c-02f5-4f05-b053-38cdd856e543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70928be-3598-4400-ba96-c48b525d36cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df8039d-8282-4502-96b7-214fa49e4018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a483eb8-ed54-4824-9523-3dab34163b9f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46aefff2-e82e-4fa0-85e1-d454e515074e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "630c190b-7515-46f9-b073-cd46e8589617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3176cac6-60d7-41f3-a168-7e866a8a7f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86dbe808-3fbf-4ec7-ba80-4ec5053814c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65bbc04-c2a4-4346-950d-5f4673e9fb95",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d048ab1e-ccc2-4783-b473-b2fad6e19eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "689df98d-140e-48e9-a503-096cf2002fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb46432-fe1f-443d-966b-b969f519d6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30baece-a582-4cba-8a27-179336051ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe522f42-e31d-4e6b-8c2e-d4d004501b6c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c6a1cb-dfb8-426f-8290-ab108c59b722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81710fc0-95f8-4900-a032-be4cce078a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0883434e-994f-46a8-be86-8b133247bb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504647a5-21a6-4dcd-aa7e-995781a5a111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c9d055-6e69-436c-bc39-43b4214b9866",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c00a70-c4ad-412c-8b57-83e6e4ac40b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf3f26f-3b2c-4307-b4c4-ac25363c55a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4806fac-9bc9-48d8-b783-21041f696bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1751baa-1039-4bd7-818f-9b89134cd311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd450ee-243e-4566-abff-276fd97a2352",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f1efe8-8ab5-474b-a218-cfbf5d4b3ff0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c39744-9433-4784-b809-8ccce880d671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ae0b68-3c93-4ccf-93ff-10d0b5b82cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62fd5b7-e480-47ce-9cb5-a29059e3e258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16671831-9da2-4e4d-9f84-5d302500ee81",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00ff94c-6223-40bf-9681-cc64e0a28dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "308b40ac-0c28-419b-8ad2-03f9eb98b5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d8fc7d-2c94-4a93-8ae4-e1fcf6b4b450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae31054-4324-49ab-87f6-87bc1e1edcb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e900f48-72dc-46d0-83c3-603e8baa3dfa",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67435671-d4b6-496f-bd28-e54f4383246a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84eec383-452e-4ae3-8b38-2705c88a228d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b465799a-3646-4513-85e1-707ff816903f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816a1657-67dc-4647-b807-954c00545d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa8d39d-a1f3-4d80-a11b-f3a986fa3862",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e1670a-e39b-4d86-a5a6-f4ab251c9b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f6c40dd-deb0-4ae0-a94f-653310bf9261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291e19e8-fe06-49bd-9768-b0329e8eabf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1b7e4c-a8b1-4654-87dc-6e088dd09701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6078870-ba79-46df-bcf9-7512e2be50bf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be596091-da48-4204-b946-346e402942fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f588b8-98c8-474f-ba22-dbb8ca14e6dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d27f13-6f89-4937-b7e5-25d55a3d3f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86eeb050-1901-48eb-ac9a-d7c32cc13855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c755310f-ce17-43b2-80fe-857cae0eff65",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac117e9-8729-46fe-a92e-40b86afe726d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b2c575-ea16-4267-b46f-82c33bf32752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ed8477-c538-493c-aa01-c574b1b23a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e895532-9fcd-417d-825f-d11e47db8452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29c6419-a05a-4db8-bc7b-eafe55b39f77",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2224b006-c6d8-41f7-9709-b7571f6938b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae93abed-8b91-4414-bd01-bc3eb262e510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f60ff8-4ec3-4a99-8070-61ec495dfafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22c49c1-02d8-4e31-a513-a972a774967e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68502cac-21e4-49ac-95f0-13d623f1feb1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c2f2d9-a1d2-4012-81d0-83918d33a737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b3312c-5a07-456f-ab2f-ee7eb043bf77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "358645f1-3329-4b61-979a-e414f961e892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a65f67b-e83d-43be-b06f-82a102c2368b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd1606f-dbc9-4bf0-afeb-93bce9ca4c0e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd78b22-f832-420a-be50-d4951a57215a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f162b859-215c-4f03-adc6-94d4239ad4ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23443761-566b-463d-85ed-54b51b7cba23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb93b03-adeb-4ec3-8e83-0df52c9412c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd41840-e8fc-49e7-bc6d-cfbfa6d374dd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d326d9e5-7346-45b5-9861-9b0824ca3664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d81942d-8159-4db1-9fbb-4a2859f8241b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d2f6fc-4f7a-4e75-bb5a-d4289257c002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb6b1fb-3f01-4ae0-b4a7-866abf829811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1817040d-0bb0-441b-9075-a16656863749",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c315f6d-f05a-4dba-83bf-7638f0c4954f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00536edb-7ed5-4629-b88f-1dd3eae75a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f642c92b-4ae8-46eb-86c5-43e090ac48e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d55201c-cbb3-4780-86b2-710301679502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0287765-2666-409c-811e-ee36e8a6f2ea",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ce630d-1ffa-477b-92b9-ce0c7f084cd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58dd6b17-a043-4556-bb89-452896cf3499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da72dc27-a19c-42a2-b903-d60d0a662238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1658488b-4cae-49f3-9d61-a879000ac7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47979f57-b6ec-417a-9a4a-b12c25b57cc0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e16021-3283-4fa5-acf8-8b531c2ee689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf82c2a9-2720-4392-8d41-51267fd7bc89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94dd1ef-073e-4163-ac98-104ed93576fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc07e4a-d961-4f7a-bb90-0d1e72cfd7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e8331b-8e67-4479-a116-4a31b95027e9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670f6281-cc21-4925-ab66-ab25639aa4f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bbe4fbc-2108-4bd2-92f3-3c6d4e12a180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a1e31f-aad8-4595-bbf5-4b1463e5e85b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00722da0-fe47-4adf-9098-01e9359bea22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e212c91b-ab86-44a3-9c26-6f58ae0b32a1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a92f3b-c7d7-434e-87ff-7aa3a361bd90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6460d234-2a07-4c5c-b52e-b6c5ff1e3c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f19c835-d67c-40c6-8553-041c2eb1ceef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc0eb94-821c-482d-ae85-261f1b9f547e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186708fa-746c-4919-9cc0-b444633c4d18",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce8aafa-96cc-49a6-b3e5-16cc1d624ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0765c0f4-7690-4e80-9a77-d7b31d0e4169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acde990-95a7-44cb-89bb-9c82b9469cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4d48ca-5391-4d05-8edf-f6302ef27cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dddd61-b0da-40a4-9dec-238f3ef91ccf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654d033d-8ab0-4782-ae50-fe1e4b60e2a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f38dced-6d34-46d5-ab31-0e2b5fb23627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f79e387-a7c3-455b-a013-e8788604240b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c16b524-21e3-4cb5-ad71-d03e438f2f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92536645-1644-44ea-bcf7-64d494015f6a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e233085-1bc4-4e09-beaa-0e53e8113047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63749c15-c225-4f3a-a679-8bf4819ace3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b2b8cb-e4b4-4605-b12a-2a99a42b7d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4141b24f-f292-4ac9-a3e0-709d707c874e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fe1f03-08a1-4791-bdd6-1a810fc84981",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a1e798-56c6-48ed-b35d-1278fa13434a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "522573df-cc63-4708-bffb-6a46a86b6bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ce2dc9-3196-4db7-9375-d933d0ff4521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e66391-652e-4de9-9bdd-21e82c579091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ccd724-cba3-4602-830f-2c9e5a9b075f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2abe455-69e8-4840-bc8d-daaa484035c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c93b25-b8fe-4e0c-a935-bb550dbd85a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "378f2bfb-0e5f-4fc4-856e-c8d15a0d579c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a91cf87-6f90-4e71-95b0-b82f5c754c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88b6cae-7764-4fd1-a444-be563d9c4fe9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d4919a-a9cc-4456-b28d-6738da229347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82aa7a89-42e7-43f8-b993-22ae867d3d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7785e73-a9c5-4a1b-9999-1950cfebe228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1404b3d-c409-482f-b817-762088d99e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b83287a-b0fd-4eb0-9b00-14cce00cf2b6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e27343-0a54-45da-b355-8290e0d4e1fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ae86e7-6f50-4c67-979e-7c8c26219f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db028605-6ef7-47d8-bf1a-5c006c91235a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1820a091-0e50-4326-b0a5-8f93c2f88584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c51583f-af91-46b7-963d-e58a2487055e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8144af3-5a78-4d90-8cb8-932cb050f80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ca4116-be32-436b-862e-ceefb90c7fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86305ca2-d713-4211-8e78-f764849f66ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d9c3d3-0457-4993-9201-cb973d82c33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51cb0f7-5136-4d03-b6c8-68bbfb593a50",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8506825a-889d-411e-b1b9-3ede3f9216c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807d684f-4497-47b2-ae2f-c8df374286e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7dd2ee9-9f3e-4f9d-9f22-1aa826a1bc3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6a8622-083e-4b0e-8a6d-c3beb58c1a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048e5d06-dcc7-4d6c-9313-1e04c07033b8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d320700c-3d70-4a5a-84fd-812a14697c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc70042-cbd0-4c40-a726-d2dbe2c34a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9a4c20-880a-46b9-968f-ba44ab1fd03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f9c8c9-f9c7-4b95-a07f-77b5e928698b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14ce344-1138-4a3d-8910-19637c456df6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a58c53b-6489-4994-847e-2210937009b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7c2a9a-f927-4be7-ad65-7bde8327de55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdf1c19-ee1a-4654-a250-cd7f45884619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e2454c5-a446-48c7-ac3a-f3f71343656b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e5f76e-0cc8-487a-a83c-ba23e8221766",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95685737-439c-447c-b6ae-dea0aef33c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9529c5c-8dd9-4592-a826-034bdab54933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b71e5b-7a27-41ce-8ec7-f72c9b68aca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "753f995a-c075-4f45-be0c-fb5e2d0b41ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeca2d00-b858-41b3-af5a-af19c04165ee",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e109991b-9135-4f01-8e06-f1533e4baa70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb707e3b-6123-492e-894e-4df9ee30ea74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dadcc33-a9ff-415d-a150-b4ce02c4d369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea759d3-5dfe-4dd3-bb6c-e285de6f662a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa08b0f1-e646-4f31-9b8e-ce3c6a40069d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f76fb6-7dec-40d6-be08-5258e7f5b788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610ee013-ce9d-40a2-8bc9-3422deb21998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e199d792-c93e-4dbe-9fed-4ff85bb4e3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10db4f1e-a42a-4db1-9e1f-33a469cff2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fcca6e-5f47-450b-90cb-95979d1ded69",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c24aff-7c56-4e5c-a324-2455f731ad8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0572f2cd-531c-4f61-a9ea-5d2fa84ecdea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad9f41e-8b26-41ed-aea1-195a6659e733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16fccecf-ec7f-48d3-ab97-603955f18da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cf2cd4-2a9e-46ae-90bc-746b7bee20ab",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b01bd7-a730-4aea-a508-42e195d50230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bf38b3-4bed-4d90-96ff-705b2e7560eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d938c927-536c-4483-a96d-f728efb653c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34734cf7-9c44-46d8-8c26-2393c6ead0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2da0d74-f40c-466e-8919-fc32018b29d8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7913adf3-cead-4eea-afce-540d3a4051c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da7b0efa-d42c-4ae6-b29e-7cfcfcac5447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccc106a-cad9-4560-8f48-39dbc19012d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f1f7dc-d724-47c2-a4e9-3bf6e571cc0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf2bfdb-0d1c-44e5-b9c7-f87de3fe6a81",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bb4477-85db-4d8c-8211-c5b222e7f835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4361a511-2f41-4103-a5e0-48a8aa2f293a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1aadb69-b2bd-4507-9d70-df5dc93f26be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3364aa7e-b475-47dc-8dec-46bc45941c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afcae25-b26b-41f6-a1e0-3f27b74118ec",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcca474e-91e4-40ab-853e-48d2fa357b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3375b698-6a98-4382-8537-0447751edbd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dadc627-9182-4cc4-98ce-923cba2c9cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93327850-add2-42d4-9ded-f16193e84fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f558154-96aa-4346-a45a-107d3b2b6e4b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45308b62-bae4-4cee-a340-f13098895490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4f10ff-0d01-40ab-9669-de2ddbf3a370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b968eda5-d1a2-4896-aa55-325e1ee546f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ab09d9-3710-4b2e-bb9a-fe512e0da21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9833a2a-9b0f-49a7-83a0-78658e1befbe",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd673f5-43c7-406e-b26d-268dd2de210f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "350e53d2-ac3d-496b-bb7b-056fbfa653b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2db5aaa-098f-4cd9-90cf-ee68847ea349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45dd45a-c813-43a2-bf12-f485ac622b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62044022-966c-4635-9165-9f1cff569026",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38dde3c4-6073-4d5d-945e-d95abcd2b38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a9b90b-11de-443f-82d4-027bdeed1fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf99f5a-ef44-4c41-a6cb-30d38a775868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998d9fba-b7f7-4896-9eaf-6031431a959c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe9e8d1-eb3b-49b6-9279-33dbd37e1328",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c8c072-ab99-4437-9359-6a4cbcc7b21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd49d16-9d6a-4f93-a3cf-1679cd73e363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed15e37-6e8d-48fe-acb8-74b4108df0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f40753-eb27-4ce8-a5fa-7eba645ce3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0966b20-5a6b-4bcd-b7a5-005407ccb50b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ceae1e4-ee85-4899-abec-8d8c5c5d92cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b66205-0f20-48d9-902b-0cbeacb5ac8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1559068-3783-447f-8921-643edd46a7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7567854-d98a-49d0-8279-22c2a1596805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d054aae-2de3-4f15-9585-990a1565dbc2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcc2956-865a-4e03-8a10-29436a71315f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a68d63-ce5c-4498-8b3a-d646005d0e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7db1df-e959-4eb7-9df0-a22aa2a5528a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7cecc6f-6b4b-45f1-b673-151d96a0e047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbc39e6-885d-470d-baec-186919dd9dd9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecaf45a-b997-4647-87a7-0827ee995b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a3a250-b5fd-49d8-a72b-6d35eb8cb92b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23628f45-c7d3-4331-a50a-61dd7abf16ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f06129-f25e-41a2-a077-782fca9b25b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5043bb26-d8cd-490b-a64c-9eca9c3004c6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d4bbb2-0597-488a-8b6c-bbbf6b82bbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb8d466-8832-44b2-a410-57299e7303bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49689b2-5483-47e0-b46d-d0b8f6d69fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991da959-d524-4dc0-af06-c5fb39cfb53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4cfa7f-e6d2-4619-8ea5-d155db984d8b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5f25b7-a6c9-42cd-b814-2d59108cd8f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9cb6e4-3969-4df7-b594-3477b3651494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe2ac2a-9483-4b5a-b5af-a9b62f435b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736958f9-604f-41a9-96a6-a097589deca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7102ab18-92f5-4468-88d5-55e792fb8d74",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a2c879-6471-4956-9d3c-0c2947d8dff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eeebd82-e918-4745-b5a2-2e4a50c8c0ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfbf5e4-9f50-44fc-9306-8877dbf8694d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03d5245-6c86-480f-b6c4-0a94a9948fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8d5b19-c599-4df8-8635-6f42090be56a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c90209-8aba-4c46-8211-0ad84472b59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905c5111-3f3a-4049-8a67-8c4ccb2d646f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773c7c89-1f7a-4487-99c0-04fd13072b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d32ed4-8e41-4423-8313-0bd4cbe75fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23188ee-cde4-42d0-9689-97bba9061ba5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3abb72-5260-47f9-b1e5-ece32c531213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0df782f-53d1-4d61-82aa-5ad50005339b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e4a889-375f-4183-a476-e92c635d36c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf8867f-4b44-4eaf-822a-a937d648ed5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eb41c3-5639-4d18-9195-8a2fbdfd165b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b46f897-9203-40f4-a813-a520b059e694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df5236d6-8ed2-4ef7-b190-10dcd59e4a03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb379bc-7f89-4c60-8f3e-dce3d7af6237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e456a18-eca8-4724-b558-c5fe0dc1fa9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e6f97b-5c1c-4373-87e3-05b32cfa1053",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b81769-a899-4272-b0ac-70a580db3706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb9e997-bbd5-47e7-a6a8-b58f85a37d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac0cf9a-73d5-4de4-afba-1dce56aca4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2829372-84e7-4079-9568-7572f9fa31bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c55d89-11fb-4e8d-98b3-e5290b2cd340",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edfe769-1b18-4e5f-9893-917d0c9b2d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee6bd36-f705-4d2e-b400-a81d20c4ba08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90dc7b1-5205-4ea5-a6f7-7f3fa81fac2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf2ef7c-680f-43ce-bad7-8616b1c15591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eec41d6-e7f4-4933-9bd6-0aaec778365b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a0a522-adb7-494d-a22b-66b3e77fc1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c207ae-78dc-4094-b2c1-764eeba858ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ca67f4-ee45-43c4-b4bc-8d831af2d47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef8332b-85a1-47cb-ba84-e2ab223cc50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd6ccf3-a31c-4d8e-923c-b80d785ae7c2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e26c9b-3be7-4939-b2b7-e7db606ab7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3bb9029-7d26-493c-b200-539c87a50d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0456af02-6bff-4690-b7a5-30e5329fd2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e1e246-d9b9-4d7c-ace9-efbf1d673a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c75a50-4465-4cef-80db-4038af9fe2b9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc11b71d-2ce1-4850-98ab-2f83eeaec853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa6c50ff-621c-48fd-8bc9-64a19c230b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4257f05d-9252-4976-b466-5b7069716fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c95d02d-821b-439f-8361-ccd7d349a822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287b51cd-c652-4996-8787-b1922bd507c8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45d4693-2228-4c61-9786-47fbfc42d13f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029465fe-bc08-46fe-9137-3e2ca46f8269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270c8e58-ab39-4865-9a2f-526d3c09d658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9868eb87-7154-4fb0-b396-c025dbecf221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d685d42-492d-4da7-9c08-d70c08fa8629",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d4d501-d2a8-412c-9032-6028bb4dc708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e68a4f8f-fc88-497f-bdf0-e132eed03198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee26cbd-39c1-45a7-a973-00a130245251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43820bee-541b-46dc-9deb-81367d504b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166979ee-7a30-4d6e-b285-7ebe2d4d539c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c17e83-3e69-4f37-9e9e-d5fe68828e2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ac9e019-ca85-4032-92d7-2c1b34d7a052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a68243-884d-4de9-9ce4-c3d058eec102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ac6abd-e0ea-4300-b2c7-7edf8b748d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267e42cf-14ed-4742-94ed-4b09d0584b80",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eccf8292-c4af-4b09-bd7d-823dd0d77d09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e48633c-33ee-4bce-89ac-5cd0716f88bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e69adb9-8ffe-48a0-83da-da66bf2b5b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a63c29-19fd-425c-b0ce-16abbd31e51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345244cc-cd2d-4c37-bde1-c489c3b1743a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46f6cc4-de7e-41c4-a964-a588c32c293d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d861e42-e581-4e4c-b6e1-198a43555a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fd76fa-a200-458d-a770-59a52c3822ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f088acb-a958-40bf-8d69-d7405a867e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ff7896-c767-4d48-af2c-4f74c609c49f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43317a6e-fdb4-460c-bb9c-c11635bbe712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9567e0ca-3d9c-4b22-a963-cfd02b14eae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabd5b28-9ee1-4beb-b4b1-41b6eaa7585a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec95988f-0468-4931-848c-c804a5ab2f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aebbda9-5d7c-4b02-b71a-285e55491efc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a355fff4-b08a-455a-a583-e30467db0bd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96b27a13-2d56-44a8-a98d-c15ce09a511b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53977d9-6f24-4d8b-be19-2d636b7c9422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac65158-0219-493c-aec9-e5938984a813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5a9960-91b0-43a0-a4c0-2cc63bebc21d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b351cf5-b0f9-4372-b774-313719e53644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55d76eb9-0a24-4eab-b878-b1ccfe545dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c9efaa-bbf4-427c-9f9e-1672fba2402d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0a6527-cad8-4266-b6d9-972ca3c9d1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d990d95d-e4c2-4490-b7c9-53c74b40d608",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5eb9b6-b4d8-4609-930c-7e45eef139c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47d1ca18-6814-4806-93fb-be7ed148edee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab6b555-6b24-4b27-aa8b-ba0c0312e772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "240ded82-6616-43ad-94b8-664e9da01a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee18e48-7885-4aea-af23-e10965e4fbc6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e442729-7cf5-4eaf-bd16-7954ee028847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "033137b0-6be5-4e1a-8175-ac1f58d6804f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee595997-3f0a-4037-be70-bc7189e14688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f3f15a-46a2-4f2f-a5d4-0d45125a5d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2957cb-08a0-417a-ae63-29c6284b1796",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d643b7a9-99f1-4d52-87e9-269c05831a94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6dc268f-0b3d-44c7-86f0-a46da3989e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39770986-21b9-4dcc-b867-fbae60b180d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177a5414-6c09-4170-a801-557b430ba2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670f52df-bec9-4e74-9096-ff2f13d7b618",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844f9ea1-35fa-40a7-8e62-db414061f88e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51a639d9-4f01-491d-81d1-af4c580bf981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8940610-04b3-450c-816e-b45a7ecd062e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d26baf5a-d87c-4b7f-b151-54e4b376fb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd157c4-2232-49bd-9e5e-d9498e31c1ff",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561369ca-b539-48c6-b4c8-64e1b7611d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4ed97f-70db-48f3-8e8a-b0db3f5b4eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "260c6336-2e3c-495c-a756-bc6a25ce781b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f42a8a-1294-4aac-a213-c165fe9918a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0488f24-da8f-4eb6-8895-656682a53034",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f514a98-b14f-4344-90c0-98fae1ab4a74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbaaa5cd-23ef-4c10-9974-8b36e5b4e138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16f6571-1abf-46b7-82c1-64cd6f3fc8d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2687cc4-2578-4e16-bc33-a3e4663a9c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6397419c-d305-422d-afe7-19dcf2777674",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254179aa-ba45-4a91-ab0b-975c5cd28f5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79760701-31ec-4860-bcbb-a3d470645bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0227f6b-1d8f-45d0-9636-f9a9098fda2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "753121fa-5ea0-40ee-a14d-f581a8e69ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f35ea86-1315-42e7-a963-4b726a747c9c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9358db6c-a55c-45b5-8149-e1bb402d3a84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c9e1b62-d161-4706-baac-c78a878de31a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ac3e87-f04a-4573-b3e9-2f71b5c81013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1b2465-4add-4afb-adfa-ca6888d2947f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de67fa9d-e313-4bd8-9317-8f9f796f7c7d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bace949b-a098-4edc-8e1f-4840ae4634c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1cd2abe-585e-4d8c-9b85-a27233a6b76e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d034a38-7468-4dfd-8d92-f1dc4aa8c79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcb7dbb-8874-420f-8db4-ccd96818d81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9074544e-4efb-4be1-9356-446297f83699",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77d62f4-0f3c-416f-8c7c-4ad02e603ccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4be6f2e1-0945-48cd-934e-18373eb468e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7871470c-17eb-45d2-b076-8c5864e3d21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0845d30-a1d1-4708-93c5-cb53a86cd9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1378a0cf-ba4f-4bed-bbcd-ee47593351d4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8989fb-b7b1-4ddd-b843-cd94ec8b22e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cf29690-57ea-4f03-86dc-972306d46cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d0f3c9-9be0-4d07-a1ee-1ecd99027c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82888b8-7271-4388-bb3f-0a57b0048f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e034df74-ed8c-4db3-9ba8-fa9a2a45c34d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f07dd8-7fac-4290-b08b-0d07ddf01f9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db7b7fcf-2644-4dd8-8f72-413866d06919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdae000-3ed7-4551-83ee-e9bcdcb1456c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1393adb2-8fcb-44c8-8f63-ae14b0e266e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a05968e-21b3-4c61-accd-4dc04dd895eb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d02077f-e6c2-4f36-9ff1-4afe4c42140d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c9c58f-9647-4bac-85d7-8c608a4faa27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbebe5c-5ca7-4e31-8386-45730e08ff6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da71a52b-1df2-4a0e-af26-686a0dde864f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660365a9-a54c-4d7c-b655-bfda10db43d6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1cdc4a-8abd-4c16-96ee-b46f0a03f05c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a55eacd-3197-4da8-be00-cb904a166ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc618f20-3a6e-4979-8bb3-84c2cb358002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5ed485-06e1-4ebd-8d7f-aa92ee94fe64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944f7759-3b2f-458e-8a15-e195d07b8c22",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d87243-2ebe-4298-bae8-87aac438b4f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a36f122-1b8c-4066-a02a-ea7d3f145b11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd8cd31-5a91-402c-9f02-e24d7afb968c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b639da-92d8-43f5-b713-4777d1ad342e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce22cbb-a9d0-42b8-9880-a43cfa54b13e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148981e5-6072-4398-a6bf-0dedef457887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0901f26d-ec5d-4be6-969f-ca59373693cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e472e7-3bd7-4888-9e10-717a24e94582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e43aac-adb3-4547-a0bf-a735689d6fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd498a6-0872-40be-8902-1894616c0598",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29801aa6-44db-481c-8e51-d3e6ad6a3193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d3ad24d-17a3-4c67-9571-94afd4854259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd286fb-5a74-4b66-a698-4e7bc9a28f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973bffa2-a853-4d43-8d3a-6ee87d656a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9bec3f-763d-4e46-8079-c9260c9a7ee8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49f6d33-b6df-4f11-9bf5-35a9bf304512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b8abe8a-9e62-4a34-b84f-425113a08942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9e33ea-1f5b-4236-a786-cf5b52b16529",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d01d6e-bd71-43b2-81e5-ea4b87264de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8879d83-499f-45e3-9d40-11a536a15fff",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d0956d-f301-4618-a24f-524b9dbf9a90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddb856e9-d560-4670-92fd-a0f793457b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc779ba-88a9-4cbc-affc-b7eb22aee639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1fc8d9-306f-44cd-8d69-334063be13f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc66766-6188-4123-bf33-af696412a0ed",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1f8417-59b1-43c4-acf7-e1a1f075912a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eefe339b-c4ce-4c72-9f81-93f62a0d40d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d45882-87e0-47b3-9c91-e6e6df04c0c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f0014d-af9a-44fb-bacd-7dc78b86a1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088a998d-abd2-4de7-a2a8-1db5c7e3ae48",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbde6e22-885d-4b13-b299-e87fd7abe518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea2e113d-5a71-4fa6-b8ad-8bd464c90ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449e2d4e-c381-4f3b-8347-444167309800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a138be9e-27fe-4aed-988d-1e7f79ce24e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ca34d9-55b5-4612-9d40-f0ad6e1675d0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76803844-f90a-433d-a56f-b17b2f5e598b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cc9e2af-d3c9-449b-95ca-e6ea01442f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "897653e6-79c1-4c44-adff-c3028c66f2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a56c25dc-391d-40ee-80a7-5c4c077a014f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476d08cb-58ae-4729-9d9e-b95e675dc4c9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76aff160-5f70-4773-a07a-71cc03496270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f68b0a-e9dd-4d7b-abcb-c6a1454e839f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfe5a19-f46d-4761-99f6-16ca68397313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b457ddb0-7c04-4dd1-b5c4-4b318e2f6f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039a6242-2456-41fd-a4a1-5bd8b13913f3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2054543-307f-4921-9ab5-99e4adc0916e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9062fed-7b9a-4a92-83b9-065eef208863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec77f661-b789-4d0e-9e2e-165ea3a4f924",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e468bd3d-f956-4681-9c75-974c574361f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b587330a-ccd9-4168-a6d9-33cd1e111a9e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9c577a-a245-4dae-a440-8a337b77fb31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc0935d0-f689-4dcd-af9b-dad14654543d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0ef14a-7928-4452-8ce6-a9cf3faf3b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13d24b4-e68a-491d-9874-65791bb01636"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29c998e7-61f2-4af1-8e09-700e98deb3bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4f13791-1c90-4803-bd91-12be400b4db9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29f1c20b-1efd-4bb8-b01d-ba2c70839a04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "832c50f8-99b7-4fe9-891c-eabf93b10b10"
                    }
                  }
                ]
              },
              {
                "id": "26976e53-7b64-4c27-af15-e3fed9fef879",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c803671-2593-4091-b5ce-0df0307fd32f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733dc6b3-f740-474b-ab7a-cc81804db301",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bf69df0c-ac3d-48b2-88f5-ac18c979e819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59ae997-de3c-413f-86e2-b9c9de9d9add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1391e12e-a670-4df0-9bb2-ff89913eaf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0569a3b8-b315-4ebf-b345-b3d273c3b5d8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8653ff-d7e8-4dd5-bd23-fc3b95d6d07f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "86db8bf1-1934-4303-9098-022ad56f818f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8865db94-c67f-4e4a-99e7-ccb39f0ceeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3f7eaef-6ff6-4678-80d9-6fe4343fdbc6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec61efc2-463c-46d2-af0e-87fc2556761e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34e0141c-d540-4a09-8400-e3f85337edf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "288fee62-0a54-4b2e-939f-0c5352dc4cd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2385d11f-9529-438f-b43d-09d1a7a2724f"
                    }
                  }
                ]
              },
              {
                "id": "706a1e67-4996-4b8a-9d0f-037c29af674f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "667c5b22-f1e3-437d-b96d-33d4e0bd9bb9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b44e6a1-cdee-4143-aa0b-c1de9965f74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dd04ebc1-3770-4136-889f-cb132aa53f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fec6510-ea4d-4b39-9ebb-21160639d126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb39e989-e5bc-4b7d-b977-026b6de5d286"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c4768479-1429-4d7f-a6e8-5aa4147c1c84",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b6532d8-8653-45ba-b17d-9e066025753f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "834e0622-cbb0-4edf-b18d-09405222d8ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dcca3139-7a16-443b-a54f-99291cf4f12c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bc4dc23-e9a1-4c93-8017-ed7d8d12a690",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cbb95e4-4a4e-45f8-8deb-706343cb6eea"
                    }
                  }
                ]
              },
              {
                "id": "1c930d0f-58c7-4935-970a-0cb9ae542204",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c8db3e5-a6ea-47e2-861a-ac0a1c1140c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c0df992f-cfff-4f1f-92d2-4eda00124243"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09759610-bb0e-4a94-a865-98012e705077",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c52a4aba-ad80-4820-9601-b099e876092e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe260fdc-45d7-46ee-950b-9ff4a0039900",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7e3978b0-77d0-4df3-8267-72283bf0e1d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "089f2692-611d-4ddf-b711-d926574d8c4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c79908ab-52ac-4529-aa6b-d65827ed501d"
            }
          }
        ]
      },
      {
        "id": "b653c0fe-b759-4fe4-80ee-166b7567a1d9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "30cff4ea-d32c-4fb8-9767-2fa005e10829",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76ab5aa9-9855-4963-b959-663cad4cd11d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e62e7c04-5563-4c8f-b087-84fce143be30",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da83839f-0424-4960-98a3-e632afc0b4bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b117bd42-d87d-4c95-ab0c-bf8097f4f9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746fe0c4-80ea-48d5-9c43-05b14ef0eebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa7d0c02-ca3e-4702-ae86-1a33f03370c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c65d015-ccb5-4ee9-acc0-aa9bcee3e7f7",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01165ff9-fb70-4042-b1c2-4940ac76f0db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "939fd99a-f0ec-49e6-9aab-aacd46b4e1aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5f8e51-febb-4ef0-8b2e-c947348ad77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11252476-28c1-4a25-8e0a-574f99c5ce5f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02fb5df8-1d5e-452f-bc4c-cb253d3df5ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80fb261c-443c-4b24-bf0f-f1f4ce415666"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c5375ae-ea9b-48c8-8c9c-e49d313bb4ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e5851f3-712e-468b-8fb7-5ac63e0db877"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92bfaf8c-4b69-4e6c-80d3-7f0562312f46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7720f1d8-8979-4b2d-9f7f-92e60120e52c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b147013-721a-4d15-a194-200ec62eb9f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12035026-3f9c-4503-b9ca-9eefee920ef3"
            }
          }
        ]
      },
      {
        "id": "51dc138e-bd41-4f79-b267-36e8c223860f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5f7bae3f-f162-4f82-a6e7-11b7f51569c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99ce47b9-60ff-43c6-aeb2-9e1a65cb9ec7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "150cc13c-79e4-4d43-8ecd-36df3bbe0101",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3e0c21-9061-4d75-a8dc-e4b2e3d9ee92",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a10d8d1-0e57-4b06-b81c-e9e8aa116dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7264e36a-12b1-49e8-b7e7-922ce477691a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6fe0efb-8430-4c88-9e53-4f434d8cfb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc72038-64bd-4def-bf15-b4930c643e91",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b9a930-dcf2-4be3-99a4-6524e2dc0ba9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4aba331a-9766-42fd-b947-8afb2c39dd6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589c6298-dabf-460c-a801-f6819fd36427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e6922b0-f86b-407c-b9d4-3599032a80bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9dfbad0-736a-42b2-b4e7-1e0f333426c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f763795-7763-456d-9595-baba57b4a3be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27dc397f-06a8-4bf4-9569-e931e4294cdf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf5c215f-6ef3-4143-af0b-8378d385fc62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "274b8812-df8f-4b36-b2cb-46350a86d3f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "10bc7e6a-ddf9-4f38-8abd-6496329c22e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfc291b3-20a8-4f56-8225-da9482150d1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c294ee66-e6ef-4526-975e-dde3cf6abe46"
            }
          }
        ]
      },
      {
        "id": "2a9742b1-2734-4d7a-8344-bc05797006ea",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "eca7af02-85d8-4ff2-9d1f-8a5ef4cfff19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcdb408f-0a37-40f6-aee5-805b9849e9ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31efa44e-86eb-40a2-bccc-57736896a0c8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112f6f78-daf0-49e8-a6fd-e6bce7aa9e09",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f78b75af-56bd-4da0-8722-cedccb88e1f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2b7c6b-4647-4e7d-b5b7-29d28ee1c02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08b7b9aa-6e22-4ed8-aa2f-98af36069c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0829a8-7865-4004-845d-042fbe36cd55",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e45d29-09e2-4118-8e0f-d1be4a7d6928",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dba7a6e5-3adf-4a6d-a7f7-7e31861ce0bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dde95fd-0647-4241-bc17-55989d8f236a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2625d27f-6ca9-48e9-a169-2cfd27c8a61c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ad9767f-ec98-45ed-a32f-21fff66e1393",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0ce5815-0275-4e37-a810-16c1791b496b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd7e5506-c259-4d4c-acd4-f71d12f25a2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c8de68f-be96-4358-8ee6-e7e6527448c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88527d14-336f-4f08-a45e-0b3a3f2dbf62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42acd94a-d6d4-411e-9323-ada802aba50b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5050e26-4b3d-422c-9389-a2b7a69d40fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "383520e8-a8d3-4340-8b49-352d6075f4ed"
            }
          }
        ]
      },
      {
        "id": "8dfc5eff-ded9-457e-ae90-a0cc2236b6be",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "018ae12c-4ff5-401a-8e8b-21d67ff8c763",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "239dd033-77f4-4074-83c8-840f732f855e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "02c17c99-7aa4-4474-99e3-d07ad4de853d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ad19567-b956-44ed-8765-ff7f42f820d7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd19638e-a324-4773-955b-a89d6e4ae0b8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 274.996138996139,
      "responseMin": 26,
      "responseMax": 6325,
      "responseSd": 724.4684404586675,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678150039139,
      "completed": 1678150120979
    },
    "executions": [
      {
        "id": "fbc999fd-3061-41cd-99fd-88d3499f81b9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f0e711a9-135d-4baa-a4a3-d003241651a2",
          "httpRequestId": "ef827d9e-410b-4957-8dba-e2d3494dbc77"
        },
        "item": {
          "id": "fbc999fd-3061-41cd-99fd-88d3499f81b9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5727823c-0d12-45bd-9dc3-3e837c395242",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 0
        }
      },
      {
        "id": "52d9f285-1a25-4bf2-8717-5e6e5383c9e5",
        "cursor": {
          "ref": "66966934-8938-488f-a98c-55d74350ea67",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7e8a85ed-0e69-4b88-aac3-66817c231c07"
        },
        "item": {
          "id": "52d9f285-1a25-4bf2-8717-5e6e5383c9e5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e20423c3-79ae-47d9-8837-0eed3d335b9f",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 0
        }
      },
      {
        "id": "8cdd6dd5-98a2-4ff2-9191-5c096b017b39",
        "cursor": {
          "ref": "35aadd83-f676-460a-9308-3ca70b88c621",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "aa6dfc6a-c072-4247-97cf-2eeb203f7618"
        },
        "item": {
          "id": "8cdd6dd5-98a2-4ff2-9191-5c096b017b39",
          "name": "did_json"
        },
        "response": {
          "id": "dab17977-d7de-4e22-81f7-a9685a25dd9c",
          "status": "OK",
          "code": 200,
          "responseTime": 789,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052a7ee7-b02a-40ab-9f3b-06216e42e067",
        "cursor": {
          "ref": "01365a07-5387-4b0f-8f72-8f8a782c979a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a436102e-0fc1-44fc-8505-190e52ed5137"
        },
        "item": {
          "id": "052a7ee7-b02a-40ab-9f3b-06216e42e067",
          "name": "did:invalid"
        },
        "response": {
          "id": "cacc4dc4-72d4-43a7-b64d-e388603bf854",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1925,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "052a7ee7-b02a-40ab-9f3b-06216e42e067",
        "cursor": {
          "ref": "01365a07-5387-4b0f-8f72-8f8a782c979a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a436102e-0fc1-44fc-8505-190e52ed5137"
        },
        "item": {
          "id": "052a7ee7-b02a-40ab-9f3b-06216e42e067",
          "name": "did:invalid"
        },
        "response": {
          "id": "cacc4dc4-72d4-43a7-b64d-e388603bf854",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1925,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1cf80c28-a0dd-443e-827f-e3041ec623d9",
        "cursor": {
          "ref": "fcea8eb9-ef3e-468c-8485-1064bff62157",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "006e61ec-a85d-46a8-bb8f-d32e103d0bbc"
        },
        "item": {
          "id": "1cf80c28-a0dd-443e-827f-e3041ec623d9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "38a04009-48d4-4805-9a1e-727c7fff1620",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b88487-91f4-42cf-89a7-340c4a445c96",
        "cursor": {
          "ref": "feffcaf3-bb7e-41a0-9f74-93ade6c7f8c7",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b95091bb-5b54-43e7-8ca2-90681b0a9aac"
        },
        "item": {
          "id": "b4b88487-91f4-42cf-89a7-340c4a445c96",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "209ebebf-963e-49d1-824e-0e22338cdcc8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63628757-4753-4126-9749-47057bcc2a28",
        "cursor": {
          "ref": "bffe1f82-0bf2-40bd-a5c0-11325eaf9410",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b25d85dc-7ca8-4c77-b1b4-57ef7d88cdb7"
        },
        "item": {
          "id": "63628757-4753-4126-9749-47057bcc2a28",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "90745e32-9711-4711-a792-a89f831d08ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4aecb308-b145-4bd1-a6d2-3c776702514b",
        "cursor": {
          "ref": "2c85043c-6d70-4ddc-885a-6a1c2dfc4d5d",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9c2723f9-9343-4cd9-b5f5-86c56b73c905"
        },
        "item": {
          "id": "4aecb308-b145-4bd1-a6d2-3c776702514b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5cd01a5a-fd54-4045-a73d-3fd6c35d5ac8",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4aecb308-b145-4bd1-a6d2-3c776702514b",
        "cursor": {
          "ref": "2c85043c-6d70-4ddc-885a-6a1c2dfc4d5d",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9c2723f9-9343-4cd9-b5f5-86c56b73c905"
        },
        "item": {
          "id": "4aecb308-b145-4bd1-a6d2-3c776702514b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5cd01a5a-fd54-4045-a73d-3fd6c35d5ac8",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e9cf9b39-49df-420b-9a8f-f7bfec6cda19",
        "cursor": {
          "ref": "900788f0-9ec9-4284-bdbf-a5a040735ac0",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "88979aa7-2a49-4530-8c26-09fa56c00d89"
        },
        "item": {
          "id": "e9cf9b39-49df-420b-9a8f-f7bfec6cda19",
          "name": "identifiers"
        },
        "response": {
          "id": "5585859c-5d6e-4cfe-9350-36ff12560bae",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f9b7d0-a023-42e7-92e4-38da838f3d55",
        "cursor": {
          "ref": "25d03912-9878-425c-a1f7-a310d428cfc2",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "18ffdba2-8ac9-4027-bd64-66ae145af32e"
        },
        "item": {
          "id": "45f9b7d0-a023-42e7-92e4-38da838f3d55",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8b6f0e28-0c9f-4874-8e6a-b1c8e70c4c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f9b7d0-a023-42e7-92e4-38da838f3d55",
        "cursor": {
          "ref": "25d03912-9878-425c-a1f7-a310d428cfc2",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "18ffdba2-8ac9-4027-bd64-66ae145af32e"
        },
        "item": {
          "id": "45f9b7d0-a023-42e7-92e4-38da838f3d55",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8b6f0e28-0c9f-4874-8e6a-b1c8e70c4c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0412c241-80bb-4eed-a2e0-373eb2af2722",
        "cursor": {
          "ref": "6ab5eaab-304b-49b4-9edd-16443eeddd27",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4e90032d-5e7d-46b3-8708-4e627b1120bd"
        },
        "item": {
          "id": "0412c241-80bb-4eed-a2e0-373eb2af2722",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7bce2566-cc47-4100-b195-da3e82f1e61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7c312e-9b52-41a1-92a6-700b1a556253",
        "cursor": {
          "ref": "3720b87b-55b0-4dfd-b1ab-22089c6786ba",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "95ec339d-065a-488d-a65a-42c2247660f7"
        },
        "item": {
          "id": "9e7c312e-9b52-41a1-92a6-700b1a556253",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "99cee549-a209-4bec-8627-55af54ef63a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80903c89-d870-43d7-a16b-7c2533883b9d",
        "cursor": {
          "ref": "a2e12c42-8638-4114-a00a-5a55f32135a5",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a7f9fcdb-9e25-4ceb-99eb-4728d1c39b33"
        },
        "item": {
          "id": "80903c89-d870-43d7-a16b-7c2533883b9d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bd39eddc-6258-41ae-9a8f-084fb19177b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961fed33-d0e4-48a9-9c67-27be8ca48821",
        "cursor": {
          "ref": "befc7fee-d973-465d-a4dd-24f34c47751b",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bf190776-a2e6-4a6d-b2d3-016b8f0db39e"
        },
        "item": {
          "id": "961fed33-d0e4-48a9-9c67-27be8ca48821",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "60bc81f7-171b-4ae7-87d3-08ef48514cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afdfab9-5862-4f39-9072-36c339024b48",
        "cursor": {
          "ref": "e383038d-b3fe-4c79-a3b6-264527391afa",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a554f4f1-bbcc-4e3e-bb7d-2a6e8a06a8cc"
        },
        "item": {
          "id": "7afdfab9-5862-4f39-9072-36c339024b48",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bf1abb4e-1fb4-4239-b1eb-d77925160cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a32193-4622-4349-a976-dca9aea2f09c",
        "cursor": {
          "ref": "63478337-5417-4f52-ba0b-ce9055b7ca2f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cbf0966d-e89f-4ac4-aebc-c049a944b030"
        },
        "item": {
          "id": "84a32193-4622-4349-a976-dca9aea2f09c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c0003e3f-0893-4d3f-8003-2340d8e66949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43b26e6-1898-4037-b368-5f98c223f716",
        "cursor": {
          "ref": "8e36402b-e55d-4b5e-a0b8-31b245d2436a",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ea8540d9-72d5-4783-a6de-81a66ece2d20"
        },
        "item": {
          "id": "f43b26e6-1898-4037-b368-5f98c223f716",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1c74eaab-7909-44e4-85b0-5623f11f1cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64753b57-d07a-446d-940f-97693c95deb4",
        "cursor": {
          "ref": "f8b7789b-4ca3-4540-955e-907469402083",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bb775416-41cb-420a-bb8f-f6c3498e50b7"
        },
        "item": {
          "id": "64753b57-d07a-446d-940f-97693c95deb4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ae23d0cd-c2af-4d04-8493-94de58a89873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b198071b-bc39-4b72-a337-b46204eb274c",
        "cursor": {
          "ref": "d9cf1d20-b0e8-42d3-b29d-94321a94eb1b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9e7f2105-f1aa-4f43-9e7e-ad27540a4891"
        },
        "item": {
          "id": "b198071b-bc39-4b72-a337-b46204eb274c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a92b85d2-d054-4b06-ac11-be1fe509db99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91034b87-6194-49b0-80b1-643069841a01",
        "cursor": {
          "ref": "d60edb36-190b-4119-a1c6-4a39ad0ed472",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a56953e1-9f44-45b6-a5d4-2c166a6d0570"
        },
        "item": {
          "id": "91034b87-6194-49b0-80b1-643069841a01",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dd61f620-7ac0-484f-90dd-a53443e88783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65e9cd0-e119-4d4a-9676-04c9b3b92b85",
        "cursor": {
          "ref": "b552f8a0-1f32-4833-9440-85ef947d1cf5",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f6750071-e788-41bf-8369-11cd300984ae"
        },
        "item": {
          "id": "e65e9cd0-e119-4d4a-9676-04c9b3b92b85",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "abbc855f-0d71-4122-b4a7-e6c811a37167",
          "status": "Created",
          "code": 201,
          "responseTime": 726,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5a9a7718-28b0-467c-be06-38f2d68f5977",
        "cursor": {
          "ref": "e5ec2129-eb4a-4297-9655-36b64e21f855",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d69f1e0f-2a40-46a4-a68d-0b52a167c0b6"
        },
        "item": {
          "id": "5a9a7718-28b0-467c-be06-38f2d68f5977",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "20574e3e-90ed-4589-98f1-9bb9fa9b5756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6273096-9dd0-400d-a354-681926dbe673",
        "cursor": {
          "ref": "b39438aa-a011-4d3c-bd26-f856cd3cc2cc",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "815023b3-daca-43cb-be03-dc0decedbf8c"
        },
        "item": {
          "id": "e6273096-9dd0-400d-a354-681926dbe673",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0a5daccc-ba5c-47d8-ab9f-927a4610efb9",
          "status": "Created",
          "code": 201,
          "responseTime": 6325,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a97642ee-3c77-43ee-9397-30b446948d28",
        "cursor": {
          "ref": "50facf0a-5b6b-494a-b0c7-4ab0e0ba3e62",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9ef689ee-0fa8-4d52-89b5-fe29cc3a4627"
        },
        "item": {
          "id": "a97642ee-3c77-43ee-9397-30b446948d28",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "93820b19-6f09-4d66-931b-c723bd71123e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47711f42-2f0f-4ee6-b460-a450ef9543cc",
        "cursor": {
          "ref": "0f0410cc-16fd-450a-aa88-d4ef2e3b0100",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "22374e8a-fc23-4c9a-a69c-f52cfa1ed49e"
        },
        "item": {
          "id": "47711f42-2f0f-4ee6-b460-a450ef9543cc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b276e8e6-167f-4a40-92ca-9f42742c7faa",
          "status": "Created",
          "code": 201,
          "responseTime": 3392,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ec29e4bc-c1a0-4b25-875a-ba189dba724b",
        "cursor": {
          "ref": "f0a0c172-4001-46db-966f-4381342affed",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a78ea41e-43ad-41a1-ba7e-c5a2f192774e"
        },
        "item": {
          "id": "ec29e4bc-c1a0-4b25-875a-ba189dba724b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1e51bb29-f32f-448d-93a9-f4633f24ed88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b490b7-aa97-47d4-a1d4-68e2079d8702",
        "cursor": {
          "ref": "8b3a4f81-3008-4996-aa87-b66fa2e17691",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dfecc05c-4b4d-4071-9940-ec80d174ae32"
        },
        "item": {
          "id": "22b490b7-aa97-47d4-a1d4-68e2079d8702",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1a8952b0-e4dd-43e1-84af-e6423116c868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6151b6e3-d686-4c50-92d6-19808aa98bdc",
        "cursor": {
          "ref": "121d41ff-df54-41d4-bd8b-385637df725e",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4d5c23c8-2cdb-43d2-837e-bbb5f23b776f"
        },
        "item": {
          "id": "6151b6e3-d686-4c50-92d6-19808aa98bdc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f25cbb5f-e7dc-41ae-b026-a369b92af576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60d297a-0b67-419d-b88e-339523bca87a",
        "cursor": {
          "ref": "5972df0d-9edb-49ac-a24a-40e46dd2e23e",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "70cd11c8-ff01-4009-9b9e-6166bf01e94b"
        },
        "item": {
          "id": "d60d297a-0b67-419d-b88e-339523bca87a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "23bb25e6-d08d-4330-bd2b-52d1e4dbbc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6886eaa-c025-4ef8-959c-f4a264e3024c",
        "cursor": {
          "ref": "c18a0026-13c7-48da-9dc2-a7cbf189ac39",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fe559d99-e0c0-45c6-9bf7-ec6601ba227b"
        },
        "item": {
          "id": "d6886eaa-c025-4ef8-959c-f4a264e3024c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e16c4189-ae84-4481-a000-8db90cc359db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1b53f9-dacf-41c8-9270-0dce01a12ed4",
        "cursor": {
          "ref": "f63ccf12-04e1-4131-8128-88c91fe1bfaa",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "081e480b-75e8-4526-bacd-b3a39b4a392c"
        },
        "item": {
          "id": "6d1b53f9-dacf-41c8-9270-0dce01a12ed4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "860cc632-f19d-4abe-b941-57354d7dcc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f819175c-0eb6-4e49-a3d9-ee3cab69b95d",
        "cursor": {
          "ref": "9dae5891-78b0-4b68-b9e4-efb113627755",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d38039c6-d4a4-4463-9f97-98f320218d91"
        },
        "item": {
          "id": "f819175c-0eb6-4e49-a3d9-ee3cab69b95d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5891de6d-b343-40cc-b93f-e6539e7ce746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83d5285-330f-4f26-8b34-d6bbe1aecf55",
        "cursor": {
          "ref": "d3b7d7ae-0b22-4eb4-867a-770b049bf72f",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bb1bca39-9520-41d6-875c-9aefb7798026"
        },
        "item": {
          "id": "e83d5285-330f-4f26-8b34-d6bbe1aecf55",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ad6606af-5d3d-45b5-afb9-c20b861b3e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390ac8c7-1384-42bd-ab26-9287b0b7c987",
        "cursor": {
          "ref": "752a99cc-11ef-4e4f-a3ed-77c2c31c13e4",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f75d21c8-c44a-4775-a863-b6220872026f"
        },
        "item": {
          "id": "390ac8c7-1384-42bd-ab26-9287b0b7c987",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ef692501-b873-4e95-bd87-f2faa8dc93c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbdfabf-72e1-4b8d-9ccc-f3740366642e",
        "cursor": {
          "ref": "73af8392-e68e-40bb-b7cf-3bdddc51d637",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "98062083-2087-4ab0-a26b-dd17cdc7467a"
        },
        "item": {
          "id": "cbbdfabf-72e1-4b8d-9ccc-f3740366642e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fd122f96-337c-45d7-a2f5-ae75a1b41180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ca76d5-5af5-4ddb-b747-2df0aee0a867",
        "cursor": {
          "ref": "d27640c5-6119-41ab-9a5e-ccbc4326a329",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0270f57b-3f01-4551-8126-0196e1d9a485"
        },
        "item": {
          "id": "88ca76d5-5af5-4ddb-b747-2df0aee0a867",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "39e05d4f-378c-4a5f-be03-a7ca1d719e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47835b4f-e461-4cf6-97ed-07f941623ade",
        "cursor": {
          "ref": "ec23d5c8-3be6-402b-acee-fe1c7545b133",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fee1cc44-5b88-4bfb-b7a8-6b6b839bacd8"
        },
        "item": {
          "id": "47835b4f-e461-4cf6-97ed-07f941623ade",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2e7b74d8-c3e3-40a5-b945-55266d5e793e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732a2d32-7758-4d71-93ce-99b52b78c402",
        "cursor": {
          "ref": "7de3900c-908e-4650-a16d-e35fe6e3795d",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "26551923-ac41-4153-a66a-ee92cf9cf323"
        },
        "item": {
          "id": "732a2d32-7758-4d71-93ce-99b52b78c402",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "355b51d4-6d35-4ec0-8893-3291d1002b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b89f17-e74e-4990-9263-a0bc4ba2fea8",
        "cursor": {
          "ref": "f9130fed-5934-4cd3-a7c3-cb91db04db01",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "83f9781d-aa16-4843-8033-cc47143a1e43"
        },
        "item": {
          "id": "59b89f17-e74e-4990-9263-a0bc4ba2fea8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "75e0279a-8f25-4d1a-8aa3-56cf2530ade7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171e69d9-2307-4bfb-ac66-c37878a99ccd",
        "cursor": {
          "ref": "2206a836-7f3c-43da-9a66-37a9d2517d24",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d92b6e7c-40cb-4102-873b-78a9cbb48a24"
        },
        "item": {
          "id": "171e69d9-2307-4bfb-ac66-c37878a99ccd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a5dc7a8c-55fc-48b5-9f4b-dbc01f6d5770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ec5c16-32b1-489d-b5e8-6374b200dcfc",
        "cursor": {
          "ref": "5c767a14-01b5-4b05-890a-fc696c40b248",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f9422f1e-a324-40a9-977d-2c5a0bd245cf"
        },
        "item": {
          "id": "39ec5c16-32b1-489d-b5e8-6374b200dcfc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1b395830-0b88-4cbb-acd2-a573e59d2d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bed094-5060-41fd-a92b-27689f7261c1",
        "cursor": {
          "ref": "c9b43ffc-8bae-416b-8bf9-51f50a952947",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2777e75e-d180-494d-b532-751916ae3900"
        },
        "item": {
          "id": "39bed094-5060-41fd-a92b-27689f7261c1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "aee9c86d-9354-4090-b39c-8d1ebc73cf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24477e26-aab1-4986-b582-382f03266b4c",
        "cursor": {
          "ref": "22460413-50c4-412c-99c4-147af23be99f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4edb7fee-6865-4dba-8127-e4133a36a385"
        },
        "item": {
          "id": "24477e26-aab1-4986-b582-382f03266b4c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f581b008-6740-4491-8913-0adaa3aa86e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fbae45-0090-4be5-8838-767e14d0d00b",
        "cursor": {
          "ref": "089b232d-cf05-4b9a-9f92-5cf0ac7a6f44",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "683615f2-a7c2-4426-ad0d-69b6eb82c30f"
        },
        "item": {
          "id": "23fbae45-0090-4be5-8838-767e14d0d00b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7a79ea1d-8d14-4c93-b5b5-02843e965305",
          "status": "Created",
          "code": 201,
          "responseTime": 2441,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6e3f74e9-d0f2-426e-aa5f-a053bed6efe2",
        "cursor": {
          "ref": "f44e61bd-ee2c-4d6d-8035-01e6e94c865b",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b848f5c3-3ffc-4a25-bb9e-6812709452e9"
        },
        "item": {
          "id": "6e3f74e9-d0f2-426e-aa5f-a053bed6efe2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "96241bc7-125a-4d94-9371-d857169a5f95",
          "status": "Created",
          "code": 201,
          "responseTime": 2567,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0f4dea9d-fe61-4c8e-9297-94b1aeb0c98f",
        "cursor": {
          "ref": "3ab50d2e-6715-43db-adcb-22dcdda1eb49",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0b6a0d98-32fa-4809-8e56-8a35f26edd78"
        },
        "item": {
          "id": "0f4dea9d-fe61-4c8e-9297-94b1aeb0c98f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "856dd4f7-7877-46e4-8c4f-b6c881fc5285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa473a34-b98c-46f3-bf2b-41130b5b7a50",
        "cursor": {
          "ref": "3903d80c-f31c-4f3d-a137-5775479ef158",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "51c8c060-fd5a-485c-8339-15e06f929b02"
        },
        "item": {
          "id": "aa473a34-b98c-46f3-bf2b-41130b5b7a50",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "42b4b06b-0b73-48fc-b403-34d15e650b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd3dfe0-0970-4c72-937c-a01ee0513c76",
        "cursor": {
          "ref": "80ffd2c4-1e1d-455c-b51f-62bb91bbee47",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "454f043b-2b99-4634-afcb-51ac4d365357"
        },
        "item": {
          "id": "1cd3dfe0-0970-4c72-937c-a01ee0513c76",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d19a03a8-59cd-4c08-862a-ec7a3d79d3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600b69be-68f0-44b2-ac19-87cacbf1fad0",
        "cursor": {
          "ref": "e51481be-c17e-4752-aa63-1f06b992a84b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "65fa2d0d-3e1b-4f2c-a099-64fc9be4f6bf"
        },
        "item": {
          "id": "600b69be-68f0-44b2-ac19-87cacbf1fad0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "120358c7-8c1b-4b8c-ad76-aa6c4b2a35e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7dcf53-05f7-45be-8fa2-fc5746d73588",
        "cursor": {
          "ref": "174daf50-f235-4d54-a7f6-49f621ea0ecf",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f8055834-61a4-47b4-a89a-adc0c9a3364c"
        },
        "item": {
          "id": "1f7dcf53-05f7-45be-8fa2-fc5746d73588",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "11c40545-2d82-484e-af2c-3e293012a4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f346c24-4279-4abe-a050-94cd94295421",
        "cursor": {
          "ref": "b90a066c-652e-47c6-8f95-8eb9035a692e",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "683d3b13-efcf-46ff-b4b7-e7fb1e04909d"
        },
        "item": {
          "id": "5f346c24-4279-4abe-a050-94cd94295421",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bfd2a4a0-9243-4152-a16d-2cb080fd5d24",
          "status": "Created",
          "code": 201,
          "responseTime": 2552,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fb71b3b1-15f2-4b50-8293-236fdf546e00",
        "cursor": {
          "ref": "95f2029e-489f-4404-838a-572689f92e39",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ddda5449-6d5d-4bfd-9e72-e6922baee8ea"
        },
        "item": {
          "id": "fb71b3b1-15f2-4b50-8293-236fdf546e00",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5c036cd9-9501-40ac-b29c-a29b2c863eb8",
          "status": "Created",
          "code": 201,
          "responseTime": 2653,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b4a550cd-1ea8-4ab3-8c38-6352e0eaa968",
        "cursor": {
          "ref": "e61a5e33-a6fe-49de-a458-a6ac77f232fd",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d8fc1a7a-ddcf-4851-b5fe-b64b98ccc970"
        },
        "item": {
          "id": "b4a550cd-1ea8-4ab3-8c38-6352e0eaa968",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a3f42928-3683-4ae8-97b0-885e167efe47",
          "status": "Created",
          "code": 201,
          "responseTime": 2595,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8442f095-e0cf-42f7-9409-36128b430dc3",
        "cursor": {
          "ref": "112bd255-5e02-4e1c-8629-185e98ba17c0",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b25fda97-7a0d-4e27-9f6b-3e3833cac335"
        },
        "item": {
          "id": "8442f095-e0cf-42f7-9409-36128b430dc3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2512a5d5-b201-42d1-a66b-a8fac71377ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39f5053-1507-4e4a-9d17-338a15216ac8",
        "cursor": {
          "ref": "cdae6131-03de-428c-a017-1cd6cf255d8b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b73e1463-4d37-437e-b133-1f206e69db46"
        },
        "item": {
          "id": "f39f5053-1507-4e4a-9d17-338a15216ac8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3de893b9-8929-44e9-b0aa-b0f1f678595b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118680c0-3421-444b-9bce-f46c0a889106",
        "cursor": {
          "ref": "ddfdd3d7-cee6-407b-b329-42b53673cf16",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f45c3320-7ab8-4027-8eab-10d51e9d521a"
        },
        "item": {
          "id": "118680c0-3421-444b-9bce-f46c0a889106",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0af53841-670d-46e3-a567-cdab08d24893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a248b4-4164-45a0-ab92-a663aac964ba",
        "cursor": {
          "ref": "3f5e6a58-3d57-42bf-a5dd-eeff7c540f68",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "430b9832-2a8e-4df4-a8e4-04a929817251"
        },
        "item": {
          "id": "20a248b4-4164-45a0-ab92-a663aac964ba",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2b4ff93c-2ea0-4098-8467-5fdf10381bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7fffe2-1f87-4969-bc20-d3c3cc57fe32",
        "cursor": {
          "ref": "e6ff7ae4-d7f5-4502-a274-cc9589bf3e80",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7800dd0c-177b-4fc3-8e76-962be4377e1d"
        },
        "item": {
          "id": "6e7fffe2-1f87-4969-bc20-d3c3cc57fe32",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0edd8511-4c7e-4b0e-a80e-e9db9ccd0615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f7ec9d-ae6a-4ff2-8172-6837784f57c3",
        "cursor": {
          "ref": "bbeda01d-55d1-4176-af96-4f8666e6b307",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "678abd43-2c61-44b5-9cb2-5656d2269d44"
        },
        "item": {
          "id": "d6f7ec9d-ae6a-4ff2-8172-6837784f57c3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6e86e472-25f6-4b02-9393-a0a471cb9590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9558988d-bb85-47bb-93c5-cce623d98069",
        "cursor": {
          "ref": "489ed5d6-7ff6-49cd-804c-ad53c66e335a",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2c399386-9719-437f-98b2-b53bcd0b6b0c"
        },
        "item": {
          "id": "9558988d-bb85-47bb-93c5-cce623d98069",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aefa0b1e-a410-4ae3-a562-5fddd900c983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c937474-2f92-4a4f-9c57-f645eb54b2da",
        "cursor": {
          "ref": "845973ee-5a99-413c-8b0b-f3f7d6ded169",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e0861699-a009-4d2f-a7e8-c7d76331aa54"
        },
        "item": {
          "id": "4c937474-2f92-4a4f-9c57-f645eb54b2da",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7779892d-1e08-44cc-911c-22f3ea7960e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebf6c49-9882-4d48-b8af-502f9f52da1d",
        "cursor": {
          "ref": "742b4640-3f84-488c-8c32-e7e0bc88b4dc",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c1385dbf-9e83-49dc-89f3-016d58486b80"
        },
        "item": {
          "id": "7ebf6c49-9882-4d48-b8af-502f9f52da1d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a5786111-bce1-4ad3-8d44-546b7a369d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b2042b-9749-4d76-a34f-e211ba9252b8",
        "cursor": {
          "ref": "22ba8105-6aca-4ecb-ac2e-ebb9466d15ce",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ca5408ee-eebb-45bf-8ac0-c11c4f7c7d7e"
        },
        "item": {
          "id": "a3b2042b-9749-4d76-a34f-e211ba9252b8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "50f942ac-ecda-4cda-99a3-697537d2f697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56379d5-e61c-4f1d-9aaa-dff7ea9e5b72",
        "cursor": {
          "ref": "a0bfc92b-f9b2-4544-8f89-62609bf625a3",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6ee97724-6a11-4e8e-ad80-4b3ad41ea10f"
        },
        "item": {
          "id": "d56379d5-e61c-4f1d-9aaa-dff7ea9e5b72",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "15663803-04a9-48bc-9f0e-b301a4243786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9435ca43-a8f4-47fb-a534-59f0668536da",
        "cursor": {
          "ref": "bef76aa6-f007-44c6-ad11-b1a9cfeba1b8",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b1bb67ab-383f-4d22-90d4-563302b72870"
        },
        "item": {
          "id": "9435ca43-a8f4-47fb-a534-59f0668536da",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "80b4d15b-7f5a-40a1-af9d-bf86d6a8f138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c8e3e7-e2bb-4c77-9bc5-ba6c89aa169c",
        "cursor": {
          "ref": "2104f7ec-e80d-41da-82a5-bf680176a6c8",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cf90d9dc-f850-4d43-b024-a58c380b845e"
        },
        "item": {
          "id": "b6c8e3e7-e2bb-4c77-9bc5-ba6c89aa169c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "34e4c2d0-f9ef-4ae1-852f-05583c3dc76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26dfa3d0-14e0-4487-a33d-c99892e0744b",
        "cursor": {
          "ref": "236c07bb-c8d0-460a-b62b-f79844dd59f1",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "63158726-7f00-4247-84b8-bb8e8915693d"
        },
        "item": {
          "id": "26dfa3d0-14e0-4487-a33d-c99892e0744b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e68d6337-c1fe-4a36-b98e-e488564363cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3432b34-e6d6-4418-8a90-6566255fa85b",
        "cursor": {
          "ref": "6f193bcf-e8d0-4bbf-b779-44ad8277653b",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "15d28c40-f7d1-4be0-83f7-24eaad033bce"
        },
        "item": {
          "id": "b3432b34-e6d6-4418-8a90-6566255fa85b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1eaf8235-0bde-487b-995b-8b974a6ec198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8c84cc-b776-4c6a-ae15-78f71e673003",
        "cursor": {
          "ref": "09f61c5a-7a36-41e4-93fe-2322c3dd0fa5",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c8fcc606-c40f-4e7a-9e08-c9612544132c"
        },
        "item": {
          "id": "dd8c84cc-b776-4c6a-ae15-78f71e673003",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d8814935-589e-44f3-a3ce-5b6fc925c314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c65b62e-ab36-4c8c-8e1f-570e33a258de",
        "cursor": {
          "ref": "99de81b4-10a1-4378-ab8f-2a58d0ed01a0",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "25eda1cf-3bc9-474e-8579-5996a864c9a2"
        },
        "item": {
          "id": "7c65b62e-ab36-4c8c-8e1f-570e33a258de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "60feb869-04bf-4667-a6e2-4e4735d8d630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2930a7-52a2-49d4-bf69-c904d5bc251a",
        "cursor": {
          "ref": "8630d87a-942b-4e56-98de-d0781cb49941",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fe803c51-ab60-47db-b082-dadcc9e7a657"
        },
        "item": {
          "id": "3f2930a7-52a2-49d4-bf69-c904d5bc251a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e677c3aa-c663-4ecc-8aec-acbe283fe6e2",
          "status": "Created",
          "code": 201,
          "responseTime": 2037,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8432bed9-ce94-4d6e-a6ae-4a6b95566ef9",
        "cursor": {
          "ref": "2f744de0-895f-430d-a7d0-62349627d4b2",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8ed6b287-8c24-4179-baaa-ec17b308b79b"
        },
        "item": {
          "id": "8432bed9-ce94-4d6e-a6ae-4a6b95566ef9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "15bbf9f4-0bae-4917-953a-38741300533d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53b655f-eed6-479d-a151-62d129edfbee",
        "cursor": {
          "ref": "32f9c77b-2a07-435b-b23a-4ba78ebe116b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "91e4eb8c-8fce-4684-b4f7-fd0a75b3d421"
        },
        "item": {
          "id": "c53b655f-eed6-479d-a151-62d129edfbee",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "621e2657-a0e3-4569-92ef-d8e3d1416ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d365df3-7563-48c7-b171-8a249c7a1df0",
        "cursor": {
          "ref": "0be7c26a-ff44-47ff-b76d-31c6e0526d99",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c23ac04a-3a7c-458b-a33c-20b805d4a711"
        },
        "item": {
          "id": "6d365df3-7563-48c7-b171-8a249c7a1df0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4cee22e8-91bf-4914-8a72-2a1537445567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cebffe5-c1bf-45e1-9677-b0a6c3cabee0",
        "cursor": {
          "ref": "8b704225-14d0-462d-8b9d-4f4ee09b8039",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "df402dc9-efe1-4825-a90a-74e7d43f4121"
        },
        "item": {
          "id": "4cebffe5-c1bf-45e1-9677-b0a6c3cabee0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8f7fde11-122c-4f40-9110-f2f5fdd5ed96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8274b7f-592a-4496-ba37-1154604a2b0f",
        "cursor": {
          "ref": "c8f5e15a-1a99-4279-b80d-4643989dac9a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8f314c0f-5e0d-44cd-9801-64ef58f2df05"
        },
        "item": {
          "id": "d8274b7f-592a-4496-ba37-1154604a2b0f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3b436e8a-f036-4580-a084-c70b974084f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ed08bd-8437-48ae-ab33-9d6e60229094",
        "cursor": {
          "ref": "50f6190b-6e48-4d41-89ae-e49ef69ca3da",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e9247f72-ad97-4281-84a2-984cd7cc715e"
        },
        "item": {
          "id": "b6ed08bd-8437-48ae-ab33-9d6e60229094",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2eacee23-b7b2-4f71-826e-7b295ddf1b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adde5014-7918-480e-acea-5a051145b0b3",
        "cursor": {
          "ref": "b4990e5b-8df9-4b23-8dbd-7f48fc669d48",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "55d6dd91-1461-4432-bfe6-f4620ee70a3c"
        },
        "item": {
          "id": "adde5014-7918-480e-acea-5a051145b0b3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "00dc3b0f-e2b4-439e-8e27-042da68a9a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b6d94a-27a8-4804-8cfe-c32de6788822",
        "cursor": {
          "ref": "8406640a-a807-4446-81f3-f65af4296555",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e352ef5d-f1d1-4a0e-9213-b09877d0bc8f"
        },
        "item": {
          "id": "f9b6d94a-27a8-4804-8cfe-c32de6788822",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4ebe76bc-a67c-48c9-9480-4a85d2021bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6e3c96-e7ef-4492-9cda-580886cd32d2",
        "cursor": {
          "ref": "889e7837-7b72-4545-bf5a-dd2fbecd6e34",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6ff4fe0c-6c43-47e6-8a12-a6cc42cee424"
        },
        "item": {
          "id": "8a6e3c96-e7ef-4492-9cda-580886cd32d2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "61f8fded-fe29-4879-9a16-43ab84fe2738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5755fd2d-8de0-4bd9-ab63-f62425726d3d",
        "cursor": {
          "ref": "ab243359-4053-4dae-9298-7212d3a9554d",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "25dce568-20ba-443d-bcd4-fa5a28440e12"
        },
        "item": {
          "id": "5755fd2d-8de0-4bd9-ab63-f62425726d3d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5070d926-49fd-47ce-84c3-1ff71b8b33cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd67d097-df23-4892-8b20-6847f5762fac",
        "cursor": {
          "ref": "fa87cc8a-58e6-48da-b569-39fd8e20255c",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7c4a7b2a-5e8a-4050-8bea-151987bd2245"
        },
        "item": {
          "id": "fd67d097-df23-4892-8b20-6847f5762fac",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f250ca9f-5c86-4be1-9963-b0bb12f7c37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356e6233-2340-41fb-a570-4deb0bca3724",
        "cursor": {
          "ref": "592dbd50-574d-43b6-ba29-c1d5980ad9f2",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6e45108a-bb0c-49b5-8d0f-da34cd0dcb71"
        },
        "item": {
          "id": "356e6233-2340-41fb-a570-4deb0bca3724",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f540fa08-d62a-4926-b97e-4fac12355f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1cde91d-52da-4e6f-a7df-4a885308ddb2",
        "cursor": {
          "ref": "aa1dc53d-f9d3-407e-946f-4bc5223711ec",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9ce2f8e1-b9d4-4e93-a249-9dab4c126cb9"
        },
        "item": {
          "id": "c1cde91d-52da-4e6f-a7df-4a885308ddb2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8bc6fc03-5971-47f0-a9f0-ad8701620186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c21a2b-e2bf-4273-a80f-3972ffc92bb7",
        "cursor": {
          "ref": "8bea770c-c478-401c-bc63-7d27d1f7b805",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cde2e184-9701-44be-92c2-cb71d3945600"
        },
        "item": {
          "id": "f2c21a2b-e2bf-4273-a80f-3972ffc92bb7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6c25ac87-d22a-45e5-8c8e-150e174b899e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4000c15-9f33-412a-a4c4-d298c52f5d4e",
        "cursor": {
          "ref": "63152d28-624c-457d-a5f4-9c50dc75efc3",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2388b95e-4acc-4807-975e-b9e04d71813d"
        },
        "item": {
          "id": "f4000c15-9f33-412a-a4c4-d298c52f5d4e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a18634b1-6fcf-4405-8364-cce5087ca551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77af754a-d3ea-483f-b1aa-7960c0ca4126",
        "cursor": {
          "ref": "28000a80-c70b-4d84-88c0-33642369cb50",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e3878384-b120-41b2-b3c6-f060fbaebf37"
        },
        "item": {
          "id": "77af754a-d3ea-483f-b1aa-7960c0ca4126",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f8d94ede-63bc-414d-b409-869f67758111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7c45a6-ea6b-491a-8631-7d706aa5ca62",
        "cursor": {
          "ref": "f33de11c-e03f-45b2-b433-5206ec54bcad",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ee4ef5a7-9fe8-4a4c-93bd-7a806d4576bc"
        },
        "item": {
          "id": "7a7c45a6-ea6b-491a-8631-7d706aa5ca62",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fd663715-5770-4d19-b905-c3ee97ded13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea20520e-ecbb-4a07-8c03-6be36afc1e26",
        "cursor": {
          "ref": "137ae966-4da4-4975-a2fe-00312dfcdfdb",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6bed608c-f5a6-46b3-b8f0-f36ed5297add"
        },
        "item": {
          "id": "ea20520e-ecbb-4a07-8c03-6be36afc1e26",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "15614a12-3307-43e2-981c-a62d02edd0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffcecf6-f182-4be1-83f4-beab40ed5a89",
        "cursor": {
          "ref": "c3e1beed-7431-41a7-a8bf-1783abc5788b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "60fb7aad-6ad8-492b-91cf-8039ad35b578"
        },
        "item": {
          "id": "cffcecf6-f182-4be1-83f4-beab40ed5a89",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3dee4dd9-59d4-40bf-9f74-56fa1e496ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c45ebb-cbf2-429d-b8d7-a81e88bcdd1f",
        "cursor": {
          "ref": "91f8ca0d-dc69-422f-a8d7-e4ec27bb5c3c",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d954e418-05c6-4cec-8fa2-17d41abba0ad"
        },
        "item": {
          "id": "09c45ebb-cbf2-429d-b8d7-a81e88bcdd1f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b0b08f91-db85-409f-a69e-9984ff089755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80645075-bfc3-42cc-a514-bcfee418f4e3",
        "cursor": {
          "ref": "4d7f0ab0-87b6-4f0f-b21a-18e4f356a00d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3937f33a-84fd-46bb-9542-de7d0a74dd4e"
        },
        "item": {
          "id": "80645075-bfc3-42cc-a514-bcfee418f4e3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "760280ed-5e34-4f4d-9921-19ef1ee259e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8518d7-672e-4f78-b2f4-41543739fa31",
        "cursor": {
          "ref": "3f2d6c33-453d-4137-9d7c-a5ac39c49299",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "77f2b55c-17b4-4589-b30c-f1356e8f5590"
        },
        "item": {
          "id": "0a8518d7-672e-4f78-b2f4-41543739fa31",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "79e8eefe-0d3d-475d-bfdf-e91c784d707d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c46c4e8-1e22-492d-96b0-28844ad35ece",
        "cursor": {
          "ref": "7a5d3649-56f1-4d79-bf70-19280cf76bc8",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a4338708-8b28-491b-9f5c-d764b27104e0"
        },
        "item": {
          "id": "3c46c4e8-1e22-492d-96b0-28844ad35ece",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d51e9874-c296-40eb-8965-9ec8e7c289b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5e78e0-d14f-4f3d-bb6c-0dd6b1a90363",
        "cursor": {
          "ref": "5c08005b-b30f-49e5-8ea9-e4df0de79ebe",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9c878c43-4ed3-4ed6-842a-e9f2aa1dc84f"
        },
        "item": {
          "id": "5b5e78e0-d14f-4f3d-bb6c-0dd6b1a90363",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "aff2d755-a72b-4df2-80ed-d5188249e0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc468b61-6ac9-46a4-9c44-194746256548",
        "cursor": {
          "ref": "c41d6044-96e5-4946-aceb-32e91552ee04",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7d91279d-1425-4c38-bfe6-503b0f4c2ff4"
        },
        "item": {
          "id": "dc468b61-6ac9-46a4-9c44-194746256548",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5df32b46-3854-4017-abc5-9f27f9e979cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009f82d4-5107-4847-91dd-6610ac19acc8",
        "cursor": {
          "ref": "a224cda7-6ec7-4dda-bfbe-521cc1c76e78",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "73b4db60-9f9b-4311-8299-30a6f3785fe0"
        },
        "item": {
          "id": "009f82d4-5107-4847-91dd-6610ac19acc8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3d21b6db-7e36-45fc-9188-60938c19d91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc6bb3b-6ca5-41bd-9069-257e474bb2bf",
        "cursor": {
          "ref": "f4534c37-2502-4973-93c3-23669ed12794",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "06cd481f-5eda-4392-8c0b-674174cd8784"
        },
        "item": {
          "id": "adc6bb3b-6ca5-41bd-9069-257e474bb2bf",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cb697109-007c-4f15-9c24-04c93dd6c34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df6875b-9c2d-4f70-9a84-9417e1cdf63e",
        "cursor": {
          "ref": "1cdb15df-57d6-4f4b-afab-881218543b5f",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8964d2e6-c68b-49b4-9187-c7ffbffb31d7"
        },
        "item": {
          "id": "7df6875b-9c2d-4f70-9a84-9417e1cdf63e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9128f7d2-d3bc-4047-9c55-74776415caef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a70c150-4ab4-4e73-b822-eccf38970ef1",
        "cursor": {
          "ref": "925e01c9-3a79-4993-a9dc-5e9c8eeb0d12",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "591749c8-b517-4ca5-9057-69f149999fb6"
        },
        "item": {
          "id": "2a70c150-4ab4-4e73-b822-eccf38970ef1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "992983b2-a358-41e8-87d9-f247bd3f2d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1526108b-c9ce-4661-9f1a-c2aad7e14b04",
        "cursor": {
          "ref": "86f5049c-f5a8-4b35-8564-37a278c89ded",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fa61e24d-b021-476f-81be-0f3c58faf1aa"
        },
        "item": {
          "id": "1526108b-c9ce-4661-9f1a-c2aad7e14b04",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ecbc418b-9e17-4917-8b9e-657e0f788cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac452f43-e33c-4d76-bdd3-e98f0d288659",
        "cursor": {
          "ref": "b8c06945-f7ce-4e42-bf90-0e1c6d9624a4",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5a5c1206-48f1-43a6-a4ac-d92ef52279a2"
        },
        "item": {
          "id": "ac452f43-e33c-4d76-bdd3-e98f0d288659",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "256430e9-0443-4dcc-845d-ed63767c4001",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "7bb541cb-8794-48a8-8b80-33cccb3453a4",
        "cursor": {
          "ref": "613de0c3-1ba2-4377-a03b-c81bd2bc9140",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2fa772c8-0a17-4a81-af42-8aeb8dd24eb8"
        },
        "item": {
          "id": "7bb541cb-8794-48a8-8b80-33cccb3453a4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "63903bb6-98cf-49f1-abbf-575cc0ecfdd4",
          "status": "Created",
          "code": 201,
          "responseTime": 2048,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7cc7eff3-ab4a-4c1f-993e-7d141e7fdc8b",
        "cursor": {
          "ref": "1821d25c-5b3f-402e-b989-8184d39dbb70",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c1c416c7-e61c-4124-a41f-adf59609a145"
        },
        "item": {
          "id": "7cc7eff3-ab4a-4c1f-993e-7d141e7fdc8b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5f943c5e-0e4d-4722-9d1f-4eb1d352d3a9",
          "status": "Created",
          "code": 201,
          "responseTime": 3019,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9cbce4-10bb-4189-aef3-4d325c36792c",
        "cursor": {
          "ref": "6a751aa7-c367-4168-b39d-6c49d205363e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "efb5e1e8-0790-45b2-810c-1e4eab5429fa"
        },
        "item": {
          "id": "7d9cbce4-10bb-4189-aef3-4d325c36792c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "74f6c3c3-eaed-44e5-b05e-f0a86c40cfa2",
          "status": "Created",
          "code": 201,
          "responseTime": 2395,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7c617e-bb79-493b-b798-3158b0cac998",
        "cursor": {
          "ref": "e49ec3ed-c66e-43c9-a7fc-69bca47207ab",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "de30ee67-7ea5-47d8-9166-858485d0e1e7"
        },
        "item": {
          "id": "6b7c617e-bb79-493b-b798-3158b0cac998",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a4d299a2-541d-465f-988a-9881f3cd1e25",
          "status": "Created",
          "code": 201,
          "responseTime": 2651,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c898286-579d-4ed7-8777-7166534f3e98",
        "cursor": {
          "ref": "3b201b76-964e-4496-96da-e4a00bf5a991",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2bfd3c69-8b53-4aea-9c16-30e85f85b820"
        },
        "item": {
          "id": "7c898286-579d-4ed7-8777-7166534f3e98",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5c430b33-9772-4e66-90e9-eec78122ecbf",
          "status": "Created",
          "code": 201,
          "responseTime": 2389,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-07T00:48:12Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-07T00:48:12Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "491f16d8-ba9c-463d-b24c-c0730c3726a5",
        "cursor": {
          "ref": "a75b9d9d-00ee-48c0-9954-4fd42c8a49e7",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "86cdf8de-fac7-45b4-b0d0-11b765181d95"
        },
        "item": {
          "id": "491f16d8-ba9c-463d-b24c-c0730c3726a5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0e7b03c4-a210-42b8-afcd-cb3773f4d633",
          "status": "Created",
          "code": 201,
          "responseTime": 2620,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "f877e27c-3fb0-4819-bf43-d7e856435a94",
        "cursor": {
          "ref": "ba842794-a78e-4cf1-9ffb-0f5dea829ad5",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8913c2fb-97ad-4eac-a3fd-c0eebf77cf71"
        },
        "item": {
          "id": "f877e27c-3fb0-4819-bf43-d7e856435a94",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6a9de3c0-b2f8-4163-a765-64dfc82a3b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f877e27c-3fb0-4819-bf43-d7e856435a94",
        "cursor": {
          "ref": "ba842794-a78e-4cf1-9ffb-0f5dea829ad5",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8913c2fb-97ad-4eac-a3fd-c0eebf77cf71"
        },
        "item": {
          "id": "f877e27c-3fb0-4819-bf43-d7e856435a94",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6a9de3c0-b2f8-4163-a765-64dfc82a3b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb005c58-0bbe-44c8-bdea-3992b018d502",
        "cursor": {
          "ref": "e42deedd-a896-478b-8c10-fc145ed78284",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b8a1766f-f3db-47cb-85d1-1518e41610eb"
        },
        "item": {
          "id": "fb005c58-0bbe-44c8-bdea-3992b018d502",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4feb4213-9db4-4379-adb7-7759ae482733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb08174-591d-42f7-bda6-71f7ae0cd374",
        "cursor": {
          "ref": "ca4f4413-e6ef-4d90-988c-cf5b60aa0e44",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2adae354-57e6-4b95-9eea-ac05bd0d96f3"
        },
        "item": {
          "id": "6fb08174-591d-42f7-bda6-71f7ae0cd374",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "46251e2d-8972-4117-b027-11915b5c4e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a819df38-6612-4bf0-9dfe-d964e20df261",
        "cursor": {
          "ref": "6de17b69-de4b-452e-bb70-d31f93b7b497",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "429d8e7f-0f3e-496c-84be-887fbbc9e7c7"
        },
        "item": {
          "id": "a819df38-6612-4bf0-9dfe-d964e20df261",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c759f979-37c8-44c9-844c-da4e362f9498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8880c30d-685a-492c-b941-e71b4e149e71",
        "cursor": {
          "ref": "0789d60c-b826-4275-9e4d-4bd9e914e837",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a5bf9e2d-d69f-438a-9014-fb88a538ea99"
        },
        "item": {
          "id": "8880c30d-685a-492c-b941-e71b4e149e71",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9ed4307f-7b79-4493-b706-5f23f9b501f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d74acb-2da2-4fcc-bc08-4332ff0a49ae",
        "cursor": {
          "ref": "d4293748-e0e0-4d55-9ace-aa1a003ba24e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b82df427-4ad9-493b-83b7-1112ffe1cb44"
        },
        "item": {
          "id": "c5d74acb-2da2-4fcc-bc08-4332ff0a49ae",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "87e0e75d-f0f1-4e1e-af03-56fb840b63df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462246df-9cf1-41f6-91b1-a250e2165513",
        "cursor": {
          "ref": "e46c92d3-dfa7-4c4d-b4a0-095243e357c3",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b562d2b7-b038-48da-b110-e713456d21d7"
        },
        "item": {
          "id": "462246df-9cf1-41f6-91b1-a250e2165513",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1a4ba6e6-0e95-4b06-8ccc-fe00bfad5e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6261ed-36e9-47b7-9f41-ab522f8f0390",
        "cursor": {
          "ref": "9d1fb6fa-901b-48aa-a384-be84cffa2c06",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "979bcc3d-9b48-4832-b633-4b9353faa9d1"
        },
        "item": {
          "id": "9a6261ed-36e9-47b7-9f41-ab522f8f0390",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "861208f9-0e2d-4cac-b477-092dadcdf05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d339a6-2f20-4c95-bf36-f48a0a3e4611",
        "cursor": {
          "ref": "bfd56c36-992a-4ca1-8e43-e6919decd3e0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "db2d7ab5-af85-40cf-8f3d-469e0466f63f"
        },
        "item": {
          "id": "44d339a6-2f20-4c95-bf36-f48a0a3e4611",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "95c8abbd-422b-4dcd-835a-cb16ecfa6c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687912ce-ed21-46f2-b17e-afe8e1a19e75",
        "cursor": {
          "ref": "593b87a4-4480-4c27-b9f5-ac0cc1171344",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fd830522-4d84-4017-ab8f-cb4b97ad68c4"
        },
        "item": {
          "id": "687912ce-ed21-46f2-b17e-afe8e1a19e75",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "06f4a73e-f028-40cf-9e02-67b518efc28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507efe4f-9164-42dd-b733-80e796e1222e",
        "cursor": {
          "ref": "88c10d0a-10e1-409c-be22-3f805ff41e0a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fed8c8e5-c6b9-4df5-af59-e4bf641a65b9"
        },
        "item": {
          "id": "507efe4f-9164-42dd-b733-80e796e1222e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ec95fce7-d6c4-4000-95a6-d3edabdc2c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98208d2d-3eeb-4764-a2b7-5a6061aeb9f9",
        "cursor": {
          "ref": "b4ef5658-abb0-4419-85b2-1bdc7c070ae9",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4fe484e6-2b60-43cd-ae4a-eca91adefc21"
        },
        "item": {
          "id": "98208d2d-3eeb-4764-a2b7-5a6061aeb9f9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a41a5278-8013-4e7d-88b4-b9bd4d4811e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51b33a1-2519-4287-8772-596534ebe68e",
        "cursor": {
          "ref": "67249e35-f460-4ad9-8adf-9e1879a4244e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e835e414-5fb7-48f1-88c0-244d3b62991a"
        },
        "item": {
          "id": "c51b33a1-2519-4287-8772-596534ebe68e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "05ee3143-432c-4c24-84c5-5ff450c37346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770a0263-4fe9-4eab-9dd9-2b5fe094f1b9",
        "cursor": {
          "ref": "da9fb60a-5191-45df-aa7e-e9eb313456d3",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "69be983a-6ef4-46b6-818f-63c8ee667c9d"
        },
        "item": {
          "id": "770a0263-4fe9-4eab-9dd9-2b5fe094f1b9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b98176ae-693d-4b41-94fd-c60f48b378fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5847bf29-84c5-4362-ac50-3c6abb669465",
        "cursor": {
          "ref": "ad5136db-eb29-452b-b33d-8f6772926516",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a09bc445-91ad-4777-bac7-aac981b1e900"
        },
        "item": {
          "id": "5847bf29-84c5-4362-ac50-3c6abb669465",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1fda6c0f-def0-451a-bf6c-b64df2ccffe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931a547b-a6c7-47e5-a208-dd374052d9bd",
        "cursor": {
          "ref": "0a8654f4-3b59-4f17-a229-2f024eb6ba0d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4693db5c-fb3c-4c98-977b-a69a1181bb9c"
        },
        "item": {
          "id": "931a547b-a6c7-47e5-a208-dd374052d9bd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3a595aa4-5020-4f6d-a7be-8c179b145c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eed6286-1953-4fe4-a3d4-496f6a93f60c",
        "cursor": {
          "ref": "cf56e1db-46e6-407d-bf13-064159efc4d7",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5930c797-0222-4b5f-bcf8-8b9b4aea4c3a"
        },
        "item": {
          "id": "7eed6286-1953-4fe4-a3d4-496f6a93f60c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c6fce332-fe03-4331-ab04-88dc527bf2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8124e0-c8f7-4cf3-87f3-9666dd714774",
        "cursor": {
          "ref": "d898ab12-9b55-42af-ba08-20a2eb9b8672",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1d96fab9-d762-4321-98d3-01895c822e50"
        },
        "item": {
          "id": "0f8124e0-c8f7-4cf3-87f3-9666dd714774",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "110c0559-b470-42d5-a375-c5ba9d198d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c13360-72c9-4bb9-bc5c-70e06396749a",
        "cursor": {
          "ref": "d590a152-3dc8-4eb5-83e4-40a38f74b253",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e78a704a-fbbc-4575-a22f-d428bc666132"
        },
        "item": {
          "id": "66c13360-72c9-4bb9-bc5c-70e06396749a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "75df4101-a0f4-4727-ac36-db92b3386b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cb7fee-ecda-4232-990a-1fb9cd4e687c",
        "cursor": {
          "ref": "64a5d10e-42f0-4b52-b41e-791a0435019a",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8d9f62c3-63a1-43cb-a3c7-db2f64d64074"
        },
        "item": {
          "id": "21cb7fee-ecda-4232-990a-1fb9cd4e687c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a95c63b6-c600-40fc-b447-19ee702d1cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79beb87-1592-4c86-8a59-3da04c9c1849",
        "cursor": {
          "ref": "116d243d-fe82-43ea-a4a6-737446c4dc34",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e83270b5-53ca-4c31-9020-c2e472a43b48"
        },
        "item": {
          "id": "a79beb87-1592-4c86-8a59-3da04c9c1849",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0c855f26-667e-4560-a427-2d794b9c67c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848ba240-9eec-492e-b38f-dd10034a47f8",
        "cursor": {
          "ref": "61c26868-9730-4b5f-98fc-7e449043349f",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "62c08516-0421-44e2-8e7b-802777c5452f"
        },
        "item": {
          "id": "848ba240-9eec-492e-b38f-dd10034a47f8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dcb1094a-7faa-4509-86d5-63474b692415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96118437-fbf0-41df-9d88-71bbc8e217ed",
        "cursor": {
          "ref": "0d5f8f97-ed2b-441e-aa01-708d59bdb872",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "98978038-eb12-48f8-97a6-8b6f4ee3a174"
        },
        "item": {
          "id": "96118437-fbf0-41df-9d88-71bbc8e217ed",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "be97e3af-1614-47eb-a710-2884e417c3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0012be-9edd-4c62-9877-73a23531546d",
        "cursor": {
          "ref": "6298e2d8-547b-4830-a434-0e59a4e047ac",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "39057dc8-eceb-4aea-b051-64441cfe7564"
        },
        "item": {
          "id": "0b0012be-9edd-4c62-9877-73a23531546d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "90abd32e-b8bf-418c-b062-d4aeb202b537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd2fbfa-3102-4d1e-9766-3a31711ef4a4",
        "cursor": {
          "ref": "f13b9f1b-edfd-4c75-9b08-716d7b2d1728",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "055dfd9c-c8de-4280-966e-6c888f07ceaf"
        },
        "item": {
          "id": "abd2fbfa-3102-4d1e-9766-3a31711ef4a4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db82690a-ecea-48f3-94f1-75f6ca3f8efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30546431-f592-4130-98d2-b91a5e536f89",
        "cursor": {
          "ref": "60657349-bd11-4253-bae8-28d4bed054d7",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "dd91f601-df0d-495e-b60a-3115db18ec45"
        },
        "item": {
          "id": "30546431-f592-4130-98d2-b91a5e536f89",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "72ec07c0-8cc1-482a-ae5b-54587111ddbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afe4494-9e0e-4b18-b455-4eb432743297",
        "cursor": {
          "ref": "57a83723-5cfd-42b3-bef6-623052af92bd",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "194a9ea1-22e5-4fe3-8f55-f94519e3c883"
        },
        "item": {
          "id": "5afe4494-9e0e-4b18-b455-4eb432743297",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1a693ac4-0d8f-4611-ad05-0dcc3ca3faea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204f58a9-e448-435d-be65-228b991ad91d",
        "cursor": {
          "ref": "bb0a7808-7bff-4358-a944-e1d03d1e490e",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "425207c1-612e-43c5-a941-c2ec2d308903"
        },
        "item": {
          "id": "204f58a9-e448-435d-be65-228b991ad91d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d37de092-990a-4e54-8e24-b338450742a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cbfd8e-b66c-4c8f-a159-90366f132cb0",
        "cursor": {
          "ref": "ec5e5fc6-5f30-492a-be54-f2bdfd433038",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ff5b3c0e-eaf2-4976-905c-b1457f623fe0"
        },
        "item": {
          "id": "85cbfd8e-b66c-4c8f-a159-90366f132cb0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "569a5e37-b953-429e-9040-d3e4450c8b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891cf407-2433-4474-b396-575f1255e647",
        "cursor": {
          "ref": "47728cb0-175e-4fd1-a4d1-d9e6e07443b9",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d33a3e3d-ed10-4ac0-80a4-0899621b5d5b"
        },
        "item": {
          "id": "891cf407-2433-4474-b396-575f1255e647",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a7823162-2820-420e-b0a0-9b25a2c1aed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdec522e-a259-4453-af58-1bdffe8cee30",
        "cursor": {
          "ref": "8af362ea-c8dc-433a-a5b2-e1cb9a80813a",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "40834575-cfe8-4697-be4a-285c7d17dd7a"
        },
        "item": {
          "id": "fdec522e-a259-4453-af58-1bdffe8cee30",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ae3d4597-d9c7-491f-b654-ab765417b985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dcc15b0-85db-4afd-9842-4b68ad0941d8",
        "cursor": {
          "ref": "fbc2fcc2-b68a-42b0-b5f5-911ee0932f56",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c977dfdb-0c95-455b-909d-15634eca8772"
        },
        "item": {
          "id": "1dcc15b0-85db-4afd-9842-4b68ad0941d8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "513ebc96-7475-4221-b009-49061cc9d5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12efd41c-adc3-41bc-b36c-333dc101c4be",
        "cursor": {
          "ref": "52fd3b6e-ad5c-4821-a502-fdd2992ec286",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e5926242-30e9-4785-a444-9615ae709060"
        },
        "item": {
          "id": "12efd41c-adc3-41bc-b36c-333dc101c4be",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4f22ebe7-c39b-4dba-97d4-3ef949deb797",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2e8643ed-668b-4e48-a7e0-427ebb896ea5",
        "cursor": {
          "ref": "8dff6381-0ddf-40fc-ac06-d4be2097c70a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d11c1336-5593-47ad-9d9a-d5882911a17f"
        },
        "item": {
          "id": "2e8643ed-668b-4e48-a7e0-427ebb896ea5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "dd9c4460-9d2f-4bdd-aab8-c77712042a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d054ccdb-813d-409e-b8f4-9ce2d150e9c1",
        "cursor": {
          "ref": "54e1fd2b-4798-4adc-be7b-49b301f6e8f8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ee97673b-f6d2-45cc-a571-6af2d94a1e56"
        },
        "item": {
          "id": "d054ccdb-813d-409e-b8f4-9ce2d150e9c1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "39978a17-c5b2-4a0f-95f4-a6f253181d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d054ccdb-813d-409e-b8f4-9ce2d150e9c1",
        "cursor": {
          "ref": "54e1fd2b-4798-4adc-be7b-49b301f6e8f8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ee97673b-f6d2-45cc-a571-6af2d94a1e56"
        },
        "item": {
          "id": "d054ccdb-813d-409e-b8f4-9ce2d150e9c1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "39978a17-c5b2-4a0f-95f4-a6f253181d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3ca8e4-eeae-4399-aa55-9d3ffdd67955",
        "cursor": {
          "ref": "6e8119a0-c849-4b73-abf4-91d889fc079d",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9f5f1f17-8191-4c0e-adbb-cbe79997701a"
        },
        "item": {
          "id": "2d3ca8e4-eeae-4399-aa55-9d3ffdd67955",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "69419a3e-90d2-4ca6-a242-882edc9fca38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0204828e-7cbf-45cf-8ebc-6e79bbe98a5d",
        "cursor": {
          "ref": "78dbb00c-b409-4f3b-aa20-86fa6224200c",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e39f56fb-3e63-4591-8356-dec119944281"
        },
        "item": {
          "id": "0204828e-7cbf-45cf-8ebc-6e79bbe98a5d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1a2d0f7a-e466-46ce-9995-40ea1589ab37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f67fc0-ca76-4697-8f0f-3c3ec1b9f782",
        "cursor": {
          "ref": "63f91e17-193a-4bd3-993c-e63a29ebb57b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d5688253-2a77-4b6d-8858-4586c255e784"
        },
        "item": {
          "id": "04f67fc0-ca76-4697-8f0f-3c3ec1b9f782",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c1c8ab91-29dd-4947-8a14-77887bbaa7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc4b3c8-c078-4c4e-b8a8-5087d1c1c4ba",
        "cursor": {
          "ref": "dd96b4b3-1f20-4113-b030-4e36004a04e9",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e79abb94-e4cc-4fd7-a6b9-7137d5982e83"
        },
        "item": {
          "id": "6bc4b3c8-c078-4c4e-b8a8-5087d1c1c4ba",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bc0cb4f1-f3b6-44e2-ad97-ecc0c46f6948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0ff2e5-baa5-464e-86b7-32bb05fd3c60",
        "cursor": {
          "ref": "80297340-28e6-40dd-9de9-c9e116b1c45b",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "735aac36-4e75-42a7-91b5-9801d61811bf"
        },
        "item": {
          "id": "fe0ff2e5-baa5-464e-86b7-32bb05fd3c60",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "449c3ca3-1008-4025-95c5-73a90ffffcf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85712a5d-c842-41d8-8977-0388a9be7b4b",
        "cursor": {
          "ref": "f9505f39-746c-4b06-96ca-36df76e7fced",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e8fbe6e9-c8f9-4973-b2b5-810f28d5ba3c"
        },
        "item": {
          "id": "85712a5d-c842-41d8-8977-0388a9be7b4b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "922a26b8-0cc6-41d7-8710-1f5cbed39df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438691a8-4330-4606-8604-807ece58d5b3",
        "cursor": {
          "ref": "bb23b6aa-5677-44be-9ac6-9c9f5b32099f",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a4f7fbae-326b-4a4b-a41f-0d19f27ebab0"
        },
        "item": {
          "id": "438691a8-4330-4606-8604-807ece58d5b3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "da1a3786-b502-4086-b7a2-c45d5d7821fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a483eb8-ed54-4824-9523-3dab34163b9f",
        "cursor": {
          "ref": "d8ea64e9-a23d-4fa3-b233-e1148355a546",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "de7e24cf-4e26-48ca-9a18-974ac3beae6f"
        },
        "item": {
          "id": "2a483eb8-ed54-4824-9523-3dab34163b9f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f34771a2-08de-48c5-85fc-2f0b2c81c5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65bbc04-c2a4-4346-950d-5f4673e9fb95",
        "cursor": {
          "ref": "0af62f53-2480-40a6-b2b7-cb21ed55d61c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "580ea75d-7e4d-40a5-81ea-ee447676472c"
        },
        "item": {
          "id": "c65bbc04-c2a4-4346-950d-5f4673e9fb95",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "74d8983b-0348-43c2-96cc-a75a78b407d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 658,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe522f42-e31d-4e6b-8c2e-d4d004501b6c",
        "cursor": {
          "ref": "3dbc8b07-5e68-40ca-827c-7eb6beb767d5",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "47b5282a-53d3-47b6-8760-048816e9c30e"
        },
        "item": {
          "id": "fe522f42-e31d-4e6b-8c2e-d4d004501b6c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8fe5f8e6-ad69-48ac-b913-dfd15b5dfbb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c9d055-6e69-436c-bc39-43b4214b9866",
        "cursor": {
          "ref": "594f3eb2-e060-4f62-89f5-ac883702b2bb",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4bb20ad4-eb1e-42f2-9e2f-ba281e2281ea"
        },
        "item": {
          "id": "31c9d055-6e69-436c-bc39-43b4214b9866",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "643aa7c6-02d3-4f42-96b7-26b5f5447ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd450ee-243e-4566-abff-276fd97a2352",
        "cursor": {
          "ref": "5a597929-5a6a-4cec-a1f4-9f1dc16530fd",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2a5b1aa7-29c8-48ec-aabd-c3363f7771b7"
        },
        "item": {
          "id": "cbd450ee-243e-4566-abff-276fd97a2352",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d53bdc09-c970-4638-a96a-5a1351938c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16671831-9da2-4e4d-9f84-5d302500ee81",
        "cursor": {
          "ref": "9131d553-eb36-49cd-8337-70dcbf158469",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ea2058b4-e5ea-4f34-ae66-c3e915aeb0be"
        },
        "item": {
          "id": "16671831-9da2-4e4d-9f84-5d302500ee81",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7a36a2c9-8aa6-4547-83ac-744435d48f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e900f48-72dc-46d0-83c3-603e8baa3dfa",
        "cursor": {
          "ref": "7fb606b3-5bd1-44bc-89b9-2163d364efd2",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2fb7f3ce-35bb-4d01-bb9c-8a3646868621"
        },
        "item": {
          "id": "1e900f48-72dc-46d0-83c3-603e8baa3dfa",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a5a3715f-0361-48d6-8893-91adecbe83da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa8d39d-a1f3-4d80-a11b-f3a986fa3862",
        "cursor": {
          "ref": "0ab4b665-0c9a-440e-afef-b4ada1d5631d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9fa60c5e-a86a-4d5f-811c-d2c303659d44"
        },
        "item": {
          "id": "eaa8d39d-a1f3-4d80-a11b-f3a986fa3862",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2f0dc019-14a1-4678-a495-e53a7ae8867b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6078870-ba79-46df-bcf9-7512e2be50bf",
        "cursor": {
          "ref": "0f1e49a2-43c0-44f9-978d-d5ffcb28e5f2",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7ded63ad-8ae7-4d08-8e9c-5b5c9781ca67"
        },
        "item": {
          "id": "a6078870-ba79-46df-bcf9-7512e2be50bf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7e9f2daf-c100-41b2-8070-b3524a9145c8",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "c755310f-ce17-43b2-80fe-857cae0eff65",
        "cursor": {
          "ref": "c09a0c2e-9ad3-4f1e-b0a1-f6b97fe37fd6",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "39449a01-5fa6-475a-bd32-0c3be65e881e"
        },
        "item": {
          "id": "c755310f-ce17-43b2-80fe-857cae0eff65",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "aa73f184-8757-4f8f-a225-1096a0cea8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29c6419-a05a-4db8-bc7b-eafe55b39f77",
        "cursor": {
          "ref": "58beb1e1-2886-4b23-9610-6c9ef6b3796b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "72bf3d21-1646-4405-a7df-ebb2fb92d5ac"
        },
        "item": {
          "id": "e29c6419-a05a-4db8-bc7b-eafe55b39f77",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b04ea80e-3ad0-4a93-9b3e-cd5ef53b5536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68502cac-21e4-49ac-95f0-13d623f1feb1",
        "cursor": {
          "ref": "09b76b62-04f1-4784-8bca-18fab92a413b",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f4584082-1dcb-48f9-929c-c6fd5bf98381"
        },
        "item": {
          "id": "68502cac-21e4-49ac-95f0-13d623f1feb1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "927ba0b6-d5be-4d4f-a5e9-e8da826396e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd1606f-dbc9-4bf0-afeb-93bce9ca4c0e",
        "cursor": {
          "ref": "c28bbf6c-e14d-403f-b342-a5edf17dab3a",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1d76608a-e954-4ef8-9ad8-a2bee1e764eb"
        },
        "item": {
          "id": "6dd1606f-dbc9-4bf0-afeb-93bce9ca4c0e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "70e48242-75ff-432f-aa36-dccbf75d7307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd41840-e8fc-49e7-bc6d-cfbfa6d374dd",
        "cursor": {
          "ref": "321c069d-c413-4ad4-bfff-c987f37ed6f7",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f2757620-bd22-4a1d-b013-aa87ac45bca6"
        },
        "item": {
          "id": "fbd41840-e8fc-49e7-bc6d-cfbfa6d374dd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d9517e4d-59a1-415a-b354-50826870a057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1817040d-0bb0-441b-9075-a16656863749",
        "cursor": {
          "ref": "844d62b7-0a3a-4492-8e68-062b485a0db2",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3a52afc9-397d-4561-be91-1014f10c4910"
        },
        "item": {
          "id": "1817040d-0bb0-441b-9075-a16656863749",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1b61c9b9-0920-4754-8113-d5c2805d85f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0287765-2666-409c-811e-ee36e8a6f2ea",
        "cursor": {
          "ref": "c34a6fb1-4db0-4885-9a17-43128dd8d334",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ef4ca0d5-838f-4e30-95fe-d450a8045fa0"
        },
        "item": {
          "id": "f0287765-2666-409c-811e-ee36e8a6f2ea",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6805dfb5-df75-410f-866a-583c6e5fa0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47979f57-b6ec-417a-9a4a-b12c25b57cc0",
        "cursor": {
          "ref": "00996110-29ad-47f4-afc8-a33d9fcee23b",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "af7ae671-b68e-4f7e-b2b4-8d00dfe1befa"
        },
        "item": {
          "id": "47979f57-b6ec-417a-9a4a-b12c25b57cc0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9cc5e2e8-d7bf-484c-9420-74b0e465c51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e8331b-8e67-4479-a116-4a31b95027e9",
        "cursor": {
          "ref": "45a28f4f-7da1-4edb-96c5-67302ef9eae5",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aa5c4241-3ad6-4ce4-974a-00ffc18d688d"
        },
        "item": {
          "id": "86e8331b-8e67-4479-a116-4a31b95027e9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f1a6f9b2-49e0-4d27-be21-c0faa985f830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e212c91b-ab86-44a3-9c26-6f58ae0b32a1",
        "cursor": {
          "ref": "7380ee1e-a106-4d98-8621-d17440f8a12f",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d540f65b-aea4-4cfc-83f6-48bce944ab8b"
        },
        "item": {
          "id": "e212c91b-ab86-44a3-9c26-6f58ae0b32a1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7bb34f23-2b3c-405e-8e74-e87b748cd13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186708fa-746c-4919-9cc0-b444633c4d18",
        "cursor": {
          "ref": "899c9cdf-3b61-4b13-b5f5-d883f1f10afb",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bff41ad0-1b54-412a-ba0f-0a32c4a1c683"
        },
        "item": {
          "id": "186708fa-746c-4919-9cc0-b444633c4d18",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7740edaf-fdac-44c9-87c8-c5d290f914d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77dddd61-b0da-40a4-9dec-238f3ef91ccf",
        "cursor": {
          "ref": "4412bc77-c361-4819-8bd4-62ec3b162675",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8f021659-d391-4af9-8162-64005dce0a85"
        },
        "item": {
          "id": "77dddd61-b0da-40a4-9dec-238f3ef91ccf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cafe2e22-f663-48a5-94a7-0a233dff6ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92536645-1644-44ea-bcf7-64d494015f6a",
        "cursor": {
          "ref": "abd40b15-b185-4385-8e17-5427482527ef",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ee1edf6d-1d16-4f1f-99b5-3f032bdfa76e"
        },
        "item": {
          "id": "92536645-1644-44ea-bcf7-64d494015f6a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1bf5a33a-9f2e-4086-8f47-cd81a14d7109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fe1f03-08a1-4791-bdd6-1a810fc84981",
        "cursor": {
          "ref": "24cb0b25-8d9e-448d-9268-71441392d4a1",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c5fe509c-950d-451f-b346-f906da6e7392"
        },
        "item": {
          "id": "40fe1f03-08a1-4791-bdd6-1a810fc84981",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "217adfbb-12d3-4538-8e7b-353ea54391f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ccd724-cba3-4602-830f-2c9e5a9b075f",
        "cursor": {
          "ref": "7b993099-e1d5-4fa3-9557-f215bfc155cb",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "08ce9e99-65bd-4dc2-b59b-e6f7ee8d0357"
        },
        "item": {
          "id": "46ccd724-cba3-4602-830f-2c9e5a9b075f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fffe3d37-92b8-4464-b1d0-25f52f8a7867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88b6cae-7764-4fd1-a444-be563d9c4fe9",
        "cursor": {
          "ref": "e835693f-8704-4474-88c8-8a213ad40fea",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ee5558aa-f2d4-4598-bf57-ffc98c28dce9"
        },
        "item": {
          "id": "d88b6cae-7764-4fd1-a444-be563d9c4fe9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "02b3bda2-cc92-49c5-b2d3-d67f62910b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b83287a-b0fd-4eb0-9b00-14cce00cf2b6",
        "cursor": {
          "ref": "99078beb-36a9-4c94-968f-a6c18ae9374d",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f730bd80-c670-486c-84ee-2eed5100967a"
        },
        "item": {
          "id": "1b83287a-b0fd-4eb0-9b00-14cce00cf2b6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d7906e45-7210-47d7-8af5-19a97f493cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c51583f-af91-46b7-963d-e58a2487055e",
        "cursor": {
          "ref": "a0e47f05-e3a3-4a12-981a-2799222a594e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ab327706-a9e1-4978-b0d8-fd6730e5f958"
        },
        "item": {
          "id": "0c51583f-af91-46b7-963d-e58a2487055e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0601ba9b-2f79-44ac-8368-4397463a994a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51cb0f7-5136-4d03-b6c8-68bbfb593a50",
        "cursor": {
          "ref": "3a3c0e61-e91f-433d-b152-397c6a09765a",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a3b2d4bf-b4c3-437c-870f-580d7c7016b3"
        },
        "item": {
          "id": "f51cb0f7-5136-4d03-b6c8-68bbfb593a50",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0bc69d1c-90d0-4db7-a5ff-4d5564d5edc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048e5d06-dcc7-4d6c-9313-1e04c07033b8",
        "cursor": {
          "ref": "17e7703a-4b90-4d1e-b19a-213272a2cb46",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "586ed61b-28d3-4659-9c97-f5660d3b731d"
        },
        "item": {
          "id": "048e5d06-dcc7-4d6c-9313-1e04c07033b8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "566c820a-12ca-4b0e-90f6-e4557b86873b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14ce344-1138-4a3d-8910-19637c456df6",
        "cursor": {
          "ref": "af55eb2d-2eac-4d5c-8f96-c514fab50d78",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ed935465-87f4-4b0a-b037-47d8d3da8a78"
        },
        "item": {
          "id": "d14ce344-1138-4a3d-8910-19637c456df6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "44c31fb0-34d6-471b-9caa-39cb2dc1756d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e5f76e-0cc8-487a-a83c-ba23e8221766",
        "cursor": {
          "ref": "a340fc9a-5f5e-4bd7-a31a-e6cd5a6ff1bd",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6a93d398-a476-417c-aa0e-025ee8d9bdf8"
        },
        "item": {
          "id": "a0e5f76e-0cc8-487a-a83c-ba23e8221766",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "262c106d-ad9b-4e0c-8daa-cea0ef03504b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeca2d00-b858-41b3-af5a-af19c04165ee",
        "cursor": {
          "ref": "a574c624-72c1-4fab-bec0-8dcb17c41728",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "104c4c2e-f945-4ae7-897c-f03d290de1b7"
        },
        "item": {
          "id": "eeca2d00-b858-41b3-af5a-af19c04165ee",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "93c35c16-d6a1-428c-9895-7d117e180258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa08b0f1-e646-4f31-9b8e-ce3c6a40069d",
        "cursor": {
          "ref": "cb1f0d31-2b5f-478a-a3ce-bb683c5d5284",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7bdaec27-dd41-4cec-92a8-e09de3b4f58e"
        },
        "item": {
          "id": "aa08b0f1-e646-4f31-9b8e-ce3c6a40069d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "669cf91a-d64d-4afe-a82d-134ddb1128f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fcca6e-5f47-450b-90cb-95979d1ded69",
        "cursor": {
          "ref": "6e319a43-a287-4e28-a98c-049854937568",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f259cf9b-f5d8-4269-bb6f-eac79e2b8c29"
        },
        "item": {
          "id": "88fcca6e-5f47-450b-90cb-95979d1ded69",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ea801dcb-889e-48e0-9fea-5c51b8b6d60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cf2cd4-2a9e-46ae-90bc-746b7bee20ab",
        "cursor": {
          "ref": "8ddfb0a1-d392-47cf-b6a5-e9787363c1a2",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b6d078ec-51fe-42b3-8d3a-2548efe004d8"
        },
        "item": {
          "id": "20cf2cd4-2a9e-46ae-90bc-746b7bee20ab",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "490af485-495d-4705-8c55-b75510bd11fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2da0d74-f40c-466e-8919-fc32018b29d8",
        "cursor": {
          "ref": "860580ec-12ec-4bb3-9e19-4d81828760e4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5a361a99-cbaa-4c76-8196-8fd471ebdc5f"
        },
        "item": {
          "id": "e2da0d74-f40c-466e-8919-fc32018b29d8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9ae8317c-2b75-4301-9efb-2fc994e7a090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf2bfdb-0d1c-44e5-b9c7-f87de3fe6a81",
        "cursor": {
          "ref": "9f78bd0f-11d0-4093-b531-3b085014905f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c71bf2a7-1d25-4691-843b-ace3968548e4"
        },
        "item": {
          "id": "dcf2bfdb-0d1c-44e5-b9c7-f87de3fe6a81",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "47cb8ad6-7124-48dc-bcf8-1791d2b87ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afcae25-b26b-41f6-a1e0-3f27b74118ec",
        "cursor": {
          "ref": "e00762f7-6e7c-424f-a2d6-813cad9b5140",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2bc19d56-6f16-4503-855e-ddd3ef74dcc9"
        },
        "item": {
          "id": "2afcae25-b26b-41f6-a1e0-3f27b74118ec",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f807f081-82bc-4217-9fd2-5c5189996bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f558154-96aa-4346-a45a-107d3b2b6e4b",
        "cursor": {
          "ref": "d5081070-a34e-421a-be7a-3f4bcdf9b80c",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "dcb7b72b-535f-4873-8335-904bd960b8fe"
        },
        "item": {
          "id": "0f558154-96aa-4346-a45a-107d3b2b6e4b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "da8d956c-2d77-494d-9527-33023e07bd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9833a2a-9b0f-49a7-83a0-78658e1befbe",
        "cursor": {
          "ref": "64c3ac99-73d6-4ad8-ad6c-37daf20e0918",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "720da8f4-f94c-488a-8be9-43be2c6ebc66"
        },
        "item": {
          "id": "e9833a2a-9b0f-49a7-83a0-78658e1befbe",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "388c62e6-7a1f-46ee-94ca-4a4446ad8d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62044022-966c-4635-9165-9f1cff569026",
        "cursor": {
          "ref": "44185ac8-1755-4012-a5a9-324f5adc8015",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "72bab1ea-bd40-488f-9e99-27ab3f58751a"
        },
        "item": {
          "id": "62044022-966c-4635-9165-9f1cff569026",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "73c88d5b-90db-4086-8ba8-d05ba9e4f836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe9e8d1-eb3b-49b6-9279-33dbd37e1328",
        "cursor": {
          "ref": "2502c087-c1b1-4d04-8726-7e878158d10d",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f3f61099-5446-4572-847c-d48cf48aa98e"
        },
        "item": {
          "id": "0fe9e8d1-eb3b-49b6-9279-33dbd37e1328",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7d61039a-9ecd-4047-9b90-8bd05968d805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0966b20-5a6b-4bcd-b7a5-005407ccb50b",
        "cursor": {
          "ref": "d58ce6dc-835d-4ba2-983c-852398cad28d",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f6015cd3-8214-47fe-9c49-2694fb78cdc9"
        },
        "item": {
          "id": "d0966b20-5a6b-4bcd-b7a5-005407ccb50b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5d28e52f-a8a6-493b-81e9-413fbeca9ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d054aae-2de3-4f15-9585-990a1565dbc2",
        "cursor": {
          "ref": "b7b43773-e174-414d-be6f-5997857f61da",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "277dcb9b-6b81-45ae-9204-0e7216480b45"
        },
        "item": {
          "id": "8d054aae-2de3-4f15-9585-990a1565dbc2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4d2c6489-420e-49c1-8ece-10d7812fd9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbc39e6-885d-470d-baec-186919dd9dd9",
        "cursor": {
          "ref": "1b215c36-5e59-4a49-9c60-5ec445f5859e",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d8b0528e-849a-4b0c-8679-e09f23559a91"
        },
        "item": {
          "id": "5cbc39e6-885d-470d-baec-186919dd9dd9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6ff1a38c-8e74-4c1b-b459-dd23bf79e075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5043bb26-d8cd-490b-a64c-9eca9c3004c6",
        "cursor": {
          "ref": "cabac46b-e3fa-4115-8910-4c9f9cf0a145",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e68fd660-929d-4ff1-8f6b-9aaba3e4b907"
        },
        "item": {
          "id": "5043bb26-d8cd-490b-a64c-9eca9c3004c6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cd812219-3655-4f0a-851b-7a7bec5cf354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4cfa7f-e6d2-4619-8ea5-d155db984d8b",
        "cursor": {
          "ref": "d436c387-4043-4990-81e0-eb19a52f239e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "554209e0-0450-4a61-a9c9-1d2a25964524"
        },
        "item": {
          "id": "1e4cfa7f-e6d2-4619-8ea5-d155db984d8b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "28b6a62b-f493-4d81-a946-ffa86dd522a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7102ab18-92f5-4468-88d5-55e792fb8d74",
        "cursor": {
          "ref": "ff1454ee-4c00-4c2c-9770-865a6d5a9ebd",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cbf7d8a1-0f6a-42b7-b6e2-49d6e063ef52"
        },
        "item": {
          "id": "7102ab18-92f5-4468-88d5-55e792fb8d74",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "201b92b8-19b7-486a-b2e1-0a8da01a0100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8d5b19-c599-4df8-8635-6f42090be56a",
        "cursor": {
          "ref": "8b899df8-2f3a-4b79-bb63-5f12ff3fe47b",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5fa51135-d91c-416d-bd7c-d79301941d05"
        },
        "item": {
          "id": "ff8d5b19-c599-4df8-8635-6f42090be56a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f16d0083-341c-4645-a041-61d253721f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23188ee-cde4-42d0-9689-97bba9061ba5",
        "cursor": {
          "ref": "4277ab00-29f9-4306-98fd-81c8c8fe0263",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4a9708ab-566c-41c5-b44d-4e6c1c2c1f1a"
        },
        "item": {
          "id": "d23188ee-cde4-42d0-9689-97bba9061ba5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d9d59086-3702-4edb-936b-7efbb08702ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99eb41c3-5639-4d18-9195-8a2fbdfd165b",
        "cursor": {
          "ref": "2569da79-e28e-4a50-ace3-178ee826f5cd",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1e7fcb19-f596-4928-baf0-f5628f97161a"
        },
        "item": {
          "id": "99eb41c3-5639-4d18-9195-8a2fbdfd165b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d7942411-2828-4fc5-aefa-ade0fa66b9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e6f97b-5c1c-4373-87e3-05b32cfa1053",
        "cursor": {
          "ref": "3586f397-52f7-4463-9a45-de58462170e8",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "66784dbb-c8e1-470f-861f-d7c6a817bb2e"
        },
        "item": {
          "id": "34e6f97b-5c1c-4373-87e3-05b32cfa1053",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "db060378-380a-40e8-93ef-d315d073ec50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c55d89-11fb-4e8d-98b3-e5290b2cd340",
        "cursor": {
          "ref": "916d8b2e-55db-44b6-94a9-c244fe6c52a3",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "07dc72bd-4406-473b-bd20-41ac77bf9797"
        },
        "item": {
          "id": "76c55d89-11fb-4e8d-98b3-e5290b2cd340",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4d03af76-011a-4332-8def-021b65f40396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eec41d6-e7f4-4933-9bd6-0aaec778365b",
        "cursor": {
          "ref": "29f9fffd-1ea4-41d0-9266-d1766303f64a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bc715e33-4718-4474-898d-ac87d91efac9"
        },
        "item": {
          "id": "6eec41d6-e7f4-4933-9bd6-0aaec778365b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "463f5c87-d300-4685-9ee9-6efa50cefdcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd6ccf3-a31c-4d8e-923c-b80d785ae7c2",
        "cursor": {
          "ref": "fd728152-4ca0-4cd1-9c2a-5789de16d0f9",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dbec9991-91f5-465a-92df-fda301c13df8"
        },
        "item": {
          "id": "cfd6ccf3-a31c-4d8e-923c-b80d785ae7c2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9098aab9-d785-4d5a-aa1e-1298fd7ba1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c75a50-4465-4cef-80db-4038af9fe2b9",
        "cursor": {
          "ref": "29db87dd-77ba-4e53-be23-9ecc23f06181",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "49c10c63-e820-46e2-8754-e62511aed807"
        },
        "item": {
          "id": "87c75a50-4465-4cef-80db-4038af9fe2b9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6043a671-9f8c-4c44-9eb7-121238f50077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287b51cd-c652-4996-8787-b1922bd507c8",
        "cursor": {
          "ref": "1fa3b3fd-e239-44e8-9bb2-0df0651a7e58",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b6a304ad-083a-4fcc-b6a3-22dccb9407a0"
        },
        "item": {
          "id": "287b51cd-c652-4996-8787-b1922bd507c8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8caad680-8327-42a0-92b9-54b321a8d0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d685d42-492d-4da7-9c08-d70c08fa8629",
        "cursor": {
          "ref": "1b53b3cd-213e-47e3-a9fb-3aca89ab2839",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e695c79a-3dcf-4991-931a-b01e953f8c33"
        },
        "item": {
          "id": "9d685d42-492d-4da7-9c08-d70c08fa8629",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ef1f2dcb-91c3-40d6-81d4-5ebd53e0c801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166979ee-7a30-4d6e-b285-7ebe2d4d539c",
        "cursor": {
          "ref": "3b6e3f8b-4d0e-4c47-a192-6cc7fd87c00c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "26b27f6f-00b0-4d27-bd12-3ef2215d4fa8"
        },
        "item": {
          "id": "166979ee-7a30-4d6e-b285-7ebe2d4d539c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "934da693-9e2e-4cf8-bb89-0b8044d86518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267e42cf-14ed-4742-94ed-4b09d0584b80",
        "cursor": {
          "ref": "65bcab8b-5145-487d-a794-185a491fa13c",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cb7dacd6-bc74-47a7-8752-44ac4c96ee5d"
        },
        "item": {
          "id": "267e42cf-14ed-4742-94ed-4b09d0584b80",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e1885875-a70b-4f4e-ab38-ea102352cd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345244cc-cd2d-4c37-bde1-c489c3b1743a",
        "cursor": {
          "ref": "1172d769-05db-4d16-a313-b01ccb03cd9c",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d3b2b265-2fc9-4e22-80f9-660d5e9aa3b7"
        },
        "item": {
          "id": "345244cc-cd2d-4c37-bde1-c489c3b1743a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4359e1a1-695a-4c2e-bb3d-8afde8fbae84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ff7896-c767-4d48-af2c-4f74c609c49f",
        "cursor": {
          "ref": "f3624296-57b4-4b50-99ed-e58ea760da53",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "563a6a1d-bf6c-436c-a1d5-072debc5cb74"
        },
        "item": {
          "id": "34ff7896-c767-4d48-af2c-4f74c609c49f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bd1dd397-c4bd-4dbc-b86b-f41ae3793898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aebbda9-5d7c-4b02-b71a-285e55491efc",
        "cursor": {
          "ref": "f94b10fc-99f8-4d78-acd7-596495572894",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4bce911b-343b-4d56-833d-4ecc42b9adfa"
        },
        "item": {
          "id": "5aebbda9-5d7c-4b02-b71a-285e55491efc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6c423b21-dda6-400b-b5ab-22fd71ac3d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5a9960-91b0-43a0-a4c0-2cc63bebc21d",
        "cursor": {
          "ref": "0cfb27a7-249b-433b-973c-019593a7e4e0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "05d75c29-34cb-4f01-9f10-843b5d3abf33"
        },
        "item": {
          "id": "ad5a9960-91b0-43a0-a4c0-2cc63bebc21d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4c06d452-b991-4b61-a512-268d03f10d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d990d95d-e4c2-4490-b7c9-53c74b40d608",
        "cursor": {
          "ref": "02527b57-64d4-4393-811f-1f87b0ed1832",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4ceb3ff9-eb92-4a0f-bccc-57542368eae2"
        },
        "item": {
          "id": "d990d95d-e4c2-4490-b7c9-53c74b40d608",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2daf0e3b-2c88-44ad-9e51-b0fc7d6cbb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee18e48-7885-4aea-af23-e10965e4fbc6",
        "cursor": {
          "ref": "0bd23754-12a7-40e0-91cf-594a1a370c1e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0c0ec4f6-d7d5-4a84-844e-1a393bbe76d3"
        },
        "item": {
          "id": "eee18e48-7885-4aea-af23-e10965e4fbc6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1e0cfb8c-d9cc-4d6c-9c9c-3aed3e01d933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2957cb-08a0-417a-ae63-29c6284b1796",
        "cursor": {
          "ref": "0fd8faf0-5f92-405f-b82f-91851eec9fe1",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "33c1efeb-7d26-47b6-bb89-06298f486712"
        },
        "item": {
          "id": "ca2957cb-08a0-417a-ae63-29c6284b1796",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "02649bf7-9664-4c70-9a26-bd3de2dd15c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670f52df-bec9-4e74-9096-ff2f13d7b618",
        "cursor": {
          "ref": "59d8ecbb-a704-4f15-af38-d1e5109a5a5e",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f0aafc28-23c9-4248-baf8-13cee48e3e54"
        },
        "item": {
          "id": "670f52df-bec9-4e74-9096-ff2f13d7b618",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "59866785-f8b5-4b6d-b9f6-3521b1500e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd157c4-2232-49bd-9e5e-d9498e31c1ff",
        "cursor": {
          "ref": "24ef0b20-0727-4244-aa51-3a1d753ebb20",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7729e23c-0ba3-4ce6-9b44-1a6bce5dd030"
        },
        "item": {
          "id": "4bd157c4-2232-49bd-9e5e-d9498e31c1ff",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "232514e1-06a6-4407-b9ba-f6f95e4c7492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0488f24-da8f-4eb6-8895-656682a53034",
        "cursor": {
          "ref": "a4d2efc4-906e-4ca9-86f3-ffeafc235128",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5ceffd2a-f768-49c0-bf3b-d6f3f39ee2a5"
        },
        "item": {
          "id": "c0488f24-da8f-4eb6-8895-656682a53034",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a3bc7863-dda9-47b3-b5e8-5fb942088c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6397419c-d305-422d-afe7-19dcf2777674",
        "cursor": {
          "ref": "6931169a-1749-4fa7-8a33-ad4d859ff9f8",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6541e869-3562-40f5-875e-16c82d71e9bd"
        },
        "item": {
          "id": "6397419c-d305-422d-afe7-19dcf2777674",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "49af2e7e-bf9e-4574-bfcd-23e635407933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f35ea86-1315-42e7-a963-4b726a747c9c",
        "cursor": {
          "ref": "19c355f9-37f4-45cf-bb3f-87b2e028a0b1",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4267ad4b-bb3d-41e3-b847-592057a440a8"
        },
        "item": {
          "id": "6f35ea86-1315-42e7-a963-4b726a747c9c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "322c6da2-c1fc-427a-861c-ca21c64981fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de67fa9d-e313-4bd8-9317-8f9f796f7c7d",
        "cursor": {
          "ref": "d5d3a0aa-651b-4506-b500-3ebc6c0a1e92",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1c77bc55-36ee-4b5a-93b1-5246f0de705f"
        },
        "item": {
          "id": "de67fa9d-e313-4bd8-9317-8f9f796f7c7d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ee6fd0e4-ba05-4eba-8a3f-7d45131d4fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9074544e-4efb-4be1-9356-446297f83699",
        "cursor": {
          "ref": "2d81b716-3b81-4142-a298-82b4fc95c3aa",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "05968194-aaf2-48fa-9324-22166a645f6f"
        },
        "item": {
          "id": "9074544e-4efb-4be1-9356-446297f83699",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4aef3bf5-268d-497f-b9a1-64dbe7c013c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1378a0cf-ba4f-4bed-bbcd-ee47593351d4",
        "cursor": {
          "ref": "3e91ec95-ef37-415f-aac1-950363ebbb69",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f55d33a9-e7fb-4d00-afac-2af151a51f63"
        },
        "item": {
          "id": "1378a0cf-ba4f-4bed-bbcd-ee47593351d4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "650ea631-4354-4171-8df4-9fb07c3ad7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e034df74-ed8c-4db3-9ba8-fa9a2a45c34d",
        "cursor": {
          "ref": "840935e3-bb99-4a46-954e-698f92668808",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a3b2eec8-2d4d-473d-8b02-70cd55b5fe60"
        },
        "item": {
          "id": "e034df74-ed8c-4db3-9ba8-fa9a2a45c34d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9a35c3ed-b1ae-4a78-a7c5-5bc3ff5f53e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a05968e-21b3-4c61-accd-4dc04dd895eb",
        "cursor": {
          "ref": "9f100286-6c5b-44ae-8729-0157d1eef8b5",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e83a48c9-5328-4370-8557-7812e6898719"
        },
        "item": {
          "id": "4a05968e-21b3-4c61-accd-4dc04dd895eb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d7a3c859-9dcd-4d91-abbb-95b2d5f54edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660365a9-a54c-4d7c-b655-bfda10db43d6",
        "cursor": {
          "ref": "fa400ea9-5d39-4979-803b-e5baf083e612",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "59cc9625-9b1d-46ae-8376-bdcb76bf283e"
        },
        "item": {
          "id": "660365a9-a54c-4d7c-b655-bfda10db43d6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "eca762a1-a7a0-4644-b448-15837a47c144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944f7759-3b2f-458e-8a15-e195d07b8c22",
        "cursor": {
          "ref": "a3a97478-2273-4406-a068-c545e1ad335e",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9823a809-0fa2-4bea-9749-1dc93d56917c"
        },
        "item": {
          "id": "944f7759-3b2f-458e-8a15-e195d07b8c22",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "373a3163-1796-48a7-81f8-fa058b75fe1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce22cbb-a9d0-42b8-9880-a43cfa54b13e",
        "cursor": {
          "ref": "401c8bc4-e97a-4598-9717-8f98a78da513",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8d72d249-aa58-4a4e-90fc-0fb3df00b8a7"
        },
        "item": {
          "id": "fce22cbb-a9d0-42b8-9880-a43cfa54b13e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d962b2d6-e7ad-40e6-a07f-1a304398ab45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd498a6-0872-40be-8902-1894616c0598",
        "cursor": {
          "ref": "e51da9cd-a9c2-4227-9ad0-08a15c8ca783",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fc12f63a-ed3b-436b-8aff-cca33b0e2d5f"
        },
        "item": {
          "id": "bdd498a6-0872-40be-8902-1894616c0598",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6b922423-c0da-4f1d-b081-3c397ca70ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9bec3f-763d-4e46-8079-c9260c9a7ee8",
        "cursor": {
          "ref": "36866438-af57-4971-95f7-dcda4192c846",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "81fcbe75-b4da-459d-9485-0f3e19b5fca9"
        },
        "item": {
          "id": "2c9bec3f-763d-4e46-8079-c9260c9a7ee8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c9e18b44-3c38-4e87-a0b5-5c96de967033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8879d83-499f-45e3-9d40-11a536a15fff",
        "cursor": {
          "ref": "c9299ca7-24ee-4233-b82d-86ae94878d60",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "da58dea6-27b4-4511-9a9f-be7823f096e3"
        },
        "item": {
          "id": "b8879d83-499f-45e3-9d40-11a536a15fff",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a385f26a-a5b0-4750-a4db-4f8aec0184b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc66766-6188-4123-bf33-af696412a0ed",
        "cursor": {
          "ref": "fe5bf3f8-96d3-4520-881d-eb7c52d878eb",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "27c6cd62-3816-4ded-b124-b5c2d027e240"
        },
        "item": {
          "id": "cfc66766-6188-4123-bf33-af696412a0ed",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "af5b6303-505c-4e57-8fe6-5ae0ce7fe957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088a998d-abd2-4de7-a2a8-1db5c7e3ae48",
        "cursor": {
          "ref": "f8bf4846-9277-45c7-a85e-3d51880b02c6",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6a7f10fa-34c7-4045-a6f0-4b9c8c871a93"
        },
        "item": {
          "id": "088a998d-abd2-4de7-a2a8-1db5c7e3ae48",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5cec758c-87cf-492a-96e2-eeac85fb8a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ca34d9-55b5-4612-9d40-f0ad6e1675d0",
        "cursor": {
          "ref": "9b09132e-692a-4b07-bf79-b000d410496a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8cecdcc6-1566-4130-92c6-6fa904e7d4d2"
        },
        "item": {
          "id": "b0ca34d9-55b5-4612-9d40-f0ad6e1675d0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b0fee11f-263f-4a78-90f1-18f509c16434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476d08cb-58ae-4729-9d9e-b95e675dc4c9",
        "cursor": {
          "ref": "0d3709d5-77d4-4d3e-b344-ff85ad05ae3f",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6adc4ab4-caf1-41ae-858b-4cced7a57bf6"
        },
        "item": {
          "id": "476d08cb-58ae-4729-9d9e-b95e675dc4c9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "77a5a92d-f814-4331-9ddd-90ff6bd05e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039a6242-2456-41fd-a4a1-5bd8b13913f3",
        "cursor": {
          "ref": "f5dba8a3-c3ef-41b4-b10c-a9cc3886e771",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6d1d4848-ec57-43cb-b53e-56b86722e3bf"
        },
        "item": {
          "id": "039a6242-2456-41fd-a4a1-5bd8b13913f3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cdccb10f-8a62-43f7-92a1-21c6fd19135c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b587330a-ccd9-4168-a6d9-33cd1e111a9e",
        "cursor": {
          "ref": "2f8ecb57-925a-4833-a640-eb16abf7c2ca",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "736a91dd-b20c-430e-bfa8-0b6a6fdeb06a"
        },
        "item": {
          "id": "b587330a-ccd9-4168-a6d9-33cd1e111a9e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6d0b9ca-f4a8-448a-b5da-84c1c224ed0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c803671-2593-4091-b5ce-0df0307fd32f",
        "cursor": {
          "ref": "ed7dd309-13e3-4796-b8a9-b3f678ad3fe2",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "76f68a21-eebf-407e-8638-9c4405a8de41"
        },
        "item": {
          "id": "9c803671-2593-4091-b5ce-0df0307fd32f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2c60be87-3959-4894-b35a-6a9b10386a31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0569a3b8-b315-4ebf-b345-b3d273c3b5d8",
        "cursor": {
          "ref": "4a43f848-ba55-4e42-a304-f4dc53af3e71",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ef5a6e27-5920-4493-98ca-2ed18e4cdd79"
        },
        "item": {
          "id": "0569a3b8-b315-4ebf-b345-b3d273c3b5d8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8f0217f9-e657-48f8-a6f8-fc98369e9966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "667c5b22-f1e3-437d-b96d-33d4e0bd9bb9",
        "cursor": {
          "ref": "1a846b14-d173-4cf5-b858-701f88c86898",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9483fe34-b5d6-4057-8c92-b6f72f1c0e3c"
        },
        "item": {
          "id": "667c5b22-f1e3-437d-b96d-33d4e0bd9bb9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ee379c34-8811-457b-9dba-ff00906b4a67",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6532d8-8653-45ba-b17d-9e066025753f",
        "cursor": {
          "ref": "69066715-3bbe-4eb2-8ecf-1c544019a4eb",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2c5cb22f-6e5e-43e2-9606-35ac7e72be52"
        },
        "item": {
          "id": "3b6532d8-8653-45ba-b17d-9e066025753f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b6d8bc91-552b-4a62-811a-caefd440a94e",
          "status": "OK",
          "code": 200,
          "responseTime": 2483,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c930d0f-58c7-4935-970a-0cb9ae542204",
        "cursor": {
          "ref": "a3573c5c-2c0c-43a3-b4ec-b1a1aa633a72",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "355a74f4-472d-4df0-8ad7-d40078f821cb"
        },
        "item": {
          "id": "1c930d0f-58c7-4935-970a-0cb9ae542204",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "59038fe2-6b9c-425b-b09e-3fbfcde442b2",
          "status": "OK",
          "code": 200,
          "responseTime": 2871,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62e7c04-5563-4c8f-b087-84fce143be30",
        "cursor": {
          "ref": "679bbd5f-5b97-4448-b047-eb930b7e09ab",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8923f6cb-dff8-4d3e-88b5-4ed3117aebfc"
        },
        "item": {
          "id": "e62e7c04-5563-4c8f-b087-84fce143be30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5e7faa90-c7d4-4d1f-8f8d-5fba006b8439",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "e62e7c04-5563-4c8f-b087-84fce143be30",
        "cursor": {
          "ref": "679bbd5f-5b97-4448-b047-eb930b7e09ab",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8923f6cb-dff8-4d3e-88b5-4ed3117aebfc"
        },
        "item": {
          "id": "e62e7c04-5563-4c8f-b087-84fce143be30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5e7faa90-c7d4-4d1f-8f8d-5fba006b8439",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "e62e7c04-5563-4c8f-b087-84fce143be30",
        "cursor": {
          "ref": "679bbd5f-5b97-4448-b047-eb930b7e09ab",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8923f6cb-dff8-4d3e-88b5-4ed3117aebfc"
        },
        "item": {
          "id": "e62e7c04-5563-4c8f-b087-84fce143be30",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5e7faa90-c7d4-4d1f-8f8d-5fba006b8439",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "4c65d015-ccb5-4ee9-acc0-aa9bcee3e7f7",
        "cursor": {
          "ref": "70a19068-bb06-4f4a-b00e-8e9419b42f62",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e3117798-fb5e-4c07-8302-c51aeaaf36b2"
        },
        "item": {
          "id": "4c65d015-ccb5-4ee9-acc0-aa9bcee3e7f7",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "407e4786-0fbd-4937-a109-582576dc8663",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "150cc13c-79e4-4d43-8ecd-36df3bbe0101",
        "cursor": {
          "ref": "b7c701d5-64c8-4ccc-bd73-f8ce2d4415a7",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a6417a8d-375e-4113-bff0-993f627bdc70"
        },
        "item": {
          "id": "150cc13c-79e4-4d43-8ecd-36df3bbe0101",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "553cea1a-b996-47ed-9738-96afbbc6ae76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "150cc13c-79e4-4d43-8ecd-36df3bbe0101",
        "cursor": {
          "ref": "b7c701d5-64c8-4ccc-bd73-f8ce2d4415a7",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a6417a8d-375e-4113-bff0-993f627bdc70"
        },
        "item": {
          "id": "150cc13c-79e4-4d43-8ecd-36df3bbe0101",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "553cea1a-b996-47ed-9738-96afbbc6ae76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7cc72038-64bd-4def-bf15-b4930c643e91",
        "cursor": {
          "ref": "8b6ecab4-701b-4505-855c-4e8ef664c733",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "befca959-5052-4cb1-9a18-aad1c18914c6"
        },
        "item": {
          "id": "7cc72038-64bd-4def-bf15-b4930c643e91",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cf373eb5-1430-40fe-9b2a-88d51af959d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 199,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "31efa44e-86eb-40a2-bccc-57736896a0c8",
        "cursor": {
          "ref": "c8710be4-05e1-4f96-a474-593cf4160c9a",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "499a879f-2057-4190-aeaa-d4aac5e7cb00"
        },
        "item": {
          "id": "31efa44e-86eb-40a2-bccc-57736896a0c8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "83fbcee9-1134-4cf0-bc0b-8a0092996fb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "31efa44e-86eb-40a2-bccc-57736896a0c8",
        "cursor": {
          "ref": "c8710be4-05e1-4f96-a474-593cf4160c9a",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "499a879f-2057-4190-aeaa-d4aac5e7cb00"
        },
        "item": {
          "id": "31efa44e-86eb-40a2-bccc-57736896a0c8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "83fbcee9-1134-4cf0-bc0b-8a0092996fb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "fa0829a8-7865-4004-845d-042fbe36cd55",
        "cursor": {
          "ref": "db3f78be-bdc6-40c8-aad6-660aeef84e42",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9b288a88-defd-473a-be6e-c3b891500d49"
        },
        "item": {
          "id": "fa0829a8-7865-4004-845d-042fbe36cd55",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "fdb5d264-09b6-4ae9-be04-9e80561abfba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}