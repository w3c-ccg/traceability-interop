{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "626ed9f4-4af4-4b7b-8f22-7efebe01fc72",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e9ef1cca-042c-4aef-aa07-40b2885e1e01",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af0d09c2-3d1a-4878-acd9-e12995a79126",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ca6a4693-21e1-4d49-8a82-1a1120baa74f"
                }
              }
            ]
          },
          {
            "id": "e5c1ef8b-2ea3-4fc4-897a-87e8fd659261",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bfd8de7c-33bc-4b9b-9b07-5bdb05e69b2a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b8795989-2e14-4dd6-889f-8dcf25480b77"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "73d6ad27-92ad-4183-9019-908e6fb7ec61",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bd8fa393-4747-4654-8ce8-d0b5b7dabd6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f1da230a-f25c-4d5c-bb03-aa845683d6f1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c4ca425-23e1-45b6-9edf-1e7e75caf398",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0267740-c3e7-48dc-88f0-358a55a12519"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23b0ead6-44c5-47d5-b30f-fb63ca0d5ee0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "943eea85-39fb-4c18-af82-d321e1c89116"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "045dd4d9-3250-4392-92ff-3f68627e18cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98acc943-7a61-4fa4-838b-789e00e782a2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb34d528-6ff3-4492-8c2a-e0f0f259e9c7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7fb820b6-918f-42b6-86a2-9d917ff50ae2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e52503c-0f42-4e9a-bcea-7535501f0e91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c95deae7-8b63-43dc-af78-c6d611f76a76"
            }
          }
        ]
      },
      {
        "id": "f3c66dea-0ed1-42f5-ae70-c9b540d90e87",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "24c4968f-988f-4ce4-b614-bbc202c17a57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31ce3d8b-9aa7-4bf2-a440-00da279b16e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54f90403-4065-4a62-b6a1-41385fab7e71",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5273f64-0919-4681-90a6-fcf5fff6231e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eae9dd2f-3df7-4443-b446-893cc9653317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470a3d27-a091-42fd-b8ad-39439df87a9f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e3807c-4981-4b8b-8234-456fd6914700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e70522b0-e00a-4981-af35-6f2dcb6cfd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df22bebe-69c3-479a-9232-32f040a80f31",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56391cf5-c74e-4df2-a88d-18a46ee247ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f90d85b8-d23c-4124-8a2d-8931164d0dab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c74ef49-182b-48c8-9923-89a0c1e273b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c586a29-c527-465a-8d03-15dae5d4e833",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4b1106-baa2-4997-aa33-4652a0942d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6601a94-0d2a-4041-b154-4cee05e54e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fa3970-3f79-4039-b4a6-4d53269dcdbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e630fda3-617b-41a1-a167-d478975203cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7724dcfc-9fe0-4c54-abbd-c9ed851d17f7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ce8689-2304-4a6c-8d64-d4e130a80be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a525c77d-e821-47db-b21f-8ccd05fa613e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13428dc1-2e9b-46d3-b965-dacb271f3077",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ba9afdd2-1174-495d-a17b-b480e8b3fe87"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eb6b422a-3c30-4274-bbad-97f8c9f21bc0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6b046f6f-58b9-415c-9ba6-6f144f1b2d63",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03078e73-7668-4602-a9ca-66de8deea707",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f031996b-1e41-4e6b-b4ec-61cb80ce55dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "147b4d33-d38e-41cd-856d-506f968643bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "01482d75-984c-40d0-be7a-c6e0c2f924fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d26a35e-afdc-4f19-b5fb-f390748a5180",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f11095c-2634-44f5-9732-4e082fce01b0"
            }
          }
        ]
      },
      {
        "id": "cb57abca-25f3-444f-a43e-0cd6bfe39742",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "59441699-cd3e-4929-abb2-b57e7e20a384",
            "name": "Negative Testing",
            "item": [
              {
                "id": "928e2b93-2c71-48d9-96a6-68899493efde",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a3bdf2d0-60ce-42f3-8476-f12b9dcc7476",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a020beb0-9745-47f6-9f00-7742dbb9e60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb98c6c-c7f2-4b05-b0e1-5fc47f86ae84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6045a7-2456-4f84-8b9f-b52e5a086f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5ef25ba-5c42-42b3-bbc7-24bbdf78af4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71eec8b-fa23-4117-b5a7-a777b6407baf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0736cc1e-8d01-4b93-b544-5cf5bf419fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1ecb44-7eea-4faf-96a4-96ba6cafa760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794384e9-4ec0-4006-8fc1-d7c48b6efc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71249f49-25e9-4520-a12b-7e8ffb9cf530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1ef326-ec16-48fc-9cf3-5c8666deedba",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef33e0c8-b3c3-457b-80ac-e6ef0823f65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f727bf-0edd-463a-b368-b9b91115c8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5805b0-9f09-446a-8559-07e676035ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d7eaf57-3bd6-4fcc-a900-5f0b8939d249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c389a6ef-48a7-42e3-a6da-04f2ad037476",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fde881-712e-4dac-bad9-b5eeb74c46fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a403fd4-a382-4751-b93f-0490c58e45a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438f54ad-7509-4b60-842e-86d3ccbc397c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bfe2a2f-d4e7-41bc-abc5-adeb0de9adfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3828659c-2aad-464a-a4af-ca37dd38a175",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed18025-e02f-4b74-afb6-a00c89334514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0238782c-6a4e-4f83-8ef2-3c916b7094ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc4e933-a3da-413e-ab77-3acfe8e6ad55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "285e4863-2762-4b50-84fa-7957c11c6aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62863d8-570c-4f8a-b10f-0cd657f602e6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d19ee61-b28a-4049-b52a-7afe6ed09948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2f847c-4101-4583-8f8f-d8ea3913c133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb87450f-79fd-4784-8517-dd90b73ca276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79fdbc30-9aa5-4c04-bf73-5e4a3299cb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27571128-de4e-4210-b57c-9e944b2f99c2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231f4d48-bf9a-4380-b01a-574b5e7957ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5981010e-8555-4013-9050-047806b908b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5bde88-a164-43f4-a478-536b7337f49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "363a1cb2-5b1c-4249-84a4-ae9226861561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7a5811-b26c-4794-8448-1ca6ef07d08a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffc7ca1-a405-433b-abd8-4cb8a311c648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da699775-ac30-444b-b920-2570c0b97d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44a3c8d-d3fa-429c-b66e-09cae4ae2fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d84a934f-a00b-4be9-9d18-0a2ea97dc8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4d18fe-69fb-430e-ad14-5981aaeddab4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d5a12c-86b6-4ced-b161-4653a38befb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5bec1c-1bf7-4ce4-9822-6d77d3f4cf35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5eb7cdc-9215-42c4-a0d6-4889d6348e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7116168-f851-4bc2-8010-9d1c4b25e412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05174e22-8ca3-4034-b5a2-83a00e4b6b56",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288e2ba8-733e-4021-a8b8-5cdfe507a353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ac7d25-86e0-46b5-904e-60c5662e6746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974b6a16-0ba7-49a4-99ce-19b162d89100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d5112c2-967b-4d32-aa75-1744be1e6216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4dadba-753e-458b-9c7b-601b0b4345ea",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f2768f-b5f6-4b08-b3fc-86c0cb11f51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e3f9f9-4790-4e6a-90ce-d78c66f9c48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a7581c-4c5a-4bc9-98bb-72e9171e4e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "155ad1cc-4f17-473e-b534-d93795a58fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2578ca27-d8c6-454e-ba30-db6e5ec97ce4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5978e355-27c3-4405-a852-c5c2279399a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b5a221-bd83-47d9-8e7d-ceccb9a750dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37266360-9cee-4a08-bb21-38d473efbfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1cbbb4e-2ea2-4783-a51c-184e9cedf351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b28960-c494-4646-9749-75b6c77e3e75",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7653bec-8c41-4507-b29f-43d253e01dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032154cd-be27-4326-9579-eeb5cbf00391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3bfddc-795a-465e-a96e-af44352333c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e29636f3-b105-48dc-8175-4213ec7d6b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6214905-b078-46f8-b757-8b798ee49262",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff2e69e-83f9-4524-bc37-5d4cbdde2ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133a55e9-d52c-4bd7-9433-6dd55990e451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331438f9-5fcf-413a-96b1-d8c6097f3755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc3057ed-cc99-4e80-80a2-80cef070a1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32f0de2-da37-4aa4-a129-759bed9961a7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b1235a-3d43-4487-8e0e-bd2e498dc90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a247db-c821-4ab0-8de3-614f945a46ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fbf5f7-5023-4684-93f5-4ba903cf77c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8271d8cc-13fb-401e-babb-fb9e0e3580d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a52895-f9ae-415a-b070-05b90d06b6e9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00321bd9-93d0-4bde-a56c-d6f16001e4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054d6494-c6ad-400e-b99c-85004037be41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751fc2cc-d00d-4b5b-b2bc-8c24e58b34e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e544313-3bc5-431d-a624-196b2b4fdcec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ead3a6-e031-447f-b17e-e8aa00f494c3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a02ed0-bac9-4d13-8bdb-a7d6bfc5deff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c89686b0-1b7c-4814-b9fd-663eabdd4a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7554d41d-e193-4367-8b26-1a289c3780bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "154ef887-1a44-49b8-a16e-fb9419a6c827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7c44e5-4bac-45dd-864e-ab5ee05016c1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f64954-4f51-4a2d-ab8f-260a27a00390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0005a7-f502-4ded-9a73-25dd9ea12db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c18105-4311-4995-b73f-a11e69c959f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "30125ed4-1fb4-48db-91c5-b590169783d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78c3dfa-c188-4553-86e2-4cd3115ba68d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e378307d-4013-4404-b3ba-67dc2059d53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833d68af-b1d4-47aa-9b1e-afdca3340edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78850748-5013-482e-894a-7cfb5957d989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29ee1694-22fe-4390-bf60-29dc851d0f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35288b3-27c5-4d2f-b3d5-0af94c165ecf",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e70339-45ca-4baa-9777-e4a5408e1055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7e3d99-094e-4991-bdcd-b12c1c65b552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f30bb12-428c-4585-9036-7936f9d41d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "323472b0-de14-4562-b7de-6de8d0b5fb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3052f94e-22b6-4189-b39d-d65eb5db6229",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0e1797-aa44-4e47-9ad0-8f5d427b284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4e6410-121a-45c9-a2c6-c5b8837907e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248a3905-72c1-498d-9d67-dcf5055f0674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "562f10fd-80f3-4aed-9311-6c5d8a5f5849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b1faa2-801d-4f9e-8366-50dc840e5bf4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b825419f-de64-4aa6-a21b-0b767e7eb396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4156418c-8376-45f3-b6e3-c95fa2e0b68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51579ea2-2b3c-4b25-b2f2-27f804991bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9a39d6-ecf2-4ada-8258-7d9713046b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce05b704-b790-4d93-8116-7d2da9065dcd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a046931-1e10-4a55-9392-91b152b249ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be6135b-0452-4f29-ac1c-1a6a336490a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255fc865-7543-45bc-ba9b-5697ccbacc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba77cf9-0998-48b7-ab80-467b5b8d3857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4c7ed7-6a71-4481-a6d5-4c11d91922f1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dab619-4b5e-47e4-9027-38d6069ff0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc82361-2ae6-4f8d-9b51-dcc89e0688da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5721c7e5-1327-4b9d-8a5a-c931a8bdd0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f96d73c0-0a3d-4fbd-8af6-daa6f041fa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe69c2ef-6610-4e15-b71d-5f6a29bcb354",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dff814-fa26-4363-a191-07bfdec5dd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26573c12-aa72-487e-a1d2-3ce2865a7698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a732b7ec-b612-4462-80da-9dfc5ae396e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a66cfc70-3c76-4d46-8844-1176a8e76a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d358d8b-54a5-44b2-88f9-7aaded43112c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df130405-ac14-432e-984f-c1ab2d784ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f9224a-c9d1-439e-9fce-d79dfc89a426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66edfde9-b5d3-437e-8ee8-c49b6d1675e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e6aa38-9095-4590-bc32-ae67dde345e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50239e47-4b15-40f2-82f7-ff485a1ee1d2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be5aaa8-ef8a-4262-8cd7-864e29b50904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726d8578-637d-48fa-aa57-f71329d43d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5f126a-dd68-464e-ad56-1a0816d4cd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba522cf5-4eb1-4394-a995-7ae1f234c417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69bf4b5-a876-4814-9eb9-ad73d1b896e6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c5bc48-6a98-4960-a4ab-0d2db23a1145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920e7707-eab4-468a-a3e9-31ab5887292c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde133f3-a2a5-420d-bbac-571e34c9438c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe0b75a-fd24-4d46-afe8-7125b4f90bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c372a32-7f4a-4f60-9666-be2783f92a49",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ff6def-64b5-4bf2-9dd0-e34083bd8ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7345209f-b5d1-48de-a672-beab99bc7969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2502a1c2-0f40-4133-aca3-7e1f74c48b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa64c8f3-db78-4df4-b8e5-381ca28575bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f86f9fd-218f-43e1-891d-6d9256ba9e33",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf9809e-53cd-4721-99fe-1a03f365b94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ed26ed-dacb-40cc-a7c2-7045c696556a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c21715-d9f1-4264-98fd-36d34d63be62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8db6ab04-3941-4d42-a7bb-bc726daceb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438f39d8-292a-4ae9-9146-dda680526718",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b28248a-73ba-4565-bdd1-70618a7636ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01598948-2beb-4fd0-ae69-d24e9e1b2c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91c80aa-95fd-478c-84dc-935edf12c52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6f353d-6c45-4132-8ee3-0fb440220b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c495092-9199-48d1-873b-70db4f3a1b0d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbb5b6e-ad89-40c4-a12c-06836079eb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c4f785-daad-450a-9462-7e18186aedc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0353f17-222c-4341-af2d-1865d2031c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f044dca0-114c-4933-be7f-b6f5481f4291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbe7a7e-f0e5-4cb5-9dc6-5c013c4eec81",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6665d5-1e47-4323-91c6-7eab0ea7af4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af531c9-9b5b-4212-8752-ad9ca7dc30d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516239e4-b031-4bba-9851-a469700eb388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54719b0d-ca57-4381-b3d7-5c85d52503d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357ad434-4331-4c82-bb0d-5405bce96816",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bfa7ca-67b6-4256-a1ba-ae207a344c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f63f61e-9907-424f-8ebf-0b57577ea6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3436ab-f310-4e66-9dd5-09d36dd04c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c91a4e-6f8d-4b3f-b6a8-ff5b5d39a237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2597bb21-aad7-4ce7-a6f0-028a79f870c0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c0d7a1-b08c-472e-bc93-8e44a31eccbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c556d06e-9905-4e15-ac85-b1527eb59119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fbd261-01c4-42ab-9e0a-0def5b4f45d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "55290522-bc04-44c8-b433-f19e22871d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee68644b-6f97-4092-959c-c12ab4b14797",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "904e3d65-9405-4036-b8d8-cb97df242ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c35a760-b4b5-4d15-9b29-5dc197d19653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacd78a5-c37e-4017-ab30-d3a0332ba6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0c1ce4-8a75-4549-abfa-29bb56359bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79ea48d-2920-4aae-9568-acdf3b4afef4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2230a1-efa7-478c-9856-93892cf76588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa8630b-8d2e-4b7e-afb8-afd1b0a93ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e098b01-5a59-4824-9a63-2f7776566ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac90cd5-21c8-4272-81f0-7abd2264d8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e15457-6b40-4694-94fe-7d060a779ec8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d42595-f9c2-4e72-9eab-5292f3b24811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bef9ed-57d9-44b9-8e3b-c02f9352e87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa72eb27-df8b-42b7-bd12-7fc066870f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "204e3820-4bdf-4ae0-9b56-c792182f5f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8517bd14-0fda-4bf3-bd61-88d730b0f6dd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdcca89-c7e8-4663-bd70-412a4870ec57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7defab8f-b676-43f8-a9ba-53aae8d58451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0893ecaa-d82a-428f-9ccb-d1b48e5b4d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c86f4e9-cca1-4fb2-9739-38c637e927e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cadb48-c237-478d-86b7-4e32a08f2690",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91aa4af2-446e-4594-bbff-c5b15b6cbcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda7f0aa-39c5-4a2f-b758-55277d47c406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e049b7-d774-40e2-a5de-219041360239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddf3840-73c4-47a9-8d95-1669eb98ff32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c40077-821f-489c-b46c-20cdaeecd628",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd68f2fc-08ce-45b0-9ded-2e0b776de472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dccc5e2-3f66-400c-8f15-e0df089c65f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef1d323-ce11-4ac0-b1f4-69096ce0f580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "93b47313-6dd6-4bdb-8f9c-c0e4df43fdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e52526d-3c8a-42b5-8cfe-5527b9a17287",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6327fd-a227-436c-8898-443f8ac4fbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c650f48d-fe4a-48c2-8c8f-222d43c4191d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26cc080c-9622-437e-9a05-4cf84a8a56de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a799e0-f583-42b7-a6ff-bab545e27d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88aa9f2b-8028-48ce-9f25-cd4b04eb9dab",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1f52ea-dc88-4438-80d9-1e7bd64456fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383d4af0-8f39-4aa5-ad13-944508958b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c166860a-a45d-4de9-8ca6-25c8f53cc97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "181162e1-6fac-4306-8be1-74f6a676183d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5917ba64-e4a1-432f-a248-cdee667befa0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26504f8d-9dbe-48a6-9fab-392735eadc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2969897a-82fe-4f6a-8dbe-593ab712e192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af32aa3-36c7-4d31-9ddc-d1d8a0f7abc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2713497f-ca40-47cb-ab2d-d2d1b80b9628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd449098-ef9b-40de-80a3-a8d10b8dea3c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f1634c-d8cd-4e09-be08-76e996a65a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be3f706-3b93-4004-bd32-014f00109c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e13a9d5-6502-4dc5-972d-92c4c8a0c18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3bc7ea-6a46-49ff-90b4-2099dc90d503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c0bed4-76a8-4d08-95f7-235f13b63099",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faeb6d16-c35b-4124-b567-4823c1c6e82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6c95e9-ac16-474c-b1bc-550264e86e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4c94e0-f0bd-48c1-97c3-cf5088caa773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1af86aa2-d62b-445d-b01d-89fcbc115065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c0fad2-f46a-47bc-9fd7-931153ab5c53",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d57859-5f09-4d06-a61b-63f4fa78b555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a038aaa7-5cf3-467a-a874-8779b11ab13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6634ce1-3d3a-4e14-8dd1-4d760310cfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f07446b7-1c42-43a2-bcf6-c58af02fd2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff46f91-e2f2-42f8-8bf7-1c11a1c67db2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c537cebf-593d-482a-811e-ef0923807bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31de05df-4039-4e27-a1da-c998c3878b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adf797d-176c-4c7d-8177-e7f1af8e44fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f92aba7-9892-4bff-90cd-79c215af34f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd22fbf3-0bf1-4ab8-aad1-06dbbbac7443",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0f4fd2-5811-4e69-8409-50f67e581733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd942327-242a-4fb5-bf8e-fd469120cdf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79007b50-f783-4724-85b5-da982e4b711d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4496c8f5-2c82-48c8-a107-c6b6cf995352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9e576d-adae-4702-84d9-3972c64383f0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d331254-d633-4f65-80ac-5c41bb032c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ade837d-66cd-4954-a638-c9baca29b252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6479670-9352-4ce3-8c28-8f481d6c995f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a32bd5d6-eeef-4b1c-94fd-eb66d65f77ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3aacb5-7f31-4a18-9324-3b01f78cbd3e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc75144a-ca29-4fc8-95d4-72c212cb1191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2cbd95-77bf-499c-8ead-24f4a581a31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d5293f-aac0-4131-8087-0c1328adfaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "118aaf58-e405-42ed-95ff-e1bd46f7a386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f7f28f-08d0-4340-85bb-3ee032ed30af",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdf61c0-f045-40f8-aea8-d4c2c77abbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1ff9bc-2ff2-4630-844e-7544be547601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73313a00-c19e-4666-9c22-56f118bbd56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59228c87-8002-4285-9a64-9f8ee4b4cdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1e78b0-0e63-40ab-9cba-ba4f9db1450a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596b2d1e-092f-4f4f-88c6-6f5188d5dc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7973065-4937-42a5-b86a-d6ac034d57fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a57d0e0-61f8-484f-bd59-2c21b2c3c821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0378a5-c6a7-4c9c-910b-6dba28319c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b26533-9754-43ef-ac43-5e7dfc003dd5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ff93ec-87bc-42ff-9794-3e8975aee302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b9e242-2df2-4c64-929f-ec0b0d715a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "babea84e-ca2c-42fe-98a5-a809d02ae292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e21f71-ccdf-4a44-90ed-c287ec687bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2fa642-c681-410b-9efe-647131debe5c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f94463-632b-4786-973c-a05ea6621ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf0d37f-a3f2-48f2-bde6-0c2cbd2a7dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e961ea-40fd-47cf-8a36-db7e9896f03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86e3485b-7826-476e-8ea1-8edbc1b71c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37514817-06a9-4752-92b3-707d61361218",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50b5f3c-99a6-48a6-81cd-71f0d803e35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1305d957-a44f-466c-b055-cbc9dea17662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0721fb4b-645b-4946-8e0c-454b589c3e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ce34baac-e350-4709-a700-a1845c0c7c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce05a00-15ce-4076-921d-ff81d5aadc78",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad564c67-7bc8-42fd-aab4-6bbdefdf6093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f2f360-3047-42da-b7f2-845115559be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6252c2dc-8ea1-4611-95c6-dec8febe7000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ded154fa-5a2c-4e47-bebe-ccaeec620647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f223355-638f-4e98-a11a-c38845b88087",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c79add-cad6-4801-8f35-3a04a2db12f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1550e5-578e-413c-b425-38cf17109439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c6fce3-0376-4be2-bb77-560fc795a381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "429ad67f-63b6-4d05-af5a-510db3a858f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be214c81-6cc2-46e5-a4ce-b6e4c111c190",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19343ae1-1abd-4657-9f8e-e346d0e86db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8487527-6855-432b-8c33-0a3d9f580cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc769cc-1f77-40ef-b47a-b6e1aa7271bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eceedbf-88bf-4e63-9207-3fe131065139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bdea6d-b020-42bb-96c3-3d20b07c92cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d28302-4c01-45df-ab7c-5d44141432fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e50e69-1101-406c-ab94-2bbb7c57f461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669ceffe-1a30-4143-aba9-ca67c18321ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72f253dc-1aff-456b-80df-a85fd80bcc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f50f57a-2763-4ad3-97bb-aefa4aa00588",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d264b99c-089e-4b06-91ee-1fffad704664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff313c3-cb78-469a-8325-adda77a873ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee07230-5ba5-4c03-9c17-b13bc09732a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "251ef92f-c362-4b59-a89e-1e9ef673a479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db3bbf4-330a-4626-9b08-8e6fa39b4064",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c16f7f3-950d-4efe-8853-1297c57f8b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a49170b-f258-4bf2-8540-e281daf5641e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8117aca1-9563-4ed2-9f49-58605625ec00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "160822b1-d173-4150-b44e-61a61874b59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a0b18e-476b-4877-9a6f-f3476cb02ba9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564c25e0-0df1-49a6-aabb-a35de8a615fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abd9f32-2222-4b15-b044-8f0ac53827fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43820b7b-137b-4ffa-b312-9a2045a3c7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a493e8-d4b2-47f6-893c-2195fd4cbf1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c055f58-3658-4c71-ae05-60ef126205db",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ba9331-2103-43a2-9702-092e85af8375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "503415b8-bf6a-4ebd-9ba1-8e8dee5610e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980d43d0-0703-47cf-bc46-794877057c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "467f422b-76a2-4fe4-ab17-74ad46a8a108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff13501-6a46-495b-a065-e12ee4aa118e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44f45ed-a6b6-438a-a6a3-3d1929dc135a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92c4e05-be36-4f59-bb3b-6ac06f441939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7511dfc-1ef2-4092-b9ca-c789c7033613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54d84604-7329-46c8-9c19-a3162d16173a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8819b4-0e12-4345-a57b-d9d08d4b515b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9ec791-4cb6-4313-a28a-1ba8df30bd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ea4bb2-902e-4170-b854-4d6e8478f5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54597385-6063-4268-a4a2-dfeb84df6291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf2210d-3dd7-4b06-8fd5-519c3892f8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4409c03f-3fb5-463c-a4dc-6cbd6807622f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5e293b-2bcd-407e-9d8d-5b6f81f50e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a27260-848f-4ad9-9281-827ff70b7694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82f3ccb-d321-45c0-81e7-a43cf0a7216a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91253b2e-e9f9-4749-b331-e881aa247474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece76cd2-b433-4e67-a03e-ff0c879beab1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7edebe-ea89-4b1e-b472-cd364bbc4651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f72352-51d8-4745-b5aa-e936a3ef6ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb931bde-8a1a-4cef-bdd9-68dc9759f0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d36a009c-4507-4706-8d7f-54828f49fa96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fcf1d3-aae4-465f-b826-cf95635aa8bb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5026c381-adb3-4844-9f4c-d31a3c966a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f7092c-32cc-4280-b95e-83215455c7b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707c1244-1861-4cd8-a7c9-e0573f80f1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8372573a-bca6-422f-9f64-5234d38e5970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d696e74f-bb16-49e9-9fcf-26daea2a4ccf",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d637a4d6-d610-491e-ad33-a26d52d2b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8343e0a-60f4-4cf2-ac7a-000cfdfa12ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a45e3c-21a2-4372-a7a1-70bf37845891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0b6fa5-6be9-4e7a-99be-82279a7d4883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cdc8c82-6348-4a78-861c-afdf93c12f2b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82cfb20-4987-4cdc-a0b3-455dab1c4526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84f7bae-4743-4985-a192-3c72026dd33e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e77bae-7ee6-4861-81bf-9311426e867e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1c94da-12ab-46f1-a1b4-24dbc08dff58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99447d9f-b331-4253-9fc0-0da0d057985b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f946c74-4061-4a4a-a256-1f624234bab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d207b1f-494d-4234-8989-29eb01757a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f557957-b87a-44fb-91ae-d5a8bc245553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b277fc3-bc11-4cfc-8849-2e01bbcec288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1711288a-ed2c-4fe3-8f1d-056d20b9a752",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bc33c4-279d-4488-b3a0-4575312c9652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8289a666-e994-4414-a164-c3938d17d368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b95a498-62d9-4db0-aebb-c8455965bf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "43c6c29e-cbd5-4c5d-9ea6-6e3a39bfa997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b212a3-5f1a-4dbe-921d-f1980f85737e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec849ec-e7d1-48d9-8c83-27efad62d223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda20610-10a1-4b16-ab6b-d4dee4f538eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7c7372-5cae-4771-b888-0c1db7dc85e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b8499a-113b-498e-8114-01624a747598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c86501-b2aa-445e-9dbf-40dcf13b805c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcee350a-895b-44b6-a28f-9dc083fe867b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d3e8b4-f8ac-476c-86ab-9a9ce6a09b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90b5b2b-666e-40b4-98ff-6d87c64779ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea56c5e-5e45-492e-b821-c860a29fb0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3dcd8b-c122-4afe-b92d-a533d53bae63",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbdedef-2356-4eed-aa74-e0f74178a26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10b254d-4ac7-4794-84b4-f60a1a18cf5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c387b23-cd92-45c0-8162-7433d2ca9e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ed61a8-9fbf-48a2-a932-e910c76b273d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59cd656-3f40-4172-adc6-c48931d9ad26",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec829f6d-7cb1-46fc-9a8a-a4e3419db31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4365d6f0-e10b-4f5c-b4cd-b0bd1fd87580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9997bf1e-bd79-41ac-a2c1-442bc01c2761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbcdbb6d-a777-4d39-bd16-d4eb0964b399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45700a9f-1138-477e-a45d-e5bacc5edbd7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5f17e2-4b25-4a84-ae39-2f94ca127119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f951d3-1ac2-4bc4-82ff-c77c7c4b9fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c7a625-ac9d-4924-88ce-2cc1a2d5ecec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1abde8ca-7d8b-4b85-bd41-2e9d022c996b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34771a5-06c6-4339-b0b9-da9953a7d3c1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa2f447-b832-45ed-a39c-44ad90f90e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3fa79e9-8b21-4b10-bc20-16b2c561f62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db04235-025c-451b-9b28-c1efbae0f261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04d4bcce-fd44-4b0d-970e-86d8d07e9ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a833fb19-4e57-4c93-834a-b34bc157954b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d25905-f72c-4e0a-b2cf-8651ed97cfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe73377-34f5-402e-ad10-982336c057c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ace043b-1630-4500-9f8d-2fb20bb31b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f9ed758-f800-4f3f-b0a3-2ddbce95b8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b52446-f7a4-40d4-95e5-f8a3cbdb783a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6005620b-0f01-489f-a680-50a7fe1b36e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0e4da7-154b-4f98-9d86-c3e5a2a42fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13b502c-049c-4ac3-9783-9323651a17d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8345ab9d-06a4-4ce7-9662-b57f45ea7382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2012874d-f283-4bad-a85e-a3d193bcdc8d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9689de8f-2828-4afb-a9f4-fd538fdc9c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a3f2b7-5850-4470-8678-837d43474f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0b863b-5391-486d-920c-be7c582f5554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35e5b282-8ef1-4e93-9c99-b31631bd3723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465f69f9-185a-4773-a23d-b9d50661ff82",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb223fdb-e7f4-4380-aefb-c620f0b79afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f691e81-d6b4-4f06-8f26-27b013b6167a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5370aea3-b890-465c-8540-1416c56748ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17c971a5-6062-4c81-90dd-b1dddd94512c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efecb3ad-7d7b-48ed-87cf-3fe4b6b3018b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a3f0da-3213-4362-a21f-40b36fa99d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be809274-ad03-4b8e-b228-12ac6f957070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb182cd-798f-44f6-aacc-f192a5b93c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb3207a-3287-40f1-8e32-e09eb85b48e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3d197a-e0cb-48e5-9cbf-2a9542c4d3b7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fdc1fb-8e88-43ff-9ea5-9ae148b1fda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7a24ea-b04a-46d0-91f2-7d9b67054994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b095ea0c-6de8-4c0d-b854-95b8b17cce90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf0f920-ec00-4b98-815f-75f88d881c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b27c9cd-f02b-4342-aea4-a9fc007b5a07",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0179e4-c8be-49dc-a840-ac82a1e1c3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5196458-2e76-47fe-9e50-de3c9e2ff9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8811e0dc-0224-47b6-b7de-1b1c429f2729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c70abf3-d906-428e-976f-3a72417472ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c768f0-f038-4151-84a5-8fbfd1afe334",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc30a9c-f2b7-49e4-ba16-4fc9b4fd3792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728ccbe1-ae27-488a-88c7-0a39adc22e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64734bb9-2fe6-4ed6-bab7-c32cdc4f6dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5027621-91fa-4449-8666-a0789f257141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76b4aac-ccad-46d2-8e90-ca9d1bb57c9f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345964db-4e11-4ccf-9467-7f1c721eb1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0339b76-2208-4222-a554-9e785f6d08d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e8d243-48fd-45f4-9f11-5c9f8ca235ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e354dd7-e8d3-44d3-adeb-0fb6b17056d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1bc9e5-b69c-40f3-9d13-a1e4fcf59aee",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b93ad5-6a22-4d3a-9a16-9f3baf6f62c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45723d1-1bd9-4bef-aa57-e176c19b5009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54a80c2-6c17-407d-abed-b6f5b3b33533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "39e1d4a9-b96c-4501-8415-ef8d3cfbeb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb00bc9-8ef3-4fc5-b36c-04b25316360d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aabcaab-e205-47fe-aa42-73de70b78ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc9d6f1-249b-4cd3-bff7-c50db316686c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f89dcc-8fd9-4340-9c20-3af88d49fd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2090f7a-8df2-4170-aedf-cb93d2c59aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9158a785-0052-4dc2-9c87-6aff3f1c7eb8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651983b0-4282-4961-9e0a-641cfd8d14d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762f66d7-e157-4a3e-b7a1-a8d5bb7afddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1222d7d6-fc63-42cb-891e-f0e02f4397bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5287878d-4b8f-4a43-b6ea-1c30d9efe545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf323fc-382d-4cde-817a-5c9ba60483e3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80e268c-1e13-4fbb-873d-4438c4b71995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4ca90ec1-e26d-40b7-b282-033994269c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2af1853-3c33-47bb-8777-fa2b3cd910b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7758776c-42ef-48ed-8114-b1bbd8c5e94c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2ce97f0-681f-47ce-9ee6-426ecdbb0480",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb41cbd9-55b4-439a-8c2b-cfac2e9db708",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab033275-fbbc-4395-84f7-4b0504fbe01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddea32b3-7e3c-4e90-941d-e423a45bdd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3815211b-6389-44b0-bc87-dbe243fb8773",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4af3c06-1ced-43d8-9f4d-140d79a9cd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a7448f-dd55-4f3e-91e2-236e608dae25",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d860efb7-725b-463d-b5b3-195e63f344a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3903360-e05c-4c69-808a-b65020040214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c8480f-27fa-493c-baa3-24985d073277",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da9c645c-b6ed-408f-8c83-fd0fed63a9e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe247a62-0caa-4816-9f3a-91955b729ab1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "084f552b-049e-415d-97c7-ca6c6c6b796d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed6b81ae-4dd2-47d2-937d-b150808b5411",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69bcbb4d-2358-4e56-8eeb-16bb9af1b11f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61eb5e6a-f9b5-4ba9-b39a-0bd86f2d0433",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b660be87-a572-4242-b48f-d204d4c47a91"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6d5ad3b3-555f-431c-b2d6-57fbce77ee7b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3983309d-9bd1-49e1-989c-d0a0bfcb14fd"
                }
              }
            ]
          },
          {
            "id": "f27c373f-542e-4943-b0da-f1401e388094",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b91bd551-d350-4765-bc7b-f79c1c5bcbc3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4cb1d17-d0fa-4fae-9907-4d4b07f6b63a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fde6bc27-95b7-4017-a3ab-6995e5c4d269"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d32be47-03db-49c7-a8d6-16b495de39d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c7219fc0-f7ee-4b2c-b2f7-1e8c51084b27"
                    }
                  }
                ]
              },
              {
                "id": "4df698c2-5306-40dd-bc3e-d464d76a005e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6d7ee96-0707-415f-84ea-009c48af2048",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc334b66-b0d3-4180-8209-0a76c28415b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ccdde36-ffd2-4831-8fc3-430f3c50b40e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2406c6cd-222d-482a-b7da-a8e21aaf2ae2"
                    }
                  }
                ]
              },
              {
                "id": "eea6616d-6b50-40e1-9a89-72e6fa3042ab",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62c10bf0-86b3-4565-8593-d7ff3f241b30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce95444f-50be-4d66-b079-114672bfca71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39dea088-0933-4cfd-bf25-d8831e4bc2e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8ebf32c1-3a9a-46aa-aee7-1a22d16a7233"
                    }
                  }
                ]
              },
              {
                "id": "6dd81be2-f6c8-4112-924c-33fdc33874b4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1faff424-3b83-49d9-b04d-0c50f8f5196b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "474e8655-2f2a-4576-9986-e024cada3e34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6875a466-9327-4201-8de3-c4b5ee72400e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "77df89b4-3df4-48e5-b9f2-32adfa4a1a03"
                    }
                  }
                ]
              },
              {
                "id": "c29decc5-1e0f-4d6e-83fe-27f5bb3714d8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51a46065-e0ff-45e9-977d-f5207285b465",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0a1444a-68e5-40a1-9292-f2921169ad51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b4faa7c-68ad-4178-9cbe-ddf809a25f2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d4755258-10b9-40e6-a948-77dfab1d0061"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cdd7997f-5181-4bd4-ba8a-98e7ef6a080e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe4c340e-117c-4d15-a1eb-04121e762c69"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0bce3e0f-5590-4aaa-874a-1e19e8d4e68c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ca51ecc-8870-4e19-a54f-36faa1a89811"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "394aa454-04cd-4489-9a82-61bd9555f1f3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b5c4daef-276a-4fab-8fd7-bf0f8624859b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a9cbccf-115a-42f3-85bd-da7fa39cbfce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97175a42-e462-4273-8729-de3e990d1a95"
            }
          }
        ]
      },
      {
        "id": "44acc87c-2a02-4d4d-977b-861bcaf1f6bf",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "398527fd-0ebf-4e9a-9b6d-3d75bef06c6f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10f806fe-89ca-4a26-8f70-fd7b5ebe7c0d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9349ea51-3fa9-420d-8661-03b8c62f1e79",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44336eef-e8c5-4db5-9dca-ae07e30a8912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e541c036-e8dd-4698-b3ef-a5eb8e473fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb83907e-c4b8-4c1b-b387-6c7ee2c50485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b230fdfe-7b6b-48e3-8195-1dc4e70ddbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8408aeee-fa21-4d18-8755-87d44f21a50f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b9a4e6-3174-444e-8d38-f918215a18d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96f261d-fe26-4d22-8d52-a02fc9af1da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282d418b-5f24-4ebb-b367-df8384966a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b67d6aee-5f3e-4616-b3ec-69905006e35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a873e043-7094-4c16-85dc-ca7efcb18e77",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1b455f-0535-4038-be3d-f3ac9e11030d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0eb5fc-b1d5-4c37-91b0-01cec034f7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e26b0d-51ee-4843-bc91-f75c1c123170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f2ca1f1-2d3e-467b-8696-78882efb553a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a583b33-9cf3-4c8d-b685-3750fbbce23b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c954ed0c-b7f2-49bb-9f37-8f87a79b2aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0372ed-19c1-4017-9bd0-4960d69450cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bab254-1010-4887-9f9c-25457caa764b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93e1011a-887d-4859-af85-2fef460fdabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c1e579-4db1-480e-a5d1-bab4215a69d7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed458eb-507b-44cf-a1db-7f58759d9655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f682d86-ea9c-4b81-aa1f-e5bffacddbdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b23f4b-4a09-4814-9877-5172f21119f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f06b3f44-2515-4215-bcae-feef160230ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b1acf0-c078-46da-ae46-9d24a8263aad",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fca210-b552-4ca0-8069-1a91b1eea608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b700e46-f903-4d05-b833-f2e067d352d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44ab968-a58e-4f34-8318-e3e1ffcaf7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81d87833-2c8c-4724-a37e-236881eb0938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a7b8f3-6c65-462d-beb5-9f7423d02eb5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8daa33c-a4d5-41a0-8928-311948cff0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01fdd870-c178-477b-97d0-df2a68e67808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c871e89-f259-4515-a14c-8c526d742548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "925bd9aa-6c36-42ed-88f9-44fb728b67b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59bff68-5c66-40fb-b29c-fad1cf702673",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf97a563-86ed-447e-800e-2c37555b302a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab349c4d-d6ca-4a5b-9c2f-bee26aac85ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98993d5e-fdb4-408e-a733-efd876239738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac61c15c-14f6-41f6-ba9e-6d741ee6be60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97761b3d-c4b5-4881-9c35-45bbe264713d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19ee865-cf0c-4dfb-9688-e317627242ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7f8461-de80-44b0-8d6c-de02f78e1dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e819c21a-47e4-417e-a46b-f9a8f83615b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "244d4f60-0abc-49fc-9e25-86b9438ee0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e10c1c5-d8bc-44af-8b1c-c16ca26afecf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e069dce1-76b2-4d49-894d-ce1426f200f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f67a7ce-ef74-4472-8351-24c108d0a17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913dafa5-4cd9-455c-a0d3-dca97f3c20f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc55a38d-c9a1-445e-9133-1ce8859bfb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd02791-f2b8-4c9f-8f09-9071f06320d8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099f9df6-2aad-481a-9c46-b8d2c34b8c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84281a09-b662-4572-9d0b-f504c804f755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b84f8a-6d54-467f-a3e0-9e3dd2a930b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8e2b670e-7837-4d34-a3ac-42ccbbc6419a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12e4a81-cab3-4ee7-a7e6-2ca5f58b61cc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8196822-1ffd-4a47-b4d8-7105b97c5316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5914aa-f62b-4868-ab03-f1836616d64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d254dd0-205d-4f10-8155-04f61f63ddaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce105c93-0206-4503-a0ec-ad6c795deb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456e2dd8-b5c9-43d7-b13f-fe2689ba0501",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad82f5c-09d7-4468-9347-d1113273af77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d70ace7-98d4-42bf-b924-184b5b1993f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749f2395-c2bb-46ad-bd30-9cad2c0331de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d53acc5d-c228-4b2b-8603-0d27c3f2373f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285c9afe-19f1-4a6d-919f-93e77ebfe2b4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c09a58c-9bf7-46e7-9b78-12e65e124a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5169a2ca-9a39-4706-9172-f5fb07fc54fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4fdcbe-7087-40db-9bd9-75e9c1f7787e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a265efeb-336e-466e-a88f-f77f26a6e0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca48c1c4-1314-4b5d-86a5-d2d72be5ab56",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e38718c-2f08-400b-93ac-02a65cf48e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97be4d03-fe07-418f-b0ba-e69f4c7b3ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409740dd-373c-4027-81d8-0cd56ec38a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3248dc-57cf-47fa-ae57-dfbb773e1c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d51124e-44de-4958-bd0c-22b019a73102",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21312c31-7fb0-4415-a0ed-ba99f31d5712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86ae008-42f7-4946-9974-7ffc317ab651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8000f3-0c8b-4373-860b-cbd676423d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ea5db4-827c-42e0-81b8-23d5b62baa07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ee6792-9d0e-41cc-9169-ef8d0fb43f65",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bd75f8-d4ec-4d00-94be-d440113b1429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862c38aa-3878-4736-b7e1-06f7042df4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f03c5c-8424-4d83-b9bd-f0497d50c0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad9f87f-aa60-494c-831d-0425c52df882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a9e417-faea-40df-b7ba-3eb9269174c9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347a2e35-74d3-421c-808a-2d9a0150d7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b62a41-5ea1-48b1-9727-3275fb6ee3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834e6c74-d5de-4330-89bd-45d3d7f44aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b08c6ea8-6281-4e0c-90bf-7093b5f5727f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0582ec-f416-431e-8023-5e45bbd29038",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd67d7cc-6182-4cf1-9df1-ed7b9e2039c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c5d249-e9c7-48c5-8b4e-fc78d1fce9f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c6e152-b020-45fd-845d-6b7d35211600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e88b800-75d3-4e5b-806d-19a35d988c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae418d4-15f6-45b7-acbd-32c30593d277",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a26d913-cbe7-404b-90fe-7727d587fac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6caa218c-73ae-44f5-ae84-3a4453d6d4c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33157d4-9219-4248-8c9b-ba23df8f35c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d521033b-b661-4acb-af7e-310faba19813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca801e2-3095-46a2-b27e-4dd3eb93181c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e2038f-c8d6-41ef-b380-70983119db02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90d308d-2f03-48e9-97ea-7508df1129df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029348b1-78d8-4ca9-ad2c-d3954c999444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a04fe6f7-4934-4791-9538-073250569166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5bbc9e-40ed-40a2-b272-231384ad1210",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed57ed5c-0be4-43ca-aca8-648268d3fab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e0f09a-718f-4d75-8d97-a1398daab370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc6ece5-29a1-4a9d-98ed-f3b0f8dc0081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87f36a7-1eae-4278-a6f0-ce3bf65a1b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ecfa56-91d3-4c1d-9304-44626e6305ff",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ab8dd6-ec20-4bfb-b9c0-6f5254156b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e072f0d7-de2e-49ab-aeaf-e1ca9e7eff44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c04816-9b2e-44eb-b279-c9e41057a0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb6436d-a6be-4486-b81a-4ad4c42495fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eba6bfa-f564-409d-b476-3d24dbc70743",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df1dcda-f068-4802-a85e-318d67ae100a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f47ae28-6a21-4d63-9b92-7433d4cb614f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976be83a-f458-47a2-a249-11030ca5cd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17e90824-3bd6-43cb-a0d1-2ef63caaf407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fd8ea5-4bde-4e96-9801-9aacdf7b5460",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb0be88-3dbb-4864-aa6e-36f5d1950a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1ae1ef-b8ec-42aa-9f8f-aee0cc9f5070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69e7d0e-915d-41b1-b6c8-5c4a87ab601e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a35d14af-cf95-4be8-b629-cca5009c4047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb781cf-6d96-4ca1-be98-cfd5afcaee16",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592f42cf-2e8e-4dfd-b154-7c09bc86e350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e784af1e-6d50-4518-8efa-ce54178310cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a0fcda-386f-4822-a82a-17cc91c142bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abac5a0a-6646-42b6-b5c0-999655fee445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6cebff-f2fb-42b1-b8cf-59549868b04f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83aa6dd-5c71-4e0b-9b83-b248536be5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502f3265-e792-4ce4-a68f-830fb4fb6048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e8a846-3784-4515-bc06-a1cfb672942a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab391d8e-97a7-4493-adbe-fcf3acee22ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53625cc-2e0d-47e4-988c-51ef3a2f4b57",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0234ad8b-7fba-4dcf-abf2-176811ebb6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4164762e-0ec1-4d73-89a4-705d7afdb851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b308210c-09db-4d13-8e00-95ccd1301ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45d102c3-4357-48db-b614-063f20198b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173d72d7-d81d-4ce7-bc05-fe3658a0a5d6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d4a9d8-2146-498e-a3a3-98663204d81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112fe1e6-f9f2-46dd-89f3-44a7953b44c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2264d8-1cba-413e-945b-67e11a7589a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98a36203-1f98-4175-8b24-20cba0bec96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97a5a81-e5f2-4c00-9cd3-6eee78ae9187",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7765059d-4b53-40d1-a453-dd20d63a82d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633e451d-b686-4e5a-888a-313d274a7648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c34739-8962-413c-829a-4c50d3c75462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36ccc23f-abff-4378-86b1-0b3b866695c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941dcb63-5d36-4dab-990f-e8a54118817f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd550bf1-93fe-4f41-b5d1-aca65199f236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f4d595-3149-4563-8615-4261693ab6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7dbb31-e90c-486b-8f62-691d8c9ade52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1080ab63-f108-4db6-b124-a0319af87f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4702a96e-ae66-49ba-9204-9761db1ffbcc",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b26a3f1-c484-4a26-94d1-730bc01a8824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf9d858-64aa-452a-b887-852d58c14630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10edbc1-f539-486e-a922-ceafa67ad0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1de4038-8668-4d89-8999-059ac0c6ee68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "424d4aed-9927-4ff0-831f-3fd8895df9cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c0dd8d2-4349-45fc-bac1-10b928642069",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704aa8f4-54e0-4921-9929-3968755f1baf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f3ef2a-a3b0-4b32-8c5e-7284633e6947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8735d5a-e058-4711-912a-dd58eaa95a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd18f557-41a6-4f89-b1a5-eb6251d6f3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b97f427-725d-4399-812f-fe374220909c",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b7bf3a-374e-444b-be98-f50c854b0615",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7b00b998-cf8f-451c-ac28-cd8b62d3d94c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac49f1bd-b525-46c3-af00-79cd1b49f1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b14bfee-ad96-4339-a4f7-c782bcf6aabc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "719dfd4e-c08c-4dfb-8494-067f7317fd1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec726f41-3532-4941-9c86-cd24ede99cde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "378dd3b2-554e-4fff-bfb1-a2b820bd0fbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdc25cd1-9458-4703-b0c3-dd8539929b4b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d08c798a-8e02-4682-a12a-aa5825d18046",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b15745fb-06c3-4988-be5d-d56862c88a93"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa363752-c8a2-422c-a556-99ad95a77c15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f302aa0f-b978-4e51-a258-95ecfbf14ac9"
            }
          }
        ]
      },
      {
        "id": "c0ac7c11-bce0-4357-adbe-dabc42dc8218",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d23baa56-99de-4354-b2ea-f88b0568e7ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e300ec84-2284-425c-a249-c9885c619f14",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "25acdbf3-f824-4845-b4e5-06a935460b06",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478915a2-ca80-47e7-868d-c5823e9af735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3272a558-3f2a-45d6-8b58-f3e833c8f1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f543af9-9517-4239-ace2-75e38b5df102",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b726d025-e3b4-4a04-99c4-654ab323048f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea61a4e6-77bd-40e7-a33b-10c6c696223c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b680fda-3fde-4930-af64-9a658960f174",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48dd67e9-0755-4db9-88cc-6c879929500d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eef6d7e-1d72-46f1-8153-d1df47e420d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a229bc16-dcc1-4e59-bdfb-1cc90e6c5779",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59d8d42-fea1-4d88-a8f8-5a6744ca8e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce63ff14-caa3-45f8-96f2-691d80a33587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8c65a9-c033-4db2-9066-80eee6519d08",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a338fe-49e5-4e85-9633-0bba8be363ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf6692d-b54a-4777-a90d-5447cdb764d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c722126b-17f9-4641-9f39-7bc06f0ef31e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84bdd24-e58c-4bb7-a06d-f3c7b923457c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b697935a-265c-4909-80a0-727ee0e6cd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d82f46-58be-42c6-b5e7-fbdcbc57eebf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7533ece-3903-4c93-8d0f-372a070bbf97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b33d67-a912-42d7-82de-584363b630aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0447ac81-c23a-4346-9acc-f22e35beb6ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796f5eba-8cb0-401a-b84a-e453a97f691c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d49046e-4875-4928-9fb6-14de860bfc3f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13218faf-2d7b-4db9-9573-0161d5311348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a40fa8a4-8545-4c1f-91a6-92c2775f5a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69018b18-7269-4a9b-93ef-23328dc19d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e100de9-f673-4a11-9e45-25ab0b3f411f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4b59b5-709e-44c5-9c19-a50e2849ef27",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06dbb633-0e3d-4407-9133-30c3167e9862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d95f9398-32e9-4741-b394-7023aafd128a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd7b3ca-0f37-447b-a923-3e759607fdec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cc847c-745d-410b-ac8f-ddc2d6eb497d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accffce2-9a14-4912-9480-f33375e77c0e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9d41c9-01ab-4084-a132-219c8ebebb71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a740bad-55a9-4d47-acf6-491878fa99ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940a7e65-9d9b-4352-81b2-f8eea034daeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e367653d-a339-4bf7-b7c9-8c9f338a2026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a4cfbf-f42b-403a-b895-1a7512da18c7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4dab166-10c0-4505-b04b-42f3dece34b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7cd8aa-af5f-4d43-90bd-d707a9b7892d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5062dba-4d6e-406a-a8c5-68f920e09ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488286e3-4d85-4cec-86c2-92bb553fe8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6bafbf-7aee-42a2-a2df-4a333c24a2b7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d465923c-5ec6-4479-acb5-17f11fb6f31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed6a225-80cb-42f9-99c8-ce213ba2966d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "612e9481-35b0-45f4-802d-162197a46e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cac7ed-285b-4d28-83c2-619994b2d1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e125be9d-4ad1-41b3-966a-2d96853902f3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3436064c-c242-49ba-a2fd-810cb1047c94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc0a71e9-1dbc-409a-8885-5c652f34063e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496a8b70-d425-44d9-945b-97c985cff721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9274c5e8-9a62-4923-b8aa-36617776ad88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ce5025-08b1-458f-b5dc-2558c1615fe8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444881f7-060a-4283-a147-756ce1603e1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad958dcc-1460-4cce-9565-77541df0f6ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0437ef9d-0921-43eb-901d-94c9e8672b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4929d864-837c-4d23-aa1d-79f24775f237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c1abce-3349-45d5-bf78-ba7b44124a94",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cc1513-1c79-4155-94a5-f1d306a05649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a906288d-6825-4192-b625-b04014db330d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1699bd2-b19f-4998-85e1-b9ebee00a44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7e5499-1e91-4759-bbce-8d6238333d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5efdcbf-5946-4a1b-9311-2179f1e158d8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866d4c36-9a18-4c12-9215-0b366ce6ce2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39afbc9b-9adb-4b9e-907c-3cbfc01c812e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bad8716-65dd-4d50-8d1a-88be73cd2909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b611bfdd-8308-4970-a2aa-d86d140fed65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd2bf95-4f97-4d77-b073-88b765e71672",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82634b6-396e-4ba0-af94-7029fee7da3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e01e238-356c-401c-b47a-82614208eb92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd03171-9101-4638-ac4f-c81f8937f3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4aff30e-2dd9-4895-9977-6eeeb5a1f3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e04fdd4-c774-4a42-8fd8-b0e79a68dd4a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7a66d5-e2d8-416a-b9ab-4d9ad3cc87ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134083b4-e615-44c4-b065-345b475ad88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75dee5d-748e-45df-8347-30fe4893401e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0a2271-7931-4aa6-9370-36d19f56efbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6dc823-7d4d-453f-8c96-a08454085751",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a7a6a7-9316-45d3-8e73-bd74cba6d00a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf93dda1-ca7e-44a7-bf39-5b4ffc41a5b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86b6eea-beea-4156-a31c-9c68e64fd026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a7ad90-bd9e-4132-806e-0ebd422c22c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2497584c-e80e-4611-a11d-5d1465ca8e0d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c9b34a-0f64-41b0-b0e1-d1672519158a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31331bb-ddb9-4918-a511-dbffaf64e15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3837a68c-619b-4a9f-b4a4-18e5c7d70365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a335b41b-f82d-4ff2-b6a6-ec1263d4b749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69288ded-a244-4fdd-bf6e-dd30cfd92202",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f71ce3-907c-4a9a-9d1d-e720bbd7a50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fad556-1796-4a1d-b00f-031be9e7dc75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9c5dca-e28f-47d3-99d9-b8a57eed1b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9327826c-b9fc-40a0-82f7-5c5813de4c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7eee56-0ab7-4e9e-bd77-177cf86c4745",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6efb11-1174-446d-9d35-1544712a7a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d16d236-4c92-4469-9916-d63f907e0402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f34df0a-bdcf-4969-bfcc-0736bff0e08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fd0e4f-e702-41bd-b2f2-19b67debb5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e837711b-207b-49fe-8bdf-d55cb5e8f8cd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9601a40d-d2da-4a0d-9d99-c37e75f1ba4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0597fc5-3446-4874-8995-0c5ba149771a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "139c0c64-eb8f-4f9c-8373-8d0a3c0d40d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f49cd3e-55f0-4fd9-a3c6-544f01d6e90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d9dc97-daf2-4d7a-a499-c6af0817063a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6426122-b2d4-483f-b8e7-233abc7980f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c6ed3bc-d1c2-4b0f-b68a-6aa2fd704dbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7087a7d4-c6aa-479f-b29c-ca072c524180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11830db6-f532-4433-9e0d-c64de07d2b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ea9501-b522-48c6-b60f-f2d7eab542d8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb771f6-c0c6-4511-9181-06fa3934d83c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61af7f0f-e941-4c43-9212-baa7328c675b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f93a92-8f4e-419f-9e99-d569c903755d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67042f86-55b3-4634-b05b-b126ab2232bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff99b40-67a8-4978-afb6-f0aadb09eb23",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66789c7-1cfb-4445-a059-e81a475ae1b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0f8e3ef-e5ab-48aa-b824-8f5fd42b97b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0a4877-17c8-45c5-8941-5760d9693c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d8f1c3-ecf7-4782-9da9-7770260da552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043c2d81-cac1-4525-9293-7f68d4858bea",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8df528-4380-4c23-b880-70e7d6aa337f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10b667f1-6093-497f-b81e-70944be3b93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25346576-5b8c-4b2f-a948-f074cf4f6c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ee38cb-b922-4b04-95b9-46321b0efcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48eb9038-e897-432d-ac23-f39d2519ab70",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cf07f0-4101-41f2-a475-35b349f5cecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8973c32a-5cb8-4594-b273-7142898b032c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c422af-77d1-484d-9202-1d560868b0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b137a92-34e3-4f7a-8d48-398f06898701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93d1e20-6342-4545-a8fe-a317bf8dda7e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bbe251-2a95-4edb-8587-d6fbc6d32da9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d910019-e483-4435-a145-5201b43d2b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c77cb6f-3912-4064-873d-9c9663153c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6938ec31-4191-4f8d-840a-ecedc4eb8439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9398d2-cfe4-4411-8cf9-cbe398e22397",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c383dc7-54c7-4a4e-a26a-f0c28d8968d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edb61fbd-cbb4-407f-bb6e-e2f1da11b9f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7b293a-040b-41e9-a45d-28f70c61a307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7148aa0-e71b-44f2-9bfd-6713526fbb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebd99d5-f04c-42ac-937d-805c68219a92",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05745a2c-f64c-4353-9b60-7b6185e7594f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bf57b4a-3af4-4cb6-8d0e-8373625e7cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d68d6f-a787-4048-beb3-7cecbe1ed4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834689bd-cbfb-4038-9880-36d6387bf2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be4e83f-0346-4a31-aa09-c320a1f73d12",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5fd44e-4813-4a10-b7d9-0ad16e7f491d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61979bf0-8c66-49c0-bb66-a8da604330c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e5bf06-2681-4fd1-a68a-19b03306e6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a75fbf-60e4-44dd-a39a-e3e3cb7dc08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5eccd6-484d-46c0-b1b2-fc8c5fed1ac8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3d916b-7f7e-434f-b420-48ee59f84abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8da1b38f-2fe0-40ad-bb03-5babcefddd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa8bf6e-e21e-45c1-bca7-7ae439c28a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451ad7f4-de68-46b9-9f29-b13c6b136de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925c3084-085b-478e-995e-52fff605c617",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec28206-0c7d-4cc8-941c-5219989f1e98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2887f2c5-a97c-430f-9b2c-a9b803b34b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3faee4-6de2-46f2-99d5-68458712ab51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04cf8a21-e46b-40ed-9f3f-9158d3740a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279ecf35-30cc-4ba1-b2c0-3b3153acffaa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f1f34a-f909-4b09-9028-99c4af47496d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e90ec1d-0ac2-4c70-9fbd-a09e407d2143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84186072-10ea-4be0-9837-11f6b50ce93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ea5186-ab3c-4fa0-bb5f-2c4fc62b234f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da18e05-0d53-4109-9885-2ed5a0fa099a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23e0540-1cf1-4963-a928-e4b95477013e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2667a37c-cf54-4acd-8936-04b83a7e7318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e76e909-483d-4f0e-9d7d-b8b04c154b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713b8e72-b5f6-4d38-9c29-b316d5031745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14fa675-f90b-4716-bf58-2cee2f0c75dc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758adcfa-163f-4785-b10c-753f141e0c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa284bd-7548-4275-9ec0-ce0ca4906de2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1282ec8-ca8d-4e42-be03-c903e8507c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc113dd6-6379-4708-a012-b44f3f9f37df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6a7bf1-92b1-4e7e-b1d1-69a9cb1b60e1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36faf54-a4a9-451a-8f22-5ab7323ef133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30181a0a-87cc-4a61-a185-96941d97aa1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc83caf2-54ab-46ee-bd6a-bc574b64f170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a72d123-c04d-452a-a75c-ee968dfb234d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d50332-3fdb-4c95-bb16-5855b83ee965",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9548cae7-0841-451a-abbe-8ac7778972b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04c9516-72e6-4eb1-a6f8-a6061a417f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1774ca47-66e1-43b6-820b-cd67405d2907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835bbaee-6dc5-4c48-af05-7ea90a4bef8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824a16ca-9d3f-41fd-a539-4d29b086bef7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7597499e-023c-469a-b012-7b70cf94f708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f9006b-5840-453e-91c6-edacba823a76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3ed3f9-97b6-4a61-a175-a5ec58f1b3f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e70c9e-ac36-4e00-9803-61ae8aa3176f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22ead2e-0be1-4221-b675-2f53506b86db",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568a4927-14f5-413e-93f8-d5b3596b9154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bee4e7f-ad78-4ca3-8dbf-5201e3111ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248af673-8245-46c9-a0a9-68219035bde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b367b49-c11f-47f8-bdaa-3fca5ebba516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92da22c1-8465-4e3f-a17c-d1bf45c87ca4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ed1d1a-1e4f-4401-92b2-815be2f8f3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27885baf-bc06-4958-805f-49274b1bc291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7102fca2-e0e5-4678-9170-be0378fc06cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93683e9c-dd14-4d24-99df-f13d00b6db32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275d5d68-1d5c-4c4b-b258-224fcdb0a697",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0683c6-aecf-4200-8b5a-a75377a4864c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bfd731-6486-43f0-967c-5ce19c21bbb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8511321-37e8-4582-a60c-6e82d05c3218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3093c71e-6fe7-43e9-a319-6581d6599a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594af512-648a-4032-bb2f-007829896f02",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b8dc0d-cac4-4296-96ca-806e9cc19dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204ff8a5-71f5-4407-ab9b-010dcd7da338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f08474f-6c8d-40df-bc83-2a4892664f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a363165-3ac5-42ce-b5e5-9b27f39e854c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1773a692-aba6-453f-b514-3058f0e05cdf",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29400bad-78d5-41ef-acf3-5441cd03dc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca6a5ef-1968-41ae-aa5e-e6c1a1f6c663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0906aab2-c928-426d-8605-887961ed30c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181ff0a3-3a98-4cfa-9cd5-bd9085bfb160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5447f7e6-c871-4ee8-ae79-58f74f357677",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6228190-b65f-498c-b7cb-aae858d1580d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f221894-e8d4-4801-8984-22d7b05ea516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d481c4eb-cb59-4f2d-8de8-68aacebc86c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213149d1-6c7a-48ad-a6a5-60705fa8498f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009e5334-3d64-4ed8-9c12-88e6badd831f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22793cbd-fbb0-40af-9d08-49fad1250acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b1a5fd-a6d6-4aff-ba2b-64bdafafeadd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23ad16c-8683-4727-b315-07fb871628e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3add0d-5fd0-428d-9dc5-56cf7052b073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8fc79c-0199-4dfb-8538-07f2080de8f5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a0934a-17e3-457b-83e0-5ba561a8ec77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80319e87-d767-49dc-9a1c-2ea2c1c062fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfec9a9-00ee-4b04-bb0b-525b6004a78a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be5cb79-bd48-4eef-887e-26ec5032b42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09156628-81f8-4681-8625-95bc370b6e16",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094729dc-2070-4ef1-98e2-8a97f338a7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02615e82-7c15-473d-b5c8-ef1d76cf3d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42581704-d207-4bad-8893-cad151f9bdb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce53450-3db0-4078-bbda-de8f8a19263e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973d0d62-36ad-46d8-8283-1d49645188f4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc5ad05-85ec-408e-804c-0a1e1c252ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9dbeab-0f42-42ec-92b1-7460c76d2dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca0b0ec-f5f7-49ac-ad50-087764ff6a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ff7f8e-9aa3-4619-bcaf-341ebf7350cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb377a5b-314e-4ef6-801c-5131366ffdfc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3c1f9a-dafb-4d14-a683-007a6ee83187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4deabc38-63b3-4d89-89fa-0b6d38483811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e43585f-9b5b-4f86-a077-0b042708ac25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2732ba-4448-43bd-8643-7db7061aba6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbd5e67-f99e-4ecd-be5a-6b18cafb2eda",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a066f6f5-5c76-41a6-8d27-f4789c7bf1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26473390-79ae-41fa-9b75-7d9fff457a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd1bfa9-110d-4ca2-9310-d10879a7732f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72688218-1644-46df-9aa2-f27b93263800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a625dcd-6633-40c0-963d-055d65322808",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722056b4-34b9-4565-b7be-8ae7548ac81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c8d361-cf86-47f6-9631-76e8a79e492b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1817f5-a833-47e7-a88d-8044fda1f653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8031441-1b48-41fc-b5e5-beb7429f5018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9e3072-ab2c-4170-830e-dbadc4c1a865",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb04f36a-77fd-4bbf-ba91-23e635012029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7aa19a-0063-4499-972d-9d750e8f2cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ffc5f8-ef7a-4d9a-b804-60608de5a223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec60b52-6700-4df3-a685-ebb36ad3ced6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122ac266-e858-497a-8b22-beecb6c04748",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2731a6af-ffe8-4c3b-96b5-98fcc66f197e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df934d6-08e8-4fed-a9a8-ccaf370d983d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5425caef-d096-4249-a526-8f1121064f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fb3503-18a0-40e2-a2f0-2e912b4da367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bac09fe-4503-43cf-8724-3d34098f4720",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9343d8-7bed-45de-99c2-9f0289cf0568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8f06f7-c4d8-4864-82fc-c46f47d3f14e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad96d52-2973-4387-969a-8cbff08e42ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ceb43c-ede7-4190-8aa7-058ba6515c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd8dcd5-571a-43ae-930e-e3a91c81179e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdabcbc2-6667-4bfa-8fae-a47421690fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c470deb3-b488-40f2-8aea-757132324424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa97e3f-67c4-45eb-b0e2-29c4735b9b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909c8f63-f2d1-4264-bfca-e50b29713ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f8bc7b-03ce-467d-998f-88b175fac704",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e3c435-55ac-4c15-82af-6c27ba7ba873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb7fa61-f4ee-4076-a2e2-afdf7795e7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab44c9d6-686b-4bea-b9bc-51ccb25d249d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7356217a-62f1-4884-b80e-95a041baff58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320d8d92-c42a-4f58-8e65-48331247c834",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3ca6fb-9f60-45d0-9f53-4f2c1c89b45f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25a6d04-8c56-4d92-9200-4f2f780e608e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca183d44-408c-4a9b-9147-57f4c3a8360a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbf44b3-aaa6-4b4a-bf3b-cb50c9171a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6389bf38-595d-4902-9693-fc27af4c00ec",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cc4f7e-1757-4119-8b0e-5d0a4aba43a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a6af52-beb1-4730-9b8f-6f1d4f6fcb9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6047e2-4377-4368-bada-fe9027a163c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c038bd-bf1a-4836-876d-9b64d897e33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3da75ac-fbb5-49ff-89b1-4fa86e6d71b3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f3152b-578f-488d-82ed-dacccbede5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737be728-9d81-44c9-bc6c-b6cb94e738e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618fcc4d-0fa3-4f28-8309-1f70b32f788a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f802d84b-e8aa-45d0-a6cd-f759efc92836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4282c97-4c1d-40b1-ab05-18b46a4285c3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa0e075-5ae1-4217-9a59-2704688b42d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30d4561-aca3-4dfc-8dc0-e5dd04c0f723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2899f19e-0535-4bf0-8e24-10a9b2ad74e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811c6338-8fe0-4a78-9774-1205f07e1e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f879b1d-ce30-43e9-8811-e972dc23c906",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d33a7b-7c41-4569-98ad-0d10b31a1fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60fc413-009f-4c90-afd8-41ed16c5a469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aab5159-a152-487c-9ab3-74923be7dab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7c1da8-a059-40d3-907d-ce1a4b189a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023985f9-35a9-4425-ada8-840c74b19415",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dad6f5-d874-43dc-9518-9bc690871eda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d406e713-6e10-4ec0-a76e-a3e4368d4e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8466d97-5e17-4978-b5d7-a45ef4be2af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da3aa1a-7c25-4bdf-838e-25dca240e1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7576cb-4c83-4e1f-b5b5-4856a4468759",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe60ea8d-e35a-4145-b2d4-b00649a11d04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "995a8788-9986-44b0-8eb1-1663f5323bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aea4e52-7eca-4b98-8929-bc9088fa2e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a20ecd9-ace1-40aa-ae5d-67008e1f111a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f9f4ea-7676-4fb8-9674-94a5c2251e17",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6e01ac-e599-4d13-b253-9edf2bc0c187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f6d7f4d-326b-4d7f-8144-a447306ad817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f833ba74-7c16-421a-aa68-ce4a45f0ad71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b5cfe9-fa5c-44a6-9437-42c6ad9460da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96455d3-a342-4165-adc4-99eaeed12822",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59fd9a6e-a2a1-491d-a02a-c32f7eea9e6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "632d7885-47f7-4a82-b655-5f84cdf183a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "661a2b41-11e9-4a4a-bdce-6c897d82ee70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8424933-a3df-4a11-be43-335bdaf3e6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f8ecdf-3474-4114-b3fd-d62ec7f158cb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c2450b-357d-415f-ac9b-ab23c36bc21b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eb05ed4-e92f-4a3c-9ff2-a5f77f63e1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5818ec53-a5bb-4f46-a555-cd75eeeb63ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2dd144-4457-4c76-9b20-538977f34bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c502e0-42e6-4368-9ceb-1383a6f721f3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdb18cf-5451-4acd-9e2e-12dc44cbc6aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94dc2bfd-6ebd-4757-bcdd-c57702cd0ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9415ceb0-52e3-4d41-bb89-30882e8016a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35aa12ee-f99b-48b9-8bfb-66212ed19832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91360b0-2a4c-4d10-95c6-370f233cc5b5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fc2636-df98-4d45-b2fc-894eda528b7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ce03ca8-c4fc-4cd5-87df-803f6687219d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7ca6b7-4258-4bb7-a4ae-aa36c85d8921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdb8ddb-a7d4-4c49-a419-4946dad24fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56478e7-26d7-4bb2-8f17-610b144dd7f7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ad260a-5c01-438c-acb1-77ea7b37b72a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40256856-0375-4fcc-9e5b-46ffdf5952bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7222ca4e-7354-41f2-b7af-cd50558e4c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fb682c-41d7-4a5a-9c53-9076a7af67c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0228d125-0981-48ea-9ded-c205779d86cf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99416927-fa0f-4b7b-b9ca-582a3b002791",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05dd5d31-fe17-40e0-b175-b485dfbdd9ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bc7135-0591-4b96-a1d3-0d393feddd7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8592ea-f910-4784-8169-d837eb4fc592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43663511-928e-4133-a69f-628d0d9acd64",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef47b78a-c469-4685-bf78-902a8212852a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56b89018-5771-476e-9195-ffe7fbe578b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8423e75-7739-4656-b8ea-253d52626080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a945174-6512-4a55-9659-4515316409d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e591c1b-9312-49fc-bcaf-ea9daac75772",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f432fef5-e1e2-4220-9e29-9444889de223",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b10d90-fef9-4c7c-bf9b-d0216a08ee77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07d7757-3304-48c3-ae65-80ab4947eb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bafedc-29eb-4d34-be5c-8ebf0cc832e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380c1d7d-5e01-447a-97dc-6224bc4833d4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093c9438-5146-49aa-a3dc-1560a2e9b370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46d08b22-a5e2-4fd8-8c3d-5fc22a4c15bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77cb6a9-1624-4c16-b7ff-b73e004bbc8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecba9bac-e1f8-4c5d-aacb-6e2f9d030e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca1b775-22b3-469a-80eb-513f5626d587",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3309c66-04d9-47ce-b92c-dbfbb569a3f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b5434e-c59b-442b-ac4d-d827e1321879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc98007-0970-40d6-8522-6b77bf6f8a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72b8704-e55b-445c-a676-7eeb78a8bf19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3441481d-ab6c-45bc-b1b9-d4ffe16f1b8f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e5c734-50c1-444a-b624-765ee69d5060",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e031484-ef38-43d0-ab1e-151809d0f944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3215689-74bb-4b4c-8d86-b7c8e82a551c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a3ebe5-adf3-423d-ab89-ab416b30100f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb0e053-d5b2-4a11-8d56-4b2637266457",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a619e11-9355-49b1-9b27-789d58b87011",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16e536c7-b377-496d-af3e-ced7eec7df0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d985fb4-d708-40c7-8d8e-93e7b12b6cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73acd914-d96a-46f8-be04-dc4460623f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6afa56-eab4-47ec-8323-79705812537b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565bddc2-434d-4bd9-bda2-85212e83777f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e5da14d-c2b5-4d72-b58d-f7ff40e04851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ade4742-fb0c-4fdb-9bfc-c5ff125b4530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd375f53-8028-4ab7-a8f2-1809232c0bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ce4f66-6d3f-44c9-ab7b-8083015c0faf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771a0e67-e7f3-4bd1-ac9b-589be59b54f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f33c0b24-c2f3-47fb-ac05-2fdcb1427c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a178d13a-ecb0-43ee-8e2b-7de8d60d50a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c69531-a85a-4984-bf91-5cea0d8a8a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e7d0cc-80d3-43da-91d5-b66a99f772b6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a45194b-ca31-4083-993f-118743d4da02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74bdaed2-aa1e-4b03-89d4-197e62564cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d88b059-3639-4e8c-911a-ffb502144d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5081b93-5082-4fd2-acc7-b38f2dbe5c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f22b9cd-269b-4df3-9954-15f2175517da",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4428ad94-3c89-4520-a87a-353147e81f3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd31470-52cd-4841-91ce-f7dc1b269b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6964b1e2-d16a-4a96-b06b-1a89efc8660d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b3eb6b-516c-46e0-99ac-461b8b192bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848f66ce-2854-4145-8b3a-9c5561be80e8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5f88c1-5da0-4bba-837d-1e6330aa9eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da4b54cb-65ed-4d79-9adc-8db367460b3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4554b43d-c106-4129-82c0-505a92121010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557bb47f-050c-496b-9d8d-82d71bd9a3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38450465-d022-4e37-b51d-8723093d44c3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397668ed-e0a7-4383-be5c-c6163890aac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebef0e3b-bfa0-4766-9a61-f0d8d21331d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f8cb9d-77bc-49d8-aa7f-9438381c178e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da4d3b0-46d2-4fec-a600-383f15f3a336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b6884e-df1a-48a1-8c2e-752f4b47103f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3e9f93-ae64-4d88-a390-8ad577698395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31322c5d-103e-4d06-92eb-f8d1a72fcd50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adae45b8-416e-41ab-a3b0-03f9a11bc582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbceae4-7017-4678-ae59-6ae6e8976c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b7cea3-d869-4bde-b853-c6964c2500ab",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6e3c66-d692-42db-848c-0de9a1dcd43b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaeba10f-1267-45d4-a0b3-94be43001244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091487dd-1b4d-45c5-959d-6418276f70c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7509ae-aaf9-4eda-9bcf-5bdd68ab298b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5aaa07-3475-4fa1-a98c-05c25d6267e7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5136e9f2-6a07-40f9-959f-15ddf925981f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3b41e31-e62c-446a-a58f-e762b2ca4d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ce4b70-56d1-489c-a611-03be8904b2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a419fbfb-7141-41f3-a372-8d9a80258d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbd046f-834e-4aef-9fb1-1f3f68df8280",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477cba93-1a09-4002-af67-5f3c67bf71e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45d06d23-2d25-4378-9076-17524182b604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e07c67-9774-4ca9-ba9e-5c4f7dab2162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3495b1a-5ecf-4c66-8802-7b7e47829b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d46251c-48cc-49f5-b54f-6bf85849da8e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a5a296-1d11-4094-a44a-f4d448818e62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b54d0844-d0df-435a-a794-3fdb01a5a256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6273c7c7-dc68-4176-b07a-fa51fd83cec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32f44fd-0d87-4ab9-93dc-13d7711981e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf152b0-8f1a-45bb-b494-7820e0a20b48",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dbef05-f0f6-4328-b2ee-3fdfab743786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b7d9203-cbb6-4e46-8ed5-293ca016e53f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c76f79f-9934-4e09-8a53-ea3b8b80bb1c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3218c0e9-bf01-471e-a061-41748b814e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2faf2c67-9316-41e4-af49-406a97ee027d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47fa9d8-b134-4d1d-9926-e52dab8b96f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a995c599-589e-49e7-8a95-a1f017b1bf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e16fa40-e1cb-45d5-b75b-f1c4684e4905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45aea172-cfe4-4907-95cf-06bfd2dddfd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a4ffe7-9093-4620-9b1f-be96984c8663",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6c8fef-3987-486e-910c-c2f618fee67b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0631b5b7-8deb-4a87-a16c-bc1ae35daa45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f365e62d-6c00-41eb-a06d-3f08a65b8c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c810961b-e87c-4761-94d6-0465f6236744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cde415-5a9d-490a-8d08-99b810016f81",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8054a2db-e79a-4e85-ac30-8be676290846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "784bc12c-93cd-420c-996a-cb66c4c12452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff3cc3e-f19f-44ae-a964-43fad4c5af2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c106edeb-a562-4d77-b9ef-7cc9e16da018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c47d722-86a2-4c86-8cf7-6441c4f909ce",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c04439-d09f-464f-ae38-dac74f97b009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89afc8d8-babb-4081-be47-632b9e04c83f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "762bbde2-b493-41c2-b602-1346afe1a46f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc287a79-9f75-40b9-a276-fa7dc532c837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c36392-35eb-4ff1-a336-34335c2097ed",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435f2e44-075e-4235-86a0-d2ec90038989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1364003a-f80f-4d5c-8d08-b96213c8edb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d74f61-71bc-4f04-a387-c9c3cdfb1efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483ff6f5-c629-498a-9544-22d3e45f2cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1002d482-29dd-4daa-90f0-f24f8178dd53",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26f0cdf-3124-426f-8cd6-7fe45cddc416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf897ab-e334-4364-922e-f082d4421f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a8fd24-7dcd-4f2c-8cb4-6ed59eb14a33",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f6e7d3-c64e-41d2-8dd4-cc7baf54afe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7df66f0-2b09-4b7b-9eb5-0c1ab90af3d1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92c2481-a250-4578-bf69-e2d11ed487a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab24c36-2040-4b8c-b7cb-35a99d010f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a4d957-b763-4f23-b20a-9eb2632deeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a632552d-725e-4d64-80a6-49be8cc6f7c1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12fa32ae-1c0f-4721-ae6e-ebb38c1cb2d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c97fe7ab-d4c9-402c-9936-469b6431eba4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf9e2bb1-1507-4d9d-ae63-d0632ac50237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62444bae-1074-473f-9a2b-e2ef979bcc82"
                    }
                  }
                ]
              },
              {
                "id": "7f1152b1-908c-49b6-8280-e58215f990e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a05951dd-361f-419a-86e3-56e871026bef",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfdc49f-4028-441d-8639-b80dcdafff7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ac0cbe0f-f209-472a-bb11-7c07c8495966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9294d9e8-392d-4d33-99cc-903a906be9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05f3c86c-d014-477c-a6d3-56295125af2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6420c5ef-3adb-43dc-a751-753062ec5142",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97df4ce4-0771-4fd0-95cc-5fc54b2aeef6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b5fe6bf2-9ddb-49dc-8d4a-92a2db6f299a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9618de47-a4bf-44e5-bf70-cd240186a3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29e173c5-00a2-4fdd-b04b-4e167a358e24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbb1cf3e-d571-4717-87c1-966a049b798d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bda8c03f-25c4-451d-b953-d1c0acae1435"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "777bfddd-9e25-459b-8ad3-7b683a79f562",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91f5beb0-4993-430d-8c75-3bde9e69fee3"
                    }
                  }
                ]
              },
              {
                "id": "525d0a95-e2fb-499d-b799-672e2423cdb4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c73f1a27-385e-403c-9118-09cea192f9d9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d17fa0-21a7-41e5-b779-42811d1cac14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f73b08bf-504d-4046-9a9d-f4e8f048d040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a94e1e2-78ed-4243-bdab-f59132e05a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d97d45b-c0a8-4da3-a6db-0bf26165a0df"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "aece4d18-f697-4d07-b673-ac27122ba4f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9cd1ca18-6584-4705-85a7-98c0e45e40c6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e36a592-f078-4fda-83a5-884001d315fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4b7bf755-9358-4a5b-b04f-2841f7a5afe0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31385ce6-17a7-49f6-873f-96e4ea3d1467",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cb0688d-e6ac-4d1d-bae8-551d78c9f7f5"
                    }
                  }
                ]
              },
              {
                "id": "195574a4-a579-4aa5-8e43-d91c731b6160",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b59aa19-4380-42fe-83df-183ce2a660dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5672b563-2092-4ef8-86dc-ef122633a1f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "250668a2-5871-4723-8df7-597eeee7678e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dca708e5-6b87-42b2-a431-c9e49fd52d19"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bfbaaa8-00f6-4519-9aa8-15d8f075cfa0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "290df2e6-b6db-4749-b39b-0e421e8a0ca6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f316a3b7-220c-4758-964a-86fbbb7c0cf0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97ecd1c5-975a-488a-9092-d8affedddf3f"
            }
          }
        ]
      },
      {
        "id": "1a3a7687-dbe5-4c1e-8a69-7ea67a140e87",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4b297111-86b9-41d0-b891-4e16883389c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20f3ab8d-6457-4321-8f3a-658f522ef377",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a554886-1961-4a80-9019-6fe2f7cf90f9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c4848d-4d80-47d7-a5eb-2e9bcf76b579",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5e6d3e5a-8ef0-4a62-9cb7-fe50bd242c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc75a90-11cd-45ca-b9eb-81327d5e04bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "110ac2c6-14d5-4334-9653-8d2070e060dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b1c37d-98ae-48c6-8206-3971aa185b5b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ac95bf-f7ac-4319-aa10-99f4ae26bb37",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "344d4619-3124-48db-a1ba-3fb4f6efccfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26976c1b-7325-425e-812e-e9324c1e511f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7daad6ab-9a04-4280-a1b4-de1c98256d3a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65829385-911e-4936-b297-c4deedd1d896",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97eeb22e-5fed-4686-941b-7b149ea292f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b49546d-f9cf-4d12-8662-b58287a56a26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0deba5df-cca5-444f-a18a-c60ed559e268"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c3fb7cc-000a-4c6e-b3b1-d6698146cc19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c5136fcb-477f-431b-b8d5-07c56173fa03"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "201e11c1-63af-469a-8578-688ff10aabd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17f01601-8f9c-4f84-a6d6-88462fbf09af"
            }
          }
        ]
      },
      {
        "id": "471ecd8f-d6c3-4713-81fb-7f544de26d2c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "23350c75-b46d-402d-8ce9-e39cd1fc6a98",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6399fca0-27e2-4f18-b9c9-5e5583e2d03f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c017ba5-0eb6-4fbe-961e-6a4ce93dc1de",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b79af9-5d4b-46e9-aeb8-1a354533cfd8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f045177-8e19-40b7-af9b-6e8cdd0b7276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec317a2-dda3-46e2-be3d-476caea01812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65ca8168-9eaa-4482-9565-fc6a6c53a42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06d58f9-7085-45f4-8647-44a80f7aa682",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5af3e0f-d9ea-4883-a817-5bd49ecde218",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a9971ddb-d150-477f-9be2-9c3da424ee77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8f542c-c564-4e0d-8c42-e75f38332d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17dbd87e-d2bb-4586-b066-20cf8725c46f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c6f9d3c-89e6-42d1-94c4-14626207fad8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ee03174-386d-4809-a88b-ac09230d7ad0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a1f0388-331a-4cd5-baf3-f8e71f911f0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39d3bde0-bc33-45de-a16a-2e1908d35474"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb3fcb28-b40d-4537-a3cd-8965c065d2ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb386867-06f0-44cc-a6a2-ffd1c4e12b7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07f93a3c-0850-4d2c-a98c-509e843a31f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aea7883c-d8cc-425d-899c-4e24ac8f17eb"
            }
          }
        ]
      },
      {
        "id": "da1cb400-3d7b-4677-9a0d-b4dca193ecef",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a05d66c9-7665-4f51-be03-ac84d878930b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10e23db7-9622-45c5-9a8b-0378bc21791a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "403bf42b-6d6c-4a82-9d6f-17677d373707",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d8c80e-4c1d-4627-8ef4-e59e26b39583",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63c0822a-bd45-4770-9af2-c181eecc8635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ad84c2-0502-4c95-8a5b-2315d57db7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63d9d920-1ba6-4ee7-a9cb-d123c26416f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4df8a14-ca9c-4270-8f3f-c7ed7a42bb38",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5744dd5b-e8fb-4364-90b8-732ef797ade0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a354833d-d56d-49d9-b114-4e6ef9b3f88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86462e4f-ca67-46fa-88b4-984e9fc4701c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11b5932a-5d91-4cee-9047-523fcbe90518"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05c58cd0-ef61-41fa-bfa1-fc3a42c57d26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d459f38d-d536-4bfc-8524-bb721c24cbf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8aff5cce-6e90-46c5-bb90-6cc05b78255a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6366e559-eb80-44bd-b187-766147c79dcc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b638924f-588c-4a16-9883-4857f4596f8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "06b5b114-7e6a-4835-9381-6584a11bbda6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b998f7ab-64e0-4d53-ac7e-fe2143e1ecdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c04eae88-9b72-47f4-afc7-a98faa8ce699"
            }
          }
        ]
      },
      {
        "id": "0f61fa02-a1b5-46cd-8877-91e8758dc68e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e029e69-ea78-46a9-8bd3-1b27d98e36d2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdfd7ff7-815b-46d3-90f0-a3206a2ae545",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7f5f7381-a4de-4436-a286-c433957477f7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7ba4c93-f91a-45f9-88f4-f273310c17d7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3b6ffcf-a524-4952-b88e-e7da128f76e0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 307.5328185328185,
      "responseMin": 7,
      "responseMax": 12506,
      "responseSd": 1060.6481453833694,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677860706423,
      "completed": 1677860799311
    },
    "executions": [
      {
        "id": "e9ef1cca-042c-4aef-aa07-40b2885e1e01",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bd32142a-2365-4020-b625-283b4414778a",
          "httpRequestId": "bac1fe93-bf4b-4294-a801-bb138315a77d"
        },
        "item": {
          "id": "e9ef1cca-042c-4aef-aa07-40b2885e1e01",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2e367318-a604-4ba6-b89e-0b1805167861",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "e5c1ef8b-2ea3-4fc4-897a-87e8fd659261",
        "cursor": {
          "ref": "9420d1ca-2241-41ba-ab5c-e3f215db1dba",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c01de9bb-5ce6-41ec-9a9c-1365ef742819"
        },
        "item": {
          "id": "e5c1ef8b-2ea3-4fc4-897a-87e8fd659261",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d53edb6b-7c11-4134-a1e6-f0eb8cc55439",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "f1da230a-f25c-4d5c-bb03-aa845683d6f1",
        "cursor": {
          "ref": "41b2a119-64e7-4731-93d5-3e5b588666d8",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6cb3d487-5792-4f37-b571-dd01cab00c88"
        },
        "item": {
          "id": "f1da230a-f25c-4d5c-bb03-aa845683d6f1",
          "name": "did_json"
        },
        "response": {
          "id": "5750825b-5f79-468f-a4a1-892f3a4e8417",
          "status": "OK",
          "code": 200,
          "responseTime": 435,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f90403-4065-4a62-b6a1-41385fab7e71",
        "cursor": {
          "ref": "5e35a831-9544-4788-b360-15b2d6e8c8d5",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ce24abe8-235e-45cc-bb8a-210a6684fdd8"
        },
        "item": {
          "id": "54f90403-4065-4a62-b6a1-41385fab7e71",
          "name": "did:invalid"
        },
        "response": {
          "id": "b1746de9-795b-4745-b052-54f2e327b2f4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 566,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "54f90403-4065-4a62-b6a1-41385fab7e71",
        "cursor": {
          "ref": "5e35a831-9544-4788-b360-15b2d6e8c8d5",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ce24abe8-235e-45cc-bb8a-210a6684fdd8"
        },
        "item": {
          "id": "54f90403-4065-4a62-b6a1-41385fab7e71",
          "name": "did:invalid"
        },
        "response": {
          "id": "b1746de9-795b-4745-b052-54f2e327b2f4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 566,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "470a3d27-a091-42fd-b8ad-39439df87a9f",
        "cursor": {
          "ref": "60cea17c-934a-4848-b553-fad9d13fa43d",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5778978d-fd75-4d65-a61f-ef5e1e404fee"
        },
        "item": {
          "id": "470a3d27-a091-42fd-b8ad-39439df87a9f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e91af4f7-db88-451b-86de-c90558329d6e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 84,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df22bebe-69c3-479a-9232-32f040a80f31",
        "cursor": {
          "ref": "0a555509-5e9a-41a1-90ea-ebd4b424cfa3",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c4981c87-07b1-4223-918c-01ff2c126d51"
        },
        "item": {
          "id": "df22bebe-69c3-479a-9232-32f040a80f31",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ed44f4f6-c488-4436-8e91-c5c497a80d04",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c586a29-c527-465a-8d03-15dae5d4e833",
        "cursor": {
          "ref": "4329f298-d810-40b9-ad9c-0828f150e00b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "28a286dd-682c-4a06-a57e-d9194de128e8"
        },
        "item": {
          "id": "2c586a29-c527-465a-8d03-15dae5d4e833",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c76ab3d6-46a1-4f3c-972c-653251416a2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7724dcfc-9fe0-4c54-abbd-c9ed851d17f7",
        "cursor": {
          "ref": "61799445-8642-476e-b845-f1cf7a9adc70",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "494dc105-93f0-4b88-a703-e51dcd58dee4"
        },
        "item": {
          "id": "7724dcfc-9fe0-4c54-abbd-c9ed851d17f7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "54d3d58f-3938-42ec-adf9-6e5279ef5f7c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7724dcfc-9fe0-4c54-abbd-c9ed851d17f7",
        "cursor": {
          "ref": "61799445-8642-476e-b845-f1cf7a9adc70",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "494dc105-93f0-4b88-a703-e51dcd58dee4"
        },
        "item": {
          "id": "7724dcfc-9fe0-4c54-abbd-c9ed851d17f7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "54d3d58f-3938-42ec-adf9-6e5279ef5f7c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6b046f6f-58b9-415c-9ba6-6f144f1b2d63",
        "cursor": {
          "ref": "fe97d92b-04db-421d-b854-31d3e09e1552",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a010030c-879e-43c1-91be-a9fc2901dc7b"
        },
        "item": {
          "id": "6b046f6f-58b9-415c-9ba6-6f144f1b2d63",
          "name": "identifiers"
        },
        "response": {
          "id": "967b4935-a4a9-4c7f-967a-ddb32eade08c",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bdf2d0-60ce-42f3-8476-f12b9dcc7476",
        "cursor": {
          "ref": "7428eed6-7495-40b8-83b2-c58953aaf681",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5c6668bc-7322-47ff-9919-f0a095a16ea5"
        },
        "item": {
          "id": "a3bdf2d0-60ce-42f3-8476-f12b9dcc7476",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "405f4533-3636-452e-85a3-b6b8e444f7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bdf2d0-60ce-42f3-8476-f12b9dcc7476",
        "cursor": {
          "ref": "7428eed6-7495-40b8-83b2-c58953aaf681",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5c6668bc-7322-47ff-9919-f0a095a16ea5"
        },
        "item": {
          "id": "a3bdf2d0-60ce-42f3-8476-f12b9dcc7476",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "405f4533-3636-452e-85a3-b6b8e444f7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71eec8b-fa23-4117-b5a7-a777b6407baf",
        "cursor": {
          "ref": "e65e9196-dae5-48fb-a3f9-01a3cd1d279e",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d29d02cd-4e36-4bde-9172-4248d5828762"
        },
        "item": {
          "id": "d71eec8b-fa23-4117-b5a7-a777b6407baf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b0b678d1-62ce-43aa-96a8-58d7edf9d8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1ef326-ec16-48fc-9cf3-5c8666deedba",
        "cursor": {
          "ref": "30e33981-3487-4bd9-942c-0c02d95d27db",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7058e49a-69ca-4309-87fe-f8bceabfdc2a"
        },
        "item": {
          "id": "9a1ef326-ec16-48fc-9cf3-5c8666deedba",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0abdfa1a-c2c3-4ffe-8808-08419bd5b381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c389a6ef-48a7-42e3-a6da-04f2ad037476",
        "cursor": {
          "ref": "586ba1da-1115-4688-bc26-a5189e5bf81d",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "947c6347-6ff0-4f3b-8a19-adba1c81320d"
        },
        "item": {
          "id": "c389a6ef-48a7-42e3-a6da-04f2ad037476",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5442a368-c9a5-4453-a517-ffb0b9c93988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3828659c-2aad-464a-a4af-ca37dd38a175",
        "cursor": {
          "ref": "684ebaa0-6936-4010-93d4-edae2c3e24d5",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "673ad468-76d3-4b37-ba6b-a5cffb37875f"
        },
        "item": {
          "id": "3828659c-2aad-464a-a4af-ca37dd38a175",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "06527aa1-b1aa-469f-aa6b-2bb6f45d2593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62863d8-570c-4f8a-b10f-0cd657f602e6",
        "cursor": {
          "ref": "c0779d2f-ba5f-4ddc-b2bd-21c9d35577e4",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3bee90ba-c235-4354-b5ae-5a994197a8c8"
        },
        "item": {
          "id": "d62863d8-570c-4f8a-b10f-0cd657f602e6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e5f052b5-8582-4037-a192-e6d593465a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27571128-de4e-4210-b57c-9e944b2f99c2",
        "cursor": {
          "ref": "8ea819aa-1209-420f-940d-5d7e963e837e",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e3a8b2b9-3392-447d-b0eb-2ca0007d3d8d"
        },
        "item": {
          "id": "27571128-de4e-4210-b57c-9e944b2f99c2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "dcb054a0-3c6b-4be4-9a3a-33e9a8b15738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7a5811-b26c-4794-8448-1ca6ef07d08a",
        "cursor": {
          "ref": "5ac60129-418a-4232-879d-8ea5371bbf80",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "93241f3d-4de0-4e0a-a43e-e8877434b550"
        },
        "item": {
          "id": "ad7a5811-b26c-4794-8448-1ca6ef07d08a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "14bd6fa0-071c-43f2-9ec7-2885b6076c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4d18fe-69fb-430e-ad14-5981aaeddab4",
        "cursor": {
          "ref": "2b4075fb-37fe-4e60-859d-6960c33fcac0",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b399c8eb-9826-4fdb-80b8-0acfc0cc1c0e"
        },
        "item": {
          "id": "0c4d18fe-69fb-430e-ad14-5981aaeddab4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "236b9497-784f-48de-a853-0e61f2031e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05174e22-8ca3-4034-b5a2-83a00e4b6b56",
        "cursor": {
          "ref": "dba9ad8a-e6d6-4ba2-93b7-2093959309aa",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f1efdb49-823d-4f2f-9ed3-821708e40775"
        },
        "item": {
          "id": "05174e22-8ca3-4034-b5a2-83a00e4b6b56",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4d5ff8a6-02ef-4122-96ff-5ab9722e7ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4dadba-753e-458b-9c7b-601b0b4345ea",
        "cursor": {
          "ref": "9c001bf9-0985-42ba-890f-ea445bef7949",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "08cf28df-7035-4237-a8b7-6d73a93eae19"
        },
        "item": {
          "id": "fb4dadba-753e-458b-9c7b-601b0b4345ea",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9980fad0-add3-40e8-a47e-9f85df9ff840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2578ca27-d8c6-454e-ba30-db6e5ec97ce4",
        "cursor": {
          "ref": "bed0c58e-17e0-4964-b901-aa38c8ccc701",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "45196c46-b092-490c-b2a9-ade7f9ce51d3"
        },
        "item": {
          "id": "2578ca27-d8c6-454e-ba30-db6e5ec97ce4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1f6a80fd-6ab4-4098-90ec-4169b2228825",
          "status": "Created",
          "code": 201,
          "responseTime": 1227,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "58b28960-c494-4646-9749-75b6c77e3e75",
        "cursor": {
          "ref": "dfd2cb6b-8140-4d26-bd54-f71b8e502b93",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6130d5b5-19be-435a-a194-82b27bcad6b1"
        },
        "item": {
          "id": "58b28960-c494-4646-9749-75b6c77e3e75",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1ddaba38-6384-4d3f-80e1-ee774d38f167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6214905-b078-46f8-b757-8b798ee49262",
        "cursor": {
          "ref": "fee26412-13f7-40cd-acf9-ea326366ce2e",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0fa447de-2450-4eaa-acff-ca57993dfc26"
        },
        "item": {
          "id": "a6214905-b078-46f8-b757-8b798ee49262",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b81ad3d7-812c-4d09-8092-37c9fc65b958",
          "status": "Created",
          "code": 201,
          "responseTime": 12506,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a32f0de2-da37-4aa4-a129-759bed9961a7",
        "cursor": {
          "ref": "337d7037-c858-48a3-bd1f-a59ed71dbf87",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "921e100e-340d-497b-a1e8-43a237a1f51a"
        },
        "item": {
          "id": "a32f0de2-da37-4aa4-a129-759bed9961a7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "948b1f11-e3ce-4067-809a-4b252ce3a90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a52895-f9ae-415a-b070-05b90d06b6e9",
        "cursor": {
          "ref": "f3cd6e29-d2f5-4d28-9d97-c7296fe4cf32",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ee0add8a-4ee9-493c-8e2d-de91d734524a"
        },
        "item": {
          "id": "49a52895-f9ae-415a-b070-05b90d06b6e9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1e949806-eeec-4ca6-8ce4-79924af2bfd5",
          "status": "Created",
          "code": 201,
          "responseTime": 5434,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "60ead3a6-e031-447f-b17e-e8aa00f494c3",
        "cursor": {
          "ref": "63aaff94-1b7f-4f94-b980-3e1dab5d3bdd",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "93ef04ea-d41f-45d6-8b88-13415d092aa1"
        },
        "item": {
          "id": "60ead3a6-e031-447f-b17e-e8aa00f494c3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d1328f1d-7e64-40d1-b989-9bd8f0059772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7c44e5-4bac-45dd-864e-ab5ee05016c1",
        "cursor": {
          "ref": "db322b4d-446f-4527-835a-c4bee4c85556",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a5507ea3-e89b-46b0-92d3-a50b33171181"
        },
        "item": {
          "id": "6f7c44e5-4bac-45dd-864e-ab5ee05016c1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8d408a61-de4a-445c-8f67-af585f515782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78c3dfa-c188-4553-86e2-4cd3115ba68d",
        "cursor": {
          "ref": "e259e4ea-f3a1-46df-90b3-5acab863ebf1",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cd45af9f-d2ad-429b-989a-336fc5e17e34"
        },
        "item": {
          "id": "d78c3dfa-c188-4553-86e2-4cd3115ba68d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cd2cd136-1a60-40a8-9dee-3dfb937be51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35288b3-27c5-4d2f-b3d5-0af94c165ecf",
        "cursor": {
          "ref": "6ec0d981-13f3-4435-b7f7-006cb15593b1",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6d2618d4-a68f-4928-943e-345d00b01626"
        },
        "item": {
          "id": "e35288b3-27c5-4d2f-b3d5-0af94c165ecf",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "429991b6-9775-4f27-a148-a4a1e42ad28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3052f94e-22b6-4189-b39d-d65eb5db6229",
        "cursor": {
          "ref": "49a95959-db6e-4b12-93d7-d4b0b03a34f3",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1cfe701b-677e-4c2e-a0d5-89cc72423708"
        },
        "item": {
          "id": "3052f94e-22b6-4189-b39d-d65eb5db6229",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1d3eb264-213e-4b32-8197-d6ff19596403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b1faa2-801d-4f9e-8366-50dc840e5bf4",
        "cursor": {
          "ref": "3c7b7724-a8ae-41c0-bec4-81826929fbcc",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c8cc0af1-eaeb-4070-8ff7-d6eaee6dd5fe"
        },
        "item": {
          "id": "d6b1faa2-801d-4f9e-8366-50dc840e5bf4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "65670574-59f5-4864-9d4f-82b5cd587fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce05b704-b790-4d93-8116-7d2da9065dcd",
        "cursor": {
          "ref": "a6b06088-a0ec-4acc-a741-0a716a69766b",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "91b911a7-b0d6-45aa-93ca-1741b2947a71"
        },
        "item": {
          "id": "ce05b704-b790-4d93-8116-7d2da9065dcd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bacec70c-5e93-4e76-8b19-4682dba1b3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4c7ed7-6a71-4481-a6d5-4c11d91922f1",
        "cursor": {
          "ref": "8b2dff0f-3ed7-4419-b87b-223c14c584db",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "14d0461f-3398-4136-9efa-9b3a641d04b5"
        },
        "item": {
          "id": "4b4c7ed7-6a71-4481-a6d5-4c11d91922f1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b3b32e64-c7f6-4b87-b41b-c7935331bea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe69c2ef-6610-4e15-b71d-5f6a29bcb354",
        "cursor": {
          "ref": "66839f02-c34a-4d32-8307-b2e20ad1c56c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "82ea8469-1430-4af8-b219-4539ebd2f254"
        },
        "item": {
          "id": "fe69c2ef-6610-4e15-b71d-5f6a29bcb354",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f0f9a910-3d84-4f7a-93e9-e26646391c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d358d8b-54a5-44b2-88f9-7aaded43112c",
        "cursor": {
          "ref": "b0459ded-ef3b-45d1-bcc4-7bda6398d343",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6d474950-1a10-45f4-ac62-092fa2ff2670"
        },
        "item": {
          "id": "5d358d8b-54a5-44b2-88f9-7aaded43112c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a79b9176-adee-4898-9deb-d9bd0d66b18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50239e47-4b15-40f2-82f7-ff485a1ee1d2",
        "cursor": {
          "ref": "33f39e73-2f45-4222-b265-b2a1269295e6",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4a9361e2-b9d8-47c6-951b-c586eca8b1a3"
        },
        "item": {
          "id": "50239e47-4b15-40f2-82f7-ff485a1ee1d2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7ff4ed0d-35e3-4bf3-ade4-3ff3e258486e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69bf4b5-a876-4814-9eb9-ad73d1b896e6",
        "cursor": {
          "ref": "48ca4094-c37c-4148-8218-c8a4f7ef425f",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c2ee22ad-d8f1-4f6a-8976-3ea9d020bdaf"
        },
        "item": {
          "id": "e69bf4b5-a876-4814-9eb9-ad73d1b896e6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5f08ba22-4d1d-491c-88d2-16d8b2e5c7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c372a32-7f4a-4f60-9666-be2783f92a49",
        "cursor": {
          "ref": "1870e471-4750-477c-9343-930a3c4091d1",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bdf14d11-af96-4ed7-8c7f-e86afe22bdf4"
        },
        "item": {
          "id": "1c372a32-7f4a-4f60-9666-be2783f92a49",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7974df97-a26a-4956-8a32-6ce553d8ca2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f86f9fd-218f-43e1-891d-6d9256ba9e33",
        "cursor": {
          "ref": "d09c7121-4bd5-4082-9194-9078f7de4252",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a58681a6-8420-4f1b-bbc2-9baf7e1fdc61"
        },
        "item": {
          "id": "5f86f9fd-218f-43e1-891d-6d9256ba9e33",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "53d3e368-f029-4a8d-bbdc-218198704ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438f39d8-292a-4ae9-9146-dda680526718",
        "cursor": {
          "ref": "26205054-f172-4648-8218-29d4c00602ea",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "435e6379-dcb2-497e-a870-5439c628beef"
        },
        "item": {
          "id": "438f39d8-292a-4ae9-9146-dda680526718",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a9a8a7e7-6ee2-495b-935f-39796cb39420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c495092-9199-48d1-873b-70db4f3a1b0d",
        "cursor": {
          "ref": "c737b91c-fa69-4943-8eca-0dfe73dd0cb2",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9daba9ee-4cb9-4699-9dd9-86dddb80bec2"
        },
        "item": {
          "id": "6c495092-9199-48d1-873b-70db4f3a1b0d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c432252c-3210-48ed-b2aa-3dc17040e481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbe7a7e-f0e5-4cb5-9dc6-5c013c4eec81",
        "cursor": {
          "ref": "80dfb3c2-8e2b-4d42-93c4-82c219fad250",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a34f6b63-b6ce-4e35-b01e-55ebf404ad52"
        },
        "item": {
          "id": "adbe7a7e-f0e5-4cb5-9dc6-5c013c4eec81",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "063060cf-aaba-46ff-8aa5-8f7a582f9e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357ad434-4331-4c82-bb0d-5405bce96816",
        "cursor": {
          "ref": "2881b141-425c-47b1-83e5-76067b591a53",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a9dfabca-86ea-4e9b-a6d8-7046c6eabd03"
        },
        "item": {
          "id": "357ad434-4331-4c82-bb0d-5405bce96816",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "afbd00e2-a63c-43f3-9eee-e0a87207b46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2597bb21-aad7-4ce7-a6f0-028a79f870c0",
        "cursor": {
          "ref": "69da3e86-5568-41e9-a303-b35cb1c3e946",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f1772365-18aa-46eb-82dd-e0f329fa3bf6"
        },
        "item": {
          "id": "2597bb21-aad7-4ce7-a6f0-028a79f870c0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e83851d1-69a6-460d-b856-9d1ac5b329fc",
          "status": "Created",
          "code": 201,
          "responseTime": 3153,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ee68644b-6f97-4092-959c-c12ab4b14797",
        "cursor": {
          "ref": "b737e9ef-734f-4d66-bdbc-dc47183b6eb5",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a03fdfe5-7f22-48cb-96d0-4a4ab7669ba2"
        },
        "item": {
          "id": "ee68644b-6f97-4092-959c-c12ab4b14797",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3f8bd33c-04f2-440f-8798-9f3ec3f13493",
          "status": "Created",
          "code": 201,
          "responseTime": 2643,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f79ea48d-2920-4aae-9568-acdf3b4afef4",
        "cursor": {
          "ref": "c3fa4075-6b60-45c3-8979-740771ef0977",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f2b563d6-329d-4e01-a6f5-844727ff9d51"
        },
        "item": {
          "id": "f79ea48d-2920-4aae-9568-acdf3b4afef4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f74c8f5c-9f6e-4ddb-8eed-d9b0047a546b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e15457-6b40-4694-94fe-7d060a779ec8",
        "cursor": {
          "ref": "7e9073d3-933e-4ce7-8093-7e64aa1f9fcc",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ec1d9770-a813-45af-8a50-32440404105b"
        },
        "item": {
          "id": "74e15457-6b40-4694-94fe-7d060a779ec8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "aca7eddb-4508-406c-ba73-86158e7a077e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8517bd14-0fda-4bf3-bd61-88d730b0f6dd",
        "cursor": {
          "ref": "908e44d3-e75f-400a-a3d1-11abee91f9f8",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4d4be17c-b856-4aa2-9401-2a6b3b906385"
        },
        "item": {
          "id": "8517bd14-0fda-4bf3-bd61-88d730b0f6dd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "26e0e371-b237-43d1-b044-477365c55b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cadb48-c237-478d-86b7-4e32a08f2690",
        "cursor": {
          "ref": "0e2abb8e-5d26-4550-a8bd-6b822c741b19",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a48fda52-60ac-4a24-ad4c-2e916742812a"
        },
        "item": {
          "id": "c8cadb48-c237-478d-86b7-4e32a08f2690",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "208a4f49-77f8-44dc-b08b-3c5da130248f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c40077-821f-489c-b46c-20cdaeecd628",
        "cursor": {
          "ref": "ef71381f-8d0e-43bc-aead-fb446cb3afa6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "693a231a-7590-40a4-9984-ccf7167f5982"
        },
        "item": {
          "id": "92c40077-821f-489c-b46c-20cdaeecd628",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b209ca55-afc9-4317-abb3-767814505c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e52526d-3c8a-42b5-8cfe-5527b9a17287",
        "cursor": {
          "ref": "53d64b22-0084-46f6-97fa-46eb80310850",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "29b7e2db-e3f9-44c1-84f3-72592a768b16"
        },
        "item": {
          "id": "4e52526d-3c8a-42b5-8cfe-5527b9a17287",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5dfc761d-a1ae-4bd6-a82a-a110d729e33d",
          "status": "Created",
          "code": 201,
          "responseTime": 5180,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "88aa9f2b-8028-48ce-9f25-cd4b04eb9dab",
        "cursor": {
          "ref": "cb6c748b-c0b2-4c4c-abc8-ed26f722ff11",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3bcd9037-fe41-493c-b9dd-098cbbf2fbeb"
        },
        "item": {
          "id": "88aa9f2b-8028-48ce-9f25-cd4b04eb9dab",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "518ba344-2fa7-4b14-a589-0c92b726a82d",
          "status": "Created",
          "code": 201,
          "responseTime": 1966,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5917ba64-e4a1-432f-a248-cdee667befa0",
        "cursor": {
          "ref": "8afd2155-7f87-4f18-b055-ddd093332022",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "091d0a79-2b71-4968-bcd2-3c96f75dd8ac"
        },
        "item": {
          "id": "5917ba64-e4a1-432f-a248-cdee667befa0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "18d6df59-cd68-488e-ab6f-92e0aadda03c",
          "status": "Created",
          "code": 201,
          "responseTime": 2370,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "cd449098-ef9b-40de-80a3-a8d10b8dea3c",
        "cursor": {
          "ref": "87e12080-4588-4267-bbe8-ed143332357a",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0c66fb61-046c-455f-9feb-1959b5e2ac65"
        },
        "item": {
          "id": "cd449098-ef9b-40de-80a3-a8d10b8dea3c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d068f4df-75f2-4a43-999b-6e7e291e03f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c0bed4-76a8-4d08-95f7-235f13b63099",
        "cursor": {
          "ref": "3ce092a5-e581-4f8b-81e6-4b6fd2d62295",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e9a77842-1c86-4901-a8a3-26b013f342c6"
        },
        "item": {
          "id": "17c0bed4-76a8-4d08-95f7-235f13b63099",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2f523875-29d3-432e-a004-1447bc15c710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c0fad2-f46a-47bc-9fd7-931153ab5c53",
        "cursor": {
          "ref": "b2c0e7a5-689f-422f-99dd-053dca57b6cc",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "17db2282-1b26-404a-9c5e-e1b2ad72d947"
        },
        "item": {
          "id": "b8c0fad2-f46a-47bc-9fd7-931153ab5c53",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9d660fbd-1ca8-452f-8861-0f7f2fc30120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff46f91-e2f2-42f8-8bf7-1c11a1c67db2",
        "cursor": {
          "ref": "b9a74f4e-40cd-49b5-9aea-6bd6a4b25e41",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "63a23627-ecbb-4d5b-b156-7b6b65fa5764"
        },
        "item": {
          "id": "cff46f91-e2f2-42f8-8bf7-1c11a1c67db2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2c8a32cc-2479-44cb-acb6-b71e3341478d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd22fbf3-0bf1-4ab8-aad1-06dbbbac7443",
        "cursor": {
          "ref": "e19f2b3d-532c-4e10-aff3-a38ad012649f",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "923b79f5-6d2a-43e9-9e5c-4c93ade6fe60"
        },
        "item": {
          "id": "bd22fbf3-0bf1-4ab8-aad1-06dbbbac7443",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a964cc74-bf21-4779-b7ab-9cd56795e3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9e576d-adae-4702-84d9-3972c64383f0",
        "cursor": {
          "ref": "df2d505e-73df-4644-8d2f-606880ea7278",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8697b2c4-7b09-4b26-ac03-36b90d62e70f"
        },
        "item": {
          "id": "7a9e576d-adae-4702-84d9-3972c64383f0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bad1eea3-eb62-49e4-ae8a-97f8b545a9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3aacb5-7f31-4a18-9324-3b01f78cbd3e",
        "cursor": {
          "ref": "0b1d266f-529f-451d-affe-10b3d927de0f",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6e13b413-43e3-4d4e-a742-57a528d94a58"
        },
        "item": {
          "id": "1c3aacb5-7f31-4a18-9324-3b01f78cbd3e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3e69b073-08e0-4f25-a416-8fcbbf70bda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f7f28f-08d0-4340-85bb-3ee032ed30af",
        "cursor": {
          "ref": "b5fa48e8-d595-4a0d-aaae-e315bbfb453b",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0e2f21db-0da5-4755-baba-bccc833f16dc"
        },
        "item": {
          "id": "42f7f28f-08d0-4340-85bb-3ee032ed30af",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "86b6caec-dc13-491d-97a9-394555456c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1e78b0-0e63-40ab-9cba-ba4f9db1450a",
        "cursor": {
          "ref": "af480915-6f0f-4dac-ad9e-fa233f76258d",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1f714a82-9975-4b79-ad7b-d41a1cd7959b"
        },
        "item": {
          "id": "4a1e78b0-0e63-40ab-9cba-ba4f9db1450a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d8424592-dd12-4709-b40d-fd4b503d5ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b26533-9754-43ef-ac43-5e7dfc003dd5",
        "cursor": {
          "ref": "8260440b-5f7a-47f8-a547-5bfb387464b5",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f3e168ad-03b5-49b5-8ffa-db42f515f5b2"
        },
        "item": {
          "id": "45b26533-9754-43ef-ac43-5e7dfc003dd5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "95ac4ba0-99fc-48b1-9564-d22cfa7df0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2fa642-c681-410b-9efe-647131debe5c",
        "cursor": {
          "ref": "43d8aecc-a954-4f13-a8f3-551fc74b784b",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "685fff40-272e-42c7-b16e-9f5ab9795187"
        },
        "item": {
          "id": "1c2fa642-c681-410b-9efe-647131debe5c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b2ff227f-9df5-4199-a553-d94ebc7c40a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37514817-06a9-4752-92b3-707d61361218",
        "cursor": {
          "ref": "1fff55ee-86b8-4a7b-ae91-2a2d72787322",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b5e8ec85-50a1-408f-96ed-cc213f90f94e"
        },
        "item": {
          "id": "37514817-06a9-4752-92b3-707d61361218",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6e3a7aa5-c182-4b3e-9028-00e078a16b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce05a00-15ce-4076-921d-ff81d5aadc78",
        "cursor": {
          "ref": "8792b84b-056b-453a-8848-441e2c6f2f2c",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b64271b7-38dc-439b-8ac4-919429047b47"
        },
        "item": {
          "id": "5ce05a00-15ce-4076-921d-ff81d5aadc78",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0237affc-fba0-46e7-b93e-8c32d687533a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f223355-638f-4e98-a11a-c38845b88087",
        "cursor": {
          "ref": "ee25eeaa-ad1b-4da6-90f4-15b5773ebef7",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0d365638-5c7e-4e00-9544-8cd47890db8b"
        },
        "item": {
          "id": "1f223355-638f-4e98-a11a-c38845b88087",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "72d00ba8-168d-4aee-ba81-807ebb40d65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be214c81-6cc2-46e5-a4ce-b6e4c111c190",
        "cursor": {
          "ref": "fbc3557e-47ec-4a3e-8116-01b6129af6c3",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3071f011-fcca-4c2b-b380-cf10611dcdfe"
        },
        "item": {
          "id": "be214c81-6cc2-46e5-a4ce-b6e4c111c190",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c2eb2b3a-5d13-4cda-9715-219b41f29907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bdea6d-b020-42bb-96c3-3d20b07c92cf",
        "cursor": {
          "ref": "f6dcee3c-583d-44be-aa04-31e250aeec40",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6e972e48-2576-4bff-adb1-2f7ab449dcc4"
        },
        "item": {
          "id": "b8bdea6d-b020-42bb-96c3-3d20b07c92cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fd0edb47-6f93-4e5d-8151-4bb82cb85bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f50f57a-2763-4ad3-97bb-aefa4aa00588",
        "cursor": {
          "ref": "7f1abbc6-6b58-4ee5-b0ab-0f4b77b36e8f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3383fb70-e2af-4db8-90f1-20d241f623ca"
        },
        "item": {
          "id": "9f50f57a-2763-4ad3-97bb-aefa4aa00588",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "65787d3c-6bb3-4abb-a698-93976e029815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db3bbf4-330a-4626-9b08-8e6fa39b4064",
        "cursor": {
          "ref": "8db340c4-8368-4037-98d5-df7a0bce9404",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0e2acef2-8e23-4ee9-8b46-d716e6a47202"
        },
        "item": {
          "id": "0db3bbf4-330a-4626-9b08-8e6fa39b4064",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a4e3c436-6713-4f36-a0dd-7f59945f21e6",
          "status": "Created",
          "code": 201,
          "responseTime": 1892,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "54a0b18e-476b-4877-9a6f-f3476cb02ba9",
        "cursor": {
          "ref": "1e8ebca7-9416-4d66-93a8-d8dfbd16c907",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "75c7a2b3-cc3d-4de4-a418-15a9038c1ceb"
        },
        "item": {
          "id": "54a0b18e-476b-4877-9a6f-f3476cb02ba9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3ec28a2c-1dc9-4017-bc1f-dd58d50cf038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c055f58-3658-4c71-ae05-60ef126205db",
        "cursor": {
          "ref": "830627c2-dfe4-44e4-82c3-6023a0213f13",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7ce71dcf-1e88-46b5-9631-f9f7dcb4ff73"
        },
        "item": {
          "id": "6c055f58-3658-4c71-ae05-60ef126205db",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ebcfc35c-72fb-473d-b0b1-f4417a43fbb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff13501-6a46-495b-a065-e12ee4aa118e",
        "cursor": {
          "ref": "98dd112a-9988-4a6d-ae9d-6c0b2a0dc939",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ca239658-4df6-431d-b294-4505fba4b64a"
        },
        "item": {
          "id": "7ff13501-6a46-495b-a065-e12ee4aa118e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "68f2b88d-46c8-4f2a-bf92-c0ad34fe8511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8819b4-0e12-4345-a57b-d9d08d4b515b",
        "cursor": {
          "ref": "c37e2b2b-2935-44fc-bd95-a495b28f784f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3998a35b-a7df-46e4-bdc3-c5412fba67da"
        },
        "item": {
          "id": "bd8819b4-0e12-4345-a57b-d9d08d4b515b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0e9f2c37-6b22-41a8-800b-e2c493a840e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4409c03f-3fb5-463c-a4dc-6cbd6807622f",
        "cursor": {
          "ref": "69fc168f-bc53-47eb-8db1-d01ec0046156",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cd875bce-e96a-4668-b18b-c0e7d93bac83"
        },
        "item": {
          "id": "4409c03f-3fb5-463c-a4dc-6cbd6807622f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "00dc26b0-b8e1-46c4-b616-3f7781df7a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece76cd2-b433-4e67-a03e-ff0c879beab1",
        "cursor": {
          "ref": "0f2728e6-a779-4d19-a1ae-ba33cc199811",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5d0478bd-fd65-4cbc-ab99-adb5e07fd593"
        },
        "item": {
          "id": "ece76cd2-b433-4e67-a03e-ff0c879beab1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d53a6707-324e-472f-9560-d8f2c4217cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fcf1d3-aae4-465f-b826-cf95635aa8bb",
        "cursor": {
          "ref": "a66f01c3-ecf3-4054-91e3-00f649c7ec7c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d9444113-e475-493c-941e-9ce38895ea46"
        },
        "item": {
          "id": "f9fcf1d3-aae4-465f-b826-cf95635aa8bb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cbb21dfa-bbee-44fe-ada9-586c3a383ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d696e74f-bb16-49e9-9fcf-26daea2a4ccf",
        "cursor": {
          "ref": "9d7b2bcd-20a9-4062-a305-b8cde5fc7bb4",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "42fd80ec-5b77-441a-9169-7c2c3e8fffb0"
        },
        "item": {
          "id": "d696e74f-bb16-49e9-9fcf-26daea2a4ccf",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6a9490c2-7461-46cd-a16c-484a7a7b4c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cdc8c82-6348-4a78-861c-afdf93c12f2b",
        "cursor": {
          "ref": "9828ae63-9250-4e47-8ec6-0b6f941bf98e",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f3f0cba1-e5fc-4058-b9ff-ec11079d8962"
        },
        "item": {
          "id": "4cdc8c82-6348-4a78-861c-afdf93c12f2b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1447bd3d-657c-4b11-8b16-5ca355276dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99447d9f-b331-4253-9fc0-0da0d057985b",
        "cursor": {
          "ref": "d62d17c1-4be0-443c-8993-48c3c4ce9969",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "74f259f5-a73b-4c63-9734-c888fc509e97"
        },
        "item": {
          "id": "99447d9f-b331-4253-9fc0-0da0d057985b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c1c5f778-e3a3-4012-84fe-594497357443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1711288a-ed2c-4fe3-8f1d-056d20b9a752",
        "cursor": {
          "ref": "55c83ca8-b94a-4e41-92d6-0a9614ce8da5",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "978402a4-076a-41e2-8a30-157f2e171701"
        },
        "item": {
          "id": "1711288a-ed2c-4fe3-8f1d-056d20b9a752",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bd07f600-6974-4b55-b3da-fefbc7f1a4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b212a3-5f1a-4dbe-921d-f1980f85737e",
        "cursor": {
          "ref": "9b638c62-29b2-4cff-9778-438317864be6",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a8d8b240-e94b-4aa3-9b58-2fb89189dd23"
        },
        "item": {
          "id": "48b212a3-5f1a-4dbe-921d-f1980f85737e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cf66ce2f-ab58-479c-8242-73d846178b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c86501-b2aa-445e-9dbf-40dcf13b805c",
        "cursor": {
          "ref": "f51dcdc7-ca44-4293-9bac-4de135b22b33",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8f9020b0-ae1e-4b8b-9c02-6ae8d8d2f5c2"
        },
        "item": {
          "id": "e9c86501-b2aa-445e-9dbf-40dcf13b805c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fa1985a8-0719-42c2-9934-e8e4a364fd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3dcd8b-c122-4afe-b92d-a533d53bae63",
        "cursor": {
          "ref": "b27bbce7-125f-477b-aa52-be1c00230d73",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c77657b1-0027-430d-acd1-70e64e5a83b5"
        },
        "item": {
          "id": "dd3dcd8b-c122-4afe-b92d-a533d53bae63",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5251068f-0e45-4580-b2d6-ee29390d99b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59cd656-3f40-4172-adc6-c48931d9ad26",
        "cursor": {
          "ref": "fde83a7c-e431-49d0-813e-e49c3bd7693e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9690c08a-1121-436b-b134-3ec49e7feb55"
        },
        "item": {
          "id": "c59cd656-3f40-4172-adc6-c48931d9ad26",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "15305100-bef4-4f76-a8be-1a035e3af44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45700a9f-1138-477e-a45d-e5bacc5edbd7",
        "cursor": {
          "ref": "6f6d2ede-0910-4751-933d-224b95ccc58a",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "27f58ab7-2811-4d42-9810-63064f8a8cf5"
        },
        "item": {
          "id": "45700a9f-1138-477e-a45d-e5bacc5edbd7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d6581a3d-aaa2-472c-a421-9205a1d4d2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34771a5-06c6-4339-b0b9-da9953a7d3c1",
        "cursor": {
          "ref": "e3d6f64d-d012-4503-ace8-db2453878d36",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b8631c43-48ca-4b5d-bd32-0ecbf977b500"
        },
        "item": {
          "id": "c34771a5-06c6-4339-b0b9-da9953a7d3c1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0d6b7b3f-774d-41eb-813d-4feeef029b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a833fb19-4e57-4c93-834a-b34bc157954b",
        "cursor": {
          "ref": "4d77324a-e8b0-4233-a777-b8b291f5e893",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d9bdadb7-6540-45f0-a42a-6643083e563d"
        },
        "item": {
          "id": "a833fb19-4e57-4c93-834a-b34bc157954b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1af1fa92-47c1-491e-b662-0bb547b79565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b52446-f7a4-40d4-95e5-f8a3cbdb783a",
        "cursor": {
          "ref": "0ee6efe6-8362-47fe-b864-20a5e1c6e7bf",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d4c0ecc2-4705-4eb4-9fed-eb3f067be5b2"
        },
        "item": {
          "id": "82b52446-f7a4-40d4-95e5-f8a3cbdb783a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6da54cd3-dd5c-4dcf-8e27-da4c1d85c2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2012874d-f283-4bad-a85e-a3d193bcdc8d",
        "cursor": {
          "ref": "9e397a67-d811-413e-9788-2ed60b30a3da",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a42a49dc-61ab-48a3-9876-429c13a6c8a4"
        },
        "item": {
          "id": "2012874d-f283-4bad-a85e-a3d193bcdc8d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "dd583bfd-aef0-4d2c-a3b1-15ac8152a4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465f69f9-185a-4773-a23d-b9d50661ff82",
        "cursor": {
          "ref": "d37a5ff1-f3fe-4a45-bba7-e4f42b92bed4",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dfc8e439-2789-4b72-be4a-6af19b9274a0"
        },
        "item": {
          "id": "465f69f9-185a-4773-a23d-b9d50661ff82",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2cc1d3c8-f077-41b3-bdac-ac77cec08d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efecb3ad-7d7b-48ed-87cf-3fe4b6b3018b",
        "cursor": {
          "ref": "00b542be-84c1-4765-ba0a-368e6f9bf67b",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7ecce480-0096-4cc2-bd82-049872df992c"
        },
        "item": {
          "id": "efecb3ad-7d7b-48ed-87cf-3fe4b6b3018b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "26b65608-24ca-4e64-8447-f235f10bb224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3d197a-e0cb-48e5-9cbf-2a9542c4d3b7",
        "cursor": {
          "ref": "e2ca405f-b2ec-4515-be48-f4c765d898be",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "79915dd0-4876-485b-80b5-3d0d974ee709"
        },
        "item": {
          "id": "eb3d197a-e0cb-48e5-9cbf-2a9542c4d3b7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "20961980-358e-4066-978a-9b196b0b1d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b27c9cd-f02b-4342-aea4-a9fc007b5a07",
        "cursor": {
          "ref": "5cf9eb77-3043-4c1d-9909-ce4894f01af3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4274598f-30be-411e-bf93-e0994daf3c2c"
        },
        "item": {
          "id": "3b27c9cd-f02b-4342-aea4-a9fc007b5a07",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4d5e87f8-e1da-49a9-8302-369785dcf7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c768f0-f038-4151-84a5-8fbfd1afe334",
        "cursor": {
          "ref": "552290ee-5860-4a9c-b422-e1a85ed7ee29",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "97833df3-9378-4088-995c-a747c5f5f6bc"
        },
        "item": {
          "id": "74c768f0-f038-4151-84a5-8fbfd1afe334",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bf340d7f-a041-45a8-afe3-2bda0995fb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76b4aac-ccad-46d2-8e90-ca9d1bb57c9f",
        "cursor": {
          "ref": "a111d542-13b2-4aed-b562-34284c1f9c91",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e0077bb6-f209-475a-896c-2e4d54053497"
        },
        "item": {
          "id": "b76b4aac-ccad-46d2-8e90-ca9d1bb57c9f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "edfd13e0-da06-4cbb-9b67-5bcfc87ece14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1bc9e5-b69c-40f3-9d13-a1e4fcf59aee",
        "cursor": {
          "ref": "b8a3628b-4dc2-4573-85fb-56ab6b57e850",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bf0302ac-a657-4175-8035-a12a71de3e66"
        },
        "item": {
          "id": "8e1bc9e5-b69c-40f3-9d13-a1e4fcf59aee",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "48106975-d7af-4ae7-bc26-78da7df9bea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb00bc9-8ef3-4fc5-b36c-04b25316360d",
        "cursor": {
          "ref": "011d2e7b-b38c-4673-9ecb-e63fcfc3a02d",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cefa0273-5b8b-46ce-9c45-2c2ef5cce1dc"
        },
        "item": {
          "id": "5cb00bc9-8ef3-4fc5-b36c-04b25316360d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "30d25746-5bfd-4f7d-9c77-85ebd133fbab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9158a785-0052-4dc2-9c87-6aff3f1c7eb8",
        "cursor": {
          "ref": "93713781-3d33-443b-a2bf-b31a047c28bf",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f38c936b-5309-4b28-bcd7-b748a38909d1"
        },
        "item": {
          "id": "9158a785-0052-4dc2-9c87-6aff3f1c7eb8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c7b4f5e2-5e1b-4350-9b54-d21c025b0650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf323fc-382d-4cde-817a-5c9ba60483e3",
        "cursor": {
          "ref": "e60f465a-d759-4a3a-8832-36a4ff839e1c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cf5d779d-a21d-4f53-b56f-69d1e5243520"
        },
        "item": {
          "id": "edf323fc-382d-4cde-817a-5c9ba60483e3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e33c22bf-061a-4b60-b4ac-3aa8fc9863c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb41cbd9-55b4-439a-8c2b-cfac2e9db708",
        "cursor": {
          "ref": "4fb6725d-9601-4217-8393-099353ca53f1",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "559a979c-ed4e-45d4-adaf-cebccbaa3a7a"
        },
        "item": {
          "id": "eb41cbd9-55b4-439a-8c2b-cfac2e9db708",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a0f71fde-b982-4119-a543-bca9f979aa7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "43a7448f-dd55-4f3e-91e2-236e608dae25",
        "cursor": {
          "ref": "6adc0862-f69a-48de-9731-24809ef4be05",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "09a60077-0aab-4c10-970b-a634fc98a7f9"
        },
        "item": {
          "id": "43a7448f-dd55-4f3e-91e2-236e608dae25",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "315d67ae-68d4-455e-8687-0835b3049332",
          "status": "Created",
          "code": 201,
          "responseTime": 1914,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b91bd551-d350-4765-bc7b-f79c1c5bcbc3",
        "cursor": {
          "ref": "58bac944-67e5-4a9e-a512-899b2a0f13b4",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c448e958-9461-4312-9a91-757ec1819489"
        },
        "item": {
          "id": "b91bd551-d350-4765-bc7b-f79c1c5bcbc3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7a6485c3-9282-4da6-84d1-1b69456ce22d",
          "status": "Created",
          "code": 201,
          "responseTime": 2278,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df698c2-5306-40dd-bc3e-d464d76a005e",
        "cursor": {
          "ref": "4247a610-2136-4a22-bb5e-dc69a2700179",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ac3663ce-cf34-4324-bf1d-70f92d6a1553"
        },
        "item": {
          "id": "4df698c2-5306-40dd-bc3e-d464d76a005e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "88d86573-a961-458a-8af3-258254d59c24",
          "status": "Created",
          "code": 201,
          "responseTime": 2687,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea6616d-6b50-40e1-9a89-72e6fa3042ab",
        "cursor": {
          "ref": "ce70e579-c784-498f-b749-d8422eb2fb3e",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8457ea8a-cf57-4713-8388-24de0d9d2276"
        },
        "item": {
          "id": "eea6616d-6b50-40e1-9a89-72e6fa3042ab",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a3f758c2-f573-4f5a-b0bb-7c5de3fc934d",
          "status": "Created",
          "code": 201,
          "responseTime": 2993,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd81be2-f6c8-4112-924c-33fdc33874b4",
        "cursor": {
          "ref": "b477c9c0-8af5-4d41-b33f-597f56226bc1",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0d9733f0-479b-4cad-b576-a65c477a520a"
        },
        "item": {
          "id": "6dd81be2-f6c8-4112-924c-33fdc33874b4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f414e42b-ba01-4f5d-bd03-bc5c40699996",
          "status": "Created",
          "code": 201,
          "responseTime": 3595,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-03T16:26:08Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-03T16:26:08Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "c29decc5-1e0f-4d6e-83fe-27f5bb3714d8",
        "cursor": {
          "ref": "950c4722-a055-452a-852f-e57752975b94",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c9425851-5d3e-4b68-b3a5-e4c920738a3e"
        },
        "item": {
          "id": "c29decc5-1e0f-4d6e-83fe-27f5bb3714d8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "50e0e9c0-7fc5-4c29-b15c-7b7c4ff3a4d9",
          "status": "Created",
          "code": 201,
          "responseTime": 4383,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "9349ea51-3fa9-420d-8661-03b8c62f1e79",
        "cursor": {
          "ref": "5f3ac9d8-6cc4-4ef3-b569-884e03c95c45",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c49db61b-dd13-4d25-88b7-fa9788abcded"
        },
        "item": {
          "id": "9349ea51-3fa9-420d-8661-03b8c62f1e79",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2ea4a14c-7945-4fe7-bdb9-f9f6dff782c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9349ea51-3fa9-420d-8661-03b8c62f1e79",
        "cursor": {
          "ref": "5f3ac9d8-6cc4-4ef3-b569-884e03c95c45",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c49db61b-dd13-4d25-88b7-fa9788abcded"
        },
        "item": {
          "id": "9349ea51-3fa9-420d-8661-03b8c62f1e79",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2ea4a14c-7945-4fe7-bdb9-f9f6dff782c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8408aeee-fa21-4d18-8755-87d44f21a50f",
        "cursor": {
          "ref": "e3fc9227-62cf-4bc7-b67e-9d9704b350f0",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b3be7720-ab1d-457e-afb5-8df8ecf7ad58"
        },
        "item": {
          "id": "8408aeee-fa21-4d18-8755-87d44f21a50f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c7efad22-95de-4a89-b81b-3cec53916921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a873e043-7094-4c16-85dc-ca7efcb18e77",
        "cursor": {
          "ref": "7ed71394-2332-435c-9f41-bf48dcf65360",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0f76a425-376e-4cf3-8f83-ef77317ac28a"
        },
        "item": {
          "id": "a873e043-7094-4c16-85dc-ca7efcb18e77",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2306b374-1e37-468a-b56f-1b50e0ef98c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a583b33-9cf3-4c8d-b685-3750fbbce23b",
        "cursor": {
          "ref": "d274f95a-54d3-453f-85e0-b48ced5c0052",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cb762034-b945-4c84-bcb7-12d9cd47c885"
        },
        "item": {
          "id": "7a583b33-9cf3-4c8d-b685-3750fbbce23b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "13471640-ed89-46fe-8685-95a798519374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c1e579-4db1-480e-a5d1-bab4215a69d7",
        "cursor": {
          "ref": "8c3046b2-f9e0-49af-b610-71526db71f76",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9444986f-4f32-4fc3-970d-519d001fe508"
        },
        "item": {
          "id": "c4c1e579-4db1-480e-a5d1-bab4215a69d7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "86dd9ca2-336d-4ff7-b742-00edce2f8cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b1acf0-c078-46da-ae46-9d24a8263aad",
        "cursor": {
          "ref": "50bccd10-c772-488c-adbd-7be9e4f800ec",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c354b679-0248-4c24-a2eb-712125653e19"
        },
        "item": {
          "id": "f4b1acf0-c078-46da-ae46-9d24a8263aad",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ffe5149a-b4bc-4b28-8b49-0f9a3a9ff2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a7b8f3-6c65-462d-beb5-9f7423d02eb5",
        "cursor": {
          "ref": "a5b4a729-0260-4b8f-ab9d-6201dbf09fb8",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0a514ef2-bc58-4765-a4cf-0bb1467cbfdc"
        },
        "item": {
          "id": "78a7b8f3-6c65-462d-beb5-9f7423d02eb5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "532429ea-d532-4789-9c88-b37097c25041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59bff68-5c66-40fb-b29c-fad1cf702673",
        "cursor": {
          "ref": "9147f552-d22c-429c-97c8-810d1871bc53",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b1665e3c-7eab-445d-9295-9b22cde82882"
        },
        "item": {
          "id": "d59bff68-5c66-40fb-b29c-fad1cf702673",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "190b44eb-0427-4b3c-9ec1-eeb2d2f5ef25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97761b3d-c4b5-4881-9c35-45bbe264713d",
        "cursor": {
          "ref": "a1989c47-0148-43fd-813e-f45380e36a34",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "450bb0f5-188c-4461-a4b0-4c8bc121e8e7"
        },
        "item": {
          "id": "97761b3d-c4b5-4881-9c35-45bbe264713d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b1eced3e-8234-48eb-b688-aea71feaad34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e10c1c5-d8bc-44af-8b1c-c16ca26afecf",
        "cursor": {
          "ref": "2e367e5f-0346-4b90-bf87-10bdd859bba7",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d505b104-700c-47c1-be25-fce6346e7eca"
        },
        "item": {
          "id": "0e10c1c5-d8bc-44af-8b1c-c16ca26afecf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bd0d0a9f-7f12-4848-8cd0-deddc7e9c10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd02791-f2b8-4c9f-8f09-9071f06320d8",
        "cursor": {
          "ref": "406be4de-7ae5-46c6-b80c-cc5275e7f39d",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6614bd2f-301d-4e60-a157-987e34d8c06b"
        },
        "item": {
          "id": "cfd02791-f2b8-4c9f-8f09-9071f06320d8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "186f1a10-ba0b-4ec0-8a78-921d31a1f3fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12e4a81-cab3-4ee7-a7e6-2ca5f58b61cc",
        "cursor": {
          "ref": "dae64fbe-1ea3-4327-8944-9392a0da2db4",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a218b20a-98cb-4c2e-a496-5759dd86ab74"
        },
        "item": {
          "id": "f12e4a81-cab3-4ee7-a7e6-2ca5f58b61cc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "442b3237-f08d-403e-b1a6-413d4d1a2e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456e2dd8-b5c9-43d7-b13f-fe2689ba0501",
        "cursor": {
          "ref": "d02407bb-fe46-42c8-ad61-57d335c05bd7",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "436b68e9-65c8-43ba-abf8-cc00867c3293"
        },
        "item": {
          "id": "456e2dd8-b5c9-43d7-b13f-fe2689ba0501",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "56644c82-e8d2-4b5d-9b90-c245f1ace81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285c9afe-19f1-4a6d-919f-93e77ebfe2b4",
        "cursor": {
          "ref": "6170230b-aa72-415f-bd41-51d08c328504",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bea8a43e-2c6b-4c87-8a0a-7daa416ce72e"
        },
        "item": {
          "id": "285c9afe-19f1-4a6d-919f-93e77ebfe2b4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4ac28ba4-cbb1-48da-ba50-a45a16c0aa5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca48c1c4-1314-4b5d-86a5-d2d72be5ab56",
        "cursor": {
          "ref": "74d917d1-0d31-4c92-b7bb-1c8a4dc82718",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a7514280-c313-4ebd-94ec-b185f321ffb9"
        },
        "item": {
          "id": "ca48c1c4-1314-4b5d-86a5-d2d72be5ab56",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "95507e82-1cf8-49fd-bf95-2428a772ce1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d51124e-44de-4958-bd0c-22b019a73102",
        "cursor": {
          "ref": "849a0e32-50b6-475a-937f-cc9370fd3853",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "507a02eb-91ed-4e91-abf5-4c1ed8f94ad3"
        },
        "item": {
          "id": "3d51124e-44de-4958-bd0c-22b019a73102",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "79d4552a-1a59-412a-a5f2-16ddafe6042a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ee6792-9d0e-41cc-9169-ef8d0fb43f65",
        "cursor": {
          "ref": "6451c451-8859-4a51-8695-9f773c92fd79",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7d76bc97-8712-4236-a4c5-95b50856350f"
        },
        "item": {
          "id": "45ee6792-9d0e-41cc-9169-ef8d0fb43f65",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "57c3abda-0e48-4d0f-b5c4-5e4b579ec491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a9e417-faea-40df-b7ba-3eb9269174c9",
        "cursor": {
          "ref": "111961a4-97a9-4421-8920-53cd419ea40e",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3d770aff-601a-49ca-9790-613068c9068f"
        },
        "item": {
          "id": "15a9e417-faea-40df-b7ba-3eb9269174c9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "882453ff-c479-4019-ad2c-5f03a9b69123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0582ec-f416-431e-8023-5e45bbd29038",
        "cursor": {
          "ref": "ffddb2ed-2454-491f-ad72-653d44ca0965",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "833ca33d-af25-4808-b7a1-7e05def2a46a"
        },
        "item": {
          "id": "1e0582ec-f416-431e-8023-5e45bbd29038",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "05ea620a-6658-49f7-8df0-4c3a71b40631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae418d4-15f6-45b7-acbd-32c30593d277",
        "cursor": {
          "ref": "2db8c9bc-ee5d-4088-87ca-9cd532d2ecde",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d807504b-1749-43f8-9cb9-efc08b4782e7"
        },
        "item": {
          "id": "7ae418d4-15f6-45b7-acbd-32c30593d277",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8bea699a-8f54-44fd-b6a4-a0146ad1d355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca801e2-3095-46a2-b27e-4dd3eb93181c",
        "cursor": {
          "ref": "fb60c56e-5f1d-4c01-9d1d-a626e5cbeb33",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8468ddbe-9779-48a9-a0b0-0c704f2db7b2"
        },
        "item": {
          "id": "eca801e2-3095-46a2-b27e-4dd3eb93181c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "01dee3c1-4aa1-47ed-ac8f-e7fe0ebf5c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5bbc9e-40ed-40a2-b272-231384ad1210",
        "cursor": {
          "ref": "648f1834-f9a1-4811-8754-3e56e4152b75",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2b28be07-9967-445d-8978-f57f53742fa5"
        },
        "item": {
          "id": "ad5bbc9e-40ed-40a2-b272-231384ad1210",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3a957083-4184-43ec-95b5-269eb889fd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ecfa56-91d3-4c1d-9304-44626e6305ff",
        "cursor": {
          "ref": "a1c0fe97-e77c-42a5-a099-34f8a2864950",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d8c47d38-fd23-41ed-b45e-1609898f9908"
        },
        "item": {
          "id": "49ecfa56-91d3-4c1d-9304-44626e6305ff",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0cc29911-a49b-4527-baf1-73490c97092a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eba6bfa-f564-409d-b476-3d24dbc70743",
        "cursor": {
          "ref": "5995d2e0-4eb5-4a69-ba23-bde6a155683f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "da23e513-cacd-4bbc-a0e1-bd28dc46beae"
        },
        "item": {
          "id": "7eba6bfa-f564-409d-b476-3d24dbc70743",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "64ebe5da-42ff-4a11-8f55-e58d9bcf57a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fd8ea5-4bde-4e96-9801-9aacdf7b5460",
        "cursor": {
          "ref": "50c892c8-9c13-4850-8b7a-8451e4038fcf",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6699d478-6c48-40a4-a98f-9e8ac0f5d077"
        },
        "item": {
          "id": "64fd8ea5-4bde-4e96-9801-9aacdf7b5460",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4ab23c67-86d1-46ee-9bec-ed2f1e01ef8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb781cf-6d96-4ca1-be98-cfd5afcaee16",
        "cursor": {
          "ref": "d0c46f1f-ccab-4e0a-893c-e34bdf1fe114",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e71f5179-7f9b-41ae-b9fa-a1cdb2d8f384"
        },
        "item": {
          "id": "3fb781cf-6d96-4ca1-be98-cfd5afcaee16",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "53b2e1f2-c56c-4057-9a1c-578a4e0fbb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6cebff-f2fb-42b1-b8cf-59549868b04f",
        "cursor": {
          "ref": "33ea903e-7f6c-4292-8d69-55cb5f055d67",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c35e243f-ce29-46ca-96c5-c09099f26516"
        },
        "item": {
          "id": "cc6cebff-f2fb-42b1-b8cf-59549868b04f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "af6d5097-9dfe-4de9-8f2f-210d795c72d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53625cc-2e0d-47e4-988c-51ef3a2f4b57",
        "cursor": {
          "ref": "28d52203-8a44-418d-9fb5-b577ca9ecb5b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "391f74c9-2482-4669-8452-46584ed35f21"
        },
        "item": {
          "id": "e53625cc-2e0d-47e4-988c-51ef3a2f4b57",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e9c0b3f8-7076-4f85-93fa-fc0e1248addd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173d72d7-d81d-4ce7-bc05-fe3658a0a5d6",
        "cursor": {
          "ref": "1834978d-7d4d-4c3b-9a2b-45c5440ea1d3",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a40a5f07-47f6-4287-9c79-db9bb6468236"
        },
        "item": {
          "id": "173d72d7-d81d-4ce7-bc05-fe3658a0a5d6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0f59bda0-f8d2-4558-b351-3d97c5f8b0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97a5a81-e5f2-4c00-9cd3-6eee78ae9187",
        "cursor": {
          "ref": "ddb69ae4-a4f2-4dec-9148-ec063723c095",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "63e73356-ac48-4633-bf51-85d3d4c8545e"
        },
        "item": {
          "id": "b97a5a81-e5f2-4c00-9cd3-6eee78ae9187",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "10eb2bea-0277-4564-9554-35b9fd52fb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941dcb63-5d36-4dab-990f-e8a54118817f",
        "cursor": {
          "ref": "bbedd3a0-9914-459b-9ede-7868f7a7709d",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eac60ecd-dd44-4b34-8b05-e8a29aebaf50"
        },
        "item": {
          "id": "941dcb63-5d36-4dab-990f-e8a54118817f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a1c1d36a-82cd-47f8-846e-85c003fbd5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4702a96e-ae66-49ba-9204-9761db1ffbcc",
        "cursor": {
          "ref": "b1879e7e-0ea0-43c5-82df-d6e13f76fefd",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8b098aa4-780b-4428-8a20-aa0b357d7801"
        },
        "item": {
          "id": "4702a96e-ae66-49ba-9204-9761db1ffbcc",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8853cd18-02b4-4de8-a0d8-e428fecf4e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0dd8d2-4349-45fc-bac1-10b928642069",
        "cursor": {
          "ref": "cc5e3887-c6d5-4cae-bf2d-98d58e61da71",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "54038663-8d32-4f9f-a794-15e9d8eb9d15"
        },
        "item": {
          "id": "3c0dd8d2-4349-45fc-bac1-10b928642069",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8f6377f2-ff21-4806-b63d-66cd49e4ca9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "8b97f427-725d-4399-812f-fe374220909c",
        "cursor": {
          "ref": "821501dc-13d6-47f2-b33e-e342f96829b5",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "22132e3b-138d-44fd-866a-20731379685e"
        },
        "item": {
          "id": "8b97f427-725d-4399-812f-fe374220909c",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "248bf73c-bc57-4ed2-ae30-3afcabbf86cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "25acdbf3-f824-4845-b4e5-06a935460b06",
        "cursor": {
          "ref": "89578552-fef2-4226-abc9-81c0367de76f",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "903a6786-d879-413e-8aec-5f31d03ad40a"
        },
        "item": {
          "id": "25acdbf3-f824-4845-b4e5-06a935460b06",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6ed1689f-34ba-4ff6-938b-3c19d60eefb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25acdbf3-f824-4845-b4e5-06a935460b06",
        "cursor": {
          "ref": "89578552-fef2-4226-abc9-81c0367de76f",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "903a6786-d879-413e-8aec-5f31d03ad40a"
        },
        "item": {
          "id": "25acdbf3-f824-4845-b4e5-06a935460b06",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6ed1689f-34ba-4ff6-938b-3c19d60eefb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f543af9-9517-4239-ace2-75e38b5df102",
        "cursor": {
          "ref": "7a78ec55-ef90-41d6-958a-108695797cb0",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4b825ab1-2839-453e-8389-346f8a524b8b"
        },
        "item": {
          "id": "4f543af9-9517-4239-ace2-75e38b5df102",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "59ddc44c-ef4c-4094-bb64-39cc825e3226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b680fda-3fde-4930-af64-9a658960f174",
        "cursor": {
          "ref": "2f2fdc27-6785-4d33-a40c-98c78e42cb26",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ce9dd6bd-f975-4a4d-b536-edca14ab8f05"
        },
        "item": {
          "id": "1b680fda-3fde-4930-af64-9a658960f174",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f2fadbcb-dfcb-430d-a140-d4990d6de938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a229bc16-dcc1-4e59-bdfb-1cc90e6c5779",
        "cursor": {
          "ref": "aaf14dcd-b664-427d-aead-ea93fa521502",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4a287ab7-1eac-4cb7-8ad0-b332251c7839"
        },
        "item": {
          "id": "a229bc16-dcc1-4e59-bdfb-1cc90e6c5779",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2b7863f7-54d7-4708-a719-39c742046a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8c65a9-c033-4db2-9066-80eee6519d08",
        "cursor": {
          "ref": "f1282ba1-8470-4e69-a39f-a010d4c3d930",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f33975bc-b348-45a6-9b8d-e97dda9671af"
        },
        "item": {
          "id": "bd8c65a9-c033-4db2-9066-80eee6519d08",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "154c3304-c904-41c3-aa43-fc26c292845c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c722126b-17f9-4641-9f39-7bc06f0ef31e",
        "cursor": {
          "ref": "4cf44650-f2ae-4f16-839d-cf70beda8989",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d11f562c-4b52-4c32-b201-906e1bdcf89c"
        },
        "item": {
          "id": "c722126b-17f9-4641-9f39-7bc06f0ef31e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "91a9e53f-8168-49a2-825a-a99edb5b409c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d82f46-58be-42c6-b5e7-fbdcbc57eebf",
        "cursor": {
          "ref": "d00a7224-37a5-4c71-aa69-a388d8e9369a",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "659a3234-fc9c-4969-a249-5145aa04f822"
        },
        "item": {
          "id": "57d82f46-58be-42c6-b5e7-fbdcbc57eebf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "02a1fb5e-94ec-4d54-925f-d6102a86306b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d49046e-4875-4928-9fb6-14de860bfc3f",
        "cursor": {
          "ref": "058c023e-62b8-4db1-b9b3-4c8009fc97c5",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2c9c9f90-387c-409e-8619-68e4e0acb31b"
        },
        "item": {
          "id": "0d49046e-4875-4928-9fb6-14de860bfc3f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b5807ca6-440a-4139-8cb5-bf2a4a699fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4b59b5-709e-44c5-9c19-a50e2849ef27",
        "cursor": {
          "ref": "f0db32f6-2e10-4761-82ed-8b30f0f6ed36",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "29ffcbcf-0bb6-4514-9fd7-756af01294d5"
        },
        "item": {
          "id": "3f4b59b5-709e-44c5-9c19-a50e2849ef27",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f00f37db-a727-4c4c-acc9-140ca081b8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accffce2-9a14-4912-9480-f33375e77c0e",
        "cursor": {
          "ref": "200482e6-f718-4fe9-ba88-514ad625ffcb",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d653c52a-f878-42cc-a4e8-9d5a77f7517c"
        },
        "item": {
          "id": "accffce2-9a14-4912-9480-f33375e77c0e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "278671c0-4a25-478d-aa09-26a1f21505be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a4cfbf-f42b-403a-b895-1a7512da18c7",
        "cursor": {
          "ref": "7b610331-8666-42ee-8ad7-26a6cf3ed593",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "95d1f08a-6254-412d-b04a-2cfa099f029d"
        },
        "item": {
          "id": "e7a4cfbf-f42b-403a-b895-1a7512da18c7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6ba08355-bac7-4f38-ad21-6d036d3975aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6bafbf-7aee-42a2-a2df-4a333c24a2b7",
        "cursor": {
          "ref": "7238bef3-5bfd-4a9b-ad96-96a845e819d3",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "34a0db13-e1bb-4640-8e02-1682a35201a7"
        },
        "item": {
          "id": "3d6bafbf-7aee-42a2-a2df-4a333c24a2b7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4a3f9f56-ece1-40b5-839f-a28554827689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e125be9d-4ad1-41b3-966a-2d96853902f3",
        "cursor": {
          "ref": "050bd77f-79b6-4cbb-9b3b-1ea6328d3192",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "846e745c-0f54-4a23-8960-7ba4a6caee97"
        },
        "item": {
          "id": "e125be9d-4ad1-41b3-966a-2d96853902f3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "29ba16ef-199e-4279-8055-f49dde105765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ce5025-08b1-458f-b5dc-2558c1615fe8",
        "cursor": {
          "ref": "bc629ac8-690f-4478-855a-10cbbb3752f5",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a02d7588-be3a-485b-a0cb-82c49182b7a7"
        },
        "item": {
          "id": "90ce5025-08b1-458f-b5dc-2558c1615fe8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c919f7f9-9e1e-4c60-858e-3fca1e88a057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c1abce-3349-45d5-bf78-ba7b44124a94",
        "cursor": {
          "ref": "2dc7c7ab-d271-4a55-a9f7-17b2d598de7e",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "69c11929-37fb-4408-afbc-71fc658379d1"
        },
        "item": {
          "id": "36c1abce-3349-45d5-bf78-ba7b44124a94",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fad2a9f0-c2f8-41b8-bdd1-844abc28bdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5efdcbf-5946-4a1b-9311-2179f1e158d8",
        "cursor": {
          "ref": "e0b44da8-ea37-4fdc-81e4-d8da8334631e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a142dc38-039f-4239-9835-5df6de3606fd"
        },
        "item": {
          "id": "c5efdcbf-5946-4a1b-9311-2179f1e158d8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3e14e6ec-d622-417b-b467-2a42487ae2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd2bf95-4f97-4d77-b073-88b765e71672",
        "cursor": {
          "ref": "281d86b2-1aa4-4a33-b25f-c936a4dcd427",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1938cff2-014f-436c-bb3b-6d9867776623"
        },
        "item": {
          "id": "2cd2bf95-4f97-4d77-b073-88b765e71672",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c4351720-80f8-4b22-89c7-0eb7ce4db158",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "7e04fdd4-c774-4a42-8fd8-b0e79a68dd4a",
        "cursor": {
          "ref": "943a9e8c-ad37-41bf-bdd3-b01d48f25dda",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0f0c61f9-3b4a-4f84-8d06-10ce5ebd511f"
        },
        "item": {
          "id": "7e04fdd4-c774-4a42-8fd8-b0e79a68dd4a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b0083371-4a99-43e5-a1de-6180ec66e7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6dc823-7d4d-453f-8c96-a08454085751",
        "cursor": {
          "ref": "008c48d8-a327-4472-bf9e-8d0b263fe130",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6587f000-3306-4d5d-8101-5c086ff8c03e"
        },
        "item": {
          "id": "4d6dc823-7d4d-453f-8c96-a08454085751",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1cf5f8e1-8810-4082-abf2-618d9a776e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2497584c-e80e-4611-a11d-5d1465ca8e0d",
        "cursor": {
          "ref": "a2b95787-5ced-4667-b126-ece5ae0ec0f6",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "315469f7-5cea-48c6-8d4b-e540b2879b10"
        },
        "item": {
          "id": "2497584c-e80e-4611-a11d-5d1465ca8e0d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f55af79c-1df0-4e31-be24-7540501fa98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69288ded-a244-4fdd-bf6e-dd30cfd92202",
        "cursor": {
          "ref": "36a09b45-d645-4b1c-89ed-75e56c3936a7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "74c2ea5b-2a9a-4626-bce5-9e23c40a8664"
        },
        "item": {
          "id": "69288ded-a244-4fdd-bf6e-dd30cfd92202",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9d6db8a2-bce6-44fb-b5ef-32763e035d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7eee56-0ab7-4e9e-bd77-177cf86c4745",
        "cursor": {
          "ref": "42b44e26-37de-4a04-bf31-27674c4b11af",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ae5ea7bf-e4d4-40cb-a0ec-229466228a36"
        },
        "item": {
          "id": "4b7eee56-0ab7-4e9e-bd77-177cf86c4745",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b5cd44e3-695a-4207-9fbc-6e0a98bdfbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e837711b-207b-49fe-8bdf-d55cb5e8f8cd",
        "cursor": {
          "ref": "ba07ef47-5cb4-4674-b2e0-0b76700cf729",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f9ef6fc3-6f53-4eeb-85be-8af4fcbfdd98"
        },
        "item": {
          "id": "e837711b-207b-49fe-8bdf-d55cb5e8f8cd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0af9f2cc-8676-451f-95d4-d9b81e5048fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d9dc97-daf2-4d7a-a499-c6af0817063a",
        "cursor": {
          "ref": "7080ab19-d0d9-45ee-b1df-eb85e6e8b6a9",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "83abc1b5-39ff-4009-a9b3-5414dae7f615"
        },
        "item": {
          "id": "06d9dc97-daf2-4d7a-a499-c6af0817063a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ba393122-4ae1-4fda-9ab1-33bb25bb1e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ea9501-b522-48c6-b60f-f2d7eab542d8",
        "cursor": {
          "ref": "49ba39c8-e744-498c-82ad-aed38078a8dd",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "966af107-1c33-41a1-ae4d-ea2dd05a6df1"
        },
        "item": {
          "id": "b4ea9501-b522-48c6-b60f-f2d7eab542d8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a0c9c3eb-009c-4d62-a426-e7b08cc90aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff99b40-67a8-4978-afb6-f0aadb09eb23",
        "cursor": {
          "ref": "fc9a9a7d-1a45-4c47-847b-c58e586cb3c8",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5590e34c-4542-4f00-be37-5546b6de340e"
        },
        "item": {
          "id": "bff99b40-67a8-4978-afb6-f0aadb09eb23",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d54c7f07-8ead-43d3-8d14-28f61129d1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043c2d81-cac1-4525-9293-7f68d4858bea",
        "cursor": {
          "ref": "21d4a3c8-c3c4-42fb-bfed-cdee5fb1d50d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "09e0f847-ddb8-4305-a9c7-4eddaa9a738b"
        },
        "item": {
          "id": "043c2d81-cac1-4525-9293-7f68d4858bea",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2fb4bc5b-33c5-4089-ba71-5a16091da0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48eb9038-e897-432d-ac23-f39d2519ab70",
        "cursor": {
          "ref": "ff913288-83f8-4585-b56b-1ad011599248",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3e62c848-5347-467a-a997-0bfa190e1fb2"
        },
        "item": {
          "id": "48eb9038-e897-432d-ac23-f39d2519ab70",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "28456ed2-f930-40af-a6d7-9cf62ab89233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93d1e20-6342-4545-a8fe-a317bf8dda7e",
        "cursor": {
          "ref": "170922ef-7f7e-4477-a1a8-2d0798246a6f",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "df38813d-21ca-43e4-9745-1f4c19c8dccc"
        },
        "item": {
          "id": "c93d1e20-6342-4545-a8fe-a317bf8dda7e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e20e6c96-47d6-4e8b-8ffa-873e13c7c6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9398d2-cfe4-4411-8cf9-cbe398e22397",
        "cursor": {
          "ref": "e9e1eceb-cd4d-4be8-a4f1-ddab221fe5f6",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a9348daa-0cbc-4f70-9b3d-7d63c83f312d"
        },
        "item": {
          "id": "2a9398d2-cfe4-4411-8cf9-cbe398e22397",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "89330d37-7823-41ef-b282-6e1e4dfa0929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebd99d5-f04c-42ac-937d-805c68219a92",
        "cursor": {
          "ref": "8dae29b0-0069-406c-b402-c75c70528c3b",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2190223-62d3-400c-9e66-95a29e7f04df"
        },
        "item": {
          "id": "3ebd99d5-f04c-42ac-937d-805c68219a92",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2daaaebd-4d63-4593-ae66-00cd3227426c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be4e83f-0346-4a31-aa09-c320a1f73d12",
        "cursor": {
          "ref": "64edbcb1-cba8-49a0-95f4-0007619bbe0e",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "47ce3759-cbad-4fef-b5f0-d1ff33a1cb07"
        },
        "item": {
          "id": "6be4e83f-0346-4a31-aa09-c320a1f73d12",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f5475d2a-4571-492a-b02c-98ef154ac307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5eccd6-484d-46c0-b1b2-fc8c5fed1ac8",
        "cursor": {
          "ref": "e7fcd1f5-315f-47cb-826b-0009ab6b348e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "07ce03c8-390b-41c2-92c0-c5b6c417f3af"
        },
        "item": {
          "id": "1f5eccd6-484d-46c0-b1b2-fc8c5fed1ac8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f4bb16ce-362c-4e64-aaff-51a6f61cd91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925c3084-085b-478e-995e-52fff605c617",
        "cursor": {
          "ref": "23ca2a63-ac20-4df5-b60c-9b259de345e2",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d4baaf2c-62df-44d4-9318-bd6da7421195"
        },
        "item": {
          "id": "925c3084-085b-478e-995e-52fff605c617",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "da2ebdde-dd8f-45aa-a567-a0ad382b6cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279ecf35-30cc-4ba1-b2c0-3b3153acffaa",
        "cursor": {
          "ref": "ac93a0f0-5fd8-48bf-a13d-6c7598f78e37",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c98feae8-e351-4bac-9bf7-ad0048ec44f1"
        },
        "item": {
          "id": "279ecf35-30cc-4ba1-b2c0-3b3153acffaa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1657f026-b386-4324-8323-9ae380af01d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da18e05-0d53-4109-9885-2ed5a0fa099a",
        "cursor": {
          "ref": "a088911d-83fa-400f-b393-c2ddf13cf6b6",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e2bff019-c5a3-425d-b74f-6a943554ffd1"
        },
        "item": {
          "id": "3da18e05-0d53-4109-9885-2ed5a0fa099a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c1afe622-521c-4e43-9c79-3b078cd848e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14fa675-f90b-4716-bf58-2cee2f0c75dc",
        "cursor": {
          "ref": "8ca9e6d7-6f14-4f51-9f5e-a17dd0fb5fef",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3878d083-cd1d-46ac-b108-3045828f7dc1"
        },
        "item": {
          "id": "f14fa675-f90b-4716-bf58-2cee2f0c75dc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "db0730c3-bb63-4f60-8514-2ea99f87f8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6a7bf1-92b1-4e7e-b1d1-69a9cb1b60e1",
        "cursor": {
          "ref": "9840ab2a-b7cf-47b8-b555-ab792bfdea8d",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "925262b4-43d4-4353-9e9f-5913d5e0f3b9"
        },
        "item": {
          "id": "2e6a7bf1-92b1-4e7e-b1d1-69a9cb1b60e1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "88b85992-f8cb-4e98-acfe-1c3c07a933dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d50332-3fdb-4c95-bb16-5855b83ee965",
        "cursor": {
          "ref": "c6fc3460-0305-4352-a07a-a145616bf6d7",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0f0494a7-07a8-4f96-bd5c-29d0441a4638"
        },
        "item": {
          "id": "88d50332-3fdb-4c95-bb16-5855b83ee965",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3aa7f837-ff49-4bf2-9ff0-8d21d32a5ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824a16ca-9d3f-41fd-a539-4d29b086bef7",
        "cursor": {
          "ref": "63c11530-257b-4378-a44a-fb168dce4a5d",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d5662f91-79c2-460b-8e34-1680d8ed817d"
        },
        "item": {
          "id": "824a16ca-9d3f-41fd-a539-4d29b086bef7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b2fe3416-6f2f-47a4-be35-d0cbeeda7ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22ead2e-0be1-4221-b675-2f53506b86db",
        "cursor": {
          "ref": "9674214f-c544-46f0-a992-ecfb53898290",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e693087b-11b9-434e-9aaf-d6d5149451c9"
        },
        "item": {
          "id": "b22ead2e-0be1-4221-b675-2f53506b86db",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "66682396-3620-4a7e-b7d1-94c274ca6456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92da22c1-8465-4e3f-a17c-d1bf45c87ca4",
        "cursor": {
          "ref": "08f575be-defc-4a40-8353-986c335840ab",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "97073fcb-3681-42a5-9938-9049599ca3e9"
        },
        "item": {
          "id": "92da22c1-8465-4e3f-a17c-d1bf45c87ca4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9dd33394-2a2d-4886-ac73-806b5828bb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275d5d68-1d5c-4c4b-b258-224fcdb0a697",
        "cursor": {
          "ref": "6b678d83-963e-46ae-93ae-f21461647b87",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "62692bff-4ab0-4495-8bf6-8b21d91f9b7e"
        },
        "item": {
          "id": "275d5d68-1d5c-4c4b-b258-224fcdb0a697",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3ed35418-3257-408f-a981-e17f113bef16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594af512-648a-4032-bb2f-007829896f02",
        "cursor": {
          "ref": "0aee6014-18a3-4e21-acd5-0b7a87f7dcf0",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "610700ab-563a-4ba1-81fb-312208ee64cb"
        },
        "item": {
          "id": "594af512-648a-4032-bb2f-007829896f02",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d1f5c106-ca64-4167-a0b0-0a03418d25ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1773a692-aba6-453f-b514-3058f0e05cdf",
        "cursor": {
          "ref": "82f7cf63-dd32-4c74-9d1e-30ecc7c104e3",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c0eb64e7-321e-4e3b-813e-3cb89030f78a"
        },
        "item": {
          "id": "1773a692-aba6-453f-b514-3058f0e05cdf",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3df07518-4f30-4050-beff-e4d44de857f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5447f7e6-c871-4ee8-ae79-58f74f357677",
        "cursor": {
          "ref": "ff36679a-6bef-4db6-9cb3-12e14615f757",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e8c70360-99fa-4692-8c9f-65575052c92e"
        },
        "item": {
          "id": "5447f7e6-c871-4ee8-ae79-58f74f357677",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1f8a00e7-0780-4592-a117-5c3266141e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009e5334-3d64-4ed8-9c12-88e6badd831f",
        "cursor": {
          "ref": "17ba358c-9d33-4aa6-ae15-097404b3acaa",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "12f917e7-5786-4dca-bbd2-856d44cd3844"
        },
        "item": {
          "id": "009e5334-3d64-4ed8-9c12-88e6badd831f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "db83f13d-70af-4905-b882-c2c4b2d70686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8fc79c-0199-4dfb-8538-07f2080de8f5",
        "cursor": {
          "ref": "2557335d-cf02-426f-96bf-94a79beaf01a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "419a9712-cd6f-4e99-9972-f125c1e52dda"
        },
        "item": {
          "id": "1a8fc79c-0199-4dfb-8538-07f2080de8f5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7a7777a1-770b-4921-a9b4-4d2cf394c656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09156628-81f8-4681-8625-95bc370b6e16",
        "cursor": {
          "ref": "87ff3453-e476-4601-b10f-21a31abaca42",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "952996db-6912-42d3-baf8-bf350f8fb04f"
        },
        "item": {
          "id": "09156628-81f8-4681-8625-95bc370b6e16",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b3ee9e1e-6d16-4d27-ab90-2705a9edf50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973d0d62-36ad-46d8-8283-1d49645188f4",
        "cursor": {
          "ref": "c104cc59-9166-481a-9fea-6b5c8d218951",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "56461bb3-b7d4-4649-8c17-38826c00e81b"
        },
        "item": {
          "id": "973d0d62-36ad-46d8-8283-1d49645188f4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a9de9e53-1625-4c3f-a6d0-286d1e28008f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb377a5b-314e-4ef6-801c-5131366ffdfc",
        "cursor": {
          "ref": "aacba062-52ef-4c69-a911-80e339c88615",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "77410ffd-22d2-42cd-a0e4-eb1f8d357a80"
        },
        "item": {
          "id": "cb377a5b-314e-4ef6-801c-5131366ffdfc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0bbd1e41-5879-4451-83fc-267bbe15f2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbd5e67-f99e-4ecd-be5a-6b18cafb2eda",
        "cursor": {
          "ref": "94edaa49-12f7-4704-a04b-8fe5b52bcbeb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bda9f963-07c3-4dbb-8970-043a3534f732"
        },
        "item": {
          "id": "1dbd5e67-f99e-4ecd-be5a-6b18cafb2eda",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8ee1f13e-7c2e-4ac4-92dd-d0f2ed4fed65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a625dcd-6633-40c0-963d-055d65322808",
        "cursor": {
          "ref": "a2de3679-c4ba-4ccc-8770-35d9d18896f1",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fa42dccf-d05e-4741-b6db-dcf086ddca74"
        },
        "item": {
          "id": "2a625dcd-6633-40c0-963d-055d65322808",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "69ca7d7c-4a78-44ce-ba8d-0aa54e2f35fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9e3072-ab2c-4170-830e-dbadc4c1a865",
        "cursor": {
          "ref": "6afbaf69-b066-4e39-872b-30885a03eddf",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "10a2b5c2-fb26-4dcc-95e5-a8b1ba877dae"
        },
        "item": {
          "id": "4f9e3072-ab2c-4170-830e-dbadc4c1a865",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9439993a-5b76-4d47-92b7-6d62dbd85449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122ac266-e858-497a-8b22-beecb6c04748",
        "cursor": {
          "ref": "67234486-eba9-4e0d-a3f1-f69a2d2fad96",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b7968579-b4e1-460d-8b8b-cb0fe1c82137"
        },
        "item": {
          "id": "122ac266-e858-497a-8b22-beecb6c04748",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ee729aa9-9e03-447e-a94b-e489920a88d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bac09fe-4503-43cf-8724-3d34098f4720",
        "cursor": {
          "ref": "3ae99e5f-0993-4b95-b64d-12ef7de0bef0",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2c16119c-88e4-4a89-a01c-135ee62a0b1a"
        },
        "item": {
          "id": "7bac09fe-4503-43cf-8724-3d34098f4720",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "835496c9-2abe-4e76-a922-a4a14f5f5689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd8dcd5-571a-43ae-930e-e3a91c81179e",
        "cursor": {
          "ref": "2952627a-32bb-45fb-906c-fa7e510699b8",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "12421ff8-164f-42c5-85da-be968e199707"
        },
        "item": {
          "id": "ecd8dcd5-571a-43ae-930e-e3a91c81179e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "591d8c67-3472-472b-bc05-8994a064b50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f8bc7b-03ce-467d-998f-88b175fac704",
        "cursor": {
          "ref": "8809a968-29e6-4d77-a3ff-2c9ca8731ae5",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b8a7892e-97a3-4a1e-85ab-51401fe1ee65"
        },
        "item": {
          "id": "e3f8bc7b-03ce-467d-998f-88b175fac704",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d417f413-ae61-4222-a326-d08f71f69775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320d8d92-c42a-4f58-8e65-48331247c834",
        "cursor": {
          "ref": "9c366771-71f5-4648-a86a-7c27ec562304",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ddd72687-824a-4375-8a48-73cd165a14b6"
        },
        "item": {
          "id": "320d8d92-c42a-4f58-8e65-48331247c834",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dea54ed7-9869-4f53-b23f-fac0c8684f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6389bf38-595d-4902-9693-fc27af4c00ec",
        "cursor": {
          "ref": "d43de78f-9745-4cf7-8467-1e275477d28c",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d930c890-6041-4ed6-a369-182b9d17f6f0"
        },
        "item": {
          "id": "6389bf38-595d-4902-9693-fc27af4c00ec",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aa430583-f649-4756-a134-3d6d11e9e6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3da75ac-fbb5-49ff-89b1-4fa86e6d71b3",
        "cursor": {
          "ref": "862ec19b-2a79-4204-993e-e47dac64f83d",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "94d99266-b0a7-4b5c-b886-958fd5f7bbcf"
        },
        "item": {
          "id": "a3da75ac-fbb5-49ff-89b1-4fa86e6d71b3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "23357eb1-b7b1-4382-a47f-866f353a4150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4282c97-4c1d-40b1-ab05-18b46a4285c3",
        "cursor": {
          "ref": "7db54dfe-7f7f-4f25-84f5-dc53b3cd40bb",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cc8ce9d2-870a-4fc3-aa9b-6e5ba2568f5f"
        },
        "item": {
          "id": "d4282c97-4c1d-40b1-ab05-18b46a4285c3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2440bb3d-f558-4f9d-aa31-2e3b9c48eb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f879b1d-ce30-43e9-8811-e972dc23c906",
        "cursor": {
          "ref": "556550d9-b029-456d-820d-e9aa51093c8b",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4686fac0-bb8f-492a-a5c0-a58ee711dac8"
        },
        "item": {
          "id": "8f879b1d-ce30-43e9-8811-e972dc23c906",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4ee804de-d71b-4648-a354-73eb363f54b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023985f9-35a9-4425-ada8-840c74b19415",
        "cursor": {
          "ref": "5c10fe2f-9e52-4958-9a8f-981edf2801b2",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "61692030-118c-49d1-968f-c76aed7d1121"
        },
        "item": {
          "id": "023985f9-35a9-4425-ada8-840c74b19415",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "137a419e-8f34-4e13-aef4-470466e03ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7576cb-4c83-4e1f-b5b5-4856a4468759",
        "cursor": {
          "ref": "2e7ef085-2431-452b-a391-8adec5d120b6",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b6735ba3-cdd5-4f38-bbea-461224444c8c"
        },
        "item": {
          "id": "3c7576cb-4c83-4e1f-b5b5-4856a4468759",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "030ab5ca-b514-4de2-bef9-c6e942f79754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f9f4ea-7676-4fb8-9674-94a5c2251e17",
        "cursor": {
          "ref": "97886c5d-499a-4781-a07d-43660e1b3273",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0c98401e-d100-4080-bfaf-0b697d538f23"
        },
        "item": {
          "id": "c1f9f4ea-7676-4fb8-9674-94a5c2251e17",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "55d21da7-04cd-474e-b70e-06e125582913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96455d3-a342-4165-adc4-99eaeed12822",
        "cursor": {
          "ref": "839c63cf-084d-45de-ab2f-7113d8769390",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ec122808-f0b8-4713-af5f-60db2ea1476a"
        },
        "item": {
          "id": "d96455d3-a342-4165-adc4-99eaeed12822",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7132758b-84c6-4b0c-aa7f-0bc48fb84948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f8ecdf-3474-4114-b3fd-d62ec7f158cb",
        "cursor": {
          "ref": "0b3f7817-b57d-4769-86b4-0a9577dd1c91",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8e0dcdfe-fdf0-4bd1-81bf-902ac4811c78"
        },
        "item": {
          "id": "49f8ecdf-3474-4114-b3fd-d62ec7f158cb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "515bd9fd-92d2-49a0-808a-f1adc1593a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c502e0-42e6-4368-9ceb-1383a6f721f3",
        "cursor": {
          "ref": "df56392b-3857-476c-bfd4-4b45f734712c",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "54c4c86f-f5ea-4f57-bc76-0c6ec97df10b"
        },
        "item": {
          "id": "82c502e0-42e6-4368-9ceb-1383a6f721f3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a85c6649-912b-4686-8244-e5ae4648c030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91360b0-2a4c-4d10-95c6-370f233cc5b5",
        "cursor": {
          "ref": "14edc6ea-9c14-4ae2-8f32-f3440d45a0ec",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3de776b9-c8fe-4c23-9b99-f94ba335b23b"
        },
        "item": {
          "id": "a91360b0-2a4c-4d10-95c6-370f233cc5b5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "103d8d24-1092-4d00-ba94-9f84a8e28de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56478e7-26d7-4bb2-8f17-610b144dd7f7",
        "cursor": {
          "ref": "a413c563-5aad-40bd-8eb8-c6528ac55214",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4b7a17b2-68f4-478b-b9e9-33c214e750c6"
        },
        "item": {
          "id": "c56478e7-26d7-4bb2-8f17-610b144dd7f7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "534dd594-5780-498f-9c7a-887075e44e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0228d125-0981-48ea-9ded-c205779d86cf",
        "cursor": {
          "ref": "8bcd0531-2e9e-40bf-bfaa-56ae9e554421",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "88aab75d-9392-47b9-84a1-c64cc9752a98"
        },
        "item": {
          "id": "0228d125-0981-48ea-9ded-c205779d86cf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e63ce94c-e525-49fc-8880-cb95da063f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43663511-928e-4133-a69f-628d0d9acd64",
        "cursor": {
          "ref": "53009571-aa41-4d67-b10a-82589a8b41b1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7805dece-0a54-4a70-885b-416f73c74e2f"
        },
        "item": {
          "id": "43663511-928e-4133-a69f-628d0d9acd64",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "71853879-6fc2-47e6-973c-7e8f97a3259e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e591c1b-9312-49fc-bcaf-ea9daac75772",
        "cursor": {
          "ref": "0442c8d3-0e4e-4f73-b9b7-d347b5f9e153",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "05d7f619-926f-43de-859a-deb73fe79402"
        },
        "item": {
          "id": "3e591c1b-9312-49fc-bcaf-ea9daac75772",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0cba6597-ceb9-4018-9b1c-decb91f11737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380c1d7d-5e01-447a-97dc-6224bc4833d4",
        "cursor": {
          "ref": "01036158-6d9b-42fb-8c42-5fc078626667",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "83099415-0d77-40e7-8ec5-13df4c896a73"
        },
        "item": {
          "id": "380c1d7d-5e01-447a-97dc-6224bc4833d4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "86de76a6-42c7-4e15-8acc-abfb924a9d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca1b775-22b3-469a-80eb-513f5626d587",
        "cursor": {
          "ref": "eafb24a1-3ab1-4a9a-a32d-ad29233f558a",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "289b03bf-395c-4b8a-9c72-3fa085680aaf"
        },
        "item": {
          "id": "0ca1b775-22b3-469a-80eb-513f5626d587",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fe2fa408-3f1d-4dcc-8231-cf0922333513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3441481d-ab6c-45bc-b1b9-d4ffe16f1b8f",
        "cursor": {
          "ref": "879dcb89-9617-4bcf-8681-38be169baa10",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "85aa8b9d-38f9-4752-ac84-b93fda37ea45"
        },
        "item": {
          "id": "3441481d-ab6c-45bc-b1b9-d4ffe16f1b8f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2ebed70f-cf4e-4f04-8cb9-cf7a1d66c70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb0e053-d5b2-4a11-8d56-4b2637266457",
        "cursor": {
          "ref": "09ff2bfc-a30e-47a4-96b7-115da7918c13",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2b61bff8-0a65-4a0f-b9eb-d138af14c94c"
        },
        "item": {
          "id": "3bb0e053-d5b2-4a11-8d56-4b2637266457",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "40b3d2c2-9552-4a83-8c1f-0edc5941e272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6afa56-eab4-47ec-8323-79705812537b",
        "cursor": {
          "ref": "77a6d1c5-e1b2-40f9-bcf4-67d2dc661280",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4da97572-e943-4aae-9f9d-ec6726bcdc7f"
        },
        "item": {
          "id": "1c6afa56-eab4-47ec-8323-79705812537b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1fa7db8c-5576-4611-a20d-4e5fa0581e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ce4f66-6d3f-44c9-ab7b-8083015c0faf",
        "cursor": {
          "ref": "9f10ce66-9f33-4594-a51f-0bcd08256e04",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7032bca3-56b5-4172-a947-88c0bdd9bef7"
        },
        "item": {
          "id": "b4ce4f66-6d3f-44c9-ab7b-8083015c0faf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "daa4c33f-7fb8-47cc-a1d0-ff9c16c51fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e7d0cc-80d3-43da-91d5-b66a99f772b6",
        "cursor": {
          "ref": "19ae035a-ee09-4f89-b99c-cda7dc3f1a68",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4579ed32-1a88-4f33-a793-eb3b92de1547"
        },
        "item": {
          "id": "36e7d0cc-80d3-43da-91d5-b66a99f772b6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "22eaf53e-1215-4b84-acf1-b96df9dc0638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f22b9cd-269b-4df3-9954-15f2175517da",
        "cursor": {
          "ref": "4eb9b645-0a21-4ef8-a224-5ca85a01bb4a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e66b839d-b02a-4e26-86c4-5b88fd16fd0a"
        },
        "item": {
          "id": "5f22b9cd-269b-4df3-9954-15f2175517da",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bc1f06ee-0c88-42ef-a4e2-0b4ed93276da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848f66ce-2854-4145-8b3a-9c5561be80e8",
        "cursor": {
          "ref": "8ed787f8-cf15-4e34-99f4-51385846ed62",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6af1960d-af16-4934-8ad7-21916d1487b6"
        },
        "item": {
          "id": "848f66ce-2854-4145-8b3a-9c5561be80e8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "51e25fea-436d-469a-a462-1892ccd64402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38450465-d022-4e37-b51d-8723093d44c3",
        "cursor": {
          "ref": "c6cabfcd-514c-4eb1-96fe-717130f0fafb",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1116e000-3cdd-4bda-8e67-e7859e0b9571"
        },
        "item": {
          "id": "38450465-d022-4e37-b51d-8723093d44c3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1ccfc856-5aa7-4c9d-b17c-dd7e268a1fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b6884e-df1a-48a1-8c2e-752f4b47103f",
        "cursor": {
          "ref": "354e77ee-c5dc-4db2-a09a-9c8c07ede80c",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5e1f0327-0c08-449e-a3cc-b7d7f83b02ac"
        },
        "item": {
          "id": "28b6884e-df1a-48a1-8c2e-752f4b47103f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1ac02be8-d846-4d6e-8f26-3ab3b267992a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b7cea3-d869-4bde-b853-c6964c2500ab",
        "cursor": {
          "ref": "3019f6c2-0781-411e-b2fe-65aca56271c0",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c6e48f7c-e1ce-4a15-87df-37730c8ef50f"
        },
        "item": {
          "id": "f3b7cea3-d869-4bde-b853-c6964c2500ab",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e3dfc4e8-e89b-4c26-93b9-2a24de2a978b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5aaa07-3475-4fa1-a98c-05c25d6267e7",
        "cursor": {
          "ref": "4cdc1f69-a4dc-456c-a12d-410c963aa808",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f59d6359-bed2-4ba1-845b-57a798de8e6e"
        },
        "item": {
          "id": "be5aaa07-3475-4fa1-a98c-05c25d6267e7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7d5fecc6-fee9-49e0-a4fb-a59297bfe65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbd046f-834e-4aef-9fb1-1f3f68df8280",
        "cursor": {
          "ref": "9a96573d-348a-4153-aef3-7eeef4a81d10",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bd657931-286e-4dff-9c5f-76a0864cd5cb"
        },
        "item": {
          "id": "9bbd046f-834e-4aef-9fb1-1f3f68df8280",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "678a4347-3a56-411d-81af-511efce44f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d46251c-48cc-49f5-b54f-6bf85849da8e",
        "cursor": {
          "ref": "b97b9c2c-8103-40ac-90d9-bcfd38382826",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "86787924-f4c7-44a9-a62f-c3bdae0dbaf8"
        },
        "item": {
          "id": "0d46251c-48cc-49f5-b54f-6bf85849da8e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0ba5a69f-f30b-4f89-bfb1-5fac73117794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf152b0-8f1a-45bb-b494-7820e0a20b48",
        "cursor": {
          "ref": "4a4a0f9b-06e4-41ff-97aa-61ed395fa902",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "feae622d-0c38-4c70-95ff-d537d4f877aa"
        },
        "item": {
          "id": "bcf152b0-8f1a-45bb-b494-7820e0a20b48",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "724d92a3-4560-49a0-9cde-51c13286f05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2faf2c67-9316-41e4-af49-406a97ee027d",
        "cursor": {
          "ref": "8f95783a-397e-482d-b24d-a00970653497",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "57fd7c44-2a73-466b-84b9-0694acb7c359"
        },
        "item": {
          "id": "2faf2c67-9316-41e4-af49-406a97ee027d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9b313b99-b4a3-4fcf-a7a5-45d346dbda52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a4ffe7-9093-4620-9b1f-be96984c8663",
        "cursor": {
          "ref": "fd85fff3-65c2-4c54-8d2a-67f14d932aeb",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c40c23c4-15e8-4416-9db2-8899221fff26"
        },
        "item": {
          "id": "87a4ffe7-9093-4620-9b1f-be96984c8663",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "dbaa0d79-b2e8-471b-8b7e-ef305d9ec8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cde415-5a9d-490a-8d08-99b810016f81",
        "cursor": {
          "ref": "a56be6a9-8098-455c-b727-3c9e40eecb38",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "68652859-5659-4296-b8ce-150eb4931c14"
        },
        "item": {
          "id": "a9cde415-5a9d-490a-8d08-99b810016f81",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "768cb0a5-d8da-409d-9714-107362227416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c47d722-86a2-4c86-8cf7-6441c4f909ce",
        "cursor": {
          "ref": "e88eb2e7-1145-4396-a6b7-f86d7143d1da",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1ae01d00-9630-4ec0-bc5d-7cd19b072357"
        },
        "item": {
          "id": "6c47d722-86a2-4c86-8cf7-6441c4f909ce",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "41f188fa-9e66-40a7-807d-99e809e7107c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c36392-35eb-4ff1-a336-34335c2097ed",
        "cursor": {
          "ref": "89c4f5de-08e4-4ab7-ae53-b381cf799349",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9ba7d036-1809-41fb-ba12-a3492807fd2b"
        },
        "item": {
          "id": "87c36392-35eb-4ff1-a336-34335c2097ed",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "54e8ec04-98d7-4d27-814c-712d5dee3771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1002d482-29dd-4daa-90f0-f24f8178dd53",
        "cursor": {
          "ref": "6b235f80-22cd-42e1-bcc5-5030c54de9b5",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "43956bb5-3109-42d5-b471-a4344a0649ed"
        },
        "item": {
          "id": "1002d482-29dd-4daa-90f0-f24f8178dd53",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6076ae4f-00c6-47f8-b86a-f0b1c4c97a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7df66f0-2b09-4b7b-9eb5-0c1ab90af3d1",
        "cursor": {
          "ref": "cc2f8500-b1ee-451e-b387-e8e1e3fb0b12",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3d253991-9cf6-4dfa-975d-704d2b7068c0"
        },
        "item": {
          "id": "d7df66f0-2b09-4b7b-9eb5-0c1ab90af3d1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1ebefb21-8542-496e-95ff-c88fee356aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05951dd-361f-419a-86e3-56e871026bef",
        "cursor": {
          "ref": "d356b813-b201-4eba-a4fd-5ae17f1a42c2",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6f2966d5-3ee4-4b88-90c4-d53f968e0958"
        },
        "item": {
          "id": "a05951dd-361f-419a-86e3-56e871026bef",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "11a61b37-a935-49c1-980b-1ec90f6e9bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6420c5ef-3adb-43dc-a751-753062ec5142",
        "cursor": {
          "ref": "09ce8bd0-bdd1-413f-95d7-d9e0e42835b1",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e194c916-5195-4be3-b3ba-449fa173be8c"
        },
        "item": {
          "id": "6420c5ef-3adb-43dc-a751-753062ec5142",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "12973e49-aa1a-4dd6-984d-74a5f52fe24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c73f1a27-385e-403c-9118-09cea192f9d9",
        "cursor": {
          "ref": "6fd75a05-6259-47b4-97c8-7395dec66447",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4e150d9f-63cc-4f88-a5d6-01b9571cfdbc"
        },
        "item": {
          "id": "c73f1a27-385e-403c-9118-09cea192f9d9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7fd3eed2-47d6-42f0-8422-1bd999b3957c",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd1ca18-6584-4705-85a7-98c0e45e40c6",
        "cursor": {
          "ref": "75fb5fcb-a868-4e45-8c52-597af40fe156",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "79f147bb-d78f-43fc-9c4c-b8d4e587df57"
        },
        "item": {
          "id": "9cd1ca18-6584-4705-85a7-98c0e45e40c6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a7f5f4c1-696f-4836-b2f0-2ecad08bc3fd",
          "status": "OK",
          "code": 200,
          "responseTime": 1722,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "195574a4-a579-4aa5-8e43-d91c731b6160",
        "cursor": {
          "ref": "4cf5b384-12fe-4dd2-b1fb-5fea6eecf566",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3c555c41-33ba-48d0-bd3f-28d480a4e296"
        },
        "item": {
          "id": "195574a4-a579-4aa5-8e43-d91c731b6160",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "082111c3-c39c-4f74-a093-8e6a04b59fdc",
          "status": "OK",
          "code": 200,
          "responseTime": 2648,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a554886-1961-4a80-9019-6fe2f7cf90f9",
        "cursor": {
          "ref": "38d8e1ee-67da-4960-8998-8115079feefb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6bc60f60-b367-4cb7-8378-19f036e99ff4"
        },
        "item": {
          "id": "7a554886-1961-4a80-9019-6fe2f7cf90f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b1431c66-cdfd-445e-9f6c-e60f31ae682d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "7a554886-1961-4a80-9019-6fe2f7cf90f9",
        "cursor": {
          "ref": "38d8e1ee-67da-4960-8998-8115079feefb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6bc60f60-b367-4cb7-8378-19f036e99ff4"
        },
        "item": {
          "id": "7a554886-1961-4a80-9019-6fe2f7cf90f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b1431c66-cdfd-445e-9f6c-e60f31ae682d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "7a554886-1961-4a80-9019-6fe2f7cf90f9",
        "cursor": {
          "ref": "38d8e1ee-67da-4960-8998-8115079feefb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6bc60f60-b367-4cb7-8378-19f036e99ff4"
        },
        "item": {
          "id": "7a554886-1961-4a80-9019-6fe2f7cf90f9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b1431c66-cdfd-445e-9f6c-e60f31ae682d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "65b1c37d-98ae-48c6-8206-3971aa185b5b",
        "cursor": {
          "ref": "6d0ac5f0-b648-438a-bbaa-452b04cec664",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "611106c0-0fdd-4c56-868c-e623daa77598"
        },
        "item": {
          "id": "65b1c37d-98ae-48c6-8206-3971aa185b5b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9812f7a5-2815-4618-8cdc-9d7760d327d0",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9c017ba5-0eb6-4fbe-961e-6a4ce93dc1de",
        "cursor": {
          "ref": "4fd8eb43-6026-483d-ac66-8946f95b2bde",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2c844f8c-2ae9-4bfe-aa00-50ff5a48a0f9"
        },
        "item": {
          "id": "9c017ba5-0eb6-4fbe-961e-6a4ce93dc1de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "783314c3-02f2-4899-883c-393387f5150f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "9c017ba5-0eb6-4fbe-961e-6a4ce93dc1de",
        "cursor": {
          "ref": "4fd8eb43-6026-483d-ac66-8946f95b2bde",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2c844f8c-2ae9-4bfe-aa00-50ff5a48a0f9"
        },
        "item": {
          "id": "9c017ba5-0eb6-4fbe-961e-6a4ce93dc1de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "783314c3-02f2-4899-883c-393387f5150f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d06d58f9-7085-45f4-8647-44a80f7aa682",
        "cursor": {
          "ref": "b67fbdd4-ce56-4899-b591-04460d85367b",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "29c1fbad-48f5-4c0a-8cff-202407922db8"
        },
        "item": {
          "id": "d06d58f9-7085-45f4-8647-44a80f7aa682",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "7fc4952a-2e9f-4a6a-846e-6e4c5895ca14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 329,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "403bf42b-6d6c-4a82-9d6f-17677d373707",
        "cursor": {
          "ref": "2ab65441-9a80-464b-ba30-a97163747424",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "42c3f4c3-9502-4854-9046-1299ec1ec479"
        },
        "item": {
          "id": "403bf42b-6d6c-4a82-9d6f-17677d373707",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4eacebc8-89e7-4f7b-85ae-b72d92ea808d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "403bf42b-6d6c-4a82-9d6f-17677d373707",
        "cursor": {
          "ref": "2ab65441-9a80-464b-ba30-a97163747424",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "42c3f4c3-9502-4854-9046-1299ec1ec479"
        },
        "item": {
          "id": "403bf42b-6d6c-4a82-9d6f-17677d373707",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4eacebc8-89e7-4f7b-85ae-b72d92ea808d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f4df8a14-ca9c-4270-8f3f-c7ed7a42bb38",
        "cursor": {
          "ref": "6bb6519c-75b3-46c0-b103-52b24e5801f6",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "34102405-9029-43f0-907c-ec531ce0351d"
        },
        "item": {
          "id": "f4df8a14-ca9c-4270-8f3f-c7ed7a42bb38",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "ff78eedc-b49e-4fa2-8f71-548977166a94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}