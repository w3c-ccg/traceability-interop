{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a69a6a22-0dec-4bd3-856c-2ca1b6931f62",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b3bee4a4-4622-4810-847d-3e5473293ef8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47c63c14-0435-4b60-b947-664198b411e8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f3288f79-03a0-43fe-af38-751939b0df6a"
                }
              }
            ]
          },
          {
            "id": "e7068744-d930-41a8-ba45-6479b7173a95",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f99b490-6e4e-47fc-b038-20883892111b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6fedf992-d9ed-4d86-a219-325615169faf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8a5d0303-c980-4f6e-927b-a11dc5dbf641",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4917bbc2-fc84-4800-baf7-810955cc3480",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c38e8584-3e20-4a48-aa09-62b81f887211",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba7cb9e2-44fa-43b5-9d03-ba3b086b368a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70d0fab6-b90b-41dc-867b-050f945ee020"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7249c133-46ae-4a75-af82-5e94426e9d9b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5475d97b-41da-463e-86d8-17f9543a00cb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7403d298-4053-4f2c-82b4-11b1b710cc8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a62208fd-2c0c-4b20-a8df-a8905a64f21a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10f5c85e-2eda-4401-b1e6-29d8212c2019",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "df132f0e-3abe-4f87-ae5d-7477c26a03d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a2e1720-3464-4c83-83d4-6a4ba93c2b2d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "112dfd13-63fc-4f43-b81c-d26a9e014be2"
            }
          }
        ]
      },
      {
        "id": "8aba34b1-3b04-41c7-b2c8-8689cd5d28d7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "26987ff4-632e-4490-88d4-63d3396e9bd2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "adc4236d-8821-4470-981a-2fd7087480df",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54a43e7b-db03-40ae-9c52-a2c4232a39b6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bfda92-a1d8-4bd4-b4b6-4a6c6b50db32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b79d1163-66ae-47aa-927d-50f27cf021fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e81a50-7bbf-4dfc-b770-56091077dd08",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a31478-2eab-445f-bee5-93069b9bcc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32698542-289e-437c-b590-7e7e01c464cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be96658-2dce-4568-a2be-560b11464999",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ded088-fcdb-4413-9021-46b9be71d57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63f1f098-ad0e-4d80-9d4c-ecf3bdb17be8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6ca1b066-8bbc-4f1c-9298-b8e36dec9e41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90401734-36a8-4280-b4db-3708a1d79125",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d16b8e-459f-4494-9a72-86c684709391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e09b5b4b-f43a-4346-9ae1-6203c34b4baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffdf362-86a6-4c21-a840-22800965ce4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4b1a2f-627e-43b7-8115-5b4ba92f2f6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a60310b5-ec1e-4a76-9916-94b1242d4c68",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12ea76e0-e54e-42c5-a6b0-b1acdbd43410",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb4ace43-be7f-4c93-9f3a-64d5936b264f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4f4b488e-34a3-4f04-afc1-4d1194b51f4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58b204df-276b-4d19-af6d-7ad9af734ef5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1546e9b1-e231-4648-b977-bb79950e42d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ef42230-0722-4104-a791-bcdfd8bae33d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75fda957-e87c-4e35-988a-b7c4d2ab669a"
            }
          }
        ]
      },
      {
        "id": "8d92aa65-524b-4c47-8397-a16e42b5c900",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "270a418f-1ff3-46c8-9a8c-464ac6a37bc7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2e4373d-588b-49b5-a9a7-d3e6e6c82781",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ebc30a23-cbda-46f9-b3c8-ed67980b336e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a231de6-743f-4410-ab02-f45b670cc910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3ae8df-db1b-43f0-8cf4-db48999d5d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bff2f5-8356-41a1-ad6d-01be794f472d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95c58eb1-d020-46f7-b527-4aaea714f391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77d8fcc-6983-45bb-9a81-653d84f3975e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d3c170-2420-4a49-b595-0980fe0b861c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b10821-4802-47b1-85b2-3bc7ad9f9139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0634aec5-91f0-4dab-a2bc-510f6f0cce32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e76a370-0f9a-400f-b613-8e8752848d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d6513e-df8b-455c-89c7-cfcc5c4bd825",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a570744b-af2b-48e0-9474-7f201cc95b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121e309f-b982-4cd8-9f97-c8bb25e013d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a96319-01dd-4475-a235-416163f9bba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0054d24-421c-43b4-bdb0-d3eb9b2500cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19122de-57bb-4758-90b1-4f73d5e6a916",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3aa39b6-6583-40c3-8951-9814f3e15237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f23b746-27ea-4dd9-a44e-31f85953899b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4058ef5-612b-4acd-bf49-2611cefaa4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7655f6ca-e308-48eb-a01b-8bac528d166d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77bd15f-dd6f-455b-82dd-3426298c32f8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac8aa3b-94fe-4bf2-a9ec-610a0c6148de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98702099-6050-4e40-93c0-9a124b52013e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38718e7-bf6e-4550-99ee-0ecb0a4426b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3344d07-ee1a-4349-8e65-9ed5bc94d28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a727cd8a-6d17-4475-8423-d44714685b00",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b80d24d-7e43-49e0-b0ee-1998b41eccb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f21faad-5d1e-4071-8d06-94ec064c5345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d956b91f-cbcd-4353-90bd-47ec378f9468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d35f735b-4d0e-4810-ab58-35506721690c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7720750-1487-45da-a8a6-f19f6c1a89c1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd21a12d-e8ab-4edb-a628-0dd6e702ed2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5fbf06-503f-42d5-9748-b3b17054b5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8d967d-7129-4242-beb3-293eb6c0ab89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1254753a-e191-4c2e-a8ba-6fe58f834846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abf4fee-494c-488f-ba85-c05bd917eb85",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5597b7b7-4154-4e6a-89ce-9849e7da54d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea56231-9fcd-4d3b-ba8c-6fad80019c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7120807-f68b-4f53-a4b2-c2d0a8a9a62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3e13fa2-9d77-4ebd-950f-53b8ef091f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53daccc3-aed7-4912-8391-d635e2ed50fd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc75194-5346-4340-90b1-1be1a512d6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fff7db-72bb-4ee8-8608-94680b217121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75592e0-0cab-4ce7-85f8-be3b5ff0b40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d686117c-2a43-475d-9444-19ffa89b367d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335e0b94-66db-496f-bc0d-4f7f0e2cdc79",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af24b0a6-c60b-47ab-bfcd-53ef602d837e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166f60f7-47ad-4e8f-836d-5c60653fef5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3985e6-2e9b-45ba-9454-f0c10a2cede4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "154cf20b-723b-4bb0-adea-7c1bca9f5184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec761ce-76a2-4184-9460-ef67c296c0a3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a443b1-0fe0-4f9d-aca8-eadfcec845c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d191a44-ba20-4958-ae39-d8fa7668ee0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368f74c3-687a-49cb-9d83-8c4389d38c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3481a9ae-4dee-4248-88c5-762b4cd74de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c55e6b4-a02b-474d-958b-749312ef9042",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73b8801-ed0e-409f-ba14-aef940c72dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b48f78a-1d2b-4066-9d51-b4c4294f4acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcd8f0f-63f5-4365-a710-f6e33c08c7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81469d09-e2a6-46db-b85e-232d976be849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6827ac63-795f-4291-a295-dccabe04c3f2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935fdd47-a6e6-4afb-b606-fdd4d905e764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838f88e2-fc9e-4f70-a9a5-9e7a8fad5b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b29d95-548f-4938-92b2-4d71832be8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "061cd997-e89e-4c65-80d9-81e2d6cc1e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9384873b-60eb-4318-9e6a-da79af627ce8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dadeaed9-b185-4713-9feb-59fb27c2f327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c632487-e69c-402a-ba54-7be9fb6e4c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f21dc3b-6be1-4481-a3c7-06a00a7fc3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "999d3069-a953-45e7-88a3-0b664cf2a4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d02c5b-3269-4876-b4b7-fd4b50cc52f0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa945ab1-d18c-4eba-9027-06c901030c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652958a8-2cb7-4f4d-b082-5ee9b842d3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387b0888-5c1b-4157-9c73-9f1dd0e31412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28c26e16-9a56-42dd-bb28-4d795753a864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bc2695-c624-4c5f-848f-e5ac35148120",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c2b070-8086-4447-a16c-55b488b3ab90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155de76d-b363-494b-95c4-8ff2d61c3f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba492535-b4ff-4e1e-bcf7-6a924dd2d71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55ee0dff-c6ac-4dd4-9a43-598cfa6b923e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a572ddbb-5b14-4d0d-a705-1fc24d1ba073",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b886bd39-a81b-4144-9948-e8cbe643c494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55040bb-06fe-4b3e-8b5c-d9548aa3da51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83add33d-d603-4002-a987-20c0cbb8e135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba63e4f6-f61e-4e96-b90c-1c532ce83bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9ad9df-24bc-494b-a28b-6bc6ff6624a6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48517bd-e63a-4827-8b7f-2cdc4330bc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3055b123-f931-43b3-b735-ccbcf8ccccfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c7e836-5bdf-402b-9360-f4552ca875ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0de86547-3205-49ef-b6d1-8daf30fb48c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6548172-db1a-40ce-b905-0fdd96ed01e6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c2aba0-c521-404c-8779-33c34d2c2ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4badd1-02b4-411b-aa0e-d32093997a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c149d4-c4bb-4d5f-97f1-82a6ec12fa3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1da114a-b00e-4903-bb2a-126f57c459eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e87445-d91c-4787-8441-b5c506f5c2a8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d2819e-3f75-4d45-ad78-e2098fbf9afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10178ed1-123e-4ada-adb8-3f9cae94cb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f17e7d8-e526-4732-a0e6-83b743dda98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4212f15e-bcd9-4f86-939f-fb87fe800048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1d1d36-7d18-41df-b273-af87c640e7c4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1c72cd-70d8-411a-9b54-abdba69d3323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca7a065-44e9-44c9-8922-0ef1ba5a3484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66610b4d-3802-4ca7-80e7-98c8d84df91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc7c01b-2df5-4446-8509-3dc8ae8b47f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082c0f3d-b217-49f8-887e-0c6213fc5a19",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa490059-f28b-4c9b-9bf9-aef3830b65d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a2d25b-0c96-4dd4-91c5-21d486437d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76dc8747-e0ef-46b1-bfd6-e9b083933b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e269e10-5214-4fec-968f-147ded4b22d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d09ffc0-487e-43b0-b4e2-76ebc3b36e1b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcae4cc-c8f5-43fe-8023-c149faf9a869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313d82e3-40bd-47ab-a124-e5f1539e2a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646ee7f3-add7-4bb7-b1c5-5d86279c4f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3db801-b405-4310-a4fd-c008aa5d2c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2135e129-a481-4a49-a105-e043ddb5955b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d0a787-d732-4dfd-897e-b08c354a2916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf808d5-9c8f-498c-8ccd-a92f62b6e768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb7ff1f-9b8b-4add-9e2d-6ec11c5f5454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "84576864-d306-4389-8ab0-4618860dbffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b337cccb-fff2-4c42-ac07-977c98972e69",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7615f683-6dbf-405f-a76d-d181c3cda5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b490ad-29f3-4046-ad0c-9db87483dc9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818a4984-9294-496c-bf7a-0d3c5c0200e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72d8ffaa-014c-4988-a298-9fe8d5032db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a90c6d2-b190-4cf5-af38-e6d722ef28c6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83a031f-75c8-4c6d-b60a-5cd23a15b9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8802c323-f0cf-4d30-aea3-9a4e197edcc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5662741-6aa5-4598-92b9-551ae0a99cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "daf8bfb5-b4e1-4b4a-ad32-0b908c1d8b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f59f56-0b89-4678-aa09-be6f4d6082c3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6b8b6f-feeb-4bce-9c4e-7a5e7b46cd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d29884c-cdba-4391-9244-5b404792e53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210d3b25-5365-41ae-943d-2d0f18608f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4ff97d-b372-42c3-a51d-5fd22cea21e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ee3095-cbc3-483d-9239-f9da1d536be4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118c7e2f-6f04-4265-b9f2-7f26a78bda7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccea4669-b0bf-46dc-b7e9-02c6ebb523dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3387b7d-1c84-475c-8aa5-a42f64c1503e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a14a701-b347-4b6e-b03c-57c7fef13003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a233c94-cc36-4ff3-b7d3-a7a5497b1ce8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc510aaa-de3a-4883-9ea8-cb075573f972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c56c3a5-aff5-459e-9f44-c4ae8d6d1fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3ec69c-b989-489b-99f9-30efe91ef264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea82c9f6-b518-4d59-8979-1349fb74de1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7753be27-1180-4dd7-b5ab-cb53d6fa30aa",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c467dc-aa7c-4943-97ca-fdcb668fbab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44d9e09-efbe-4059-a4a2-4a8de97d09f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fda706d-bcc0-4b4a-9462-6c5a0fa1435b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb90f12f-14cb-4d7a-8208-aa3f5a133b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc5519f-c86b-4d9a-9392-868740946277",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cecf859-5b20-4124-aeaf-651dc03950d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a012bde-e02b-43a7-a2f9-9b0824f685f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0412545f-bf40-4cfd-bba3-58c655bd4af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "da87fb70-236d-484b-9b84-859689aebf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd197092-1621-4ce4-bf08-9ec76b34829b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cd8711-4be1-4b08-b2d3-9a41e64bd6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28033a14-3d3d-45f3-abdc-496e5032b3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17786b9-cc14-43d4-ae81-6bcc43da2d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82047865-27e6-4337-9a20-26f2661e22df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cad2973-d477-4573-9c26-a4bab414e9ae",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be28a6f-c135-411a-83ea-88ecec9d2c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd111d83-1dc3-4912-a0fe-bd190afd4412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd1d961-dda1-461e-ad61-0a2604411a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18bff2aa-b649-4816-b196-65ff1b96c5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e967f02-575c-4316-8f6b-80e5062dfdcb",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd376d48-cb8a-46e0-b8e1-0fbb8239badb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a431de9b-4418-477a-9d60-3c4b98ed68a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b259c293-b98c-4cf7-a5d9-d0d602d8cc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f800a915-140c-46ce-9bd0-51d1f5eb8650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17548508-9362-4846-9f61-16318807ce39",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5483ad-bd83-42ad-9993-e81c7e0dfe39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3fbcf14-8d3d-45fc-b24d-c39ffd44173d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61ad996-fe24-49b2-9081-0d8ccceb9276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "03446b10-c1fb-469a-97d1-736601b22676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05473dcd-26d8-49d4-8f09-32957ca30ef7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c921a4-c842-45a9-8fa9-a4292fe8ff80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89e7a1f6-7fbf-4d2b-bb2c-82bb7decae34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c74ebb-f643-47cc-8b83-d55e6cb93446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80869f39-9f03-4b79-bfce-c08001d2dbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bbe8dc-2045-4120-9cd3-e822f38c16c1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cba51d4-a389-44aa-828b-3fdffd5b999e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959bfbc7-e433-4a38-a334-e1e85e463883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82648a0-874a-4c8b-b12f-3f1bae82468d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fbb0aec-5476-4fa4-93d2-5478549cb4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f44506-19ff-4e0c-80e0-dab4e2e59ca3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd190862-df91-4b30-b4ed-d6ebf8d00c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5789b59c-8f29-468a-b718-580735118884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b35f8e-6940-482b-a928-9c896a79e4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "68e040e0-c348-4820-9a9f-3a38b507909f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77ca05a-2df7-4e22-bfa6-dbf54aa7d425",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f295522c-9045-4f46-989e-503202f6d6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255bac3b-a4e2-4789-b8f1-fa3b9ab46b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5011cd8-1264-49ad-afb9-1eb6f00a6eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa2db29-44c0-4a5d-9344-01615d570535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fef1ca3-1b56-4c5f-9f1e-525894162e1e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bcba78-e64f-4691-a11b-7512cc234e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c6e97f-77e6-4fb3-9b06-aedf0273c360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422cc0a1-08e6-46c6-9fcc-11709019e0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "95292ffe-a63a-4845-b51f-4b71bf9bcc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f446e382-a27e-4b49-8672-8c0cc2770b84",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1402142c-f90d-4c58-b044-29fd496a8aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b8e0fc-6608-43cb-b3d8-fb2e31a43216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9877e745-e989-4524-bf21-4ca3012a2614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d08a16f-8416-4282-8e3d-f100aed342b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf55487-0d64-4f65-8189-424c68467253",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c6c710-13b0-4657-80c1-57bd05d6ac97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477bcff5-f40f-42ba-a2d0-3565f304eeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb64a2ee-d203-4da8-b270-d48263b74977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a66819e5-5e6b-48bb-b313-f0889c7869dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ee5b4b-0680-4155-b9d1-75df34215d26",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb589221-7ed4-4b15-ac7b-8ba4e3c40527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab09dda3-2d2a-45b0-a36f-ed466f84fb3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1284b2-7ee3-4754-912c-c3fa6da7dfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0520e4-cf0f-462d-9e48-b47bb2d65de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be59a6b-0849-408e-89d6-445f739f7fc0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9f7c77-f672-4f53-93d1-97c90caf03de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89c745b-906f-412b-b05f-7813b0762ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a362dcd-97ae-441e-b844-9487fa1b5cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e59517b-7137-4434-81c9-673ef966df32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29364ca9-33f6-4496-bfa5-14879cce17b8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38eaee6-6b3f-49a9-a41d-c4ab77976e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0098d81c-2f7d-43ff-b2f0-764d4a4bd8ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9324ee43-2d73-47b0-a77e-e0440b2f8d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b7946b-acb2-4658-b060-9d10f0d4be4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef0510f-620d-4236-8c5d-76f902926234",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cf2364-7643-42a8-8af2-3d855070135d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c7015f-8b2e-4927-986a-f16dbe2f8f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8009d2ba-2224-4846-a74e-ce3efcb22200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff332edd-80bb-4b51-8cd1-f2459de98e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01eb3a7e-aaa1-4524-8946-90262dcddd51",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a412c78a-47ba-4a0f-90af-7ea212eb13dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c5ad4e-10dd-4203-bf4b-df465d6b92f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d90c47c-10c3-45d9-8ce6-0ca61d89b426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8e5e20-c559-46d2-b472-69d285a383ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd49fff-9884-46fc-a17a-5dfa0d23e227",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745e3163-6de0-42f4-bca7-4529335b6d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea022f7b-8880-4f80-94be-3253fcb0ac4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66dddc6-3a99-446c-8097-53b780b68f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70105174-4189-4343-a317-b1b78449fb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f2252c-01ec-406b-9322-99b9bb019276",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44d3277-6ce1-442a-82cc-4f98149656c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae53e89-ae34-4bf0-b0c6-2cebe5731263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac37ed2-09b0-470a-953c-e1c3a53e74d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07acfca8-7b5f-4b39-b20b-8b947a2a1a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c4afa1-4f42-4e6a-ba97-df6551b53926",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78c8a02-5c36-4e1e-b8a9-c02424f5dabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad77f36-0ecb-4edd-96c6-bc120b22e182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f52dc8-5516-421b-9a25-6e287c8c89ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "198a0261-c932-469e-a68c-8efa553d7164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca08e4a5-e9d5-4eca-8211-af2b7b78ff68",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bab2bb-d7de-4e91-9846-d8279f6a19ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5526583c-dee9-473e-9bf3-f916bbc830c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad4bda4-25fb-43be-aa80-f9a2a335d114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8249a7dc-2f80-4d90-90e5-5ab1b7598f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100d7d93-ce96-44f6-846c-8cd2f2d2d0fd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3835414d-8b66-440d-af90-d841fc37dcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1160670f-d244-4ad9-9659-7245d5d2f1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d059a75f-bc17-4437-a089-f58b3783d892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49ed7c6c-dcb3-4a10-9d3c-a54fa6485942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c690dc-97d8-4a05-bf31-d668002bcbbf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d7f4c8-1f78-46f2-8050-d12095401b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e5535e-6ba3-4490-a612-dc25ff522346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7055e0ab-79ff-4966-9cc6-6c201b261760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "440faaa8-9d59-48fc-8a9c-6aa56582dbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca874ec-0c07-449f-8089-1d7907cf5930",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c3356e-7f95-43a7-b477-a6b2d6501370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd641f8-7303-4ff3-84ab-670f59dc7c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10e95b5-fbc4-49f9-873d-6e5b2b580006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "679d8e61-496a-4aa4-a990-e668636ee994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85802083-bef6-42f0-ac5e-119ec2cda30c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53152714-5eff-4846-aabb-acec33dbc176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e614e3b1-6e49-4f89-9465-4c7640da0644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9a812b-ef13-4386-9e5b-3a14a59b203e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57d35f40-ad09-49aa-862f-1179df3f00b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee515672-d800-449b-9d77-f7984fbb7ab0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918f9ecc-7fba-47cb-8abf-1f1b3c37b205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6922af-4039-479a-8e4e-d44a53ccf7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b74702-6895-40ff-9fc4-68acf04daf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8dca28f3-3d2a-4e61-ac30-4784c2e2477a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7435ac6-1529-4c6a-96a5-ea9bdd6e24a6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9b6347-121f-4017-ab6a-3073cbefe9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe3031c-4283-4089-85fd-aedcc015c842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bba32c-9541-4f09-b283-72586c7db5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f788c1f9-c221-45f3-8f39-e79aa500a68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b754bf31-0f06-404f-8b07-2c06e997542a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d792db99-3094-4fae-b1c4-758d5ab7e57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151a2fa8-340f-4561-9339-a763d02b29b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6816b99-32ad-45af-92b9-be8eef51c8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d39aa32-8260-4c6e-ba65-76f4f3c29bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa86a6c-3feb-4d45-9e3a-84feeacf5e2e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ac1540-772c-4a43-aead-f22b097dc265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b41d8a-3d30-4cc2-a20d-1d774f5ac868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af152db-05d9-4425-af86-f82cc5196dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "078d9260-6d6f-4f30-a145-115b3ee775f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4eabd1-e764-427e-b76c-e43c029fd70a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06abe15d-f841-452c-b0de-cd8ec4f5d084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38b6f6f-9e42-446c-b001-dd6fc9608b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd274e62-9a5e-48f4-ac64-637f9a6a78cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "56d8e628-a66b-435e-8ba0-928bcadf1d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f1cb9e-b387-40f0-ae04-a4f54858c5d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3a23e3-02bb-4069-b3b1-b82dbc9bd1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ec4b23-91a4-4c22-a230-f4db3bdcae47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940b591b-e887-4c42-a139-98eaefc139d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bff6b15-75cc-49d9-878c-bf26c86d0d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9004d43-3bc1-4710-987a-c7578a02ce02",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc167d35-65dd-43ba-9d6e-f2e7eb2784e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea570c7-56d7-41b4-a1cf-b01a19b37754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e954cde-4dbd-4647-bcfd-2164f38b5a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c983056b-3cc5-47f4-8745-ac89d0896203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f187071-6acf-4ef7-bf75-96e95998bc95",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb2a553-abae-41b4-a72a-980e7be5383f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b011ec45-18cd-4eea-85f5-a50b3f1a6a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2787505f-0ef1-4a98-8743-3d5dd23a058f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb117f1c-2770-4aa5-af9c-b8a1d9368b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671365bb-971b-4a6e-9029-ae46f9d4ea38",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fc60cb-3b12-4803-9483-1a6db377ce80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c677b0a0-c24f-415d-a703-d04fe4829f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a2e1c5-c011-44a8-9f20-eb7762b3be70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9acba69a-b421-4111-92fc-ea1630bef046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb63c1d8-d971-472c-9fd5-c9a020705a8e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a23a784-87a7-4f5b-8274-8e05ac62b3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe7d99c-b9b7-41fa-b82d-b092e10ff09c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d943dc10-dd92-4aef-b184-67923dfd89df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6889e6-65bd-4a71-b152-b52ddb71fb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd3737e-fc7a-40c2-b6f7-f01a492bb116",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176d3aa2-b8b5-4324-8068-25c565f9a8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de92e85c-543f-4c61-9510-a5e55f8dbfc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed44bb4-1164-43c4-b363-b0824834a1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0563c0a8-af67-42f6-a750-ca4fd12ac5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad433543-bb7e-4ec0-ab8f-c99c066d0edd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fd23b7-4ce4-4f38-92ce-e740f08eb437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c39b4c-00c7-4d42-9bb5-87a6386be42f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310a203f-8ba7-4ec4-aa6d-c89c00bf443a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd383ca-37c5-4d5b-b8cb-ee88076a317f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3427dfc8-71e3-47b9-b625-63c063843fb5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4dec08-a54f-4ed2-ba43-7720895ec8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d254af82-1b3a-463c-a42e-ccaaeaa55071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e520073-a935-47ec-8464-c023cd335e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "608d1a12-52e3-45aa-b6de-7a0937144354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7756ac-6851-465d-b759-7037590632e0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4603af83-c5d1-402d-a5c5-3ff88277e678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337a1b72-5660-478a-a050-c06a96acaac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e8b118-1a18-4001-a631-f32f2d81985d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d058074c-13ec-4cd5-9d26-3247dfe95c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e0c060-67a0-48fe-8a53-ab1e1bb2b97a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6ecb13-bd67-4f00-8b82-e81a46913caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4567910-eed6-4746-9b47-1f758e818ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53249cae-7640-406c-9a0e-b0a2eae0a733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e37fecb0-ffbe-495f-9445-2bd08ec2d184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0928022b-e490-460a-b2d3-051fae7626b7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1bb151-3242-40df-8dbd-e2ca12a775d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0455a42c-6aca-4c41-9b20-f3b41603cc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f4a1bb-fc8d-4804-8580-0ab11078b10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79314bf8-a44d-4a90-a26f-5631d8c43b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1e360d-e19b-4288-acf2-ba7fb722a3f7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef50d8ac-b813-487b-89ce-6552689586f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff973116-6c32-41aa-b3c8-a09348df2d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb56346-687f-4c16-8918-b644128fb404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8052b3-3226-41ea-8202-9482b0f8ff2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4984e3d-eca9-478a-9b07-2e9f5e61a038",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c99fbb9-3422-4edd-af0d-fbc7b92a44bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f61ac67-9fa3-456e-bdb9-e2ef7b0d9ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62eadc30-52cf-4e66-85dc-0a4c8eb33255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8170b18f-1e3d-4fdf-8423-0abe4968a15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e20d70-d388-4508-a156-70778b7224c8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef7efa0-e480-4a4d-9347-bd4d939d7714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1708df-6660-4582-8856-67a83b78cb07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0d91e7-b87e-4338-8a08-c8df50340ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca51c501-d985-4805-b278-ea21a7c43678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b9562a-6a2a-4b2f-8482-d280cd2b0822",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5aa401-ee42-4ae3-8e3d-76fb0a918147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6f599a-156c-4fd1-a855-77e32dbe6e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b470a43d-2e21-40e3-8444-90600c8fe0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e18814e-3974-46f3-acb7-fa0a60816435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361cef78-398b-4875-8dd7-e33d8f0bd797",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46979096-8828-486b-bb0e-5b2c74e41233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44dda064-1cc5-4639-a1a9-bf190e67956f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a18056-b803-447f-9e9a-193436999662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c84d0bad-c421-4319-8258-f2b37e15d6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863e8e55-8494-4e21-9c38-1b20f462bb4d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ac8fab-c513-4f11-828e-a2f876ad8c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d06478-6260-43f4-baee-e08c9c21222c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9bf513-ba2c-416f-8976-d0f6c94dff3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7281d155-8a86-4f84-bf3e-37570441be9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f31db12-2d12-4d96-ba5f-597ba7cecf8e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0432f75-2fd1-4b83-87b3-c75d1fecfa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6d8917-f617-4784-9a2a-b89844a8264d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc44777-d1bb-45c7-9439-c150218de425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d7223c-e751-4b66-a964-5117f7c772c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3c4532-f368-4e9c-8291-9655f961cdae",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa87e8e3-bb48-4a36-98e4-d32907fa9f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d67185-c206-4202-bf08-76080361a4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe8450a-883e-43ac-ac42-c8bbcf015dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af9099a3-98ec-4a93-93c6-f3fe5a83b28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a47a4f-8710-488d-9e76-7499a710ca71",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5336f492-75b6-4b39-aef0-3fdb9002b55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a5af68-06b2-4579-a821-97b06c30eeff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6374930b-b75c-4f0d-b847-becb94592cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82d7fb9f-6389-4e5a-a4f0-2385f0f6ed62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66547f2-e386-48d1-b443-0a6f77c5255d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a306f09-b83f-4dbe-ba6e-e0fd717e0878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5dc5f49-23d1-46e3-9761-f88cc14043da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460e486e-b13f-4f97-95b9-3a4ac11cc7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98be0d0b-79ee-416f-9ff0-b288fbd70e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d67b9a-2c08-4fca-b022-47ef2799338f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b08fc09-7f7a-4701-9978-c55390f5cb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404bb1f0-11d6-4e4a-8357-e2dc4ed8d0f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82f1bf9-3327-4d75-a8e4-0a06ff89dfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf58ef1-d299-499d-ac1b-8aa6f268135b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b67ca21-3003-42ab-a962-a5317b3f7997",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0d5408-a095-4ac0-85bc-a1ebae05334c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4acedd-c2da-4dfe-82b8-d072acf5292e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dd0e7f-d482-4cbd-87c8-d35320da4b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89402fa0-e5b7-471f-9a63-ff3ef04c5386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d95a3cc-cf10-41dc-9bef-1a9b48003e52",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3feecd9d-64e5-447e-80ec-9179399298d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d856d0-433f-460c-ba78-4e2d89bded77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc48fedb-d303-45c7-8535-ac938abe483f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ebc0fef-42b7-4da5-a828-14d9509e05d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bac6f2-6542-41ba-b8cd-10354e452c77",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36efe1f6-d07d-42c8-b7b8-54f5ba87fc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49003f87-8955-4585-8770-d333deebd138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e484353-b2d9-4c80-9f45-93f3af53ec15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da72ac6a-608b-4051-bfe4-ec0bbbaf1a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8555eea7-7296-4201-8ec8-8c6e31965904",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a640351e-4ac8-4307-9158-edf2eff7146e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37429200-b9db-48ce-8674-fafbb474aa21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0af557b-8266-4cec-a8ef-ccfb227acaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "455c5472-c5db-4ffe-9316-2778d1ef962c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e37e5c-9a76-49f3-97e5-fe2d85013f8a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3015e7-98f2-40e0-83d2-cdd6751776ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34ceca8-004d-4c35-b11b-2774233e6368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22858003-2bec-4c15-9b32-53ce3fdb2ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "30971c5c-fc5d-4674-bab3-391ddf4d5217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb209ea-e482-49a1-a30f-fee7f5d5b6fe",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179b017a-24ff-416c-8f15-a4ceaad4c0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7578c6-c651-41d5-a65a-233b6906ddd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fa5455-b184-4388-b4cb-721523850e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "08882d4f-6645-4b9e-b323-39b51acff56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a8c661-17c2-4a92-a88d-115aaeb0fd5f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a78ffe-f7d7-408d-9189-8d542cbfa7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddadd8e5-9c51-4380-b34c-bd0fd540c3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e6495b-5f16-47a1-892d-234de789607e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4fe13fc-ae58-4834-abba-f07343fbaad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c79ceb0-bf78-4e8a-8590-41ee9f748090",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5ac1fb-7706-4705-98e5-2b19fdb3ca31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7661bf0-d5f0-409f-aad5-fc6ce4ef9b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de578e6-99b6-401f-afb8-d8ad12d58ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb6abdd-6f7f-49f8-bea5-be7eb52556c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b24284-4e91-4e2e-aeee-55c8d4152100",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac8fd28-d223-4c18-8132-3812939069ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701fac94-d86f-46fa-8c85-774c9d0c6bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1601e3f9-2c2e-4253-a23e-31d0e0ee1851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4dcfc9-6438-4d05-a37b-5f11e3196b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa9d2ed-5ead-4f36-a195-b11a0d0e6a98",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a778011-fb05-4cf4-84bc-231420a3ade2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ad1b9a2d-c5d7-4de1-9a06-8d5c1646b549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0684f8-189f-44d0-afab-f12ae8b920c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dacd9e9c-f8e2-4248-bdb7-1a5189ce4591"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b34ce416-416d-43f7-8b20-1455fcd9f27b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b6fff3b-03f5-4a73-81a6-9ffc4e3ba4ff",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c801ae21-82a9-471b-9e3e-450e4a3aa357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fabcb19b-bce0-4be1-8dbc-d77a99530efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8b5966-de59-4fee-99b8-35b5071ade24",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4911b3ca-96f4-4aeb-81c0-e351f2d25372"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "113451a8-6b15-4f77-98dc-468b52b4ad8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db6083a0-86ba-47db-aa82-883b39de6a13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1c90a28-e142-4d31-b7d6-51275c62dc98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8ec560d-b165-44d7-9109-463c1d6aa21c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34fbbe4a-791f-4676-83e9-bdcd6d4a5e48",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9cd6f9f-7b6c-4277-b5bb-ebfa94b7e758"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "175e7115-caf8-4970-9eeb-e7fcdbceacc0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ad7fa66-9ee5-461e-919d-ac7d8057348c"
                }
              }
            ]
          },
          {
            "id": "8470bf41-71ca-4116-967e-3cce2a0ac8f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62e73fe6-b78c-4573-9845-f475b323942f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57183c56-9d9b-4636-bd3b-21a475a5b387",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d969f5a9-7e4a-49cf-888e-50b3a83a3f87"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37b9b6a8-631f-4908-8cda-199dc98f149a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6beeed31-f789-4218-a15c-be7c76fe80fa"
                    }
                  }
                ]
              },
              {
                "id": "c0d354d4-6f6b-4d2a-9694-7106d8ca2cec",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00e900f5-731e-45fc-8476-780364ffe1af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8b412e8-6150-4655-9e26-2133d5211055"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62da96e5-4c3d-4e79-811d-a6d3e425504d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ebb5bcef-0fae-4050-8f27-5ebf760b9572"
                    }
                  }
                ]
              },
              {
                "id": "7fcef5f1-8ed2-4c97-a76f-a4c6ae2e5e91",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef127760-ab13-4c96-b76f-fe268c851008",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f6c4da0d-5d23-4df3-89cf-1fbe9104be44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "892e5415-064d-4ad1-be99-1e7f85e667bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e97f9d67-6d0b-4b11-b7be-a2358d838b33"
                    }
                  }
                ]
              },
              {
                "id": "c7f32e5e-c1ea-4f0f-b51c-7f65dd7ace99",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d57bc50-4e59-4405-9a39-fe4296130825",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f64c8e9a-f59a-458f-a01b-825de4fa07c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b73c52f-f798-42f3-bc70-f02e40bb7242",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6edd6fca-b4b7-447e-820e-972fea221ad9"
                    }
                  }
                ]
              },
              {
                "id": "de567800-8786-4523-bc20-09c103d31bf2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0aeb9af7-6fdd-4062-93a3-a9eb09ccd260",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "020c96dd-802e-4fc5-8279-f99a4d495ef9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51a891e5-0a37-46af-8874-0773bc104372",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e7777903-9212-4a96-9378-e05844eeef8c"
                    }
                  }
                ]
              },
              {
                "id": "4b69624e-0d6b-4c49-b7ba-21b46e3d5941",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25f1e168-8c6a-4746-9f63-c255f6133dc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fffd503-3e2a-49f6-8e00-5b3390ad134b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "325aa37b-6378-410f-83f4-05ad6cb76e96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "250e7223-ef54-44eb-a694-2339fc1d0552"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "10c1642f-2c45-42d1-bdb4-e4ea8d3d81e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aeff70f0-2d2f-4963-968c-3273ab5e654b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "503d8307-bf74-4a11-b77f-206445aa7111",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d25c0b6-69a9-477c-a804-6a8c42bade90"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15ba005e-6159-4890-ba8f-f000f8060bc6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8457bd93-849e-4470-95ca-ecd0c597d4f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7cf60f8f-0959-4377-ab0a-3f6c1f63b492",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4787858d-6220-4b1a-9e47-6d8e0c9f6e85"
            }
          }
        ]
      },
      {
        "id": "c2892131-701d-4a41-940c-7029444a6e89",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3a7a8d00-6fe3-41bb-97fe-421087df7ff6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "074209b6-1e97-4ce7-9a8b-c7f141a41d96",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "de7e4f03-efc8-49f1-bc06-d2e0f5dc2095",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e57bfe0-4f4e-4f54-8200-aedecb075406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc74e0f-c00d-4805-aa4d-f618711991f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e523f8ec-7f3a-4133-82ae-3c04aa361adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "05c2dfa9-02ed-4848-b3d4-9632eb2e94d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a623e2c-c1b7-4a32-86b4-9881f7e1bdde",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da316537-d9fb-49ec-8ee5-3a75d80937cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f8a87c-bf90-4513-a517-4819a37f6069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafd0aa3-2886-41c2-b2a5-64019538efaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e6c5b5-3a14-4387-b7ce-7fe66c496b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4379e28-e209-4682-87a7-4eb1ebb255b7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df708a4c-f5ff-4970-8030-3476a2bca3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5fed3ff-2bdb-48e7-838f-061649c89faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b56928a-fd2c-4f0c-b2e3-c4a38fb61995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8938e82-1980-4e1a-8fa0-beaea584e2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80643c1-fb2b-405b-af08-ea1a17b186b8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fe5df1-5224-4d4e-aca3-19d143e1cb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f208d13-b8d7-47fd-9f62-938571775f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd882be6-0f6b-4800-a1aa-959ab5a76149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da5bf0c6-603c-48d5-9f2b-6883ac534d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4de0bf-4534-4a5b-ac4a-0a5944ebaf0a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282c0a2b-6076-4b8b-9deb-98d7ff5939f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0478b491-b588-49d1-8999-3d2dfceacc59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadfe52f-9100-485d-af35-e64a71d1086a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "872bcd5b-e16e-43e3-bd18-1e0cc6fc2a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d9b6d0-cc2c-40ed-b565-e02d327b7b22",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152f490b-e077-4742-a3eb-933ec329e1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff811858-6d74-4ce0-8cb8-8758ba93a0e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cd8a45-e34a-40cf-bbad-fd69ed99988c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58413dd7-d40e-402a-9a26-3780d447eaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57017bff-cb8d-4257-aa97-a96e9bdd767c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e021ceb1-d264-42a2-b621-89fc91f320d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a67a581-4c7b-4831-a306-54397a9a9651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0298f852-df18-4cbc-9f10-6d7cb6c77aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d70ca78-1d81-41a1-af22-78a40a336f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386cd89f-d8ab-461d-9fd3-92f2e0dd80da",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172b96ea-18fc-4b49-bfd5-7c0d384fee64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d724415d-3578-4ac3-97e0-e1d9e0a365d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8b7bec-9970-4cbd-871a-6bfccb3f7479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68d8e45d-9e5c-4504-ab35-671ef434acb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0aa8fe-998c-4a01-a38a-06ae6134fc04",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c39ddd4-d1db-4f7a-a212-d63f5d87b815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f22f935-e065-4767-a69d-6a6b30567b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def8c5ee-4bab-4750-b2bf-b49a3b22fc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "012fb2a3-7f00-40b0-b867-0d3978b2f972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c4ad51-7f55-439c-a85a-35c148448347",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c953a35-0ae5-4243-ab45-d8ebf0d43481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40220743-dcf9-4bff-a55f-f4cc81f46f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a8c9cb-9c07-4cc5-acae-ba36a1b2ef55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6052f1-4cb0-4bca-8eb9-e5e871247d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a88ba8-3cac-40e9-ab93-3d784851eb86",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5debeabc-fba7-4c5c-af5d-9e166be529f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47867c24-4bf0-451a-8ee4-fc8e5602865b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6058a6-98fb-431e-8b7c-f345f07fab61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6c897e-6102-4c95-a135-ae88fb5fa692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d23fcef-349e-4fbf-b03d-e5e1f5f19596",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e039c06-908e-451a-8515-3d73812e8747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3c3baa-f980-4bc7-b873-7eadaa74e757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990b608b-050e-46cf-b7ae-9089487903c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b68d9caf-06be-4ad0-bac3-11e2e9d752b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60b274d-793c-4850-b3a7-0c5d5b73b538",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474e2ffd-0f3a-43ac-a7ff-4148314fdbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b342c22-a794-4916-9687-09c4085bbd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b56aaa8-00b9-4ee2-8038-728f1ecb7622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8c6a73-f0c2-4221-ae59-3aa2c902316c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29fb51c-f86b-490b-9858-114bf83b0e21",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d5a750-7be1-4838-bcfb-5629030fd481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f7f6b9-e88e-4549-b715-3feacc52cf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ae98bf-3416-459e-a1da-80c4ad969ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8739b6e2-f60e-46dd-a76c-0dde970b0c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3943ea23-7941-4931-aa58-84740ab756a3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2168f416-0a66-4bc7-ae7f-402a9175a8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8af6d19-af80-4d14-833a-3b6819b13e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c274c4-56f7-4264-9f85-9a4553a39fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "120954db-3171-4ddd-92d4-3f06fd1108f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a546fb-303f-4bd6-b092-57c284e5514a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12212e9-cd1b-4452-a926-6bd8ae955a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea53ce4-948f-47b2-8df4-7ac4ecba70b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9838910-965d-4c39-957b-5bc259d1c5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "16e5960e-9297-4967-8707-3115539be795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8066034-7206-42bf-977c-f8c5fa9749a6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8de08a2-9866-4b65-8f37-0e95a2c11e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c1f99d-ee62-4ff6-81d3-4befb193dd84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913ace65-9089-4c7a-9c8f-196f70379d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b18355-43ad-4b85-b2f5-74c2d0290092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5a34d3-4794-4772-a0ea-763d0bfee3b2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e825e60d-2e0b-4428-9353-d519a9998755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c76660-f923-4ab9-9d4d-7c833f43e9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1a0722-5b55-4ed5-98aa-a5500d40b1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f30702-b4db-4584-96c3-361c0eb6c051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c8b934-e924-4ae5-88f7-2a79623a3707",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3b753b-cd32-4e16-9431-1c1306652da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8390fda3-094b-4d37-bfe3-14bc19737ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd77d9e-523b-40bc-82e0-5cde86094e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9ef4c4-25fe-4855-a59c-ec1b744f3681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0216fc-5766-486d-989f-347b425e9d8e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4263b5be-0e61-4794-b55f-57b906051c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b3e169-f0b4-47c3-a3b5-ea13439c1d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bc3800-dbf6-47dd-850f-33db764612a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81774949-3c36-46d3-9d05-639f35c1efc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def151bd-bf8f-4d0a-b30f-0b7497641f07",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21511723-2c40-4dda-b644-446fde30e9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88325e40-abee-4e96-b41e-86dbcca23683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ff6210-f219-4b92-ac53-ca9fe429686c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd978da-eb64-4c73-b85f-7801b9093ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6836dd90-b396-4d32-9f27-93bf8dc953ac",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26fbed9-9383-4699-b4cb-78878c4b9fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d5a751-c508-435e-ac0b-de3ccc77e3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70382b26-3a73-43a0-bf82-3ff59f5fd143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88d91fb9-2916-4fc5-a358-501299bc178a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb921af4-02ba-4cce-9afa-55459b29a219",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c92ea37-baea-49c1-804d-1205651e46b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fbda15-b876-4aa0-859e-7198a9b659c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69428fd1-44ab-4299-ada0-1b08414ef8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4d501c-6752-4caa-b9a8-f6a1cea3e0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce46536a-a9c6-4b7f-a12a-8b77e8b29a2e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fdf313-a302-4821-8ab7-4be52111969c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dbed24c-7272-450b-a6da-da6e1268f00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926f65eb-e4b4-41e0-99e3-96403ce997b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4ce944e-a776-4f65-9708-2121bb677312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816a3381-e769-49da-b9fd-c589f3e9a64a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afcc2ff-ce7f-4024-8df4-428b63d34538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee15135e-2680-46f8-95cf-96374ac631ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b3d2b6-4f8b-42f5-aee8-2d84a056b7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4442ce7-135c-48ba-b5dc-8771be80a5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49dcb7a9-99ae-4409-90d5-47ab2a56e9bd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65acfc5-8cc5-428f-8305-be4d5dad408e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d985e033-b199-4a27-b2d1-ac9f70b82b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38afb882-c9c6-4abd-b049-b6d50b7a374f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80500536-83be-4ae2-b9db-6586004c6099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e5b1f9-819b-4b29-a8e2-9dde78ae9314",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e49a4b1-cf48-48bc-90b8-bd7ca59b052d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22758fe2-1318-4870-ba47-05d273c7798b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7017d6aa-42d1-413e-bfd1-2aef5ab6a89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f9b3e9-3475-470a-bc6d-34180d019567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b249a6-1a97-4eef-8202-9402777073e9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0859dae1-1ea1-4513-8e08-c3f7cd0bc025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb1faef-3faf-43dc-ab2d-519b7849c1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93db0c00-e9bc-496e-9baf-540a5ef8b190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a26626c-6a9e-4293-8456-f2d462e114f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ccd002-933f-4722-a0f7-09bb2917323d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2427f4b-e048-4b41-9723-75c6fc2fb8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6f8622-4f25-4214-8492-afc10426f2e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a42abf-3dff-4321-82e9-b2d2fee3b910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65371072-0e69-415f-bfc0-f5a6e50738db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b395950-3f6a-47de-a81d-1448883327f1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e02417-ce48-4454-a744-2d921bd640d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e3d5ee-1c1f-47f8-a22a-70a28b666717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cd1aee-128c-4db0-a0c9-891b695de82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "161c6364-a24e-410e-845e-0e2c139eb655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644a613d-843b-429e-8670-35cfa46d762f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a57a26-63d9-4d34-8062-966f61e005df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1ad597-d195-4be3-bb2e-eb48241bf397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0382a4d-6082-44c1-a47e-c9c4999783e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9967b0a1-5191-45c5-831d-bb54a0268bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e53fd1-e1ef-401e-be0e-bf0354d8f18c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f61eed2-525b-4822-9c80-52cb74aaa9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec7c13d-7e88-4ffc-9b8d-ed2d4fcf6ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1f158a-50fb-4247-b4db-2058e9c96478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1682f9-a7c0-4b80-8301-45c5c8e2fd94"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1ca7ed0c-88f2-45c0-80a3-b128d28b3c97",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "548c0087-a899-4390-abbd-fb1e1fb6626e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113eec9f-61d3-494e-a8c6-5b5d76c72a4b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "323db8a4-88f3-4342-a0c5-fb4b0dd2d871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b07b06-4fe6-4066-85b0-3703031d3b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2c1855d-c461-476d-9ca5-d167a0d42717"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eafb724-692d-4d6d-b371-43d57685e76d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e18c5d55-ef1b-4c70-9e6a-9a1def5f0a6c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ee380a6-64f9-41c6-9b5f-22d3f3a4ba08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8cf6beb-910a-4f19-a184-3249e3cd99b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c45ab6f4-0fb2-4f15-9d2f-5d4cd90d70b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f20de97-edd1-47d4-a83e-1eae67e1b7a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "234ef77a-7c48-4cdb-b699-2a48c7b142b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f010335d-86c2-422f-be84-329863303cb3"
            }
          }
        ]
      },
      {
        "id": "b78b025c-1579-413e-8228-52371a5f5d4d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9085c128-b08d-4999-bbaa-9a233002bd2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7903091-26dc-4713-8474-635fd21055b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ae38abd4-24e2-4121-9793-07327f075257",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce27b5e-b2e3-4427-a77f-a61928772b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32c728e-2a49-4d77-aac5-dc1ff4ff6fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5c9d20-4c36-4871-8955-bda3126e3183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e77f6a8b-4896-4f9b-95f6-2f6254cc01e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a0236f-3828-4e12-aa30-63d9b7d3524b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371efbaa-0932-4f79-bb8b-e5a042eb88a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527a2109-d99d-4be4-a793-e9f82ae3ab75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e768bf76-470b-4988-8f2a-168825887290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83ae8816-ef12-4d55-95c8-74ff0599e316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b863dc6-9012-42f0-9eb4-d1ab49b35edb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b04453-b483-485b-8bea-0c05ac835291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5761409a-555e-4c93-b708-4a08d8ddad35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a7075e-0ab7-4e27-91c5-4474bd30a496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3179e81a-afa8-46e7-9c75-ed1938847ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3c4666-abc6-49cb-8fdc-c4249b02dd5d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351adced-62e2-4c3d-b014-a9adcb53843d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b100ff6-1fa4-4655-8740-364b49e4b1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80768f2-3f74-49df-93f7-762135aacbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b8384c9-9595-4744-8bc5-b753aa9e75db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc2cd41-1842-4fc5-a97f-b7b5d8f4a659",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a201d206-1a71-4791-baae-26a0e89df8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3650a9c-b6af-4b63-a0ef-615470a2f335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caad892-31d9-4bcc-affe-7ef78d8a6199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33dd27c9-f0dd-417c-9c98-263f4040badd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328ec6ae-95f1-4e34-9664-907887eee35a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22b2f8a-f025-47aa-8fe6-7a76fcb79a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e91e20-fdef-490c-8e6c-c4965ccf531b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1663eaf-b2c1-487d-a6b8-189afda1d894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "406a48c3-ec67-4216-87f9-d2626a38830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52a568a-c382-4422-8248-9d90fa60a3b7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f631db8-da1c-424f-8448-6f030d4a0279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ba040c-8858-4976-97d0-5991b5ac8c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733d446e-fc3c-4348-9025-37ca19a47aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e61b17b-59c7-4317-a3ea-328f928a6c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702e5d0a-355b-4995-869b-b170901a0499",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e909f614-54e1-43a1-85cc-eb900f08f463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0b43d9-98e5-444a-a5d7-be102e20d540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970b6578-1bfb-4a8d-9123-c3ccca8719df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d89f5b5-3743-4920-a79c-f2aac7cf8d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a2307e-77bd-4f05-bddc-8bf5c5cd949c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56abf83f-5cac-4383-919b-4ef93cd3cdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ce088e-142a-4b89-b02c-fb37271f473a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be97c6d8-4cb9-401f-a8fc-b856da71fa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52965c8f-031b-481b-a2b4-f52dc80abef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6441496-26f0-4b4d-bbb7-c39e6ce779c5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e240b2-5ab4-4d5e-be07-b5cb939195f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b6434d-54ff-4ff5-b4c2-2bab6d2003b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7c6040-a0f0-4223-89a7-c444b308686a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3a3550-745e-4639-a098-f4e33fff1e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d984b58e-2140-4d04-a8f7-e9431efb5e29",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db36f4c2-4e66-4ff6-9a5a-4c6b97c2e5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c00151-861e-4f9d-a930-f092c152583d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f0e177-aed2-4f1e-b783-f88573e02fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a507ad00-4b6e-46a4-9160-5c19e533f7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd414499-3cc8-4729-b916-c443a82dfe78",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cb7cf3-40d3-4e59-9755-c1b53dde0b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c55e63-6ce1-4de8-a63a-591ef4a26d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2272be4b-4372-44f9-92d5-0c4788b124e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "123bc27d-33fa-40d2-a229-b140397c2fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a955f6-2cf9-4b32-96f6-cb993d720a03",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7ce043-f2d5-49ea-b375-c66877db9ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f2104e-630b-4449-a182-f2fc46cb4709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbb5e82-c11a-4812-8484-b04a3bd9d9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "896f430d-3970-4a43-b3b9-2bdc87da084c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945a22a0-150d-4608-bcf9-8104fb5b27ef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33413b0-7a96-4512-84a2-e74b306927af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af50d379-7874-4eef-a2a3-85bfaa9030cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddf80e7-7209-44ce-bcd7-fbd4fc5deac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4551bc-7511-4018-b43f-2f24008d9afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f815071-01f0-41d6-8720-df47a8c4b1e6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823e7c08-b175-4b8b-802a-ac86fcbf2ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3db8183-f35d-40bd-81d8-9d0db272c097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6c7b64-d2c0-4606-ab55-1ebb9615c524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca3c5ef-9ac1-4429-b173-0bdc9d95b8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1903e279-e146-4d35-aea9-25e56059f9c5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d29f243-3da8-43e9-b450-443d5ba50740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b36b016-842a-40bc-9da2-d6a44551b4f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8544fc3-f3c8-48b8-99ee-253e73ff3708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb410b5-a914-4d3e-870a-9ba45fd5b214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5361ac8f-6d6a-463a-acbc-4c5caf482ae4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b612d89-27a9-4697-8cd6-a87c8f200fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e7d956-2a83-4b6d-a50a-7127550096db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1e9763-1322-4250-8f5c-e1781edfc0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b82fcf-955b-44a4-aec6-b5afd82e126d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0dd4eb-d2a1-4e48-a1d6-8094f9c897d3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b7e14c-7a07-4ed8-80a0-0cada7fbcaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e7c26c-b16a-4b92-b390-9193fc2470d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded0cb2a-341e-4050-9e7c-b6a9e957416b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "71c91e0f-5f81-4dfb-9034-a5e5b3101e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbf15bd-c760-4c12-9410-b6ac65bc1ab5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf24c5a-51d7-41af-b226-961aaec14ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8180b345-0e0e-410b-8234-e8fc10169c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16893974-2e2e-4d46-8d27-f22d107a53f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ff1ed2-f02f-4c32-aa27-26d628314bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4c3a7a-0939-4a4f-8abe-e14dbe289d1c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9dde92-712d-4dc0-b057-c3ba096f9ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "793c0ab8-2d73-4761-ab44-9a0979675fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253e20a4-d1b0-4c41-a386-230146277bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e07281e3-227f-453c-b9a4-6317958ee595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7672e2d5-355c-4c12-a9f3-aaed5e09a12e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a5104e-cabc-4248-8d83-27cf7b16c033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196dd2dd-9f45-4c73-a5b9-459b240e091a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155c40a3-6989-4119-a6b6-4eb76786e1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1ea6cc-65cc-46b1-b84a-bc3ebeaa8ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01891b79-be52-4b02-9953-24c2091606d6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226a7aa9-1754-477c-807d-2af2e18d2c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8150dbe5-c165-428f-8ffe-489ff28f9a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3b2cb1-ab3f-48bb-902c-b885e9638759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c0c2af-5d7a-46df-a8b2-003fd15ca8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e69ef17-8ebc-4008-bcce-80772b35ebbf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fe312a-9186-4226-91a6-3c63ab4a7c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eadaabe9-7e95-4ca1-91d5-09825ac917a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120d20dc-895e-4120-a75d-186b079fd877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47f023fc-8eac-43af-87b5-4851024dda46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ef044b-a954-48bb-b865-cf998b8391de",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb237624-bc6f-48ce-8a2c-3892cb09c6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfe015a-3597-4379-be1f-bd66f63548fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b140b9-0e8f-465c-9e5c-7eabd9d23def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6831a9d2-f236-4526-a263-e554ac7354da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b48626-e190-4b48-8889-e205a9b06620",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c23c0da-0cef-4773-955d-0a9f7878230d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd46c1b-2a04-4fbb-8aaf-2a633abdf0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae33cfb7-2460-42c9-9342-7cb95d576300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcafa146-3706-4d6e-8744-adbec55f29a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fab47a9-5bde-42d8-85e6-fa99028ca6b1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b00d465-7259-40cb-8224-572edf20af91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09dcb7c8-80ac-41b6-afc6-eaebf30a99a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658858f9-bd90-4043-bc50-c56cacfbee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e56fe6c-3b17-4476-a13e-348c5649c7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3d3e30-0ca0-48b4-951c-ac5b311447cf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9cb3bf-3d33-4834-99e4-c6d666887b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6630ac-4d0d-4409-8342-9aa056b2865a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8b84ab-7896-46e1-b704-27b3d5846e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1032abe4-eeb3-4d9d-bc47-ed26d6f23559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfee41c-6fdc-4f08-8dfb-c4f4830018e3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c967c80-9bcf-40ab-81c2-a2d8a50e8785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a798ef92-acff-4dbd-95cb-7bec572a8423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33007c0-1f95-4df6-ab9a-65cc9dff4a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d941253-2beb-424d-96e3-6b0373aa92c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1deb9098-9b79-4fd6-8736-005ea36c100c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec5a598-002b-4d83-92ac-d57e1e45fa9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0ee3bb-83f2-4f2c-8cb8-5af474f9adad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260f32f3-e9c9-4ce8-b478-443ce19bbeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e291edc-a2d4-4b96-99dc-16a0306f2131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb9d7b9-3eb3-4b50-ad3d-12fceab764a9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5b014e-5651-4664-9769-e1aa714ecc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a85fea1-ca18-4fe0-9ad4-82d243bae0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ed2515-f853-4c03-a09a-a1120ab7dcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d68620-f196-4758-ada4-c1d6a9acfa6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98027d2e-f6d3-4610-bf8f-9efdeabaff72",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a56b46-7103-4199-ade5-12797941e853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0fd101-3536-4170-b65b-12620ef76153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fac80b6-f2b0-41d0-91a8-4c1bec9bbc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5afd1c36-7264-4303-8901-903890db4d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c288f1f6-8624-480f-a1d8-a0a9ec20a40e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077f6f91-1845-43d0-8be0-8ba0abf37a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283696ed-30bf-4172-bca5-5e45181b6fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a182c0-a41f-4b39-b0c0-5f738edcd20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64a7e5bd-7215-4de0-b41c-290646c23c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e0eb58-5483-469a-b809-5eb77c080c9c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e373fb32-2f71-45c2-b6de-8639f2f83f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7f5234-4c0a-4853-8403-1b0a5f7b8493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd50b5cc-c0d8-4dd3-a3f8-c95012bd4212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91131cc8-e572-4cc1-881d-742246f8caab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07726f49-8c68-4491-bf49-2d5a54d29ba3",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a3815d-d7d3-40b5-87e9-d19982ebbf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34757f7e-8458-43d7-89ea-c4ed7a31cd4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7066408d-1b4e-43cd-a432-3f506ec7b311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "828873ab-55c9-4ff3-9456-d069ee54a380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0998e18c-29c1-4382-8bd4-004fc82a2a86",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836fc287-4914-4ca5-8778-15836ff5ac14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f789266-9f27-4993-a139-aa3e4ce5bf3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0460e76-61d8-4c13-b40b-03795f986dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f87ea260-db6b-4272-98bf-f4dbead809b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bb44ec-0e4f-4342-900d-c06ad37aab91",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3e7839-0477-48bd-91c9-e452bcc1cf8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1701a782-77e7-4f28-bd33-751ce2269a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751dce19-8285-4696-9ef7-184a843c00b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61460279-10e1-458f-9215-4b6e596d4926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f4ab90-6b95-4123-a52b-a7008b4814c4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9974ea6-b509-4825-a500-26c6cbb58138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a58d0e4-c725-40cf-b363-204f5332c33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70957e85-1819-4724-8fce-8efce16f6713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e56bc28c-e378-4077-9053-4c1264865d8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aeadabef-c031-4e83-bf9e-61167dd6b353",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd63c130-ff0c-4830-b7f7-dd6334a9cff5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d85c6ce-4351-4fa1-8527-8b968cee35e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cad6b5e0-6f1c-469a-b485-851fbb526356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e14c529-218b-4229-b914-02a8450dda3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9cf713d-17c7-499e-bb14-247e8b1cf2e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b953cdf-4268-45ca-b9ed-37c01785ade5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8de048e0-202f-4a18-b9e0-e7c0564e6993"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f76ebd0a-9302-470e-b008-766cae482d85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bb161c8-4434-405c-a404-b0e479669da6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8c648d8-16ba-45ad-a414-e7e328a5e076",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "113f25f3-6b57-40af-a0c5-8deba627a2fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "334e6f29-d4af-45bf-8c21-a2e23ef02aac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72b83a3b-81e4-4e69-bfaa-402dc0d72915"
            }
          }
        ]
      },
      {
        "id": "4324902e-2666-43b0-80fd-0d4b96d4913b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5d3b3df8-275b-49a2-a69c-5bf733db90c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd6cbd12-9a94-4a20-9f47-20668ad4670b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c7427465-dc0c-4ee2-9458-fee6e42ecee0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c902c318-6b3e-46c8-8cad-9a4b76518006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5103b5-3450-4ad0-9bbd-0b7e4ad04168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0266866e-0056-4c9b-9906-8e984fe487f9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6e1d17-c6cf-4e35-8016-75ee35090d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fe0e7d-dd52-4a6e-a1bf-42a1ee3adfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3bb486-438e-471a-ba26-92480c847695",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f538363-12ff-4428-9532-86f6dc477ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53684c9-f60b-41c6-9939-8bc0cd4e577e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d086d094-2ad3-45d7-9f46-1d94e1c55652",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6aa5654-5d37-4d20-ae97-5e6c89756e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a6a108-173e-4069-806f-83bc469b40e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7832b704-8fa3-405e-89cd-4a6fcee1276a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb93f5f8-dfc2-4cf6-9f08-9ff70732eee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33bf8ffe-b494-4d69-9c8e-ca9fab7cf81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1e03b6-7a08-4a12-966c-eee78badd1bd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bef5c6-8552-481c-900a-13df00b99018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71575f7a-0c93-4899-950a-43e9e826affd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090a2535-de32-4cb6-b1d6-8ad1d2594c41",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31a837e-4f2c-49b3-a22e-40fd67f9f07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9251a735-0127-454f-8abc-037fb2512d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33c49b5-84dc-4f34-948b-dbe95ca68610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a120f1-3b43-420d-8de5-e87b1cade8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8fe1e1-8a0d-43a8-a056-e51622497c1a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afd0637-ff99-4c79-a577-a2c80fdc98ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38af41be-a15e-4080-ae39-944d7f0e4489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9c4da1-1f4d-4269-8b50-fe91ef5bcc13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b51b3f8-e4fd-4293-826d-e618089dcdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9347c213-941e-419e-800d-8c15abd88718",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9e1402-8c44-4dd9-a5de-9d434217411d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fd57547-07c7-41ae-a34d-0fa95d84232a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3275655-b1b2-44c5-9068-559618e6bbf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af6790d-6675-45da-a3a8-d7ef1b8efb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9af8a35-b317-45cd-8f71-0eb9356e386d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4303e74-b483-460c-8889-be3bf6a285b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aecf3275-0233-430e-9b78-29ada892cea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e2bcff-3d19-41a0-b7db-f782c1834023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8195dcc4-22a8-4ea7-aa7f-d56784a9fa62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6721575e-2239-4209-891f-ebdafd58665e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce920fe-cebc-4923-af00-f8c1a11c19c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d732c1f9-90a1-48bc-a804-d0560c477ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46413898-6d5e-40a1-9f6e-e706f5308ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f64fd10-7c8b-427d-afed-c8a3cfa2f802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c89a44-26a6-4cd7-b463-f9c617127006",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5697f00a-5dc7-46b9-a4dc-10d088282573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c3f3b0-6504-4f4f-a7bf-8eb29adea88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccd3e87-371d-40ef-baa2-d82afcfa6e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bcf37b-0e05-4545-8f22-7c006ee846fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbbbace-1c1d-4cb1-aef6-a9d2aa0b5e7d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7581e79-0f21-42c0-ba1d-fa748e3f8d47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e349bdf1-66c4-40c1-baf0-e894a9b51808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf40845-e993-4020-8bb8-80a4a140dbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8981f7cd-0934-4f10-8434-61b518445d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a53955-5b67-4b11-888e-f0102bb0a3e2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd867744-ac4b-48c1-86e4-e7da640f480e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdc8cc5f-d434-4efb-b469-af4bed7c239d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c10e982-2481-4214-9844-84d489ba1e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fac1565-d614-4043-8036-c310354c0c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848569f2-4ec4-41a1-9abd-4bcad5e87317",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5144f8f-9d19-4e00-8081-f7a37edb26a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1798e32e-8608-4d46-b0c0-53bf54ccc5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bf7bef-1a8b-41db-948a-20d08063526d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e3dab8-7ee4-4fd7-967f-b67ab02b1d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b46c6e-9ebf-41fa-a32d-817fe2db4017",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c4a5c8-50b2-4e47-b4b7-d00f074a5810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "992d5a06-a5a2-4bc3-8e88-8381f684be11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c6fd5b-f977-4ca3-bd92-bb5f9d7d6334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f8a5d5-1be3-40b7-8905-978a1532e919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3568f4ad-76c3-49ea-9279-5af47776c6bd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6ad7fa-400d-4da9-bf8a-ed3f4eed8a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9e58f3-4fde-45f5-a3f0-4ae3bb392cb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef9d126-cb60-438b-97d3-1a23a808e3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c1c997-ad82-4f80-8a60-e60bf0e5a118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db9da09-1372-4037-9c06-1088bff00950",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acd663f-5145-4fd1-9f6f-b07d8480eaf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dada003-f4e7-455d-b2a2-f34e17b85c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9251e90-fcf4-45c1-a097-9684caa890cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2bc63b-14de-4572-83b2-330c4c001bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cce612-e881-4992-bf5d-397b220123cc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673cb578-696d-4a61-9796-634fddb412f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2757241d-ae7d-4076-8e45-aba8fef0e16d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00a27db-8db1-4570-a942-bb8ae7fdcbfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c7e49b-a08e-46c4-9018-9e6165751cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4793e8-772d-4c3e-8dfd-dc9506a6533b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd480d67-2a64-4f28-b97b-318932498e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c2f6263-0e26-47f6-b7a4-ea27e8248b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d7169b-b1c8-4599-ac17-88aa12278416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c245efa8-ab7b-4a1e-a190-76d6aa1ccf74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ca23dc-a29b-49fa-b49f-439e3c6a427e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9ce15c-4a48-4a4d-a867-172dcdbbedc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96c2f52-ec56-4d9d-82ed-054b0b14bd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd96827-a15f-4b70-9fda-e775ae6097f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4479d70-ad66-49c4-933f-f545dd2254d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48afc1a4-3786-43d9-ae27-5ed20d5d4d5c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42265839-c70d-48ce-9977-f7f5fc7064bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18619c29-ee54-450c-abe6-7daddb6cd2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda6cd2b-2cdb-4a29-97d2-c722662742de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614771c8-e419-490d-86de-f7ac7d959dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea60b19-b52c-492f-ab99-4967e7625562",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbdd35c-0ef2-4b3c-b346-9a8ad942db5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b5cce9-bf23-4dcf-8ec7-f0a0978e0c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "191459b9-6c9d-4b42-a554-cfd6ce07d081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97afa7db-d9f3-449a-9b2d-5b5bc5003bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4636eb6-f068-4936-a668-c3f8c2125254",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5347ca27-3f11-4176-a2e5-1d828db03257",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1efa943f-f6c0-4fe0-ac91-117911ee9a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d70a0f2-d039-4908-bda2-9ed8a401bbda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0423b0df-2da7-49eb-bcb1-d0f7e1e63329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54051817-2492-4571-96d2-90fc0c92d6cf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc2561c-b044-4fb0-8b4f-164a0b7d8e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a30c902-ba6b-4138-b0d1-233ac01522e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609fb785-22f4-43ee-8758-495b290baf3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb644cdd-6fda-4f19-b80e-6bf25158e40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca4496f-6f5d-4a6b-9d8e-4a4dc7b08c52",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f97099-4a0f-48fd-9afe-f1f203866f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23250cb4-30e9-4f7c-bd95-cfcd06de84bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ab5f94-3774-49f2-932f-887d977d79b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc59a2b-89dc-497b-a78c-3a07159ea2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61103c7e-0e51-4045-a1d1-33925083ca03",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f800f4-16ec-4e9d-82c1-c4898ceb7d07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "372c872e-3443-4495-a42a-4c393a1fdde6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "696a5b99-4c8b-484e-8ca8-0e324c67f439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfdda05d-94da-45e5-914e-81d5d961cea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ca5579-1988-452b-b841-8fa2dc08dca7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bb31ab-b6b3-4e3c-9e82-9ae0e44673ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795f034f-56c2-421f-990b-25cc96fddfad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2727f90d-0a8d-4a5b-9642-52d6a8f1cbaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbd3dc1-213b-4685-a88d-7c8c5d800443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86371bd2-0c40-48c0-b829-af8433509e65",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b3b7b2-2474-4f1e-84a4-cdca43bb6271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f09e48d-9b9d-4d1d-a373-56498560e80a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "541e8f53-027c-48fb-b793-d976277753b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21432f07-a5d6-4832-b186-ce0cf2869939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92dd9740-218a-47b4-822e-45cb31f2d24a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4e9c98-453b-4150-b494-5422c9194f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc763f6f-f771-43dd-8efb-b850f2793fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5747d9b1-459b-4d32-88a8-d8bc5466fbc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7fd421-a65e-4a26-8026-cb958c4420f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009192f9-8b81-49fe-8e4f-af26a9e5be4d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa48f865-c1fe-4a58-aba9-e2ab7deefdd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1f08fef-52a1-4556-9fed-3a60c4d2b7a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3486da-7889-4339-a823-3092e8cf0506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24eea5be-78a8-43de-9973-34dda5f48347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6e2f0c-cdd2-481e-8f0a-9c50109f3ba3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674c8e8f-ce39-4d9e-9b2a-3296b6871d68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de916b4e-8c43-4eb1-8bd2-4f61b45b47e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b976d6-3b80-46b1-b059-34a98f5b9b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1ef8fc-564b-4d69-ba55-c96f11fc4dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1d9b0f-5eaf-4405-8854-9bc300892d55",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedc6ea8-7d34-41bd-aa30-0e67239fcd4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55d01f24-e804-4b12-82ba-c58203b6c455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb314224-59d5-400f-a999-c8de797ab253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9cf1cd-85c9-4b29-bf76-859837727772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c694c947-f4cc-48cb-8845-c905430e86fb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9344760-2c9b-42b5-91f3-efc4cb615c22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9a54ee9-7757-4a1a-920a-2e69529739db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ca0db4-d9ab-4af0-be2e-e81540ca9342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5af0352-774c-490a-9a5f-ae092968a6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401a3956-36de-4155-8c84-074fa777e959",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e76516-f46f-4845-84b7-df8fdd34aa73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29b6fe3-8ac9-4b7a-8cee-a0b3d41477a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d28cc6-76c5-4a3a-a408-b1a369d57151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe99065-04ca-452d-a605-d08b4d4e7c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e187f2ab-9cd1-4e30-a6b2-3508c3609669",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d491c13b-2bf5-451d-81e3-69f8b3034878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5674c82-168b-4a71-9dd1-c3f7d7ccb13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df02e659-d731-49d7-8b55-b3ca5b3502a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f25c86-a120-4aeb-92e2-11d72ea3e402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f40bc5-1d19-46ff-91cd-d5f649c6a030",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb9b714-4bec-40ce-b729-6559d58e0c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11cdb661-5b77-43e1-b8e4-573f9714738a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4761fbb4-725c-45c2-a737-1e94b0b93991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43af4a96-b8f6-48fb-a663-a04154ffd702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a51e440-96a0-42fa-a3d2-3c359daf195a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e805e0ad-38bc-42d1-b432-e6e0d5ec4645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f3e2fe-9247-4f16-897d-7f8e2dcf481a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8629ebd5-a835-4c6b-83ce-22c09382b55f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5112b330-9d99-4ad6-ab4a-c6fe2e4ad9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e65171-70d8-435c-a7b7-a56e2d5f4628",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27979e35-061d-4470-ab33-49bf9e0ba3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec9bc06-c682-4c5b-8651-bbe859a448ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe49efc0-ae2c-42bc-ad8a-48d9255c9e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a1268b-2716-4ee4-aa62-edd619e4b39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff22c61-ba92-4629-9f1b-c89b1ab8105c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f850fa12-0c36-4aab-80b9-f54895e0314b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e00b63-ebb8-4b54-80b7-35b3ee21f964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0a2d61-05fb-49e0-b499-3590447d1a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1453b0-1ad9-4449-a9ac-e672755ae68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58e81d4-e403-45fe-9b14-fa48964659be",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ead9036-1edd-443d-b39f-1fe8983bdb3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f75345-79a8-406a-91bf-bc4d44afe290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6899913-3fa7-48a0-ad16-55b694a7a19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7595074-2509-4854-b99e-8e37e736575c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b6ab64-56db-4b47-ad8b-ff1bb2055d26",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b2ceaf-e201-4271-859a-35ca4cc6ebe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab3d6ef-ba7f-41e5-946d-f7555b2c9b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2928b3-3fe6-4648-b625-2c63a9dc24af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88d6c13-be7f-4c69-9ef6-fb7d3bbaccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ae4eb0-411e-4d36-8ff6-66734ccb9bbe",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c19abe3-2fa7-49ce-a6e9-be17e86651e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ab5a56-573b-468f-855d-febb384ecd86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5eb519-5588-4ca9-b191-16a999e9b414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5feafc-ddc2-4ac2-9a43-cbae396c29a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9794e107-c6c5-4756-b495-2e61f161e64e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5864199e-6a4b-4a9b-a5ab-5a7634db325c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5840f1f2-5a54-48e8-bd64-1c69f60ee0d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404f8087-c100-40ca-ae60-c099510c9a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397385e6-0319-45a8-8d7d-0c88723d80a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c8faed-5593-49a3-86ab-51268aec0ef2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e210a9f8-60a2-40fa-a58c-dff4ffb6909f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f272bc-004f-4205-b4f9-7fb5e68dc5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876aa699-ac17-409a-8afb-271dd7960645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b724be0-2e99-4077-830a-efe263caa2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746cd23f-0f87-467c-919f-0ff13ca33341",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee3c7c6-48be-49cf-a029-8bf874841aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65371213-8332-4a1e-8dd7-cb7a702ec52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3ec963-1f71-46a8-8c7e-a4304648d52b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3079e41-2724-4353-a945-5c659ea92ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe598319-a6d8-4359-8312-8057d0c6b8d5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bc86cc-b84f-4a0b-8996-e8b368998cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5fe0ad-f016-49c6-ac81-ae42342c3c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69165f5f-fb2e-4954-9c32-a54793dc91e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6c6c2f-4ffa-440c-bbd7-d01c6e371c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85991ae6-7df1-481b-8b53-97bffda8b02e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fe1eb3-6aaf-4d18-aab7-43aa180fd5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2f0838-9f8c-453d-9eb7-2b4f5485c25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4251415-04bd-420b-8ea8-3166f9831e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844c43c2-6372-4cfa-8628-252e616b6358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451d018a-cdf8-4e2f-9133-4add5ef88aaa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea439178-d32b-45b1-bc90-774b346e4d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014973da-b455-4390-90ce-19e62eb42325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd9c26a-0f7b-4d08-a014-7c899499116c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c77251c-70c4-43e4-a15f-447341b2b677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93427cd-9375-45f4-93b5-e98f77a5d71f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77e17d2-6b0c-433a-a74d-947dd47188d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13f6107-7939-4dce-acee-a2f31b9e425a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398e8eb2-6925-4637-9af9-0017eeda7fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11624325-852f-4c5f-9301-adf7d9852997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdaca6a-630b-487e-937e-41a99cf4e14a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99fef81-e807-4064-bc33-ccca0933d6e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0fb063-6781-47b3-8a14-f9a29e89ac44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e3dba9-d772-42f4-97e9-a2e91384e5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c85e086-36df-4814-b7f6-f60374d8bbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22c41c7-7479-4b1e-9c25-16c545953088",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e246187f-6c4d-430c-9e00-adaf92aa58d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c888c65e-cf9f-4f38-8253-b9f965569142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3ac35f-02e6-4f08-9762-37fe1e33bb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6fda4c-6366-4144-aa16-9aab278de5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd813825-50f2-4313-ba25-076f3415fe20",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388a148d-91ec-4048-a787-d990761809d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c1acaa-73ed-45fc-9b7a-94ac48318129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3f2eb5-8818-4477-b782-518e714d35f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f26296-c3e6-40f7-832a-e506a6e251b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ce0ffe-6807-439c-b767-f4cd754492be",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a629dd-9b1c-4fd9-8eff-2bb2f4198fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ebe6e4-23b0-4f93-ab21-2618077fd47b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bb9be1-dfcb-4e8c-951d-392a57739a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034ded29-0cf9-4fcf-bd0a-6c3c1fea9a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2452480-41b7-43d8-9d33-9f64e383fdd2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6710dc7c-6487-4ca0-b001-65e4031424e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eeec012-4ba5-4b0b-8cb8-d649399a2371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4d1f2d-7e26-4af3-b31a-a3bb0ae30bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36b2751-a062-4ec0-b56b-7d3aec6d8784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27056cb2-e620-410c-b1e8-e7cdbcba2f5b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2d6885-448e-4bc0-8232-39e45665db98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d301d7-7c24-48ef-8be3-f578ae0928cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f47e921-5099-44ef-96f8-d2d1c8c6fef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "153fa9e3-2e3f-458f-a8f7-c956cc5e380e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655b3211-12b6-46fb-ab4a-7ef0818ac05f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9920e336-43ab-4be2-8203-c8cc6f0a0c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc80a748-5329-46f5-8219-12b366cf6420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4639c580-d8e3-4b01-a48a-0da5b148cbc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44a8a02-dd77-4934-90e3-9e919b6da457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a27829-7e09-4897-aeb1-9da37f8c2b8e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171e72c3-e9d4-4716-8d95-1e65ea9dd130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a0ae74-63a4-48cf-abb6-241e7ff525c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13a2ef3-fe18-49a5-ac4e-d1d2d89a989b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6417ac90-0a08-4054-b33b-d4623ecdb2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6deac2-0637-4cbe-88b6-14a81417e810",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed17f14-fdab-461d-ab7d-01324a5cf195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220ea9c2-fa88-48e6-932d-e16a5b591e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2ba0d9-333c-4764-b1a9-a57dd3457e57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da73ef9-ecee-4c31-a21b-7a1c0ce514c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db7b7b7-89b1-4061-b1b8-dab38aeb1be7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9210980e-768e-467b-8b60-7c6f441a639c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21596020-c5d1-486c-959f-2f264b3bf574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34f6bbf-434c-42ed-8185-43cc120d7291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ad7384-58d7-4249-a73d-4b5815d8749b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2c9a39-5b4a-4589-bf98-112245058716",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fde841-fce8-4a5f-84f8-f100d0b19de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ff3440-57dc-4c2e-a06f-ae4c09ae56d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb64de9-ccff-4561-8276-f53f7c11d568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f95038f-4a6f-4e72-ab83-e5a72a3de928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a026fd3-c2ba-42fa-8427-c0a1934da119",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58f46c9-52ec-41fa-97d6-5b80ef8f0104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f46926-59ad-408a-9b1a-777095092f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86817591-ceff-4842-9e95-29c29b9f7668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dab6d8-3109-4a66-be60-60afaa6e5356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22bc214a-d393-4e93-8678-757ad7e3c6d9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d25615-c9f5-4aeb-8fa6-c4f620b091a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8357b2-7a56-4123-ae31-5a8c422377a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1445ff9-bf3a-4a3b-9700-f777b5dd0ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ee428a-dc81-4e24-9c38-707159797663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090a2bf9-acbb-4c2a-b46b-f97a47211ba4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5560b3b-4f4f-4ef7-b367-6192eeda57b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9a511b1-7537-40ca-9a8d-cf872efcdeba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fbcdec-ca7a-4b9d-8819-1fa1d7c9c277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c94065e-49dc-4603-8aaa-b26581933a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6ee150-8a38-4029-883c-28e13379d792",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb27ef03-ec21-4462-b38d-e0528b7dcdc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f961855d-21ba-4499-bac8-8dc4d0307edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2476856-68a5-442a-bbac-92527a6e574b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea6e748-9227-4ef5-b10b-a70d4aa654a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e97511-ee23-4daf-a34f-502174caeaf6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721fe938-4939-48b4-84e9-8313416652d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab149e1-fae7-485d-91cc-725a812f2ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a631d17-eb5b-4b51-acab-b5860eac351d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b093be0d-b94b-4f7f-bc76-14f6d4ba722a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3411a9-f5f8-44a8-ae30-e72c8f052411",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23278e80-e94b-493e-9c1c-95dda5d11851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b6d8f2f-8846-4d9c-a69b-39ed37fd1e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04bf450-99f6-4f05-807c-835da34b37d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa94a48-f992-49b0-a0b1-823e572de9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3029bf6d-6eb0-4e7c-80c9-b7962886b1c6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3557383a-dfe0-4184-a7af-c84fe3457d48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffd4c7b2-4c6e-4451-9a50-b22495f665f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "594a4b24-e12a-4a51-aca3-9ecdfe44238e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a31fa11-0352-4841-ad0a-23ce83cd58a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f944280-61e6-4cd9-bb6f-57c66aad5b47",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a25e2f-f797-4f4d-bafc-c90f2491658f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfb03129-8b90-4828-a1e8-81d0352610b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e490313-b592-4827-a94c-0124fa6eea45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8b9ad8-ff0d-4ba5-896f-f3187a851e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3a56d9-901d-42dc-9fcf-071724ff3948",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cd1ff6-695f-4d92-a822-02a41d90f94c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9153fca-9eaa-44ad-a3bf-9f5c47db8603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97295d1-4bf7-4727-ae9d-8861a78c8b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3919fda8-52ce-4fa3-a35c-b31c5aa25778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a669597-fba7-45ff-b8c8-6709cf384263",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60dc72c-898b-4b39-b205-36a28b7118d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da9cadbf-a5fe-4f32-be54-102a2f485ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63caa325-5c18-47c6-9f3f-10f0d9ef91c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b05cafc-de29-4705-b5d1-7576b3fe5b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1643e4ba-8419-4713-9d81-d0369bedc85c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a112aa-fcca-4ff4-927e-27b31b82a56c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0501a55d-dac1-4dcb-99b4-bbd088850355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3001a39d-461f-4ac1-b129-df4d10bc5392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8cc6a0e-f2e6-48bc-976b-1f9e387bd481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41c7740-3445-4fc8-9e58-878517df4089",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae8322a-5191-4217-807f-8e083fc04a29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2225cbe-1fc9-44ba-845e-1ed754f9f316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6033ee0d-17ee-4283-a4e2-048076ba63cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd4d17c-8e28-44d7-a052-c92b8ab3b73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48331069-a0de-4857-ac6a-0b42faf35552",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9107553d-a769-4a29-a3a1-ac31d20386b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "709e5266-cde4-40ad-b5cb-cebfc4995a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7972d5c9-b0b8-4af9-8956-efdfe3f18a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a39585c-eef8-4a27-899d-3e69ce751c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01b4f0e-49ee-4b95-8de5-4b3e0fb54fac",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ff7c9a-68f8-4858-bc7f-10d479078984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebd4eb15-24b2-477c-b839-e5d5f4e5b685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8366a8b2-7417-41bd-8791-a00989fd42b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f2bdfe-6b8b-44fe-95ef-61d6a764708c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46100ca4-6b43-48c2-8a6a-95d2b8c24b79",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8736d03-da4e-4bce-823a-ea8ffc12e3a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edc98fcd-e720-4dc1-b929-77a9d5d3e625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5e74c3-c94d-489d-b239-ec2b6b9c8f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51938682-dbf8-49da-a508-2d8b5ca5031c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b54e6a-ad1f-4206-a3cd-8d37b636ef6c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a613f46-d808-400b-adb2-1f62c148494d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3d77ff5-461e-4e8f-a3fb-e537d8e70d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e623cf66-9009-40f8-9483-ce4348ecbb55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94329b3-3308-4040-80bf-8a6c9179bdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8d232f-f043-498f-8f22-52be8bd4a762",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fe3b45-dce7-416a-9e39-c08e3734b4da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef1c48a6-cdad-42d6-8ce9-b94d38a6669f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc521e8-a09c-4493-91a0-81cb8b322152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8d17b6-aba4-4eb5-90ed-83e842282a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eeaeb2f-b64c-448b-8e8e-e0996e5e6ea2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a09e18-9c52-453c-8215-17c83370b2bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6d242dc-cc55-46ae-96f8-6b3b16a6934e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48ec7fe-c8e9-41ef-9ce9-7ebae3f1fb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322216c0-0959-4865-b548-ee8c5e7d2e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afbe300-73bb-403f-894a-781c7d39f8e8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2920796c-afaf-4d83-a934-9df906ac6cad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cef47c3-66f6-45a3-b7aa-5d891a42289c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99046065-3061-416d-bad5-e18cde4f2d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6f1ca7-410a-4877-aa60-7ce1963ea8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d39a07-120c-42e1-a314-24868feb468f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257a5d53-ef8d-4aa6-9951-26ce3373ee7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f35d1665-5c0c-45f2-829d-efb7c68b46ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba904b8b-3a26-49c2-9078-736f238dfe24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e97d3c-f210-43cb-ae9b-12f6464a3a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3736d9-e933-4627-b91c-40b2f913cb53",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d7d34e-bc04-4237-93b5-525f1a0b4335",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d34a9d2d-566a-4229-804c-72a0f06fa58a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96937294-2b80-421c-bd6a-847f9795ee0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab965ef-7f57-4078-b134-e9b57dce8c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d816f50-5c23-4f68-99ec-d2fc21dd3494",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8796ca-2ff2-4a2c-9e55-c0c9749a4441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b88b7b8-775d-47e8-8294-4b3cc51a2910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8162bc2-ec6a-46aa-8a25-f8834422460e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd2f19b-0439-4bb4-9393-b9e68e52ef88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11c9bbc-070e-4b95-ab01-ac7bbd2d3706",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3b2fb4-7e7b-4df2-9f96-7fabae697239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d36d2fc3-ebb7-4f2f-9135-803d23e5afb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe1062d-9cf7-48c1-8e1e-a0bf2a2890de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ee3d0b-d537-4a36-9dc6-320774c0b784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e904edab-c228-46a2-9328-af4c1ed9db60",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0212d8e9-7605-4c3c-95dd-a873f19323f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "293c387b-1de8-4907-ae72-20a788e51f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9701ec-d97d-417a-8898-956455092c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41825240-5423-448e-ab49-bb2f930e4217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d27d47-00ae-46c3-b3e4-115da30c3969",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9b1518-1965-4c1a-875a-c4ac23562f26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7e2da70-8a73-4c65-b962-1fee408161ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af80e06f-08ba-4a06-bdaa-34901ce406e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d687de-8575-463c-b7b6-f316f347ea30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8a9aca-ce71-4108-9f5b-55516d56ac2d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac73ea6-05f4-43a8-910b-7611f91be86f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e3fd4d-44fa-4ebf-a7ff-baeeb5824dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745ff019-9a50-478e-b7ee-1549c5bd6d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3804df-7c52-4522-bb21-54cf983507da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5c0d61-4233-45d7-8530-53bac188f38d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e8a185-5924-4ef7-87f8-bbdfab265179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05cc996f-05d5-4906-80b9-d600c01a2fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fad7e0-7fc1-47df-b88f-ab218def8910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4850ce-9c06-4ab5-9b50-76281d03ae91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e78f7ff-ea14-4bb6-b351-f0e044a38900",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8a1a2f-aba1-4626-8f25-6681d1bf4e02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10ab899c-983b-457d-b87d-2ec82f05756c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecee19d7-de3e-443f-a861-644e2040e7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5dedd0-5ec0-4c98-9011-100ccbca304a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d87e70-e246-4765-851c-fe298182b051",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5515f36-502f-4f02-a324-cd8459f962f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f95cd0-d7f9-44d0-b7f9-3a3d196ef32d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5072e3-de3f-4acd-9f4f-485255403ad5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db420c6-6c0e-421d-82b8-3abfa28f8783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9b0686-bce8-4870-b7b8-4b03e8594fd5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644764a1-8de3-4c23-ba4c-159dbf350533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67ecab50-83f5-4fca-80ab-78cfd0e8649f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0fdcaf-3440-440a-ad45-afde089c7421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059745e1-92e3-4125-8cfa-ccf7c530a2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b88513-9c7d-4ebd-9ea2-518e4f0740ab",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49161a0-84b1-4538-ab2c-63a9203bb6d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdbe0fb6-1af3-4e2d-b130-13838669a7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2ab23f-354a-4ec0-acaa-c0e8d2a98bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa2b675-d52a-4160-bc5f-1aca5e42f568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753e61d1-9d0f-4998-b76e-3b330dfe0f0a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647d2057-bee3-4da0-8a70-92c88181069f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5b5fdff-381e-41db-b46c-a2e4fe564753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4b141e-8031-4465-a10e-65cb3e00fc5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb437312-a2a9-4699-b9b0-bd5c94e94a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d8be05-4651-42f2-88e3-2994379b6190",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee54c26-18ac-4962-8633-5724b752dc1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ae3385-3f33-473b-985f-5c1eb82b2fc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d964b5-b86f-4bb5-bd7d-f826c7745d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98bcb2f-d1a5-47bc-a710-cb61e5413c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7977d57-f634-4b68-a341-08288291190b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2d09fb-b3d3-4140-8393-bfdb7afe849c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca0312e-bfd8-48bb-a495-5fa70a0be9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8b2087-8e34-4971-8911-96c70ad8f5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d257e4e-9f59-447a-8d3b-0c2d7f2a6efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac0c76c-4fff-4199-916c-faab4c1b750c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079fddee-57f6-4ac2-919d-a51314c835c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3bdf5a-7082-4aef-bc72-c91afa825d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a4b181-de40-4591-a2d2-0984875cba58",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a0b9d2-6e33-4c8e-88b7-b4fd872d5005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d8dc80-99ba-4542-9c64-7754b29b91a2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313c9f09-1c8e-47c3-b005-0f75c36f342b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0a42f49-7dad-49bd-90f6-761e6b38c11d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c02228-c7bb-4a71-8b05-0896700baee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a7104b-9a56-4d85-976a-3e07d999849d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90fad54f-f35e-4581-9849-7ee9502158b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0c9d1a7-2ee1-4705-b3de-dc7ce5db3ba5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3550401f-6515-4eaa-bcd4-ea6ed50fec73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45d576f2-992c-4a53-ab14-e33ed8a6fbc4"
                    }
                  }
                ]
              },
              {
                "id": "99f82505-0739-4250-9511-20dca9651d91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8000e286-573b-46fd-b8f9-8c5fea10ab5c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990a7fcf-bccf-477f-81a9-b14136c8ef3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "525c68e1-841b-4068-abc5-0d24d709475b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6217d8e8-c9d6-44f1-870f-62708cce7075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7b1dafc-24bc-4925-9290-411f47015772"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d33cc59e-ba49-46cb-80f7-ab48cf301b7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "221b7736-a43a-4b78-ae2f-033a15eb09ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b06688c-4f13-481e-babf-49be03797bab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4d4eb15-8eac-46a4-b703-854ac77cc26e"
                    }
                  }
                ]
              },
              {
                "id": "37be9933-a4d8-4600-ad83-318f57e8d50a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "21946cf5-e714-4740-885d-c3e391b374df",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b515114-6746-4480-802c-3f6248da2580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4be03e9e-f1cc-40e7-8b28-3388c022bcd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d27919-c0ec-4982-86fa-f78cc7658206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82d606a-d532-44e2-9aa2-f8cab4896b61"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d2f181e6-0b7a-4bcc-8e2c-b563c178762d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a33c0fb1-beef-4891-966a-2fff889ae55e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1b191c7-3b0e-4fb5-8e6d-4e83a3cd59c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "220421c6-4904-4ba5-87f7-23305fe27dd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d810b86d-39bf-42a2-b400-5f022b717da1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccb9c28e-2131-479b-8b1b-8115cb38cf4c"
                    }
                  }
                ]
              },
              {
                "id": "59f65c62-4af3-4190-a2ec-e2623bec0010",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d70da62-7e19-4252-bd80-8c23c707e5fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "04755195-638d-4fa1-857d-25bc35adde06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c48c6ab-e1dc-43de-842d-656be9670202",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecda3d19-2280-43b6-b5df-125271c57357"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca5ffa75-c8f5-4259-b546-34c8c02f227e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e4c51cea-2285-4b31-811b-4c89e817ea5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c9c2413-9b95-4c54-bad6-012c09fa734f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "078897b1-441d-4762-9236-ccedb539fde8"
            }
          }
        ]
      },
      {
        "id": "828b1d3e-48b8-4f33-9417-773c675a4e8b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7c745d53-3f5a-4163-b20d-cea8c6def2a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d43262b-082f-4524-8262-053250a8ace7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b15fc9f3-8925-451f-827c-7fcc6dba4334",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778a4cfe-a639-4060-b2b5-21bd7e535e87",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2c262bfd-d916-487d-87da-7d49a76e4db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8874db15-b270-460e-b14f-bb7664c4c102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f0abdc1-9111-4542-9af5-13a6d38af1a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a494c3b6-55aa-44a8-9159-8f720a96cf22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d29330d3-d524-44e4-bb12-aaf018627c50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdb92a09-008b-45fa-bcdd-786ab6a12dc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54d40145-6b47-44ea-ba4d-bab40b91146f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee9760f2-0a51-4a95-b142-5f0e32762fe8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "277eb146-d207-4c3c-8450-dbce97a038ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06f24ad1-2cbe-4afc-af0a-97a73104d5fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e10128d6-f840-4bea-b758-e36a14050a98"
            }
          }
        ]
      },
      {
        "id": "8dfdb3de-4d80-457e-986e-d1b77c2ff459",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2339dc0f-0844-472f-a7b2-24f0912526c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed537f6d-2ed4-4dec-accd-c7fd804e7e20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7c8cd1b-ab28-416a-a1d4-5fd0adbb6c5e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd36357-d133-4f30-bd6a-ca74bbb06f12",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "072fb046-7d30-4d38-b15e-97bcce1a9da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c11aa0c-9583-45c4-a91f-c2f38e478d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f81a8ca-f3c8-4259-a9f7-87af6d9da8ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5882e67d-65b2-4d80-9ee4-055380c7e8aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a986cf0-e012-4009-88e1-ea639b21cd14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "857b893a-b053-4adf-a87c-bae33dc69ba9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b088d17-d69d-42a5-9073-aaddcd825ea3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cf2413b-5887-4f0a-acde-d9e12a83f88f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bd56b38d-b8ce-4e00-880c-66ea51783760"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b13d5d0f-a3df-43f0-ae9f-beb5b5b787a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52fc1e33-6d98-411b-89dd-a03c8206afba"
            }
          }
        ]
      },
      {
        "id": "15a35275-a649-45cf-a86a-6fefe1cafb66",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a508085c-7e10-4ed1-be33-94956b46dd23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f18b2132-041d-4f5d-b1aa-3e70cfb1ec2b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1dac8fd1-5595-417b-af03-4442df5e5d91",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c8f0d2-d31b-4d57-bd1b-4ef066f4072c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f3f87e6-dd22-4bb7-9f2b-8c7a9e57638a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c6951b-34dd-4be7-9d0d-1882f993d814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0640be0b-c175-4495-b733-ff71f31eb9c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9eab2143-514a-44f1-a70e-d257345ec3b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cdb4ad1-db26-44c6-823b-a380b3698266"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92c94cea-ef0d-4838-8ae8-07e1971e9446",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "543c0118-f727-42f9-bb06-81e1d5245fc1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b61cd3a-1bc2-4e67-b9b2-779d066fb5eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "372e227c-7fa8-49a7-9ba5-af5670d0a8ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5337b51-52b9-4b6f-869a-f12e3242509e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3cc60f4-feda-4641-8673-7839f525e958"
            }
          }
        ]
      },
      {
        "id": "618b746e-4820-4210-852a-53e3c02de474",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d73b9e77-2a03-4612-91d7-7a6a241e4ec7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "679921c9-502d-4e98-a7bf-464557f21b0f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "87bc353b-8076-4520-a94b-477d88cc5f9a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3e48e9e-7c30-46a7-b4c7-35a6228bbb7f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c11b9d9-5304-4e18-915e-24389155a936",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 57.23487544483987,
      "responseMin": 10,
      "responseMax": 1203,
      "responseSd": 123.29631146435007,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696898000594,
      "completed": 1696898028829
    },
    "executions": [
      {
        "id": "b3bee4a4-4622-4810-847d-3e5473293ef8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1ab4ecae-ee8e-4e61-b758-40211d3ece87",
          "httpRequestId": "dd49221d-48f9-41fa-b205-cfebe83808a2"
        },
        "item": {
          "id": "b3bee4a4-4622-4810-847d-3e5473293ef8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "476ab25e-5844-4936-a54e-a47ec0d204ae",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "e7068744-d930-41a8-ba45-6479b7173a95",
        "cursor": {
          "ref": "80fb588e-d676-43fa-80df-84d9778559fa",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "62cbd394-3766-4d66-bb24-7eb2052e8916"
        },
        "item": {
          "id": "e7068744-d930-41a8-ba45-6479b7173a95",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "26e2739b-f9f7-4baa-b35d-4bcf0b5fd6c9",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "c38e8584-3e20-4a48-aa09-62b81f887211",
        "cursor": {
          "ref": "c4699f74-0dd3-4c8f-a26b-168621a8502a",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "174b59ae-dea2-4bc4-8323-41c070acc354"
        },
        "item": {
          "id": "c38e8584-3e20-4a48-aa09-62b81f887211",
          "name": "did_json"
        },
        "response": {
          "id": "20e732f4-731d-4d53-a4c4-5481a8a43683",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 199,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a43e7b-db03-40ae-9c52-a2c4232a39b6",
        "cursor": {
          "ref": "db4e1752-c13e-4813-894b-9ef745582666",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2bd216f3-4952-48bb-99a6-d6c174a82c2f"
        },
        "item": {
          "id": "54a43e7b-db03-40ae-9c52-a2c4232a39b6",
          "name": "did:invalid"
        },
        "response": {
          "id": "eb463271-b1b8-419c-b155-b6afcd016006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a43e7b-db03-40ae-9c52-a2c4232a39b6",
        "cursor": {
          "ref": "db4e1752-c13e-4813-894b-9ef745582666",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2bd216f3-4952-48bb-99a6-d6c174a82c2f"
        },
        "item": {
          "id": "54a43e7b-db03-40ae-9c52-a2c4232a39b6",
          "name": "did:invalid"
        },
        "response": {
          "id": "eb463271-b1b8-419c-b155-b6afcd016006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e81a50-7bbf-4dfc-b770-56091077dd08",
        "cursor": {
          "ref": "c4ce5f94-b2c5-4d66-a169-ea6d1a37d839",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f8b27512-4415-4569-9808-b0561dab2f22"
        },
        "item": {
          "id": "58e81a50-7bbf-4dfc-b770-56091077dd08",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "623289ea-717c-4f37-af27-caf1f64ed1bb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be96658-2dce-4568-a2be-560b11464999",
        "cursor": {
          "ref": "201608ac-08a2-4e9a-8287-9cecf1c57399",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d9128875-e7c7-426e-96ae-43043fc44dd0"
        },
        "item": {
          "id": "2be96658-2dce-4568-a2be-560b11464999",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "861a3858-bb74-4af4-b564-5f72e42b7d5f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90401734-36a8-4280-b4db-3708a1d79125",
        "cursor": {
          "ref": "220a96ab-9472-474e-b936-c2f07c229fe7",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5e981575-b59a-4ea2-b9cb-1fd895ecbd99"
        },
        "item": {
          "id": "90401734-36a8-4280-b4db-3708a1d79125",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bc38e7ef-1599-4b38-80d1-d73406c3e36a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ea76e0-e54e-42c5-a6b0-b1acdbd43410",
        "cursor": {
          "ref": "a88a06fd-1dfb-4aac-b6ba-8d6ca5f44e94",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f4966d5d-94fd-4009-a55b-ededd64b8909"
        },
        "item": {
          "id": "12ea76e0-e54e-42c5-a6b0-b1acdbd43410",
          "name": "identifiers"
        },
        "response": {
          "id": "f2632756-fce4-4b3b-b3aa-5f1d37c6b80b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 108,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ebc30a23-cbda-46f9-b3c8-ed67980b336e",
        "cursor": {
          "ref": "3f516416-9183-458c-a780-a5ca79b30aae",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b688648b-0cc0-4d3c-90b5-e140c98e516b"
        },
        "item": {
          "id": "ebc30a23-cbda-46f9-b3c8-ed67980b336e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "64df73d8-314c-429e-909d-ac57716b6e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77d8fcc-6983-45bb-9a81-653d84f3975e",
        "cursor": {
          "ref": "d720689d-e8b4-4627-9224-f7ea0a674710",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "52fc14ad-1afa-4c90-8c41-995b6efc95ba"
        },
        "item": {
          "id": "e77d8fcc-6983-45bb-9a81-653d84f3975e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0ca6ca4c-2357-43f6-ac91-15a2975f9dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d6513e-df8b-455c-89c7-cfcc5c4bd825",
        "cursor": {
          "ref": "82d4ca40-937a-475c-bfa8-1f2b411fc604",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "abd5baf0-7b2e-4d76-b5ce-f5fb7a8b1bb8"
        },
        "item": {
          "id": "85d6513e-df8b-455c-89c7-cfcc5c4bd825",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4f665f44-8ee0-43c4-9abf-9d0f780df25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19122de-57bb-4758-90b1-4f73d5e6a916",
        "cursor": {
          "ref": "7d8e360f-97f4-4a22-a92c-adece900c28f",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "848f2919-4b09-411e-a373-de3186f571eb"
        },
        "item": {
          "id": "a19122de-57bb-4758-90b1-4f73d5e6a916",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c0b6cae0-14af-4b77-b46f-48d68d29d619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77bd15f-dd6f-455b-82dd-3426298c32f8",
        "cursor": {
          "ref": "a9725fbb-a121-4a97-b8cc-8fdfa7fbbc02",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fb1464c5-766c-4a67-af8f-117147bbb2f9"
        },
        "item": {
          "id": "e77bd15f-dd6f-455b-82dd-3426298c32f8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "44b61b67-95bb-47b8-b302-26dc722d75b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a727cd8a-6d17-4475-8423-d44714685b00",
        "cursor": {
          "ref": "34dc7477-3213-4fb2-a773-4145a7110cc1",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0d75142e-bdc9-4eef-abb9-580cd0cdfcad"
        },
        "item": {
          "id": "a727cd8a-6d17-4475-8423-d44714685b00",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3364a09c-da6e-4272-9795-359f08728fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7720750-1487-45da-a8a6-f19f6c1a89c1",
        "cursor": {
          "ref": "11d8696b-7838-47e5-9a3d-2217021402fb",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e2fbcc04-a914-4c83-98b0-c1db83c5990e"
        },
        "item": {
          "id": "f7720750-1487-45da-a8a6-f19f6c1a89c1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "edce4f27-12b0-4567-84df-f20bafd3d26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abf4fee-494c-488f-ba85-c05bd917eb85",
        "cursor": {
          "ref": "ad2a3d69-36cb-46fd-a789-6f6d21e5f06d",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d5ebd4c8-add5-4a96-9e26-6e987bae2f40"
        },
        "item": {
          "id": "2abf4fee-494c-488f-ba85-c05bd917eb85",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "54b83193-b160-4924-8ca5-43e5d68bd3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53daccc3-aed7-4912-8391-d635e2ed50fd",
        "cursor": {
          "ref": "d3d6841e-268e-4f38-a847-b804155001e5",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c06bf13f-5d35-4c89-ae99-03d68c0b66ce"
        },
        "item": {
          "id": "53daccc3-aed7-4912-8391-d635e2ed50fd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ac69d15e-7506-4019-ae5a-cef7df5b05ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335e0b94-66db-496f-bc0d-4f7f0e2cdc79",
        "cursor": {
          "ref": "986d1027-cd89-40a2-a4fe-fa31f6643635",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "95cbe775-2d3d-46d0-b25f-39197d1d8620"
        },
        "item": {
          "id": "335e0b94-66db-496f-bc0d-4f7f0e2cdc79",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4b4124e6-82d4-4549-adb8-6bf7f1c89155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec761ce-76a2-4184-9460-ef67c296c0a3",
        "cursor": {
          "ref": "bc551679-8b7b-4073-a772-544e713e2606",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "edb7c8e5-6a3d-4778-8de4-7a59fae39448"
        },
        "item": {
          "id": "dec761ce-76a2-4184-9460-ef67c296c0a3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "38dbfdf6-de4e-4611-aa8e-9d44429ad574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c55e6b4-a02b-474d-958b-749312ef9042",
        "cursor": {
          "ref": "f565981c-d0bf-428e-9cfa-b721aa9eaf09",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "bfd28094-3b93-4ddb-b5b8-63b5f40a31aa"
        },
        "item": {
          "id": "4c55e6b4-a02b-474d-958b-749312ef9042",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "536377a8-2435-4c7f-962c-ad42071b43a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6827ac63-795f-4291-a295-dccabe04c3f2",
        "cursor": {
          "ref": "111f00e9-12ba-481d-a175-ed9d4375e3ac",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fb1468f0-4630-4265-9b85-0fa5b4ab329c"
        },
        "item": {
          "id": "6827ac63-795f-4291-a295-dccabe04c3f2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "218148d1-0630-4c30-a9aa-64d9e30d0e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9384873b-60eb-4318-9e6a-da79af627ce8",
        "cursor": {
          "ref": "d4fc732a-692b-4897-aa30-c68fbc5d4d60",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "411bb669-89bf-4400-b93a-530015404c32"
        },
        "item": {
          "id": "9384873b-60eb-4318-9e6a-da79af627ce8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "743b400f-28c6-4aec-a26d-e9d08147aadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d02c5b-3269-4876-b4b7-fd4b50cc52f0",
        "cursor": {
          "ref": "c51664cd-7f8f-4209-b60b-1ff28debd810",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "56fb0ad7-119a-4ef8-9e61-f838d0d5acec"
        },
        "item": {
          "id": "55d02c5b-3269-4876-b4b7-fd4b50cc52f0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ca957fb5-a243-4f42-a6c8-2b965863513d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bc2695-c624-4c5f-848f-e5ac35148120",
        "cursor": {
          "ref": "6f9bc9c5-fe52-48aa-aeba-f64406a8dde1",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eb2a619a-56b6-4a34-b331-3b8683d57252"
        },
        "item": {
          "id": "91bc2695-c624-4c5f-848f-e5ac35148120",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8a0266ff-997c-4727-9033-f49567fe241b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a572ddbb-5b14-4d0d-a705-1fc24d1ba073",
        "cursor": {
          "ref": "7e905b01-217d-4af1-86a4-b1c42148b43b",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "991ce95d-9850-4e13-aee2-db6878838de1"
        },
        "item": {
          "id": "a572ddbb-5b14-4d0d-a705-1fc24d1ba073",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "49084d57-6536-44e6-b976-b2fce6dcd0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9ad9df-24bc-494b-a28b-6bc6ff6624a6",
        "cursor": {
          "ref": "380064e5-b8b9-42aa-8311-9720fd0909f6",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1cf8c34a-8a6e-47e7-ba23-340ae30bc752"
        },
        "item": {
          "id": "8c9ad9df-24bc-494b-a28b-6bc6ff6624a6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "96f466a2-7156-4dd8-aef5-56ded33b17a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6548172-db1a-40ce-b905-0fdd96ed01e6",
        "cursor": {
          "ref": "dbdf3c89-8f87-42da-bd09-20a78e2f9c68",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ae9caed8-ae43-4dd8-a61e-79cffaec9108"
        },
        "item": {
          "id": "b6548172-db1a-40ce-b905-0fdd96ed01e6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "21d75ad0-babc-4014-b04d-834f104829a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e87445-d91c-4787-8441-b5c506f5c2a8",
        "cursor": {
          "ref": "548b12e0-9305-4c28-9d9f-34cc44b16cec",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e34212ba-3267-4a46-b66c-c8571f79a353"
        },
        "item": {
          "id": "01e87445-d91c-4787-8441-b5c506f5c2a8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "aa06a9b6-9f77-40bf-a80c-d3cd2540dd25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1d1d36-7d18-41df-b273-af87c640e7c4",
        "cursor": {
          "ref": "8a79d9d0-8b42-4053-aadb-05d0b702cd03",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a1574ab4-0d6f-4a1a-b556-666b08abfb01"
        },
        "item": {
          "id": "4b1d1d36-7d18-41df-b273-af87c640e7c4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0fd0c91f-8e22-44c0-bf53-b962ca7b447b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082c0f3d-b217-49f8-887e-0c6213fc5a19",
        "cursor": {
          "ref": "1549065b-8b63-4498-86f3-81007bdc274e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fdfe49a8-2379-46f4-affa-5d416fe3b8fe"
        },
        "item": {
          "id": "082c0f3d-b217-49f8-887e-0c6213fc5a19",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b6b8bc5c-61d5-466f-a99b-62e224c75379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d09ffc0-487e-43b0-b4e2-76ebc3b36e1b",
        "cursor": {
          "ref": "e0bffcbb-5db7-4636-81d7-a89f35a26894",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ca615dd5-681f-4ade-b3db-abe2764efb38"
        },
        "item": {
          "id": "2d09ffc0-487e-43b0-b4e2-76ebc3b36e1b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2e6ad1c0-ef00-40ae-a86a-b8f44e82da3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2135e129-a481-4a49-a105-e043ddb5955b",
        "cursor": {
          "ref": "8c7c97d6-ade3-41fe-9242-93024c7c658c",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e2f91bde-375d-4f16-92f6-28fc2029f929"
        },
        "item": {
          "id": "2135e129-a481-4a49-a105-e043ddb5955b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "789f5a06-6710-474d-9d07-4c496b6f84c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b337cccb-fff2-4c42-ac07-977c98972e69",
        "cursor": {
          "ref": "2e0f8929-2195-4c62-b9e9-d50e5e40fab3",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "01f12332-432c-4b4c-8213-f993119ad075"
        },
        "item": {
          "id": "b337cccb-fff2-4c42-ac07-977c98972e69",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4be8d147-29ca-4536-916e-8ce9547237ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a90c6d2-b190-4cf5-af38-e6d722ef28c6",
        "cursor": {
          "ref": "cc117db3-f6b8-4c09-b348-53c80f4ba86e",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8f126be1-2a4c-4f48-835b-2cb108f5bff3"
        },
        "item": {
          "id": "2a90c6d2-b190-4cf5-af38-e6d722ef28c6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9950c918-caec-4133-8db1-4aeefbde7d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f59f56-0b89-4678-aa09-be6f4d6082c3",
        "cursor": {
          "ref": "ed5dbd60-ff23-4e8c-b9a6-04208615d98d",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1145bfda-4abf-4afe-bbdc-c198e3dfcf94"
        },
        "item": {
          "id": "06f59f56-0b89-4678-aa09-be6f4d6082c3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ef9e4e52-7844-4090-8531-87376f9d8f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ee3095-cbc3-483d-9239-f9da1d536be4",
        "cursor": {
          "ref": "67c4aea9-4a12-4c69-91cb-3fd34dc771bb",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1e6e1a83-30fa-491c-91dc-64990d698f20"
        },
        "item": {
          "id": "e2ee3095-cbc3-483d-9239-f9da1d536be4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e95de488-6251-4972-b8bc-b092a47e1b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a233c94-cc36-4ff3-b7d3-a7a5497b1ce8",
        "cursor": {
          "ref": "d1e15fd1-4ccb-42f8-8de0-9e50c3e4b353",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4851f589-1c84-4f46-861d-a5a801968620"
        },
        "item": {
          "id": "5a233c94-cc36-4ff3-b7d3-a7a5497b1ce8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e36dd7a6-4edf-41f6-92e6-8fe690f56443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7753be27-1180-4dd7-b5ab-cb53d6fa30aa",
        "cursor": {
          "ref": "beab6c91-f714-4034-ae32-1819dd442120",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f7a54d6f-6d7a-437a-821e-4bad03ec478f"
        },
        "item": {
          "id": "7753be27-1180-4dd7-b5ab-cb53d6fa30aa",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fa81b4fd-9de1-4935-afea-7b64f76f1afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc5519f-c86b-4d9a-9392-868740946277",
        "cursor": {
          "ref": "1ac083ea-3046-4915-91d9-cfcaa1a7fc94",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b26161f4-4369-4872-a223-5ed5ab397394"
        },
        "item": {
          "id": "dfc5519f-c86b-4d9a-9392-868740946277",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "629dfd71-202c-4637-8071-5e05b3e15985",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "dd197092-1621-4ce4-bf08-9ec76b34829b",
        "cursor": {
          "ref": "60a55f5d-8776-40de-a867-6bffb7eb4957",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cedecfb7-0644-4fe1-a1e1-e24547742a0f"
        },
        "item": {
          "id": "dd197092-1621-4ce4-bf08-9ec76b34829b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ab1ec70b-0daa-43d6-a1f0-47808d77bd37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4cad2973-d477-4573-9c26-a4bab414e9ae",
        "cursor": {
          "ref": "66f633b6-e9fd-4860-bb72-88a16f5a0af8",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e248c3d1-ced8-4efa-a008-2fb74900e408"
        },
        "item": {
          "id": "4cad2973-d477-4573-9c26-a4bab414e9ae",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "44153b2f-c80a-4e72-ba43-ce379b484083",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8e967f02-575c-4316-8f6b-80e5062dfdcb",
        "cursor": {
          "ref": "f4884e4a-c8b2-4b16-b073-ea468d40a254",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fc71b360-6d45-46ae-9cfd-f6d67bc0e5b9"
        },
        "item": {
          "id": "8e967f02-575c-4316-8f6b-80e5062dfdcb",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f6889d08-edf4-477a-90c1-6dd7911b91f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17548508-9362-4846-9f61-16318807ce39",
        "cursor": {
          "ref": "c9ba17a5-ce54-440b-bfb8-98edd6c27613",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "498c632a-47fc-415d-a62f-a6644c018465"
        },
        "item": {
          "id": "17548508-9362-4846-9f61-16318807ce39",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9d7ea9a2-67bf-48b5-9f61-8bf2792ff593",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "05473dcd-26d8-49d4-8f09-32957ca30ef7",
        "cursor": {
          "ref": "563675c9-7c32-4179-8b0c-60c918d4de56",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4d7ec784-5452-4046-8e74-0fbea9f2699e"
        },
        "item": {
          "id": "05473dcd-26d8-49d4-8f09-32957ca30ef7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fe8a1ece-373b-4673-bee0-ded4bab04967",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "65bbe8dc-2045-4120-9cd3-e822f38c16c1",
        "cursor": {
          "ref": "ae963a34-a2a7-4a84-ae5e-66c42559020c",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c89656df-cc3a-4188-a0c7-4d703544d66a"
        },
        "item": {
          "id": "65bbe8dc-2045-4120-9cd3-e822f38c16c1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "732a8c24-dd70-4622-a338-2a68d6e17ecf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "72f44506-19ff-4e0c-80e0-dab4e2e59ca3",
        "cursor": {
          "ref": "1056603e-d0c0-41b8-9c44-20c990643707",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3a20e03c-ff45-486d-aa26-6060d165d79b"
        },
        "item": {
          "id": "72f44506-19ff-4e0c-80e0-dab4e2e59ca3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "71fb00f6-514e-4f97-85c3-9133cb8b8fe5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c77ca05a-2df7-4e22-bfa6-dbf54aa7d425",
        "cursor": {
          "ref": "abbeabae-b57c-4480-bff5-10fecd5404ef",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2cd27e16-bfec-4b9e-af9e-278578699053"
        },
        "item": {
          "id": "c77ca05a-2df7-4e22-bfa6-dbf54aa7d425",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5c8b709e-af14-4644-bea0-6b1894a55031",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9fef1ca3-1b56-4c5f-9f1e-525894162e1e",
        "cursor": {
          "ref": "21403222-5325-46cb-b4a1-9d42e9cfa2ab",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6c2dc44a-fba5-4b9b-9091-ffed95507028"
        },
        "item": {
          "id": "9fef1ca3-1b56-4c5f-9f1e-525894162e1e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "070181c1-eddd-4126-9604-f22827c63325",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f446e382-a27e-4b49-8672-8c0cc2770b84",
        "cursor": {
          "ref": "e412c83a-3aa2-4a5d-8ab6-da72df6f8521",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4e9c334c-4101-4b60-b992-2605d88cea4c"
        },
        "item": {
          "id": "f446e382-a27e-4b49-8672-8c0cc2770b84",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e0c64de4-0646-4014-b012-63d8a90a3245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "dcf55487-0d64-4f65-8189-424c68467253",
        "cursor": {
          "ref": "ccf629b3-b9b5-4d1b-9587-35aab8e612f2",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7b04dc2e-f87a-4c1d-b32c-b0477ff6f6a3"
        },
        "item": {
          "id": "dcf55487-0d64-4f65-8189-424c68467253",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d8b77aa1-367a-4853-b968-8a1256663b90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "25ee5b4b-0680-4155-b9d1-75df34215d26",
        "cursor": {
          "ref": "5f4ce465-fa29-4387-8dfd-59f85fac2da8",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8608a956-30ec-42d2-a097-c2c920802ee5"
        },
        "item": {
          "id": "25ee5b4b-0680-4155-b9d1-75df34215d26",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a13f0585-b2a6-47f7-97d4-f38361127023",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6be59a6b-0849-408e-89d6-445f739f7fc0",
        "cursor": {
          "ref": "ee396243-90eb-4dfb-8d49-a48966e524d6",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d961da71-cff7-4587-93f7-f5f72f6f518e"
        },
        "item": {
          "id": "6be59a6b-0849-408e-89d6-445f739f7fc0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "85c9dd24-f279-4baf-b3df-8d0bcd52a3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29364ca9-33f6-4496-bfa5-14879cce17b8",
        "cursor": {
          "ref": "5cbf5104-ba20-48fb-9fb4-6e9521830a0e",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8adf4d91-384f-425f-8159-1e91c7ee3787"
        },
        "item": {
          "id": "29364ca9-33f6-4496-bfa5-14879cce17b8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "815bc9af-0908-410d-b095-e9231ea90a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef0510f-620d-4236-8c5d-76f902926234",
        "cursor": {
          "ref": "16593e98-b57e-4b8b-9370-fff6e7baae25",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8bcfecb9-5519-4130-9113-eed2e73c6398"
        },
        "item": {
          "id": "1ef0510f-620d-4236-8c5d-76f902926234",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5ea9682b-630b-45ea-b6aa-410f7b85fd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01eb3a7e-aaa1-4524-8946-90262dcddd51",
        "cursor": {
          "ref": "78b4531e-626b-4119-8270-8972d1ccc094",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fd5f83fd-cd3d-43e8-9f85-084ba01b456c"
        },
        "item": {
          "id": "01eb3a7e-aaa1-4524-8946-90262dcddd51",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7b6b3db2-455c-49a7-bb5d-383625e05d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd49fff-9884-46fc-a17a-5dfa0d23e227",
        "cursor": {
          "ref": "930b6e8d-d0fb-4e57-817e-a8cc2fc95d63",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fae97422-207b-4128-82b1-cb4fecfd91e0"
        },
        "item": {
          "id": "2fd49fff-9884-46fc-a17a-5dfa0d23e227",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e2a11c5c-4dbe-4358-80c1-2c8b7bb175f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f2252c-01ec-406b-9322-99b9bb019276",
        "cursor": {
          "ref": "d5beb832-7165-459a-a847-a4767d74abc7",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e2148149-2c75-42f4-a2b6-b6b133058bf6"
        },
        "item": {
          "id": "64f2252c-01ec-406b-9322-99b9bb019276",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fc5e76fe-f05e-4e4e-a5c5-bc65d1743336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c4afa1-4f42-4e6a-ba97-df6551b53926",
        "cursor": {
          "ref": "a6c6a178-d4e7-4554-bc4b-b56dd0f726df",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "29a7f756-eb4f-4358-8975-71880d919fcd"
        },
        "item": {
          "id": "30c4afa1-4f42-4e6a-ba97-df6551b53926",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f75aff2f-5734-4967-abb8-348037839e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca08e4a5-e9d5-4eca-8211-af2b7b78ff68",
        "cursor": {
          "ref": "3a221e31-bc40-4296-8bb1-8082c6ec67c8",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "42bb6278-a4ec-446e-8965-32ae5e636789"
        },
        "item": {
          "id": "ca08e4a5-e9d5-4eca-8211-af2b7b78ff68",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "80fa1b95-b880-4e70-a980-b5bfb4f5ef6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100d7d93-ce96-44f6-846c-8cd2f2d2d0fd",
        "cursor": {
          "ref": "cc608fdd-bc6e-41bb-9a95-404e6278317a",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c20b3d5d-9bce-41fa-ad5e-38c2ae4ab928"
        },
        "item": {
          "id": "100d7d93-ce96-44f6-846c-8cd2f2d2d0fd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "59dba9e3-08bd-419d-9024-c3a2ca5764c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c690dc-97d8-4a05-bf31-d668002bcbbf",
        "cursor": {
          "ref": "4cbc252d-0da9-442a-9ded-b2cd312c3164",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "df2eab04-80cd-4690-940d-1af24cd4c954"
        },
        "item": {
          "id": "e1c690dc-97d8-4a05-bf31-d668002bcbbf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "82616587-2d47-4bfb-a73f-de018fc1903a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca874ec-0c07-449f-8089-1d7907cf5930",
        "cursor": {
          "ref": "7f585e26-0273-42b8-85ed-20f72dbb7534",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9712c06b-f95f-425b-9c7f-2762b0722b79"
        },
        "item": {
          "id": "cca874ec-0c07-449f-8089-1d7907cf5930",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bd86749c-0860-4ece-b2db-daf32bc79b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85802083-bef6-42f0-ac5e-119ec2cda30c",
        "cursor": {
          "ref": "cab2a435-945d-4aea-a25f-9a962a4e0a3e",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d66acfb9-f595-4072-87b5-8cf26b2cbb24"
        },
        "item": {
          "id": "85802083-bef6-42f0-ac5e-119ec2cda30c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7e374e14-1ac2-4c6d-b218-2154755bbaa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee515672-d800-449b-9d77-f7984fbb7ab0",
        "cursor": {
          "ref": "ba4a37ea-e392-4cff-b0e0-5d0ec8391f58",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "809a87f1-cdd7-4609-a5f9-a35e499ce1f9"
        },
        "item": {
          "id": "ee515672-d800-449b-9d77-f7984fbb7ab0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3c49929e-3c05-430b-8a83-7df78f534d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7435ac6-1529-4c6a-96a5-ea9bdd6e24a6",
        "cursor": {
          "ref": "e222338f-1156-406a-a18e-1054bfe2d79a",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "dd6b5c2a-1460-4113-b2fa-2a1d4771ee30"
        },
        "item": {
          "id": "b7435ac6-1529-4c6a-96a5-ea9bdd6e24a6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5e991408-1bde-49cd-a4a3-9de589899296",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b754bf31-0f06-404f-8b07-2c06e997542a",
        "cursor": {
          "ref": "d195210b-8223-4834-b2b7-079bb2c0c848",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d496919f-d003-4a20-99ca-094293234dd8"
        },
        "item": {
          "id": "b754bf31-0f06-404f-8b07-2c06e997542a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e72c3b8b-390a-4b4a-9dbd-413bebad98da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "faa86a6c-3feb-4d45-9e3a-84feeacf5e2e",
        "cursor": {
          "ref": "c0684400-f429-49d8-84c5-86f73d05d182",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b9cbe0a8-56eb-4508-a132-9f70ac6674f9"
        },
        "item": {
          "id": "faa86a6c-3feb-4d45-9e3a-84feeacf5e2e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8717239b-ffe7-4f8b-90ff-f5de2a342430",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1e4eabd1-e764-427e-b76c-e43c029fd70a",
        "cursor": {
          "ref": "f3f7b716-1fe1-41d2-8313-18e8d2080150",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "76c1c13e-bfd8-4fa3-af8b-b55eb9303316"
        },
        "item": {
          "id": "1e4eabd1-e764-427e-b76c-e43c029fd70a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e39a5370-7331-40ea-8403-442faca06449",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "03f1cb9e-b387-40f0-ae04-a4f54858c5d2",
        "cursor": {
          "ref": "ce210432-4100-4b8f-97d5-29b6603b8ad5",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3de62c9b-c8c9-421a-a5e2-c30ba4705d12"
        },
        "item": {
          "id": "03f1cb9e-b387-40f0-ae04-a4f54858c5d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a0f9f521-ee4d-4931-b0f5-12fdb668d65a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a9004d43-3bc1-4710-987a-c7578a02ce02",
        "cursor": {
          "ref": "264e278e-020c-4ceb-ae62-fe766dc8233b",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "89d53b74-8d4d-49da-94c5-66bc27c4f2f4"
        },
        "item": {
          "id": "a9004d43-3bc1-4710-987a-c7578a02ce02",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8f3e85d1-3b6f-40ef-97de-6b072e23a584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f187071-6acf-4ef7-bf75-96e95998bc95",
        "cursor": {
          "ref": "1425b6d9-483b-4789-9258-ad711ad97073",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3728bba9-c98c-487a-9548-1c56f95d3a5b"
        },
        "item": {
          "id": "5f187071-6acf-4ef7-bf75-96e95998bc95",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2aff2023-bfae-4709-881a-33fa7939486d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671365bb-971b-4a6e-9029-ae46f9d4ea38",
        "cursor": {
          "ref": "fbf655f2-ab6e-4991-bba3-e2b3da4f4dd6",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1c2d382e-dc7b-41f9-802c-731b5958c02e"
        },
        "item": {
          "id": "671365bb-971b-4a6e-9029-ae46f9d4ea38",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4e31de95-4462-4550-9d31-c08f04083615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb63c1d8-d971-472c-9fd5-c9a020705a8e",
        "cursor": {
          "ref": "5c0b33cb-c4e2-4070-8e0e-86057488891a",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6d60c94e-56b5-4f65-9bf3-136565d35baa"
        },
        "item": {
          "id": "bb63c1d8-d971-472c-9fd5-c9a020705a8e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2168f7c1-7283-42d6-b354-5a396a842aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd3737e-fc7a-40c2-b6f7-f01a492bb116",
        "cursor": {
          "ref": "f5d73c2a-ad36-4831-857d-cc0c76f1c6c1",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c84ee47d-5773-4655-ab34-2c7ac274b278"
        },
        "item": {
          "id": "2bd3737e-fc7a-40c2-b6f7-f01a492bb116",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "50416196-2c3a-4cc9-a60f-b093a6292e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad433543-bb7e-4ec0-ab8f-c99c066d0edd",
        "cursor": {
          "ref": "098d2a45-dd22-434a-a579-c36040d73b6b",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "79f7ab74-7afe-4642-8a26-8bba72e7703f"
        },
        "item": {
          "id": "ad433543-bb7e-4ec0-ab8f-c99c066d0edd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e54640cc-3ec6-4e5d-9967-188d7c48acfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3427dfc8-71e3-47b9-b625-63c063843fb5",
        "cursor": {
          "ref": "4f729ccd-7708-4723-9b58-53fce82b7498",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "921de94b-947e-493d-88a0-ac38425a8da6"
        },
        "item": {
          "id": "3427dfc8-71e3-47b9-b625-63c063843fb5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3e332c67-6bf6-4a2a-b0e4-0b03c812fbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7756ac-6851-465d-b759-7037590632e0",
        "cursor": {
          "ref": "57b68d55-c499-4dc5-9bb7-2725c54e6bf6",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "61fa32a8-c3ad-49f0-9270-3d891a3216ad"
        },
        "item": {
          "id": "ad7756ac-6851-465d-b759-7037590632e0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "272d2503-8d13-4074-a3a8-156ba89f4159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e0c060-67a0-48fe-8a53-ab1e1bb2b97a",
        "cursor": {
          "ref": "8831eea4-9b55-41c5-bee8-ae71362eda34",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "25ec05e6-f089-45a8-8c9e-4e537248faca"
        },
        "item": {
          "id": "28e0c060-67a0-48fe-8a53-ab1e1bb2b97a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2ce0a0b4-d16f-4119-9f6b-5b6df694bab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0928022b-e490-460a-b2d3-051fae7626b7",
        "cursor": {
          "ref": "a200d977-c24e-4588-af67-2218be21e927",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4fbdc506-6735-416a-aa34-e32febef0646"
        },
        "item": {
          "id": "0928022b-e490-460a-b2d3-051fae7626b7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "85df5b65-469d-4378-af2c-7b76cbebb864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1e360d-e19b-4288-acf2-ba7fb722a3f7",
        "cursor": {
          "ref": "2aa8e080-0b4b-4b09-bf51-f1eec7a746ea",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "371e0a94-9ddd-47fb-8a57-df29ee82f7a4"
        },
        "item": {
          "id": "fc1e360d-e19b-4288-acf2-ba7fb722a3f7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "167b0921-3314-4ebd-829d-c50b5ff7d8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4984e3d-eca9-478a-9b07-2e9f5e61a038",
        "cursor": {
          "ref": "4bf2a2c0-0d69-4e17-ac1d-f3b60d6d2d25",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6e05ba5e-55b9-4754-b783-24dfba3fea88"
        },
        "item": {
          "id": "d4984e3d-eca9-478a-9b07-2e9f5e61a038",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cb027aa7-a1cc-4eda-8ee5-5d0c29e0f4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e20d70-d388-4508-a156-70778b7224c8",
        "cursor": {
          "ref": "641c9215-607e-4460-b637-c24b4285188a",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "406f1d04-5fb5-4d42-9a49-6dfafd05e1da"
        },
        "item": {
          "id": "98e20d70-d388-4508-a156-70778b7224c8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5377d83d-fb75-4c29-ac4e-b25b319a78a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b9562a-6a2a-4b2f-8482-d280cd2b0822",
        "cursor": {
          "ref": "056e7d12-b97f-440b-abe6-06a774d50070",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7b2cac6c-421b-416e-b0af-79b317f12ede"
        },
        "item": {
          "id": "b9b9562a-6a2a-4b2f-8482-d280cd2b0822",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d43944df-66a5-4189-b682-11f6b84386a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361cef78-398b-4875-8dd7-e33d8f0bd797",
        "cursor": {
          "ref": "4a47b7db-7501-40a1-b00d-80c066f9617a",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3d6eb5d1-20b1-475a-9230-55af7330d104"
        },
        "item": {
          "id": "361cef78-398b-4875-8dd7-e33d8f0bd797",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b21c3ba5-ae09-4e7c-b27c-db02c571d298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863e8e55-8494-4e21-9c38-1b20f462bb4d",
        "cursor": {
          "ref": "10245800-f2e9-4792-ab0d-d342886f309f",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fa610e21-e348-4633-8093-7733696ee9f1"
        },
        "item": {
          "id": "863e8e55-8494-4e21-9c38-1b20f462bb4d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "00500e40-f0ff-45bc-b02f-cb91d4569c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f31db12-2d12-4d96-ba5f-597ba7cecf8e",
        "cursor": {
          "ref": "e72b3588-635b-42c1-9a35-81d2dd93641f",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bafeb459-1d0b-43ca-a32c-137d5f7f8b15"
        },
        "item": {
          "id": "8f31db12-2d12-4d96-ba5f-597ba7cecf8e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0c47f4e4-f697-43a5-a20e-9830e2121e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3c4532-f368-4e9c-8291-9655f961cdae",
        "cursor": {
          "ref": "f0f7e731-427d-46ba-8b68-399ebb8d1047",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c70d7156-cea7-4b08-9d1c-95bffb1a5955"
        },
        "item": {
          "id": "bd3c4532-f368-4e9c-8291-9655f961cdae",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c35d30d2-4045-4b33-8978-17b7f31b2256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a47a4f-8710-488d-9e76-7499a710ca71",
        "cursor": {
          "ref": "6582923a-eb97-4cfe-b7e8-f0a5abda7f33",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9cd9316a-af6f-4968-9525-6a4ffcfac952"
        },
        "item": {
          "id": "55a47a4f-8710-488d-9e76-7499a710ca71",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e0b46f48-5cc2-4652-b14a-2c1042d957be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66547f2-e386-48d1-b443-0a6f77c5255d",
        "cursor": {
          "ref": "5be24dbb-2ac0-4238-9393-251e12f655e4",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1eba0bb0-f34e-4493-bb0c-acf4a85480b1"
        },
        "item": {
          "id": "c66547f2-e386-48d1-b443-0a6f77c5255d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8dd9e6c9-c459-4d84-a2a5-c1bb8e8c289c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d67b9a-2c08-4fca-b022-47ef2799338f",
        "cursor": {
          "ref": "22a649d6-3a4e-4bc1-8141-20d37be29344",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "39328650-ed35-490c-a4ae-2a319b1c1f30"
        },
        "item": {
          "id": "08d67b9a-2c08-4fca-b022-47ef2799338f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c1b2e7d7-21bf-4491-a2f0-77e69dd9ed61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b67ca21-3003-42ab-a962-a5317b3f7997",
        "cursor": {
          "ref": "6d60c985-279b-44ef-9da5-775eb688e945",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "05a31137-9159-43ec-a224-7fc8b98fe963"
        },
        "item": {
          "id": "3b67ca21-3003-42ab-a962-a5317b3f7997",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "89b4f836-63de-4688-921c-44013a12bb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d95a3cc-cf10-41dc-9bef-1a9b48003e52",
        "cursor": {
          "ref": "fc3e1761-1d62-4f79-9c0d-0485db150883",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e5b74368-c607-4454-b5d6-57de2c84999f"
        },
        "item": {
          "id": "7d95a3cc-cf10-41dc-9bef-1a9b48003e52",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "72e578d6-fdda-4fc7-b465-dd64bc9f94c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bac6f2-6542-41ba-b8cd-10354e452c77",
        "cursor": {
          "ref": "7bc36bf0-8656-4415-88c8-6a5251d21b8b",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b98ce25b-92a3-4cf3-88d6-422c6722b730"
        },
        "item": {
          "id": "95bac6f2-6542-41ba-b8cd-10354e452c77",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "611ee2fe-16cf-4591-aecb-733391bb176d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8555eea7-7296-4201-8ec8-8c6e31965904",
        "cursor": {
          "ref": "64d0ccfa-71bf-422f-ab4a-daa2218bc69a",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1b8c8f7f-9d59-4576-af13-f63cf698fbee"
        },
        "item": {
          "id": "8555eea7-7296-4201-8ec8-8c6e31965904",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "eb690035-4c4b-4b26-9402-76522da3af6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e37e5c-9a76-49f3-97e5-fe2d85013f8a",
        "cursor": {
          "ref": "b1f8e0b3-eaac-494a-b10f-aba018cecfad",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "327a41b6-82c4-433f-85bc-f6d9c3a0ae7f"
        },
        "item": {
          "id": "92e37e5c-9a76-49f3-97e5-fe2d85013f8a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "852b33a0-b659-4ade-9230-7176e7ba8a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb209ea-e482-49a1-a30f-fee7f5d5b6fe",
        "cursor": {
          "ref": "d97c1086-dcbd-48c8-88c5-a3157536d399",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1422c8d0-f6c6-466c-8adf-e47e614a5a57"
        },
        "item": {
          "id": "1eb209ea-e482-49a1-a30f-fee7f5d5b6fe",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bbcea69e-9dc2-40a9-8adb-43f25cf94ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a8c661-17c2-4a92-a88d-115aaeb0fd5f",
        "cursor": {
          "ref": "8d6ad6f3-2b38-4c31-b8f3-4bd1e33903a0",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cb454083-dece-4116-a946-e7e6a3a399e5"
        },
        "item": {
          "id": "e2a8c661-17c2-4a92-a88d-115aaeb0fd5f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "31575fbf-2fd2-4abd-a4f6-4b583a333647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c79ceb0-bf78-4e8a-8590-41ee9f748090",
        "cursor": {
          "ref": "8406e887-e560-4373-9b60-ef2dc5dfdda4",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9327ae69-cb71-4a3b-9218-b3280d20ce32"
        },
        "item": {
          "id": "4c79ceb0-bf78-4e8a-8590-41ee9f748090",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1808166e-d622-4920-b2c8-bc3b43d14a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b24284-4e91-4e2e-aeee-55c8d4152100",
        "cursor": {
          "ref": "4b973798-6b43-4d68-9dd1-f13ac3dea90e",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8337b159-1592-4213-824f-de5c5fa1f30b"
        },
        "item": {
          "id": "27b24284-4e91-4e2e-aeee-55c8d4152100",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "68cd31f1-46d6-4647-9ddd-3c7c6e2ea3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa9d2ed-5ead-4f36-a195-b11a0d0e6a98",
        "cursor": {
          "ref": "bde6229e-db1d-4f19-937f-43b7514ccae7",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fcc36e0a-cd5b-43be-aeb4-94f764519ad5"
        },
        "item": {
          "id": "2fa9d2ed-5ead-4f36-a195-b11a0d0e6a98",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f6eb0308-5edd-4ae2-915a-8c328b5f0d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6fff3b-03f5-4a73-81a6-9ffc4e3ba4ff",
        "cursor": {
          "ref": "ecd029de-27d5-420c-bd7c-59432204c518",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "365a0630-ae1a-482d-8f84-e7345796ec94"
        },
        "item": {
          "id": "0b6fff3b-03f5-4a73-81a6-9ffc4e3ba4ff",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0ec8a936-0fce-46c8-a5df-8aab7ad7d329",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e73fe6-b78c-4573-9845-f475b323942f",
        "cursor": {
          "ref": "1e7a6aa7-dd1f-43c8-89ca-8526334693a7",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "36e59d26-64ff-47e9-8faf-c55f1816df6c"
        },
        "item": {
          "id": "62e73fe6-b78c-4573-9845-f475b323942f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1586c4a9-8df1-4d17-8537-7df023bddc0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "c0d354d4-6f6b-4d2a-9694-7106d8ca2cec",
        "cursor": {
          "ref": "82803d7a-b195-4b90-8533-2bf5cdcec189",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "52a44d38-e994-48da-9192-1d48f9d47ee4"
        },
        "item": {
          "id": "c0d354d4-6f6b-4d2a-9694-7106d8ca2cec",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2f9fab6b-f808-4934-810f-0a11a46772ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "7fcef5f1-8ed2-4c97-a76f-a4c6ae2e5e91",
        "cursor": {
          "ref": "7af11126-27fa-4a89-8618-646f7caf2834",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2b7039f3-0f72-4bd4-b6d0-f67ab4a4c23e"
        },
        "item": {
          "id": "7fcef5f1-8ed2-4c97-a76f-a4c6ae2e5e91",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2fca4958-1139-42ec-8b09-f0c0ab456ba3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "c7f32e5e-c1ea-4f0f-b51c-7f65dd7ace99",
        "cursor": {
          "ref": "3bbab4af-c405-48a7-bb1a-3a122a6d3fc5",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4034b4e4-28ef-461b-a611-930ed4b10595"
        },
        "item": {
          "id": "c7f32e5e-c1ea-4f0f-b51c-7f65dd7ace99",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4791487a-11af-4212-9946-6c0d81d654f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "de567800-8786-4523-bc20-09c103d31bf2",
        "cursor": {
          "ref": "08797676-4978-4edb-a055-4fd14ee5f3d8",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b26b4c8f-d994-4d13-82e4-0c970c3ddcae"
        },
        "item": {
          "id": "de567800-8786-4523-bc20-09c103d31bf2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "598d4eac-743b-4f53-9476-37b29ce9545a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4b69624e-0d6b-4c49-b7ba-21b46e3d5941",
        "cursor": {
          "ref": "b3f8ae87-0f77-4941-91b6-5d32d097b7b0",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b1ea6fbd-caea-43c4-baca-bd569346fc0e"
        },
        "item": {
          "id": "4b69624e-0d6b-4c49-b7ba-21b46e3d5941",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "65e32703-0b84-4c32-a04f-c1cd286a1c51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "de7e4f03-efc8-49f1-bc06-d2e0f5dc2095",
        "cursor": {
          "ref": "3a95cc9f-f58a-404c-9cf7-e265682d9dad",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b8cba6b1-2944-4b3a-891d-a806dcfd730e"
        },
        "item": {
          "id": "de7e4f03-efc8-49f1-bc06-d2e0f5dc2095",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e612d124-2000-4261-b300-e5b36ffed408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a623e2c-c1b7-4a32-86b4-9881f7e1bdde",
        "cursor": {
          "ref": "0f7e5b51-a016-4d73-81b9-f441fe5f7fed",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5f809e57-e808-4d53-a6e0-b1d82079c114"
        },
        "item": {
          "id": "9a623e2c-c1b7-4a32-86b4-9881f7e1bdde",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d8c6fe6e-41e1-43f0-b07c-c7ad28cda545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4379e28-e209-4682-87a7-4eb1ebb255b7",
        "cursor": {
          "ref": "7aaea718-5ce6-47f6-8aa5-7eabe068a303",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9f5f7403-d39c-4cfc-bd52-c85edd0e7175"
        },
        "item": {
          "id": "a4379e28-e209-4682-87a7-4eb1ebb255b7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1704fcb1-9d0a-4f36-93b0-e2257cf562d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80643c1-fb2b-405b-af08-ea1a17b186b8",
        "cursor": {
          "ref": "82c65b40-8c0a-4c37-aeb8-9450ba13d513",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bbdc1aa2-4b85-45f7-91d6-aad263de0e44"
        },
        "item": {
          "id": "d80643c1-fb2b-405b-af08-ea1a17b186b8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "13caf7d8-62e8-459f-96d4-45ed20b95650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4de0bf-4534-4a5b-ac4a-0a5944ebaf0a",
        "cursor": {
          "ref": "12ce942a-708a-4919-8dfc-38c195b6b023",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8ef6b216-06db-47e8-abe1-c3be49b3716c"
        },
        "item": {
          "id": "7c4de0bf-4534-4a5b-ac4a-0a5944ebaf0a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "91526708-fb07-4426-a487-b945a01c2396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d9b6d0-cc2c-40ed-b565-e02d327b7b22",
        "cursor": {
          "ref": "5dfb9a32-0b93-4378-acbc-b1ac9df2ed08",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fcba2c49-82b6-4d0f-bbe8-0ec7676e33c6"
        },
        "item": {
          "id": "36d9b6d0-cc2c-40ed-b565-e02d327b7b22",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7ff4ebb4-6034-436e-b205-8e94033764df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57017bff-cb8d-4257-aa97-a96e9bdd767c",
        "cursor": {
          "ref": "92cc3d38-dbf5-48e2-b01a-b1db12dedde5",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c6103523-6b39-4ae8-9f3a-c8e545c0339e"
        },
        "item": {
          "id": "57017bff-cb8d-4257-aa97-a96e9bdd767c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "206b8ed6-7c83-462e-8971-6d4a7e09003c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386cd89f-d8ab-461d-9fd3-92f2e0dd80da",
        "cursor": {
          "ref": "95d9d582-331c-47a4-be0d-4e87b5729932",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3e3ad27c-1377-4710-a800-6ba76f7e54a1"
        },
        "item": {
          "id": "386cd89f-d8ab-461d-9fd3-92f2e0dd80da",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e590a7b2-32bf-4c33-b25b-5f723dd974aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0aa8fe-998c-4a01-a38a-06ae6134fc04",
        "cursor": {
          "ref": "2a567566-9998-449c-ae1e-2ccad8b601bf",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3bb4bd21-642a-4863-bfdb-c257e5fe6553"
        },
        "item": {
          "id": "3c0aa8fe-998c-4a01-a38a-06ae6134fc04",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5f568fe1-53d2-4192-ba1d-cdcd7837bc3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c4ad51-7f55-439c-a85a-35c148448347",
        "cursor": {
          "ref": "af1e214f-0942-42d2-b281-a5439326c8fc",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dae0fd67-4865-4183-9173-2a89dbb83005"
        },
        "item": {
          "id": "65c4ad51-7f55-439c-a85a-35c148448347",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "84abf4b6-09ec-4a06-bdd2-b1527470c933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a88ba8-3cac-40e9-ab93-3d784851eb86",
        "cursor": {
          "ref": "9b617cb4-8efe-4950-88dd-b51dbd9a4245",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d4bef551-ee4d-4379-bc69-a3982e09fdc7"
        },
        "item": {
          "id": "34a88ba8-3cac-40e9-ab93-3d784851eb86",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f4cb6fd5-0489-48cd-a6de-80d37fff07cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d23fcef-349e-4fbf-b03d-e5e1f5f19596",
        "cursor": {
          "ref": "217b035f-920d-4540-87a6-cac6be53c1ff",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6508ecf4-fbc4-46f5-b715-fc9446e46a6c"
        },
        "item": {
          "id": "2d23fcef-349e-4fbf-b03d-e5e1f5f19596",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "541b36da-3322-452a-885c-eef527c28079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60b274d-793c-4850-b3a7-0c5d5b73b538",
        "cursor": {
          "ref": "04c9fd8b-3f35-4df7-9f06-720e1052b4f9",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "78ecb8c6-5c19-44e1-a7a4-9d9921ac4318"
        },
        "item": {
          "id": "f60b274d-793c-4850-b3a7-0c5d5b73b538",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c34f0273-35e1-4e0f-9d07-186c5be602a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29fb51c-f86b-490b-9858-114bf83b0e21",
        "cursor": {
          "ref": "d8601cb4-259c-464e-a09e-1ff2d8f58f2e",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d8854aa6-78ef-42c0-8b31-785356c692e7"
        },
        "item": {
          "id": "f29fb51c-f86b-490b-9858-114bf83b0e21",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "12a831dc-58e7-4c83-ba62-62ca532e7a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3943ea23-7941-4931-aa58-84740ab756a3",
        "cursor": {
          "ref": "e176d6a9-6963-4410-8b30-b18318680a48",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f28e7fc9-954a-45f6-9366-0f845b6d44ab"
        },
        "item": {
          "id": "3943ea23-7941-4931-aa58-84740ab756a3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c7c73dc4-0085-46df-a033-e72cf066c44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a546fb-303f-4bd6-b092-57c284e5514a",
        "cursor": {
          "ref": "676869c9-f065-4bdb-85e8-c34e790a5969",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2dbc72e0-27f5-40de-94d8-dea662ce3960"
        },
        "item": {
          "id": "a8a546fb-303f-4bd6-b092-57c284e5514a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "901efa33-8584-40c8-998d-0df6721baf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8066034-7206-42bf-977c-f8c5fa9749a6",
        "cursor": {
          "ref": "f6729fe4-7fcc-4cef-9ac8-678ac2959d5c",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cb35651b-fdcd-4103-99ae-e933f9ab7195"
        },
        "item": {
          "id": "d8066034-7206-42bf-977c-f8c5fa9749a6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f3edee22-c71f-459d-98a0-71f62aeb5140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5a34d3-4794-4772-a0ea-763d0bfee3b2",
        "cursor": {
          "ref": "3ce54b05-b5e8-4954-8663-c61467ef919d",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "79ef6d96-2865-496d-a54c-f3840ad3af94"
        },
        "item": {
          "id": "dc5a34d3-4794-4772-a0ea-763d0bfee3b2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6a0f5e4a-6894-44e6-bf7e-35168396e252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c8b934-e924-4ae5-88f7-2a79623a3707",
        "cursor": {
          "ref": "bdbf2c31-4e9e-445e-9781-d3ec4cf47614",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "28bc8758-1dca-4b72-8ab0-38dc1fc43afb"
        },
        "item": {
          "id": "56c8b934-e924-4ae5-88f7-2a79623a3707",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "442a2cd7-a316-4f66-9044-10ef4418ceed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0216fc-5766-486d-989f-347b425e9d8e",
        "cursor": {
          "ref": "2730a996-1fab-42cd-8c94-1cf089aaaa79",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "af091364-6b94-42d9-b564-bf66f56a4990"
        },
        "item": {
          "id": "9b0216fc-5766-486d-989f-347b425e9d8e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0b0ce8a5-c21d-4db8-8617-80ce299e7d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def151bd-bf8f-4d0a-b30f-0b7497641f07",
        "cursor": {
          "ref": "03561010-acef-4e38-9097-e70db310f300",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2ab93652-cfa2-4b54-9a2b-37d4b564f3b8"
        },
        "item": {
          "id": "def151bd-bf8f-4d0a-b30f-0b7497641f07",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b91d6b36-3f43-48d9-b224-8dc13be8975e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6836dd90-b396-4d32-9f27-93bf8dc953ac",
        "cursor": {
          "ref": "30b5ffad-c8d3-4a79-a5eb-3c2022be8433",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "460aede0-769e-40f2-b263-3fa75d7f43ae"
        },
        "item": {
          "id": "6836dd90-b396-4d32-9f27-93bf8dc953ac",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "36f9e9c0-3c06-40e1-8b5e-91d494f9633c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb921af4-02ba-4cce-9afa-55459b29a219",
        "cursor": {
          "ref": "e34e36a3-ab05-4f8b-b783-9f8446af203d",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "72043fa2-928e-499d-9f62-6441ae2bfa61"
        },
        "item": {
          "id": "eb921af4-02ba-4cce-9afa-55459b29a219",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dfbaf76c-5264-458f-9467-a842e62530ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce46536a-a9c6-4b7f-a12a-8b77e8b29a2e",
        "cursor": {
          "ref": "360b6be0-a5cd-4abb-97ef-b284538ee00a",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5aa6a607-eacf-4f2b-a98b-375f87264327"
        },
        "item": {
          "id": "ce46536a-a9c6-4b7f-a12a-8b77e8b29a2e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1aacbaa6-eec8-48a1-a07f-b715c502cd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816a3381-e769-49da-b9fd-c589f3e9a64a",
        "cursor": {
          "ref": "50065ff6-2200-46a2-ae25-9cb27cefe600",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c7eca91e-a686-4283-95d5-cd36b94f5d2d"
        },
        "item": {
          "id": "816a3381-e769-49da-b9fd-c589f3e9a64a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "20f4d087-d9d3-46fa-bd30-ff31585002a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49dcb7a9-99ae-4409-90d5-47ab2a56e9bd",
        "cursor": {
          "ref": "fce8ba35-3b3a-4bfd-ab78-49104b51fd49",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "464d1121-4511-487e-b272-c6b5d06d08a8"
        },
        "item": {
          "id": "49dcb7a9-99ae-4409-90d5-47ab2a56e9bd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9c389eb2-8a7c-482a-869f-5adb1b211e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e5b1f9-819b-4b29-a8e2-9dde78ae9314",
        "cursor": {
          "ref": "99f172f2-7917-465c-947c-d845a56b639b",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d8d82ca8-6d3a-4bad-8643-3811dc08ae10"
        },
        "item": {
          "id": "11e5b1f9-819b-4b29-a8e2-9dde78ae9314",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d2e77eed-3912-4a18-9106-f19a213294b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b249a6-1a97-4eef-8202-9402777073e9",
        "cursor": {
          "ref": "b9c8bda2-55ee-4850-a7f3-a4a0f3b8c4a0",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1fe77b49-abd4-4d1a-bec4-ad56cab63490"
        },
        "item": {
          "id": "50b249a6-1a97-4eef-8202-9402777073e9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "238d8e4d-dd97-4fb8-90b9-963ff3226c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ccd002-933f-4722-a0f7-09bb2917323d",
        "cursor": {
          "ref": "7d3c8c7b-dbae-44a3-94db-7e8c38ef6f41",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4d0d4b21-9168-495b-8e75-353de799b20b"
        },
        "item": {
          "id": "e0ccd002-933f-4722-a0f7-09bb2917323d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "91ac98a2-abbe-41fa-8cd5-4657e34b165a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b395950-3f6a-47de-a81d-1448883327f1",
        "cursor": {
          "ref": "6543ecb2-bcda-4a45-98a2-512d7f4b1e01",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8fa2184a-cd35-4701-a32f-7d34d4b10f86"
        },
        "item": {
          "id": "1b395950-3f6a-47de-a81d-1448883327f1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6dd7407f-aaab-4dff-b58b-8b8ab8710265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644a613d-843b-429e-8670-35cfa46d762f",
        "cursor": {
          "ref": "a04a3f95-275a-402c-9227-7be854fff7a7",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3bfa2f61-c5bf-460f-9a3f-49089f04a3e4"
        },
        "item": {
          "id": "644a613d-843b-429e-8670-35cfa46d762f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a0085daa-2eec-4bd9-9960-1c990f915910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e53fd1-e1ef-401e-be0e-bf0354d8f18c",
        "cursor": {
          "ref": "00200879-5cfa-473d-be8d-501a38f19385",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "56104417-b36e-429b-919e-bb29ced719bd"
        },
        "item": {
          "id": "f7e53fd1-e1ef-401e-be0e-bf0354d8f18c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5cd92eb6-5aa4-4900-b60b-3617c3194b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548c0087-a899-4390-abbd-fb1e1fb6626e",
        "cursor": {
          "ref": "f510c3ff-dd3a-467f-8572-042916531a6e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f180c7b9-d9aa-45d4-bf67-60bd53321bb6"
        },
        "item": {
          "id": "548c0087-a899-4390-abbd-fb1e1fb6626e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "07aa383f-8165-4a6a-a68f-7981b9f8a62f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae38abd4-24e2-4121-9793-07327f075257",
        "cursor": {
          "ref": "a144c546-7371-4626-982d-06f79d64a9ba",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b6a51e4c-7952-4d77-862e-f4c2c2c3ce39"
        },
        "item": {
          "id": "ae38abd4-24e2-4121-9793-07327f075257",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "946597fe-88b4-4b58-802b-824614f02eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a0236f-3828-4e12-aa30-63d9b7d3524b",
        "cursor": {
          "ref": "cebb4f42-67e2-48fc-b9d9-6d5ffdddd38e",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a3db4cc4-84ae-4022-bd35-8bc29d71d852"
        },
        "item": {
          "id": "34a0236f-3828-4e12-aa30-63d9b7d3524b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8e3dbdd9-de21-4cae-90aa-410079804f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b863dc6-9012-42f0-9eb4-d1ab49b35edb",
        "cursor": {
          "ref": "8fc19269-6996-4400-8e37-3efd5e83d091",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3f79df0f-f52a-4cb6-9878-3a427ad2981f"
        },
        "item": {
          "id": "3b863dc6-9012-42f0-9eb4-d1ab49b35edb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6331ed72-84db-489d-b08d-1e2a90d54301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3c4666-abc6-49cb-8fdc-c4249b02dd5d",
        "cursor": {
          "ref": "cc6ecdab-8b6e-4447-9062-b64723946669",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8623b7bb-7cf6-4b8a-a72c-9e77b011c050"
        },
        "item": {
          "id": "2a3c4666-abc6-49cb-8fdc-c4249b02dd5d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e1fdf06b-d9f6-4a75-a378-bff125c63632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc2cd41-1842-4fc5-a97f-b7b5d8f4a659",
        "cursor": {
          "ref": "51e7b1d9-3b2b-46de-adf8-18c9ac5e45d8",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3f8cec88-6c32-49ff-be85-37ef18e95acf"
        },
        "item": {
          "id": "3bc2cd41-1842-4fc5-a97f-b7b5d8f4a659",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ebb2a0e5-ac7e-4569-bf0c-8e56982ae6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328ec6ae-95f1-4e34-9664-907887eee35a",
        "cursor": {
          "ref": "6d64f89b-f749-4369-87c3-bfa32f4c5124",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5ef49116-2151-4656-adb8-0d0bf45ab00d"
        },
        "item": {
          "id": "328ec6ae-95f1-4e34-9664-907887eee35a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9093d4e8-4e79-47fd-960c-b7e5224ae23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52a568a-c382-4422-8248-9d90fa60a3b7",
        "cursor": {
          "ref": "988c78ba-fc6e-41e1-a69d-c617307d8f1c",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ef3d20ff-8370-45b4-bbbf-11ed41a3e6ba"
        },
        "item": {
          "id": "b52a568a-c382-4422-8248-9d90fa60a3b7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e053bc32-7268-460f-a985-d2221f6b48e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702e5d0a-355b-4995-869b-b170901a0499",
        "cursor": {
          "ref": "625fd2fe-4ee0-4cbd-89fd-482f8e1a3ea2",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b899e8a2-74e4-4c43-ba4c-4b730ff3257e"
        },
        "item": {
          "id": "702e5d0a-355b-4995-869b-b170901a0499",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "16971bc6-983b-4a48-9d10-0586a79ad8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a2307e-77bd-4f05-bddc-8bf5c5cd949c",
        "cursor": {
          "ref": "1ae71e18-ae00-44fb-aaf7-723f9d2286da",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4a6eab5d-5bf7-404b-906d-e0b74481098d"
        },
        "item": {
          "id": "d1a2307e-77bd-4f05-bddc-8bf5c5cd949c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "043f46ed-3e72-4a8e-b81e-13d37b98c43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6441496-26f0-4b4d-bbb7-c39e6ce779c5",
        "cursor": {
          "ref": "f37b1334-5de9-41b5-b56b-f0e1e70fa1f6",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0ca1a010-854b-4212-b7c8-a773e15d39a3"
        },
        "item": {
          "id": "b6441496-26f0-4b4d-bbb7-c39e6ce779c5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "17d26217-132e-4f28-88a9-c626cd9cc272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d984b58e-2140-4d04-a8f7-e9431efb5e29",
        "cursor": {
          "ref": "cec7472f-ed94-4f38-9d34-81ea0c958986",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "47866a85-177d-48ec-81d5-2202a95329b1"
        },
        "item": {
          "id": "d984b58e-2140-4d04-a8f7-e9431efb5e29",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "579f9dca-e304-4905-9390-97d31c4a0766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd414499-3cc8-4729-b916-c443a82dfe78",
        "cursor": {
          "ref": "380d7b2b-2df5-41db-8a83-07a4a82c94a6",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "61f808dd-bcbc-4288-8a61-f86edddccbb0"
        },
        "item": {
          "id": "fd414499-3cc8-4729-b916-c443a82dfe78",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "18a03e31-f487-4ca5-820d-6444c1bc1fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a955f6-2cf9-4b32-96f6-cb993d720a03",
        "cursor": {
          "ref": "b49fb78d-8c57-403f-aa04-425fb0c024b3",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e9e827d0-15fd-4811-ac56-1dfbc7986f5c"
        },
        "item": {
          "id": "56a955f6-2cf9-4b32-96f6-cb993d720a03",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "04358cd2-a54c-4924-aaab-22eb053b534a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945a22a0-150d-4608-bcf9-8104fb5b27ef",
        "cursor": {
          "ref": "149f5707-2309-4602-94b3-7e3634c8a0d9",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9abc74aa-b214-4b21-9d87-8082ef35c89f"
        },
        "item": {
          "id": "945a22a0-150d-4608-bcf9-8104fb5b27ef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "64330d45-10e8-4275-8269-9d60efce58d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f815071-01f0-41d6-8720-df47a8c4b1e6",
        "cursor": {
          "ref": "1a1c1211-7ab4-488a-a38e-157f9bd143c8",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4c638958-66c7-469c-8e64-e313e7464c26"
        },
        "item": {
          "id": "9f815071-01f0-41d6-8720-df47a8c4b1e6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b41d1b89-a021-4d12-8e4a-9aec3c6c2419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1903e279-e146-4d35-aea9-25e56059f9c5",
        "cursor": {
          "ref": "b95562b6-106f-4632-ace5-1064270986a5",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a942a253-d1ae-4cf5-a53f-616932e2dd01"
        },
        "item": {
          "id": "1903e279-e146-4d35-aea9-25e56059f9c5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6a19ddba-b375-4e50-b10b-eafe4de2ea27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5361ac8f-6d6a-463a-acbc-4c5caf482ae4",
        "cursor": {
          "ref": "154942c4-e9f5-47ac-8356-7cdc4cbba992",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a272eb3c-6992-4756-b01e-dd9e2b5989fe"
        },
        "item": {
          "id": "5361ac8f-6d6a-463a-acbc-4c5caf482ae4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "50f9309a-0276-4e0d-8f35-ffad1ec1e971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0dd4eb-d2a1-4e48-a1d6-8094f9c897d3",
        "cursor": {
          "ref": "933dc436-63fe-430c-92e7-2789718fc5df",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "db76e312-62bc-453d-8bbb-9bdb884d40a4"
        },
        "item": {
          "id": "be0dd4eb-d2a1-4e48-a1d6-8094f9c897d3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9084f0ce-08d2-482a-a992-8da613468d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbf15bd-c760-4c12-9410-b6ac65bc1ab5",
        "cursor": {
          "ref": "9c7999d7-542b-4ab5-8861-bdee0fb70da6",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1dd3bbde-8f49-483a-ac26-b1b8ecf22fdf"
        },
        "item": {
          "id": "fbbf15bd-c760-4c12-9410-b6ac65bc1ab5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d77c9619-4aca-413f-8a8b-213805bb5306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4c3a7a-0939-4a4f-8abe-e14dbe289d1c",
        "cursor": {
          "ref": "9cc0a692-1d5a-4a14-9b4f-fc3ecfcf8cea",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4c57d2b1-071d-49e8-9d72-47b16d580cbb"
        },
        "item": {
          "id": "ac4c3a7a-0939-4a4f-8abe-e14dbe289d1c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6fe3e128-5364-49c9-828d-ff0be316bf8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7672e2d5-355c-4c12-a9f3-aaed5e09a12e",
        "cursor": {
          "ref": "89059591-51d7-493a-b60d-691ac7dea486",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0f93d033-dcfc-4f5e-99c8-c47af24e6505"
        },
        "item": {
          "id": "7672e2d5-355c-4c12-a9f3-aaed5e09a12e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bfc02d4e-f011-4e4e-9664-b02824aa9ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01891b79-be52-4b02-9953-24c2091606d6",
        "cursor": {
          "ref": "4081ac54-6653-4590-a256-8df73af9f01c",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5c67cb76-71f8-4dbe-8445-c6a6f9788466"
        },
        "item": {
          "id": "01891b79-be52-4b02-9953-24c2091606d6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c949374d-d5d2-4ae2-832a-1061e0000b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e69ef17-8ebc-4008-bcce-80772b35ebbf",
        "cursor": {
          "ref": "c4c453d0-6f69-4dea-949b-38c1890b51d2",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e24dc6c6-10a9-460b-a4a7-ee8146a80816"
        },
        "item": {
          "id": "0e69ef17-8ebc-4008-bcce-80772b35ebbf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4c22ee36-1354-4825-a085-3ea084297b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ef044b-a954-48bb-b865-cf998b8391de",
        "cursor": {
          "ref": "8cd66aa3-2c0f-4494-84e4-865393d2c605",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f9c243b0-83b8-4f5c-a2c4-fdb588f61aa3"
        },
        "item": {
          "id": "d7ef044b-a954-48bb-b865-cf998b8391de",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "65b0665c-6e62-4f9b-ac7f-e871f8ab7dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b48626-e190-4b48-8889-e205a9b06620",
        "cursor": {
          "ref": "7d4f545e-338b-4396-9ed6-9d7027a47f4d",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "578dd8f6-e777-4f63-911f-12ecf14c14b9"
        },
        "item": {
          "id": "84b48626-e190-4b48-8889-e205a9b06620",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "53c27833-d562-4d59-ad3d-ab8dc28d25d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fab47a9-5bde-42d8-85e6-fa99028ca6b1",
        "cursor": {
          "ref": "2a52a916-8c9c-4d77-8ab6-daaaab741fbf",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c8ba4847-0e99-469e-b165-5f37492e71e2"
        },
        "item": {
          "id": "8fab47a9-5bde-42d8-85e6-fa99028ca6b1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b7b9cd3c-fddb-49bf-8258-6cf8e4471769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3d3e30-0ca0-48b4-951c-ac5b311447cf",
        "cursor": {
          "ref": "3cc374d9-e1ef-4fc6-a9e6-d5e384acef00",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0070f4a5-fdf8-47ca-a047-e8b2a7be115a"
        },
        "item": {
          "id": "5f3d3e30-0ca0-48b4-951c-ac5b311447cf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5fb6146d-c7a2-418d-9981-e82df51861e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfee41c-6fdc-4f08-8dfb-c4f4830018e3",
        "cursor": {
          "ref": "b4f5242a-bc36-4474-b502-1a5ba4e1cc72",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a67aa897-e65f-419d-a4ae-f4fce555f0af"
        },
        "item": {
          "id": "6dfee41c-6fdc-4f08-8dfb-c4f4830018e3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fa4c29e0-045b-4b75-8201-6b2ec226b267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1deb9098-9b79-4fd6-8736-005ea36c100c",
        "cursor": {
          "ref": "7e1270bb-39a0-44c7-b58a-6fa23057dd4b",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "16c29df2-e5f4-4e81-8a5a-db4d816d888b"
        },
        "item": {
          "id": "1deb9098-9b79-4fd6-8736-005ea36c100c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6ce0f229-3d61-408b-a1ee-51f27b1626ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb9d7b9-3eb3-4b50-ad3d-12fceab764a9",
        "cursor": {
          "ref": "3882ad4b-cce3-45e9-8122-a741bd6fdf36",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9d9821ed-1bc7-458b-a1f6-b56e62934aba"
        },
        "item": {
          "id": "3bb9d7b9-3eb3-4b50-ad3d-12fceab764a9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "50da29b9-1d34-4713-a867-a9e3e1912e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98027d2e-f6d3-4610-bf8f-9efdeabaff72",
        "cursor": {
          "ref": "9c393535-da1e-4e8f-87e9-dc888400bbb6",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8b926968-232d-4b60-ab65-36597923d4da"
        },
        "item": {
          "id": "98027d2e-f6d3-4610-bf8f-9efdeabaff72",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8d5ea0dc-a35e-4f52-a639-0c20d53a7682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c288f1f6-8624-480f-a1d8-a0a9ec20a40e",
        "cursor": {
          "ref": "edb76288-d828-4351-9923-dafd9aa5331f",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dcf3b634-6df7-4e72-a388-ded73b2a6434"
        },
        "item": {
          "id": "c288f1f6-8624-480f-a1d8-a0a9ec20a40e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "139ca748-094f-412a-a3db-65ff639e4606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e0eb58-5483-469a-b809-5eb77c080c9c",
        "cursor": {
          "ref": "47e1e198-a281-4047-ad51-fdc09e1cacf2",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "89dcaa52-3abd-40b7-bdee-8c99fce2b2e9"
        },
        "item": {
          "id": "e2e0eb58-5483-469a-b809-5eb77c080c9c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "23acc8cc-b6a7-4935-bf16-ebcaf2f7fab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07726f49-8c68-4491-bf49-2d5a54d29ba3",
        "cursor": {
          "ref": "dc70d1bc-8adb-4229-b6ba-5838b1017427",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f98af5dd-2e58-4900-98c8-237bf58eae7b"
        },
        "item": {
          "id": "07726f49-8c68-4491-bf49-2d5a54d29ba3",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ad5c3c67-9122-48f7-942a-573cb7c3023d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0998e18c-29c1-4382-8bd4-004fc82a2a86",
        "cursor": {
          "ref": "e751b3a8-2c3f-4ff2-a33e-a581f04856af",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "13e07e09-c3f1-41ac-b194-c1606ba9f652"
        },
        "item": {
          "id": "0998e18c-29c1-4382-8bd4-004fc82a2a86",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "81967b78-b02a-472c-8f6c-f03aa9676d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bb44ec-0e4f-4342-900d-c06ad37aab91",
        "cursor": {
          "ref": "c3f41f4c-91dc-4c0d-b655-2c2692ae8a13",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "649f7e96-b735-44da-a37a-3810d63c6215"
        },
        "item": {
          "id": "48bb44ec-0e4f-4342-900d-c06ad37aab91",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3fad2058-8099-41c7-8407-042ce84b2349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f4ab90-6b95-4123-a52b-a7008b4814c4",
        "cursor": {
          "ref": "01d5a2ac-b11b-45d4-acee-245ca778c1b9",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f4703ec6-eb99-44eb-aea1-a132acf3c9e6"
        },
        "item": {
          "id": "77f4ab90-6b95-4123-a52b-a7008b4814c4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a80799c6-0644-44f4-b867-36c48473ba42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd63c130-ff0c-4830-b7f7-dd6334a9cff5",
        "cursor": {
          "ref": "a8cebef9-6394-4a3d-80da-f1838f38948f",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "37e63ca5-b0cc-45cb-838b-5ad19515ac68"
        },
        "item": {
          "id": "bd63c130-ff0c-4830-b7f7-dd6334a9cff5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "04d8bec6-6a68-416d-936c-2afd0fcaec20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7427465-dc0c-4ee2-9458-fee6e42ecee0",
        "cursor": {
          "ref": "c98af781-fd0e-47a1-8d42-f7ed8bf4c45a",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "084199e9-f7a3-4730-a6f8-142cea491a15"
        },
        "item": {
          "id": "c7427465-dc0c-4ee2-9458-fee6e42ecee0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a41fb3f8-417e-47ef-b022-6b984d0c8b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0266866e-0056-4c9b-9906-8e984fe487f9",
        "cursor": {
          "ref": "16671db7-ce89-49c4-9afa-18c93e87bf7a",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9b14e3b5-2edf-4ab3-b99a-036c565d7e12"
        },
        "item": {
          "id": "0266866e-0056-4c9b-9906-8e984fe487f9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "47acceaf-dc9d-4968-8cf1-f1a52756023e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3bb486-438e-471a-ba26-92480c847695",
        "cursor": {
          "ref": "2cf8e2bc-39fd-4687-a615-f69a73b122ea",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4b6bafa7-6d68-47bb-804c-e1fe7667b6c6"
        },
        "item": {
          "id": "8d3bb486-438e-471a-ba26-92480c847695",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "704e996d-c257-4b3c-8cbd-645b4a8a3f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d086d094-2ad3-45d7-9f46-1d94e1c55652",
        "cursor": {
          "ref": "5b71559d-622d-45ee-a3df-8203abea9c69",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5f7f5713-befe-4700-8977-0e271fb0fd99"
        },
        "item": {
          "id": "d086d094-2ad3-45d7-9f46-1d94e1c55652",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5e7321bf-8b4d-4b62-ac36-6f42ad8e2942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7832b704-8fa3-405e-89cd-4a6fcee1276a",
        "cursor": {
          "ref": "2b0ba29b-e78e-4dbd-a8d1-bc2a3d60260c",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a5058b87-33c5-4b9a-b68a-c96f2244d028"
        },
        "item": {
          "id": "7832b704-8fa3-405e-89cd-4a6fcee1276a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a8999f23-db9f-4a58-add6-4f037f6bf7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1e03b6-7a08-4a12-966c-eee78badd1bd",
        "cursor": {
          "ref": "73674a44-a0ab-4664-85aa-73821a89fa12",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a32989f2-ddc7-410f-94e2-fc7666becd3f"
        },
        "item": {
          "id": "be1e03b6-7a08-4a12-966c-eee78badd1bd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3f9035d7-64b0-4121-8b5c-a84d337e0e22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "090a2535-de32-4cb6-b1d6-8ad1d2594c41",
        "cursor": {
          "ref": "fad96bd4-a4bb-4186-bc33-af20b3a5e787",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bb2b6f39-a202-45e8-852e-b507073d3f54"
        },
        "item": {
          "id": "090a2535-de32-4cb6-b1d6-8ad1d2594c41",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b2892152-454a-4226-898d-7b3dbec899cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8fe1e1-8a0d-43a8-a056-e51622497c1a",
        "cursor": {
          "ref": "2aa97cb1-9f69-476a-8036-b436c25d53d9",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2bcb7ab4-afbd-422b-b431-7befa3b4c6ef"
        },
        "item": {
          "id": "df8fe1e1-8a0d-43a8-a056-e51622497c1a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3f61487e-071c-4ed5-8999-cdd0d2184b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9347c213-941e-419e-800d-8c15abd88718",
        "cursor": {
          "ref": "b3031ced-f435-45b5-a619-62bf3f7ce8d6",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5befe1d7-3b75-43d1-aef0-ed849ab4ca07"
        },
        "item": {
          "id": "9347c213-941e-419e-800d-8c15abd88718",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d408055f-0492-4942-a0d2-04690a309ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9af8a35-b317-45cd-8f71-0eb9356e386d",
        "cursor": {
          "ref": "f179026a-b719-44fc-9609-b744ac0f54ad",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "353c8c7c-08ac-4836-b83d-613e8f87867b"
        },
        "item": {
          "id": "e9af8a35-b317-45cd-8f71-0eb9356e386d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ec787bd6-14bc-4e25-849e-d938e0ba6aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6721575e-2239-4209-891f-ebdafd58665e",
        "cursor": {
          "ref": "d83adc44-e907-4545-a2ed-0343b52c4059",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "836e0932-65e9-496e-9493-95a784443ee0"
        },
        "item": {
          "id": "6721575e-2239-4209-891f-ebdafd58665e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a6925f5d-f375-45f8-a414-21abe350c610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c89a44-26a6-4cd7-b463-f9c617127006",
        "cursor": {
          "ref": "fda506c7-7591-4cbd-a680-34f715f5b196",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5d375d00-f4ba-42f7-8e5d-5762047abe87"
        },
        "item": {
          "id": "c1c89a44-26a6-4cd7-b463-f9c617127006",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "56cb8ff1-aa64-4da9-8fc3-589f9ceaf528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbbbace-1c1d-4cb1-aef6-a9d2aa0b5e7d",
        "cursor": {
          "ref": "f06eb21e-656e-4307-922c-75431d8a528d",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e9260735-d552-4925-922d-9c22e03dbb14"
        },
        "item": {
          "id": "8bbbbace-1c1d-4cb1-aef6-a9d2aa0b5e7d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "dc7231aa-fcf6-4020-b3d4-7f7aa3165253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a53955-5b67-4b11-888e-f0102bb0a3e2",
        "cursor": {
          "ref": "11e5f698-1634-4904-9ae1-88c898b9e2db",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0292c13a-4485-45d5-8646-bbe8dc7b2633"
        },
        "item": {
          "id": "40a53955-5b67-4b11-888e-f0102bb0a3e2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c50787da-d9f7-4756-a860-602b47e4e7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848569f2-4ec4-41a1-9abd-4bcad5e87317",
        "cursor": {
          "ref": "8f784c35-aa5d-43c4-94c5-6aa7f07029b3",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "46980a7a-3a35-4529-91f1-a19e9c6be597"
        },
        "item": {
          "id": "848569f2-4ec4-41a1-9abd-4bcad5e87317",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7d7727b5-562e-4f00-b3eb-a3cf925a79a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b46c6e-9ebf-41fa-a32d-817fe2db4017",
        "cursor": {
          "ref": "232c3937-9a4a-446b-b253-25baf157ba51",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "601081cb-85e4-4b7e-9762-9b7e7d90e66e"
        },
        "item": {
          "id": "64b46c6e-9ebf-41fa-a32d-817fe2db4017",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "46720424-de22-4959-bcf1-709be5253484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3568f4ad-76c3-49ea-9279-5af47776c6bd",
        "cursor": {
          "ref": "fc47e8f0-dbca-4963-a906-d9f91b6aa0e5",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "43b64043-e382-468c-b05c-e0edb38b0fd3"
        },
        "item": {
          "id": "3568f4ad-76c3-49ea-9279-5af47776c6bd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2a2c7e7f-4e8b-4fb9-a677-69aa0e6ba79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db9da09-1372-4037-9c06-1088bff00950",
        "cursor": {
          "ref": "1601a0a0-aa00-41f7-98de-c2ba5c79d17e",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4baaea75-d32f-4fa8-9f34-6b74bdd30794"
        },
        "item": {
          "id": "4db9da09-1372-4037-9c06-1088bff00950",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8116d726-afaf-47d9-b00b-cd9ecead10bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cce612-e881-4992-bf5d-397b220123cc",
        "cursor": {
          "ref": "3aaf3452-177b-4ece-9273-92fab9e484f6",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "171e1480-c019-4f69-9da2-2656856c07e5"
        },
        "item": {
          "id": "c7cce612-e881-4992-bf5d-397b220123cc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "abe9a41a-022a-4c56-aa93-924b05365933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4793e8-772d-4c3e-8dfd-dc9506a6533b",
        "cursor": {
          "ref": "163e5c53-f28b-4fd2-907c-af80aa4aebaf",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "47cd772b-0c73-4ab4-a6ae-0394a58c2363"
        },
        "item": {
          "id": "9f4793e8-772d-4c3e-8dfd-dc9506a6533b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "db66977f-8203-444c-8839-625a9a93e189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ca23dc-a29b-49fa-b49f-439e3c6a427e",
        "cursor": {
          "ref": "a38906ef-8599-4806-908a-3311411b4a8e",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fe79a7d7-562f-4a32-8845-78bd81559070"
        },
        "item": {
          "id": "e7ca23dc-a29b-49fa-b49f-439e3c6a427e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fe85ae42-6b59-427a-9bef-0c54f3a1e848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48afc1a4-3786-43d9-ae27-5ed20d5d4d5c",
        "cursor": {
          "ref": "647c2340-7816-49e5-af2b-03b2aef0fbb3",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2252cf50-7c41-49b9-a7d0-d88b33ec4a2f"
        },
        "item": {
          "id": "48afc1a4-3786-43d9-ae27-5ed20d5d4d5c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "73899005-3f12-4152-9833-7f7d6906a7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea60b19-b52c-492f-ab99-4967e7625562",
        "cursor": {
          "ref": "cd3e8f8a-da39-482e-9759-d7efe848ffa0",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "193e2135-4cae-47b0-be17-b41977dbcc05"
        },
        "item": {
          "id": "4ea60b19-b52c-492f-ab99-4967e7625562",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "04624c8c-b8a0-4e5c-b0d9-5ed44493d4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4636eb6-f068-4936-a668-c3f8c2125254",
        "cursor": {
          "ref": "24985327-fd5c-4fac-b300-3629c8ec3676",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d617bf06-c90d-488a-ac59-22f66a725777"
        },
        "item": {
          "id": "a4636eb6-f068-4936-a668-c3f8c2125254",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5ff62929-3e0b-468b-8ae4-24f4edd68641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54051817-2492-4571-96d2-90fc0c92d6cf",
        "cursor": {
          "ref": "9c7a2441-d672-4aaf-b3eb-b113261820a6",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e288f717-66b8-4ed4-9624-3addaee2ef2a"
        },
        "item": {
          "id": "54051817-2492-4571-96d2-90fc0c92d6cf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "818c63d5-1d5d-42fe-ab8d-a140d1de1ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca4496f-6f5d-4a6b-9d8e-4a4dc7b08c52",
        "cursor": {
          "ref": "826fb916-f4f5-46dd-a122-3cbff5a1b09a",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3befc5f3-b625-4360-8878-589f93e3b746"
        },
        "item": {
          "id": "aca4496f-6f5d-4a6b-9d8e-4a4dc7b08c52",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "807ea4e8-0226-4f57-b20b-d5ce777094c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61103c7e-0e51-4045-a1d1-33925083ca03",
        "cursor": {
          "ref": "e5da9ec5-43a0-4de2-80b6-100fac76f8e9",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d3fb452f-eea3-4875-b1d4-e7d8e5e2e747"
        },
        "item": {
          "id": "61103c7e-0e51-4045-a1d1-33925083ca03",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "67cfbbf0-6a07-4ec3-8d19-615211c4e952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ca5579-1988-452b-b841-8fa2dc08dca7",
        "cursor": {
          "ref": "8649c464-23d3-41ad-8a36-25b650ba92cb",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2c388b0c-4a38-4e21-a4c1-cda54a2701f1"
        },
        "item": {
          "id": "c9ca5579-1988-452b-b841-8fa2dc08dca7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "285f228a-cc65-46a1-bbf1-615d72260967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86371bd2-0c40-48c0-b829-af8433509e65",
        "cursor": {
          "ref": "babe1852-9efb-4693-b346-fcfac7bde7a3",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d825b05b-ab26-4840-b8a6-0c7314563c33"
        },
        "item": {
          "id": "86371bd2-0c40-48c0-b829-af8433509e65",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "20e89367-049b-4a43-bc18-a920e9b05941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92dd9740-218a-47b4-822e-45cb31f2d24a",
        "cursor": {
          "ref": "057ccede-4a51-4a0b-8661-2b08ae022342",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1ec7c8dc-183c-4e72-8b45-cbc6861302bf"
        },
        "item": {
          "id": "92dd9740-218a-47b4-822e-45cb31f2d24a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "81c4aa96-e66a-4da9-9833-c079c87862f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009192f9-8b81-49fe-8e4f-af26a9e5be4d",
        "cursor": {
          "ref": "f8bbd125-c894-4bea-851f-4a4315b2f96f",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "98aa4acf-a8a0-4b58-9bdd-df9a2ba51de1"
        },
        "item": {
          "id": "009192f9-8b81-49fe-8e4f-af26a9e5be4d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4e58b1cb-fbf3-4845-81dc-7db591c1a05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6e2f0c-cdd2-481e-8f0a-9c50109f3ba3",
        "cursor": {
          "ref": "21cf52ed-2049-4bbf-b4a4-a38d999b7c7e",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ea5dce3c-cc7e-45ef-9681-f3a0e5457ecc"
        },
        "item": {
          "id": "cc6e2f0c-cdd2-481e-8f0a-9c50109f3ba3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "894cdf8d-74ec-4869-a623-b87d7f5845eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1d9b0f-5eaf-4405-8854-9bc300892d55",
        "cursor": {
          "ref": "5ef068c3-817f-41fc-80ba-b9cf51246c71",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "873e0591-04c2-43d4-ac4c-dc5c44af5d10"
        },
        "item": {
          "id": "3f1d9b0f-5eaf-4405-8854-9bc300892d55",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d293b137-44cb-4139-afa0-e81d3788a930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c694c947-f4cc-48cb-8845-c905430e86fb",
        "cursor": {
          "ref": "8b703919-a5ba-4111-b8fd-d1982edb2b6b",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "25654675-6d51-4282-8ded-196739c50db8"
        },
        "item": {
          "id": "c694c947-f4cc-48cb-8845-c905430e86fb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f13eadd6-d465-45b8-b362-3943c705b076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401a3956-36de-4155-8c84-074fa777e959",
        "cursor": {
          "ref": "0b8bf909-1809-4f3e-9593-f23c669529d0",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c676df91-368f-47ba-8f9f-19198707630f"
        },
        "item": {
          "id": "401a3956-36de-4155-8c84-074fa777e959",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2e685b56-2d06-4570-ba06-67bf910be171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e187f2ab-9cd1-4e30-a6b2-3508c3609669",
        "cursor": {
          "ref": "de68d8be-98fb-4dce-80ef-702db0a074df",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4260d87b-1b44-45d1-ba89-17f0ec4e7d98"
        },
        "item": {
          "id": "e187f2ab-9cd1-4e30-a6b2-3508c3609669",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "445aa025-9b24-4529-a67d-0bddca44a3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "33f40bc5-1d19-46ff-91cd-d5f649c6a030",
        "cursor": {
          "ref": "2a8759dd-1406-4be1-979f-49ff05b6a0a1",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "aa3ca68d-c782-4bb3-aa3e-5c81e137cb9c"
        },
        "item": {
          "id": "33f40bc5-1d19-46ff-91cd-d5f649c6a030",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fdb568b6-4b4c-4ad0-b708-9e1d11e6c8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2a51e440-96a0-42fa-a3d2-3c359daf195a",
        "cursor": {
          "ref": "42e9fcae-e2fe-4a85-b750-69bf6d4e1d0f",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b6943739-c34c-4756-857a-7b1ad3e963ea"
        },
        "item": {
          "id": "2a51e440-96a0-42fa-a3d2-3c359daf195a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "139b6e00-a84a-4a06-8957-c5f98d01ff0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "76e65171-70d8-435c-a7b7-a56e2d5f4628",
        "cursor": {
          "ref": "822c416a-d1d1-4054-b554-21fea175b379",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ea7cc6be-3065-46ca-8ea3-899b61d3f853"
        },
        "item": {
          "id": "76e65171-70d8-435c-a7b7-a56e2d5f4628",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fdc87c3d-9918-4d83-abbc-16961c3f40e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff22c61-ba92-4629-9f1b-c89b1ab8105c",
        "cursor": {
          "ref": "7844f05d-c24d-449c-b274-d8d372c2317e",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "38f1954a-5744-43e1-8b74-8c1de0569bfa"
        },
        "item": {
          "id": "0ff22c61-ba92-4629-9f1b-c89b1ab8105c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f24b73ac-6315-4398-ae34-ef0d330e27c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "c58e81d4-e403-45fe-9b14-fa48964659be",
        "cursor": {
          "ref": "37c6664a-0cea-4459-ab88-734a57288580",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e8fceb5e-3f6f-4c62-bad1-2de8fb64981d"
        },
        "item": {
          "id": "c58e81d4-e403-45fe-9b14-fa48964659be",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "02e94f62-162b-447e-b091-b44667d99730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1203,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f4b6ab64-56db-4b47-ad8b-ff1bb2055d26",
        "cursor": {
          "ref": "084fbe38-8c94-443a-8fad-30dd46166b9d",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9fd42f63-3009-4568-b3c0-11d237cbe14d"
        },
        "item": {
          "id": "f4b6ab64-56db-4b47-ad8b-ff1bb2055d26",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1ad18ab1-8b3d-47d1-a62a-700c642f0777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "67ae4eb0-411e-4d36-8ff6-66734ccb9bbe",
        "cursor": {
          "ref": "d7fea9be-5445-4e3a-ab82-81d49765e5d2",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e1bda7ff-2699-480d-a463-b5c5f1656886"
        },
        "item": {
          "id": "67ae4eb0-411e-4d36-8ff6-66734ccb9bbe",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "475a9ff0-ab33-4681-88d5-3cf51cbcd81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9794e107-c6c5-4756-b495-2e61f161e64e",
        "cursor": {
          "ref": "bba654a9-4e8d-43d6-98f0-ef356a67ce88",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "462be858-0832-4dc8-b5c0-d9c5691dc9ad"
        },
        "item": {
          "id": "9794e107-c6c5-4756-b495-2e61f161e64e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "64f69d00-adcc-4ad1-9e5a-6c8a2c79af67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "83c8faed-5593-49a3-86ab-51268aec0ef2",
        "cursor": {
          "ref": "486365ff-1027-4974-a35a-c1210900e51c",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "916a6021-5759-4aac-9b29-0f215c552ac0"
        },
        "item": {
          "id": "83c8faed-5593-49a3-86ab-51268aec0ef2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a2529fea-6bef-4383-a01a-b03ac8e8aebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "746cd23f-0f87-467c-919f-0ff13ca33341",
        "cursor": {
          "ref": "84f14139-521b-4a0f-9fa8-66c0ce597e7c",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a489d9d4-f5c3-469b-9eeb-279ce2b8d6b2"
        },
        "item": {
          "id": "746cd23f-0f87-467c-919f-0ff13ca33341",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7febc9ee-bbd5-4088-84b3-6aff02d82b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe598319-a6d8-4359-8312-8057d0c6b8d5",
        "cursor": {
          "ref": "a5afc9cb-eb7b-4532-a3a8-6d3b2f6be75e",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b139c0aa-3db6-4d56-8c2b-43c3fe0acaf3"
        },
        "item": {
          "id": "fe598319-a6d8-4359-8312-8057d0c6b8d5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "542e0591-a117-4b61-9ec9-cce62a543392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85991ae6-7df1-481b-8b53-97bffda8b02e",
        "cursor": {
          "ref": "9f12c75a-f589-4fb9-8afa-a46047272d38",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5d172b2f-f347-40d7-bd0a-2478b470cca0"
        },
        "item": {
          "id": "85991ae6-7df1-481b-8b53-97bffda8b02e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "81808f40-6a47-40ad-89c7-7383eecc6b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451d018a-cdf8-4e2f-9133-4add5ef88aaa",
        "cursor": {
          "ref": "38504bb8-2c2e-478e-be06-796993571a1e",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "94a9bf78-e49e-4faa-9f45-5653b2377e18"
        },
        "item": {
          "id": "451d018a-cdf8-4e2f-9133-4add5ef88aaa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1816048c-66ce-45e3-a1d2-22264d6b047e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93427cd-9375-45f4-93b5-e98f77a5d71f",
        "cursor": {
          "ref": "23cebdaf-656b-4eaf-a60b-0433597d1171",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d81a8b1f-8675-4a88-ad84-f9287a73bb8f"
        },
        "item": {
          "id": "b93427cd-9375-45f4-93b5-e98f77a5d71f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d1b4c626-0300-4795-9a57-8341277e0585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdaca6a-630b-487e-937e-41a99cf4e14a",
        "cursor": {
          "ref": "169df007-f579-45f7-957f-0890316e85dc",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "780354d9-f23a-423b-afe2-871e5083e796"
        },
        "item": {
          "id": "acdaca6a-630b-487e-937e-41a99cf4e14a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b395fed4-f192-44c3-aca4-808fc5e5a020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22c41c7-7479-4b1e-9c25-16c545953088",
        "cursor": {
          "ref": "9411986b-dbc3-4cb4-8851-17b837e15e7b",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "66cb340b-5133-46c6-8c03-e9a5580e894b"
        },
        "item": {
          "id": "e22c41c7-7479-4b1e-9c25-16c545953088",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7b1ae240-9dce-4668-90d1-fb3bb9f4993d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd813825-50f2-4313-ba25-076f3415fe20",
        "cursor": {
          "ref": "e52e5a10-444c-48d5-a541-1292150b4800",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "453fa202-0c6e-4d75-8d8e-9656049d00e3"
        },
        "item": {
          "id": "fd813825-50f2-4313-ba25-076f3415fe20",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e334b75b-7d76-46d1-b1fb-14c379447ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ce0ffe-6807-439c-b767-f4cd754492be",
        "cursor": {
          "ref": "5c5c174d-47ac-4c10-bc40-5cd2a6f38279",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a8775cea-3825-4f1d-9ce5-1a83803d676f"
        },
        "item": {
          "id": "72ce0ffe-6807-439c-b767-f4cd754492be",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "53c417ef-58aa-4261-a97c-31a9ca57e3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2452480-41b7-43d8-9d33-9f64e383fdd2",
        "cursor": {
          "ref": "1bac01d4-c61a-4d6f-9c7b-4b8be842897e",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2cb6842e-6387-4829-831d-dfeaf892d786"
        },
        "item": {
          "id": "c2452480-41b7-43d8-9d33-9f64e383fdd2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "34c6c9fc-dc29-4f8a-9c6c-292d08fd924a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27056cb2-e620-410c-b1e8-e7cdbcba2f5b",
        "cursor": {
          "ref": "398b5887-68c6-4908-aba8-8f7e63a9c3e9",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "256fa5f4-4ef5-4d76-ac65-0291208c47e3"
        },
        "item": {
          "id": "27056cb2-e620-410c-b1e8-e7cdbcba2f5b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8aabf7d5-f150-455b-8599-0d045caf6e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655b3211-12b6-46fb-ab4a-7ef0818ac05f",
        "cursor": {
          "ref": "64252440-d861-4636-9dc8-8ca6274abc41",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "afcc672a-b228-4b7a-bbe4-ee13be551e15"
        },
        "item": {
          "id": "655b3211-12b6-46fb-ab4a-7ef0818ac05f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "460630cd-8d25-450f-8eaa-93e206fdca57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a27829-7e09-4897-aeb1-9da37f8c2b8e",
        "cursor": {
          "ref": "079405ec-ccdb-419d-8c55-b15905cf343c",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f17a88de-adc7-441f-adb6-01d49dd89101"
        },
        "item": {
          "id": "f2a27829-7e09-4897-aeb1-9da37f8c2b8e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "add72c8a-2eea-4148-90c9-470bf85382cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6deac2-0637-4cbe-88b6-14a81417e810",
        "cursor": {
          "ref": "9c259293-92af-47f2-820c-fcde1657ea2f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "968295e4-d986-4537-bd7c-3d53a9561752"
        },
        "item": {
          "id": "9a6deac2-0637-4cbe-88b6-14a81417e810",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "53dd8bc0-0bbc-4fd2-baf6-90ff557c56bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 764,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "8db7b7b7-89b1-4061-b1b8-dab38aeb1be7",
        "cursor": {
          "ref": "4ff73bda-820e-4482-ac15-deda817af3bd",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d4777330-0e00-402c-b473-f3dd5b86c559"
        },
        "item": {
          "id": "8db7b7b7-89b1-4061-b1b8-dab38aeb1be7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e010c674-9613-4ba8-84b0-b5758fd98835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 919,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "bb2c9a39-5b4a-4589-bf98-112245058716",
        "cursor": {
          "ref": "14c9d822-62d2-4ba0-9cb5-6e261e4cb26c",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "20554c93-fd25-4908-8028-60860d213622"
        },
        "item": {
          "id": "bb2c9a39-5b4a-4589-bf98-112245058716",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3688df7d-4404-4196-ac04-189c3d5744d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6a026fd3-c2ba-42fa-8427-c0a1934da119",
        "cursor": {
          "ref": "e9b891ab-3b84-45e3-9385-5e8797bca05c",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3952c7bf-c947-4c1b-9bca-afef570c4db0"
        },
        "item": {
          "id": "6a026fd3-c2ba-42fa-8427-c0a1934da119",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "086d6afe-cbef-4deb-a8a2-8fc6974c766a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 704,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "22bc214a-d393-4e93-8678-757ad7e3c6d9",
        "cursor": {
          "ref": "74d391b1-7fea-46fc-b199-870f4730e9e9",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e132fba2-ffa5-4e4a-abd4-84bfa3760b99"
        },
        "item": {
          "id": "22bc214a-d393-4e93-8678-757ad7e3c6d9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "43a016ae-ddf1-44fb-bde1-b38cd124d2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "090a2bf9-acbb-4c2a-b46b-f97a47211ba4",
        "cursor": {
          "ref": "e6864b00-f793-443a-baab-25a4b165b982",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "053f80ca-00f0-4c18-953a-0147f57c7b8f"
        },
        "item": {
          "id": "090a2bf9-acbb-4c2a-b46b-f97a47211ba4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f773e068-33b1-4f19-80e4-61486ecc290b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6ee150-8a38-4029-883c-28e13379d792",
        "cursor": {
          "ref": "0749a441-5c81-4283-ae46-40e0a34bffa5",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "be56b50b-cf8c-4e05-be5d-cc27bafd0326"
        },
        "item": {
          "id": "3f6ee150-8a38-4029-883c-28e13379d792",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ba4759d1-818e-4b09-aa38-b93847d4ae92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e97511-ee23-4daf-a34f-502174caeaf6",
        "cursor": {
          "ref": "a5e267e6-2d18-412a-b663-59006658fb5f",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d1fb5a1a-6dab-4486-aca7-b5eca21bdec9"
        },
        "item": {
          "id": "e9e97511-ee23-4daf-a34f-502174caeaf6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e173ec09-08bb-4c98-8a78-f4d9b4bfc802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3411a9-f5f8-44a8-ae30-e72c8f052411",
        "cursor": {
          "ref": "f4b6b8fd-82c7-4dff-8f4b-e37d14a7dba8",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b14ab52a-c6c6-46c3-b412-4b215a0aa6be"
        },
        "item": {
          "id": "ed3411a9-f5f8-44a8-ae30-e72c8f052411",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c0768661-4e4a-4044-8727-24eb8be51833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3029bf6d-6eb0-4e7c-80c9-b7962886b1c6",
        "cursor": {
          "ref": "a82a3692-811c-46d6-a082-deda195e0e5f",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "78b9c99c-ad12-4e49-9660-65b0c281b5fc"
        },
        "item": {
          "id": "3029bf6d-6eb0-4e7c-80c9-b7962886b1c6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "77c12f2c-3fe3-482e-8477-a3393bd153e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f944280-61e6-4cd9-bb6f-57c66aad5b47",
        "cursor": {
          "ref": "0b844ef0-eaea-4396-9061-4686f8229918",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "062ce73f-467a-439f-9d93-3cd129f2c137"
        },
        "item": {
          "id": "3f944280-61e6-4cd9-bb6f-57c66aad5b47",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6f7fbe7f-b162-440f-9f27-4c9faed6a199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3a56d9-901d-42dc-9fcf-071724ff3948",
        "cursor": {
          "ref": "d4a6be0b-3eaf-42d1-a117-545fd81def9d",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6898df89-5f9c-41b2-a874-def0dc4dec70"
        },
        "item": {
          "id": "aa3a56d9-901d-42dc-9fcf-071724ff3948",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0f9e8a32-c1d4-4e40-a1e1-adfc0a0cfeec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a669597-fba7-45ff-b8c8-6709cf384263",
        "cursor": {
          "ref": "f5b6ed3f-8ff1-4db0-83ba-324613c83482",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "553cb519-5c94-42a4-9c62-c1ca1c0002b9"
        },
        "item": {
          "id": "7a669597-fba7-45ff-b8c8-6709cf384263",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2766946d-dbe2-4dd9-8b98-0b64949aabac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1643e4ba-8419-4713-9d81-d0369bedc85c",
        "cursor": {
          "ref": "14ba0573-6aa0-4ec3-a1d6-6bc3367805dd",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8ab51704-9596-45f9-b90d-592831b92662"
        },
        "item": {
          "id": "1643e4ba-8419-4713-9d81-d0369bedc85c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f2613555-6145-4392-8f36-cc7377dcdc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41c7740-3445-4fc8-9e58-878517df4089",
        "cursor": {
          "ref": "b46109a0-050d-46f4-a8c0-e4ee020032b7",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5c229d7a-283b-439a-a4c5-d00cb3705639"
        },
        "item": {
          "id": "f41c7740-3445-4fc8-9e58-878517df4089",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b8c0a283-ccb1-4466-9e72-8562274c728d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48331069-a0de-4857-ac6a-0b42faf35552",
        "cursor": {
          "ref": "9c0cb602-c48f-41ce-b390-77ba3dcf1bbc",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "502f6286-efad-46a1-80a9-d5b9aae54ce8"
        },
        "item": {
          "id": "48331069-a0de-4857-ac6a-0b42faf35552",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cb915549-52e1-4951-8405-6eacaa986554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01b4f0e-49ee-4b95-8de5-4b3e0fb54fac",
        "cursor": {
          "ref": "865ac16f-21f4-4afd-b520-182fbb700c89",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0be79519-4250-4610-b662-ab781909e7da"
        },
        "item": {
          "id": "a01b4f0e-49ee-4b95-8de5-4b3e0fb54fac",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2a2b6724-7a7c-47c8-bca4-d9105c26315e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46100ca4-6b43-48c2-8a6a-95d2b8c24b79",
        "cursor": {
          "ref": "206305e8-3d96-40ae-af5f-8d69d911ed5b",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9397b2a6-f0d9-480e-b21d-251bf665152f"
        },
        "item": {
          "id": "46100ca4-6b43-48c2-8a6a-95d2b8c24b79",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ee4446a1-0bbe-4448-b280-f0f948c105ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b54e6a-ad1f-4206-a3cd-8d37b636ef6c",
        "cursor": {
          "ref": "aef6ff1d-a5de-42d9-b6b2-53836f4a8a3d",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8d6b39eb-db16-4902-b4df-eac926ed26e4"
        },
        "item": {
          "id": "e5b54e6a-ad1f-4206-a3cd-8d37b636ef6c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af6d35ad-432f-46d8-bbf6-cd0428d30db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8d232f-f043-498f-8f22-52be8bd4a762",
        "cursor": {
          "ref": "80096a96-c8e0-4587-96b0-84a083d5a547",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8b1d23be-e745-411b-8866-30a1370d2aba"
        },
        "item": {
          "id": "af8d232f-f043-498f-8f22-52be8bd4a762",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a83bff50-d4aa-4fb7-8bde-07183a9008ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eeaeb2f-b64c-448b-8e8e-e0996e5e6ea2",
        "cursor": {
          "ref": "afdbf7fc-6fcc-4388-b8c2-9b2411bf5a18",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7bbaaab9-77d9-49e6-9504-3ff9f5da5025"
        },
        "item": {
          "id": "5eeaeb2f-b64c-448b-8e8e-e0996e5e6ea2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8661fd19-1394-4217-8eca-a444677efb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afbe300-73bb-403f-894a-781c7d39f8e8",
        "cursor": {
          "ref": "9711a2b5-009b-4a73-9c99-375471cc55b9",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2fe00a6e-bdbf-4ca1-aa17-a239a7a1a2b6"
        },
        "item": {
          "id": "4afbe300-73bb-403f-894a-781c7d39f8e8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b2ffd86c-df9c-458a-b960-01ef4db94831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d39a07-120c-42e1-a314-24868feb468f",
        "cursor": {
          "ref": "14d3f12c-22f3-496d-b386-afa712b35941",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c9508ae6-83a0-4b9e-8ca5-9b44a9163cbc"
        },
        "item": {
          "id": "85d39a07-120c-42e1-a314-24868feb468f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d9a4cc45-f0c1-444b-8e49-5252cd1cde56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3736d9-e933-4627-b91c-40b2f913cb53",
        "cursor": {
          "ref": "9dcc33ed-efa7-43ac-a999-8001c9f15a6c",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "895fbb2f-cb17-40f7-8b85-d97e81f54e7d"
        },
        "item": {
          "id": "9d3736d9-e933-4627-b91c-40b2f913cb53",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1afffbb3-20a0-495a-a107-d188b1fcda8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d816f50-5c23-4f68-99ec-d2fc21dd3494",
        "cursor": {
          "ref": "124f1062-69a1-4a64-b813-2d809cf9a7f4",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ee9d7dc8-ceb0-49d5-9e08-0e9f8a33e340"
        },
        "item": {
          "id": "3d816f50-5c23-4f68-99ec-d2fc21dd3494",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a880e066-631e-495c-9f9b-5bc086cb281c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11c9bbc-070e-4b95-ab01-ac7bbd2d3706",
        "cursor": {
          "ref": "5508125c-1406-4bcf-9d63-293290b0c23d",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5d9ef071-4516-4035-95b5-8aab3798d433"
        },
        "item": {
          "id": "c11c9bbc-070e-4b95-ab01-ac7bbd2d3706",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "08d1802f-59fe-410f-9c90-1a347a6c2ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e904edab-c228-46a2-9328-af4c1ed9db60",
        "cursor": {
          "ref": "7641f7cc-3cc5-4afe-a1c2-356933ff2c2f",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "18376e6e-48ef-4477-989b-3306d6a8fa76"
        },
        "item": {
          "id": "e904edab-c228-46a2-9328-af4c1ed9db60",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dd1d4470-a957-4340-9f94-0935d4b84727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d27d47-00ae-46c3-b3e4-115da30c3969",
        "cursor": {
          "ref": "938e7ca8-e2b8-4097-9a3d-6c9bb530a024",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "29b9fcb6-c683-4361-b784-b3e879ad534c"
        },
        "item": {
          "id": "b3d27d47-00ae-46c3-b3e4-115da30c3969",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7f498fac-2fdc-4f5f-8d22-f68beffc59c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8a9aca-ce71-4108-9f5b-55516d56ac2d",
        "cursor": {
          "ref": "31011ddc-61c4-4bfd-a7a7-931ad2a4174f",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ae618227-be49-4a9f-80dd-07e483f10d26"
        },
        "item": {
          "id": "ea8a9aca-ce71-4108-9f5b-55516d56ac2d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e5fc7594-8a9a-4fc7-bfb2-8aabb5735b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5c0d61-4233-45d7-8530-53bac188f38d",
        "cursor": {
          "ref": "9675a98e-54d2-4775-a35e-b20af782493e",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c1264d50-abc1-4f2a-a576-d356857f03f1"
        },
        "item": {
          "id": "6a5c0d61-4233-45d7-8530-53bac188f38d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "276f234a-e087-4139-91ce-9f252dbd5874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e78f7ff-ea14-4bb6-b351-f0e044a38900",
        "cursor": {
          "ref": "5165096d-ba34-4623-a370-53ecf6d2d6bc",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "50d7e5ab-6321-4a03-88ff-be0e3cbae234"
        },
        "item": {
          "id": "7e78f7ff-ea14-4bb6-b351-f0e044a38900",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2d7da20a-405b-4f41-813c-69bd4aaa2fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d87e70-e246-4765-851c-fe298182b051",
        "cursor": {
          "ref": "94937098-cfe1-4d6c-8f1b-fdb54e553798",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4bba1bc5-0a9d-4f7f-9aa5-3086cc0f31f8"
        },
        "item": {
          "id": "d6d87e70-e246-4765-851c-fe298182b051",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b6b7157a-7860-4c57-b3e2-7e8e73c52e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9b0686-bce8-4870-b7b8-4b03e8594fd5",
        "cursor": {
          "ref": "95973da3-5268-4d50-b361-8486bb4b8e17",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e3d18c5d-a983-4d20-a5e9-58525fda614b"
        },
        "item": {
          "id": "fa9b0686-bce8-4870-b7b8-4b03e8594fd5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "04762ed5-92f9-495c-855f-2f8651e98dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b88513-9c7d-4ebd-9ea2-518e4f0740ab",
        "cursor": {
          "ref": "0663a962-0113-44ae-8c72-53cf24923348",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "96a63297-ff79-435d-9a5e-2ccab6b2bedf"
        },
        "item": {
          "id": "87b88513-9c7d-4ebd-9ea2-518e4f0740ab",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4b2865b7-4492-478c-b85d-41e268ca2a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753e61d1-9d0f-4998-b76e-3b330dfe0f0a",
        "cursor": {
          "ref": "30126dd5-422d-497d-ac9e-b13fdf2f7887",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a4bfea03-51c2-48a8-b7dd-cf40b8413280"
        },
        "item": {
          "id": "753e61d1-9d0f-4998-b76e-3b330dfe0f0a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c0247515-65e7-423a-92ba-9bdf66aefcda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d8be05-4651-42f2-88e3-2994379b6190",
        "cursor": {
          "ref": "50f7d764-8d67-4932-8290-4b96fbfc95a9",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a9e03bfe-8eae-40d5-a4b0-b90bb00c7403"
        },
        "item": {
          "id": "37d8be05-4651-42f2-88e3-2994379b6190",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e6acfd7a-7a5d-4448-83e8-66466f0308ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7977d57-f634-4b68-a341-08288291190b",
        "cursor": {
          "ref": "f162b62d-1b30-4e16-97f5-e29259c99716",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a948a9d5-0ac0-45fa-aa23-807a246d6b57"
        },
        "item": {
          "id": "d7977d57-f634-4b68-a341-08288291190b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2ca9b66d-8d7e-43c7-bbc6-bf4879b463c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac0c76c-4fff-4199-916c-faab4c1b750c",
        "cursor": {
          "ref": "4fc3f961-893f-47d9-825d-dc9d14d360e2",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bcbc8ec0-70ce-4dfb-ba06-1c4a41f66b10"
        },
        "item": {
          "id": "bac0c76c-4fff-4199-916c-faab4c1b750c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f3ee8884-fed3-49d7-8420-099f0f52077c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d8dc80-99ba-4542-9c64-7754b29b91a2",
        "cursor": {
          "ref": "278d1144-2350-4ed9-b63a-68c53cc016cd",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8986cd1a-b64e-46a1-ae9b-db8f4703a710"
        },
        "item": {
          "id": "92d8dc80-99ba-4542-9c64-7754b29b91a2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b954803d-b88a-4f0e-93e9-beee26250c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8000e286-573b-46fd-b8f9-8c5fea10ab5c",
        "cursor": {
          "ref": "01c0e897-acb0-49fc-9fef-149e2fc1febb",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "2e956d39-5fb8-4dd3-b666-18d7ef345900"
        },
        "item": {
          "id": "8000e286-573b-46fd-b8f9-8c5fea10ab5c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9dadcae3-8ea8-4d4a-bbfe-ca90edee2038",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21946cf5-e714-4740-885d-c3e391b374df",
        "cursor": {
          "ref": "0fb420d0-1c69-4274-828c-3231196ff4f0",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "03486fd8-5789-4c75-b2ee-2f9377df7eef"
        },
        "item": {
          "id": "21946cf5-e714-4740-885d-c3e391b374df",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5c83f596-9cc3-46fd-bbf6-163f7a492a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33c0fb1-beef-4891-966a-2fff889ae55e",
        "cursor": {
          "ref": "e157a77f-4571-4210-ace8-96087b4e6f28",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "65549323-8c64-478e-ad9f-8160abf4ec41"
        },
        "item": {
          "id": "a33c0fb1-beef-4891-966a-2fff889ae55e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a3f6ea72-380b-4c09-8d87-2eeedf0d6a45",
          "status": "OK",
          "code": 200,
          "responseTime": 822,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f65c62-4af3-4190-a2ec-e2623bec0010",
        "cursor": {
          "ref": "6a5d4c21-1c2f-4d2a-812e-3fdc4d30f0eb",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "731cb50c-8ed8-4d79-959d-436debf733f1"
        },
        "item": {
          "id": "59f65c62-4af3-4190-a2ec-e2623bec0010",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "eb00a781-ce7f-4ae7-9688-13cc08beb66e",
          "status": "OK",
          "code": 200,
          "responseTime": 771,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15fc9f3-8925-451f-827c-7fcc6dba4334",
        "cursor": {
          "ref": "756e60d9-0293-46b1-8bcb-5e0fde083be1",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "728fe351-8baf-4048-966b-8ad789f0253b"
        },
        "item": {
          "id": "b15fc9f3-8925-451f-827c-7fcc6dba4334",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "b15fc9f3-8925-451f-827c-7fcc6dba4334",
        "cursor": {
          "ref": "756e60d9-0293-46b1-8bcb-5e0fde083be1",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "728fe351-8baf-4048-966b-8ad789f0253b"
        },
        "item": {
          "id": "b15fc9f3-8925-451f-827c-7fcc6dba4334",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "a7c8cd1b-ab28-416a-a1d4-5fd0adbb6c5e",
        "cursor": {
          "ref": "e59aa54b-f23d-4234-9b65-01949b938337",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e6da7bbf-3e9d-4646-9621-32cbb34bd5b7"
        },
        "item": {
          "id": "a7c8cd1b-ab28-416a-a1d4-5fd0adbb6c5e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "1dac8fd1-5595-417b-af03-4442df5e5d91",
        "cursor": {
          "ref": "735ce541-ad25-4daa-abe3-8db1d6fdef23",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "8c010bbf-2765-4b47-a2ce-dcccea8b8a98"
        },
        "item": {
          "id": "1dac8fd1-5595-417b-af03-4442df5e5d91",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}