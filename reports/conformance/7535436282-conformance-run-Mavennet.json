{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f80e6d7d-62bb-4c0b-8a83-4e999e4001ac",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1cbf14de-ffe1-47cd-a5c9-80ef8606a1b9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54da2da1-c20a-4cdb-b897-61918eca76f4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b6f183b4-bce2-4e18-8375-294b8fbd1e61"
                }
              }
            ]
          },
          {
            "id": "09f8783d-d974-4f3c-9866-415b633837e9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "889e7a51-3ad4-4c55-9bb2-ad20e18e4f1d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0f6a47be-8da9-4399-ab35-32b10a255186"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bfa7e45b-b93c-4436-b160-f666a37f2c1f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0197bd49-35af-43e4-92d8-f93d0de7af78",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dd5f9750-db06-4662-844a-830d90bd1694",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc6cbd61-36cc-4c49-a0cc-773f3f6ea291",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a369048-593f-4d2b-baaa-b2d6bd44d286"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07c04ee7-f57e-4c64-8111-98d7efca1982",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c464effc-c3e5-4a7e-b29c-6b0ad72847d9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aee4bf7c-edb3-4b27-8d88-ed1700daa47c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e6873eff-0843-497d-8481-c3e9cc334ec9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ee5b376-e267-4d87-9a0b-5979ffc8f02f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8def92cb-3a90-452e-a926-c10e8fd96496"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a2f03fc-61b9-4fa0-9bcf-cb0b33275dd9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce4b8097-5da4-4600-b3ac-946f96a223c1"
            }
          }
        ]
      },
      {
        "id": "9759e6bc-9c64-46be-9066-d6d96c7a1670",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aa8c082e-e1d4-420d-9908-7eaf2c91ae68",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1af32ed-66b7-4e4a-aa79-66a242203fe0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ce4f6837-b62f-4578-b669-fa8dd9187e8a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2eeb88f-e0c6-4919-9799-f9f3244b59b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "217f61c4-0f6e-4b79-87fa-cfe6aea01647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529f1268-1322-4753-ad11-d9968fdbcc5d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d361b2f-ff3f-400c-ac3a-52a5470715ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71e1e877-9c4f-4bc9-9cbd-c1ef6c1492ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857dff98-d858-4784-9e6f-7967fe686982",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f61e86-90bf-4155-bbb2-764070dd2465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5851b8b-f461-41f8-8bb9-7feb69e4034c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "286a1c50-e9cd-4783-b3ba-2dcc3d5c3924",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4296966f-a403-406d-9724-1d45ef0a7a40",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124a439f-75e6-422e-a28b-5b4b16094f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6223f4b1-7ad0-40d7-81e8-162184b81eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ede7fc6-adc1-41bd-9733-05b35685efc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2966843-ed34-4cb7-b7ec-d2f9996205c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f6507c2d-3a38-4994-a679-6a49133007ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "570ac697-9b33-4b96-ac28-99b5eb41cf65",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a59925b9-7945-466a-bb11-b1da5962688a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a7204bbf-32b8-410e-9c44-53dacd5c8c3a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd82a523-7479-4858-b2be-26302894145b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "51209349-752e-4f17-bc69-f39706e1a52a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39df79cd-9e71-4e85-acef-99856c2983e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0068008d-f119-4d6c-8bb8-16fb15a8ea30"
            }
          }
        ]
      },
      {
        "id": "cc8ab34d-e1eb-4983-8d9f-0e2e05df723d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bb8c6b87-10f4-4e5c-8696-39306ea0490f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fdae486-70fe-4122-8cc8-4da04a40d6e0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4029545e-5298-45fc-ad75-3dd679c2f237",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf8de31-d555-4454-aef2-3643740249a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ccfd2d-11e8-48bf-9a71-fb5336904213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76865bd6-7063-4212-a8d9-8b285976c1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f4899ac-4cb1-4f2c-8a63-a0a4a2d416b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1643cda1-9d02-4be9-9602-50f03f0481ab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefca698-b445-4d4d-9d8a-db42dbc4cd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50fbda15-26f6-4442-ac2f-6c7d3e80a019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a99225-70e0-4877-a1b1-4e8449014cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c713ac0-a5cb-472c-a410-635c55a27913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfa84fc-0a32-45d6-a06a-901ebd9ae807",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9effe1-e66a-41be-83fe-abba42948240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e864e5-4974-4ad3-a946-cde9a228b143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b9f74b-c942-4a66-a485-69eebd0493c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30837527-1121-4b6b-8970-14dccf69fddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d1cc44-6979-43d8-91f4-0402901cdf43",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027b33af-ecde-432e-955f-589c27d27781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab39a165-8938-4980-b328-02f3ca014f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba83d05-37c5-432e-ae90-4c21c5302b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e843db66-75f6-4a64-b5a3-b1a6f78a65f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06554dd6-2bed-4df0-b7cc-21584215a8c9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9d5c5c-a529-46d9-874b-1d335f9c9a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ac7a72-a2da-416f-b365-968147e9238a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05c2550-fc13-4f47-95eb-7a498b7c5042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb6fc943-626f-4c84-8dd7-ce5e33c3d6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52eff327-a815-43b2-b18b-360fa0f14a97",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a08119a-4c19-4636-8034-15ecdd9be810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abd742b-dde1-4088-acb1-6786663dfb0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05847019-b789-408b-98d5-5fb816a58605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cd6ca1e-325a-4ed8-be7a-1d34334df8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dcb852-0bf3-41b0-83fc-e25176bf08f3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66849fcb-b8a4-4fa0-9d5b-39901b3332c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6704e6ca-8753-490b-98c4-613f4eb5a573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7996173-b0b6-4131-a436-ae4b61ba792a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44736c20-6f8f-4efe-91ad-30e651ba8fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b407be-eaea-4aa3-a7f8-9a419b20f08c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a9dcb1-abcf-476d-9457-a9dd88990ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15203b76-1e72-47f2-bbf6-db4d94173182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe19e41-5910-4756-90b0-81a0ec0bc846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dc743ca-302a-49a4-9156-8516657ac37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacf9714-4fae-4a88-9096-02a9157157ae",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a5f56b-23ce-4f6c-8162-aec8db831b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cdf585e-00d2-43e3-9413-0e1334f0c54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75359200-5b90-46aa-aff9-9be2c39e344e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1be8e99d-b998-40cb-801c-58b99c1c51c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503327c1-fdd3-4e17-a01a-a2c722fdf414",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2040b2a1-434b-43d3-a72d-2c7e65b926ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eddd6cb-d98e-4537-9039-f71c302e901a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2808815a-8750-44ab-918b-8d7915d065a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c9d2dcd-5d75-477c-b190-7bd3807faafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e557c0b-b4ce-41ae-a5cc-e5bf8c441445",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a6fa56-753e-4aa6-9d54-8d545c12f866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59df6be-9ec3-4c38-8902-0eccdaa79d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3e4f63-6d49-4e51-944d-ba834364f707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60777cfe-e9c3-4ef4-b8b4-5750d2bda6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d43deff-b9a3-4ed7-8fcb-abdaa540be12",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ef9625-15f4-42a5-a1d4-c7af92f503b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a799f2-b462-4e39-a205-4048fcc0a423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6dec39-4bef-4006-9771-8d4aa9cf30b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba25bb75-744d-4935-8156-dffb28acc8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4499c618-43f0-48ba-9944-810b44727fcd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b781f187-f1aa-45db-a0bb-5f6c4f841744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bdc848-b87c-4fa9-9311-a8f624365dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678bb500-2660-423a-9e5b-3838a9a934c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6825bdfa-0d5a-4202-99bd-d993f3b34f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1cb6d5-2657-43a2-8ef6-5c4a239c7c3f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f724238-a899-4b71-9a4e-778a2bb95651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d2be9e-4f78-4f26-b8e9-e7d371fb01c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84df0d4-4f75-4fbd-917c-a48171318a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8564cbfc-ea8a-402d-83ee-18146b25080d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2309c6-7706-41bd-9863-acb22db283f9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f5e15f-c314-4eb3-8a5d-c469f989bc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6899fb8-57d3-4097-a658-fab1ca83ec79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f19189-2447-44e7-911b-32f2b519b34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ebb657a-10dc-44d6-bdf0-ff6367fef031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10354c27-c8ce-4308-8849-dfa720e91b8a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce76dfc-3392-4b63-95b0-1f4f19937f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c174f6c-345f-4ee8-b8e7-a81325a12edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd2bf24-7c5e-4d53-984c-b250662158a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24e69803-8bc0-495c-b8f0-2a6f330dffba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c5ee35-2bc2-4f25-ab18-052ebada1093",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a47004d-866f-4bed-bbc1-c561fb2ce9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8795ce9-ac5a-48a8-ac9b-4b8a7781bbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a5312e-39d9-4850-8222-c4692202fced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdabf99c-d42a-4328-a8e0-c6b85935a234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c7bbbd-d41b-4ccc-bc92-f49527e206e6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b14d55-c8be-4524-9f06-e857a4ba37ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1389c344-23d0-4cb6-a4d7-9606be42a6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233c5f50-d197-4ee3-ad74-630a504cacbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "57a7649b-703e-42f5-a1f0-1b7169cbfd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66a62d8-68c5-4d73-9755-c35186ac9e03",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ce2fdf-36e6-489b-9b70-4a703e797a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8698fdb2-3eb4-4f4b-85df-bd5c1079e8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b49e051-ab82-417e-8090-6d08795b4e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c59a1ac9-d1d3-4e03-8a88-b3115acb373a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1791d777-2f5e-43d6-9981-3461e194d191",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abe8aa9-c61c-4e3b-b4ec-014fba4ba51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6804b1-6340-4063-b0a9-102c3b3dff3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da447c66-1c64-45fd-ae5c-c5078777ccbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "908949a5-46de-4980-bc4c-3d93dc0ad2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94fc5fd-3132-4a03-ad8a-80d8cc9ad8f1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ace473-cf03-4273-9a2a-ec6be1aa481f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e17bcf-f2db-4c06-b9f0-b8e3f60051f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfb4aad-4acb-47ad-9564-b90110e0ae53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82b3043e-9e49-458d-9303-504bea3d3820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7062cfd5-263d-4334-9507-f0400666d243",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075e86f0-1e76-4a31-9d4a-f69649f68e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0cbc93-14c4-45cb-94ed-4001cd80b685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9114770f-7059-4b2e-9bf0-e057894dccd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fabab729-3e3c-44ee-90aa-590a24492203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde3a187-7a9f-4e0f-9f02-301682de3a58",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10252bde-298b-476a-8dc0-2c50463b012e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b91420-570f-4833-851e-4894546f8c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c18582-86bd-45e9-b56c-b9384d79675b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "248710fb-f01e-4fcb-bf26-3b6714e10306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca19eb9-6e70-44a7-a208-b13f1aae49ef",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b85d2fb-c08d-4227-a024-a538a3a911cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2589e2d1-49ff-45a7-8251-c66655197e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4c1130-588a-4d5b-9ca0-9a2403daa4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1c2220-1750-4ed5-9553-6251f3a27cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd4e95c-a172-4d9c-95ea-4f180427170b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a458b5-2a5d-424a-83f9-d9ea548b1bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5e6cd1-103f-4966-9313-84adb87af5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b0a2e0-8cf2-4bb1-b8cf-c163b2a6aedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f497a63-2bb9-45c5-b4dc-62fb413d847a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d225f500-f382-4c72-920f-0d7a6837aaa8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027bee8e-9554-48ce-aec5-ff2e7e27db0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12456eb4-be62-43eb-81fa-66e1a456662a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebef6f7-79a4-4e46-ac04-8040ee6e2450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63568864-c75c-4229-9738-8c3f9a496dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ada32c-af7a-40b9-9174-a23a4f0f1358",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bf0be4-be7c-435d-b682-63caa34e1781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6b9503-75b8-455f-b587-4c71fc26455f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60847fb3-8510-4e98-be36-344618fd8e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47478f57-1778-4ab1-90e6-ce474dc951d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f606e15-4756-4f7f-ad5b-89985f7f4086",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14653bc1-9ad9-47f2-bad3-eb37288df0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a653f3-7375-4950-b2fa-ac8bec71e615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddde4d4b-a4b8-418d-abde-df0303db92d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9efe30-065f-4a20-b282-525d471c1210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b28d45e-8131-42dd-96a6-0d86a6d09b1e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3476694c-3ee6-4db0-af03-6f50b36967d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61e4d5a-20d5-4290-81e7-93f6a024b9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ea165b-8564-443c-a7dc-25f527883605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "45fe47c0-3168-455d-aa17-29a309fb1fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad37da9-e238-4d40-bed4-26e324efa9fb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389e17cd-6280-4d22-9fb0-859277be850d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a2b76c-d857-464f-a74a-781b1d22f2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b5e21f-b874-46ae-a9ef-1d17ff649b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5ba6ea-8a3c-4a15-b1a8-37544aa69d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d60044-af02-4525-821e-3e099418a63d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eff2caa-9936-4880-b83b-50597bfeb295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3de693-8ef8-4923-9191-a471153ec76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7dd01f9-6d9a-411b-ab1d-774ff9eb1deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "381f9227-cbe6-4d32-ae42-e21398f43dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45eee34-77d8-4f21-a2c1-eb735ba5adf5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc278d83-8dd9-4491-ac3f-c48da0b52458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d87891-e667-49f2-b33c-434394d27aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf499fa-4141-4ec3-8e11-eb01b578ded4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff3c807-4952-4477-9c22-46c8d7a878d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8206aa1-b46b-42a4-b2e4-519cc38148de",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f784949-837e-476d-aef2-e2d388ac37fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf10393-f74c-49fc-afe8-7dfa5be91684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8074d2ed-1b0b-4b55-8a0d-498a5e702f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68d895ab-ddbc-4443-aefc-394bf03eb308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea9b793-08ef-4aeb-bdfc-e7ebd14fcc87",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a18bf8-ce7b-492a-9c6b-efe6fadc2226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfeeb999-b31d-475a-8628-617efdfc7172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8a6217-2e59-403d-bdbb-aec6bb6eeb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60c3e7d4-2c12-495c-a7b2-b3bdd88ec969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7677827-0799-4ba1-82c9-4538537e2c8b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e79d12-954c-41d5-9851-e80b5b4f1fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f5c438-f3c5-4c9d-8972-ad9b306e0caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bbe231-a88d-45f4-9bf2-e5f025e31c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee696b1-6dc4-403a-af06-38c7bdb6a8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67a4dac-4109-47dc-bac2-f21a9205460c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6357898-24f4-4f6f-bd18-cf4a4e231131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b5254ab-c8b4-40fa-9ece-100926bd8294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad401c5-01fd-46a3-9bc6-bbcf622daad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b3f1413-be10-4b96-b12f-df02990c1348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf33982-d500-4f78-822f-201a0e5d557f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44893d1-94fa-432d-8745-1afebe0f0058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f95e8fd9-ab56-4bf9-b72f-15fba0dfbafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684417ec-931e-4cf5-b9ea-b30a69a2d995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad0cad8-2f08-4e6b-a8ff-db8a8a13890f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f06c67-8304-4dc7-89ce-97dc265c258c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddec7838-2dbf-4cd8-8be1-ccb3e5c1e37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e02f4f-89c3-4556-8933-a0f22d2b5c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb37a023-8094-4786-ac31-25072842db22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "65b313c5-5a95-4e9c-88d1-1850d6ddbf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10265fe-6ea7-4ee2-b458-e886202d89be",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642703bd-1991-4e4c-bd23-7506ed5489ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb4df46-42ec-4101-8cfa-65203adf1889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c97baca-6bf9-49ba-a16f-58db8bb3131b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "77f9df57-607e-4241-9fb1-108c85766131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12002b82-ada7-41fe-a513-52d727598571",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0155ed-0f2e-4d8e-8225-785a68c168cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cf314b-7123-4c6d-a41a-33fee5b091be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76c20fc-8d24-4755-8128-1f3ead48cf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "43752bcb-8b6a-48fb-ba7a-258a43b0a666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1b7143-ec51-43ee-8d0a-134eaaa88a57",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5e39b7-cb9f-46a4-90fe-8e2063ecd657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450eddf9-11d7-4ad1-bf3d-af132b7a93b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc031eb1-db5d-4bfc-9c31-ecf2b013fc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "80fb7af7-2759-462c-8954-cf78852117b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9506967-d7d6-45eb-a19b-5fe463929a88",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3dfc8f-9ed6-47c1-bf53-d2064f5dd806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b85a0b96-c7fd-4818-9d21-d03e54da286d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1593d90-f821-48b4-84b9-dd6c2557ea63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fb86240a-0124-4b89-9e7c-3911a3c6040d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43bb5c6-a80e-4745-bfd8-321def2b3a11",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4004ecc-7077-42ab-9489-8955e44eb48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f031d0-9533-42cc-bad6-1ec3ecf80fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4982a14e-50a0-4c0e-ae94-1b238321c856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b37c122-539a-436a-baa6-b552ce75dd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e672966-4fc1-42a0-a9a7-7caefb4c020f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0fc451-92ba-447e-b4b3-ae15cb3975d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b00760-0be0-4175-b200-4150f44ee517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27a9478-2bb3-4286-8747-3284736824aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "03b5ddbe-5b4c-4685-8f54-bde4ce1d2815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c67486-389b-410c-bbd6-d7017c37f332",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccfe0ba-e702-488c-aedb-ec26e29c84b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f942138-ffa4-4964-973f-16ea3d832979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd517e0d-9ef1-4abb-a571-66d9edd3c86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c256abba-5f9a-48cd-b20e-292b10785e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426c98e6-f0f3-475e-90fd-6787c420378b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f023f8d7-0ddc-499f-a9b7-8f757b6efe15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04dae439-c4cd-489c-a34d-d9aad5a085e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0eb083-38d2-41cb-b9f7-231f284d1d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f607fc3-7d33-4d5f-b85f-bb4990493cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ca0c57-002a-44e9-afd6-befe9ca89c08",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41952a03-29bf-4e97-8933-ea03ed9ca87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcf75f0-f865-44d0-b02f-dc7507b1420f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90903426-b309-4ac7-8104-33080194269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "daee703e-9956-4c4f-a8a4-353e5200bb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a75308-203a-450e-b097-4742e182a2f3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934caa09-08d9-4111-a0ea-3a9f55c31d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf820e7-a6a5-4e46-a4bf-0f246a51f5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d97d367-483b-4a19-a3de-9738337503bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b621e09-0ff3-4740-bdc3-984df4417492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e179a84-6788-4d9b-b1ac-7361d39ae980",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca0c171-d5ad-499b-8151-cfc330c23cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6aff1f-935b-44e3-a889-655cb96a7001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0af8c3-1e46-49aa-a0d4-efe0e8bb6fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0b9b20-6f90-44d3-be1e-322e5165c540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cf5586-3aac-4256-92f8-5297b6bb1243",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018397d5-747f-4c7d-8d64-c1c78ddd8c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8794f8-8f0c-4949-9c50-f149650d33cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299746b4-c1e7-4f63-86cb-4bf1c4df7424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0bcf979a-4a8e-4139-bea8-a6669049f31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786c27c9-95ce-4701-8a6c-ddb452e0f3a3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1874da-cdf1-48a3-9ab8-15158891650b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8dfc54-f28d-4590-9d30-148e72d09ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abe8be3-657c-4c9b-b06b-aed36c06f1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed4210e-587c-4ce1-9983-0ff70ba3331e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456cab73-72a3-4ef9-95dc-d24910c69e92",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d11db2c-60a2-44a9-8fb3-27e98b685ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd05342-9f5d-4828-bf2a-568fdda065ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af1f357-0061-4759-b171-7506544433ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf378b3-f54e-4d2d-9a69-b62dcc46c73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696b6a88-e486-4a3e-806c-64ba234ce8ec",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13384f4f-2b91-4b89-895c-c8d70f738d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f883fb-778e-4231-8d83-a0af8f7819c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036540ba-c614-4f8d-916f-1eeea656b2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "718bcc8f-0dfe-4d9c-8f4c-5dfc42bd241f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d049ea2-b0c7-440e-9df0-5bb877dc8330",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6425874-ae81-471b-813e-7c5044dde494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9ab3a9-4b4d-4402-90c1-5b704644cbad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd22d960-9e67-46e8-87ac-27481b088e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "217a8451-9f28-493a-97cf-2a4c535e7ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cf6a33-5e6e-4044-bfe5-308d026bf297",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f871691-56ee-4ce9-9608-18172f812599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd58dad-f9f4-4a52-95b3-756b3a383f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072860f6-48c9-4906-bb63-58a8d83c71ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c8ebe7-c8e6-4570-a400-3a6e65582ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cbc400-846f-4356-9618-c16af97cf1b5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0600d475-38bc-4c14-abff-736bb09cb673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e494298d-4e02-4684-afc3-d9c2056d7c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87ba8b2-82f3-4535-b0a8-633f0685528b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dbbb3364-e700-41ba-9790-148ccc518cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9c9fe6-4056-40cd-b6d8-9a6f183a4d60",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6efaffb-454f-47ca-83ac-b1214cffe316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d04f27f-3351-47b6-b4f2-b939ce335b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0d6921-ed64-4042-a283-ca471b471178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf67ca46-2d8d-455a-a065-7d04c898eae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419c9c2d-d886-4098-a8b4-20c9f1a330e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4d09c8-f299-4e43-8190-21b6fe1b953e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125c7b7a-f782-4451-b288-ef7741c72a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccffd1c6-0196-4f47-8807-f40e27fc3e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2f7758-8636-47aa-a060-2eccd9500ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f60cdb-b90a-4b4f-8483-1b365e3132db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b431167c-e125-49e2-8b22-9215526c21af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0384c2-4a7f-433e-987e-41cd17c876b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003fc8b7-557a-4d96-acd2-d74f46a592d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b8522f-19b2-47cb-b48d-c5be8fac2465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a411440-f8f2-4476-948d-d85da2ecd34f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363e143c-cb1e-4355-847a-2029b537772e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938afba5-5dc1-49d1-ae2c-a2ed8d6f6a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fd62a8-9bd0-4f18-9102-1aa67ae16375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "450bf35a-abdf-4a0e-ba9a-6eb712f0a3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1ea149-46c5-4e84-9794-dcf816eff61b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ff0c7d-515f-4a4d-b278-9113ca4a5953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06763257-510b-49f5-b078-3b65ece91753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9679dd3b-6d64-4a13-be81-c6d69582a5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e8a143c-a3d9-45cf-9564-d4ae51e1a0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8acdd5-c13f-49fc-ab80-1994dd1b979a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27d03fc-cb0d-43ad-a139-702864d6fd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7f3cf1-3e7a-4e4f-81af-577def12e93e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c1fa05-9a37-49b0-a99c-a0932e3fed48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "af1871e5-e81c-41e1-b419-25e1485253df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793eb96a-3300-47b9-8f02-d534a21ae37b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22ce9e6-dac5-41b4-8736-6550f71334d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b03b6d8-efc4-4eea-94a9-c6939b1d4c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0c5f1f-a170-4a1d-8019-c8f0a9b5e4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e17e5f43-5f5d-4801-8ffd-042263ebb2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b42663-1b52-4c4b-a2fe-531ace669ab0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c310ff8-6994-4f2c-b581-d869372964cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a026cf6b-1d86-4474-8cd9-b35cf8f3476c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae517fe-68b8-47ca-a11f-dc67d9c55b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1812325f-b232-4e14-99a6-61c7217b6998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e383dd-202c-4454-9d56-c1986d0f56f1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1971a416-e22d-459b-9bb4-cf8a092c65f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5402664a-3c46-4fcb-bb8f-c67f4b2981b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d5436c-3ee2-4ea0-a90b-bd3cdbe4e16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9d471c-e2c4-429f-a483-ed4fbeccd849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0906f950-2b28-4383-8eaf-728c8ca89eef",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8b3f78-b904-4f09-a685-6f70b1e7e61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aef25a5-eec4-404b-8005-1c294d02f90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454ec156-aa4b-43ff-92d8-c810d1506a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4a7e39-b0ce-44bc-bdb4-3e8176022eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cd4157-8366-4ec6-bf87-b24ce1af95df",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd45e52-056b-4e1e-ad0c-20b4b2c43075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29cdbd90-a70e-4bfe-abcc-47a1c2f14a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3619007-82c0-4ab9-aff0-893e8bc82137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7f9d73-a360-4fe4-a691-048557740457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63b1a9c-3d28-4aa5-a47a-b4d7fad0cd35",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b05339-a2fd-4104-8c80-679e06b4eabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc6347bf-749f-4c40-9c5a-9e776f245654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813f3f49-0541-4829-9d2a-5c5fa3a3fa30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3599f77-729e-488e-b931-99c0762f0a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f64d8e-038a-47c5-8e5f-06697a5e9703",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d09a12b-4ccf-4769-8e09-06c2882fbd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6441bce-a002-47a4-9732-598b226b30cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1481210f-a8dc-4afe-a6d7-f374411ba5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "39886b35-5052-4b6c-a730-113419231634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152d7de3-abf6-4169-963d-e5afa05d2924",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e726a2f6-c5aa-4b6b-979b-cdeb3f071b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0571e2c0-9b14-4911-a055-8bed76b5da7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2617f8e-1bb0-428f-a83b-aded418c013b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "598277ed-4408-44f6-a998-88f962099bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea0ff5a-0f3f-49dd-8f54-34d1515fc283",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7842318d-656d-4690-a7eb-2312d5ba7668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eba6064-ba90-446d-90e3-a28d7601e1f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d90f0b-a897-435d-bb9d-bddd68a17212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7b8c5e-5dd7-4fa1-b70d-a7b63bbd87bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59896866-15ba-4677-963c-91f6c12e4395",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d51a9f-c88e-4688-ba60-af257d50d979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0284b542-54f6-4ea4-83ab-e2c0e59472d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4d47f9-aab9-486e-8eb2-2eeaa31571f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9fb1d3-0264-44e5-8769-2c7a128f73dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9048cb7c-9928-4c53-8654-bb86ad061d9c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976b3b2c-5725-4e0e-8f25-70308c1f036b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5cb152-81bf-4ebb-9c41-3a3533d6d9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3d4fd3-923e-489c-b789-3c5b7b0681e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ddd5589-c2f2-480e-9f2c-37385ff0bf6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b57ccb-ece4-4bff-bea5-ce22787cff79",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df69ba2-5ec9-43d7-8a2b-f92cb3c2d9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed658a1e-33be-4b3b-b626-14c0d6433e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d07d593-6eb8-4abe-8cd9-94be27bbef6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18956607-136e-4951-942d-6bd7e26b0cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9676b5-2f06-489f-a26c-c357cb78a46d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e60fcc-5528-4790-bf3a-368d901d1bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc98f90-8a08-479e-bd2e-3cf661e2571f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b40229a-571d-4a7b-9bc3-e127a29d4cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1cbc21-5fcd-47fe-98b6-411bbee3f724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c9fc91-c56f-429c-81ec-b9816f16acfb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e2cebe-7d94-4eef-a7b1-2c1963f32077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3d3419-a00f-48f0-bef1-ab37f6d3dca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d835137-3f18-4916-88e3-b10cab73926f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "060fbc85-495a-4ba8-8c84-499b525d4ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2ec6a7-eb87-4580-8917-7057a3172674",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3582e29-0da9-4abe-8092-fbd76c4903b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca1f5cb-bee2-4502-ad5c-6adccca1c1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71701e04-a227-4b94-bdf4-0db2171d797c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90b9ae45-eb6a-4c10-a055-ef820d72f4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88c750d-bfd9-4a3e-934e-485b4fb0d160",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f90510-49c0-49ed-985e-dcebbfc54771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea2f54a-ab29-4208-8056-b0b23881b0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b281136-5dc6-4a8f-aa31-082b036bac11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3741cb-8120-45ed-95a2-95fb0afe95bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c040dc-c04b-4ac1-a0b2-d61f4f5c8f47",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4107f9-213b-4f8b-99cb-d7f0cbe18aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0da0df0-2123-444e-99e2-cc7d856aa7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2d6f8c-3a69-42f1-a5d4-a3407e068a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3cdb88-72df-47c3-81f6-367ce8f8d078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5beb529a-0ec2-4156-86e1-1c44e9271372",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e85de8-2f29-466a-8daf-aa24a7bf85e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06ce2f2-497e-4ed3-b864-78be1ffaeb0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21e80bc-24fd-400c-b2da-b91f81d26aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5caa21b3-4c32-4cc5-b077-be7ed1d40282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fe9a52-b6b0-4878-b057-b596c818b858",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca95fa81-50c7-415e-acb1-dc381836f863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b18021-0452-4e25-a7b8-59cd576177a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a38d36-0a78-4460-a3d5-3ff280ff94cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "26650431-23bd-430b-a18d-67d85c35dffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898718ea-8869-4412-9cb5-381b23ac7a71",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7554a987-2db5-41a7-ba3f-2b44424906c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452635c8-008a-4927-9768-45eeb8016ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5f91a8-3464-472c-909e-c7b8211bb0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48185921-a51d-4c46-8447-89fb6de819f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd399541-1320-4f56-acd3-e8e5e107939b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e9ae54-cbfb-412d-b511-375e8ea7a8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1072eb6b-56df-41b9-b118-ad9edd2fab70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50344d17-6b04-4180-b059-7773e8116318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcee906-e29b-4838-969b-6412b7a38704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c22992-97f8-467f-ae4c-7e47f0c9233f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b21b49-afd7-4a2b-aa5c-2618e9438329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa2a686-ffb5-4449-a60f-f39eb8a64e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fcdf05-e6a7-4eaa-868e-3f3e8be59e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6294c5b-4511-4761-b5ab-1adae5362da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50412785-491b-4099-b618-f15773b38c5d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bd67f0-0bc8-4cd3-961f-a1bd16b64235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bf1343-9e48-4db9-a706-b2cf8259719b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b2f444-229b-44eb-8e5e-66e9e4f55992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ccb014b-ac82-4dc6-93bf-0ba8565b9d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fdc45f-a1a9-4094-9d83-a7f49503ac30",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbeaf2fb-b7ba-494d-9802-698c3f13386b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f52f3f7-46a2-4a5a-bb45-4e2dbf853802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbb33e0-8939-486c-85d3-7a0a4df66cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81e07a4b-0698-4c4e-84d5-2286bdf2135a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af33220-c680-43ac-b73e-052a3caf7eb5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2a8c5c-439b-4871-9b71-e5d69af0d80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ec9916-9627-420c-a5a7-4ec5aa72e3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606afdd8-855a-459e-95f3-a1d1cf2eb8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "482c0c71-a281-42ba-89c5-b79c34610eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ecad36-eec4-4b2c-b2c3-603223dcd0e3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cdff7e1-00b4-414a-a0fd-7ff0c53847bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118f9977-934a-4077-aeb9-8cebd0fded38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89be01c-e8a0-4348-af87-acaf0d0bc84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3c8132-fc80-4091-b492-eb090765067e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cab7186-0eaf-42d8-9759-d8b1643c5192",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144d1b38-e79f-4771-a769-f1365f3f230b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa0d206-2647-43d4-b44b-78c5ee0469f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2377dc22-5813-4be3-b7a7-1426666ba81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce99941-bc20-4255-9b87-58abcca0ed9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92625d1-0973-4f90-8aff-6395054af296",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64830dc9-5420-4d4c-9023-d319754c7a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad8a5a2-0e3a-4fd1-afda-1981be99fd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63906667-f0f5-4bf1-beab-2cc6156ac888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cafc40e3-b5f3-4df7-8d22-130be032f2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6552f77f-d24b-44c0-b359-4d8d6ababba0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d3b08a-9715-4c41-bb12-b3fef60b7932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434a2b8a-4c40-40d6-9a64-5c07bb67cb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82677098-abfa-4b34-9e0c-965bf12c0ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4357bf62-7bf9-42b6-809e-3a9de6b6903e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895ce128-cbb0-49f0-b507-df25b048cc46",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6bb11c-8af1-4293-a733-32210379275b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f4233f3e-f395-4b6f-9d92-5fd371ffd2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1782671-92d4-4b40-966c-6b35f048ed22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6afab0-f32e-41cc-92d3-d904a4d9c4a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "39eb509e-2e8c-45b0-83cc-bcda429043ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0689a778-75c7-4066-a93d-bf3df75840e0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a910e21-4ee9-4906-b1b2-f236cc5005a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e8966ce-f768-4748-ac9e-a27eb388bfa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5366aca-8f55-413e-842a-ada2ab476fbb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c2ca2b7-d862-40ac-ac7e-56f6c7ff45f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1698b316-858f-4a65-b033-8987cb091c2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bc9a0b9-d4f3-4374-a5c4-4c5bfbe66c54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b47eeefa-9400-4383-b55a-3f1fe6887e64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e6e591f-6743-4e49-a935-443c7e7a1f9f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1053fc5d-5c12-4609-ac2b-c07903bd82cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4c48741-6b7f-4fe3-9d4f-8c8b907839b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dce79778-f247-49c0-8480-86dcdc01b4f0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d5c027d1-c381-4607-8481-b04ad946944b"
                }
              }
            ]
          },
          {
            "id": "06ab1f0a-ed5a-4e19-94c7-938833a7517b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8441e878-2cb2-4259-a0e2-288f91b907e4",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6889d72f-f0fb-466d-9940-17d0e201ffa7",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52d20ba-f97d-46f2-9ad4-72ef4d7c77d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "99a7b2a5-c31d-4798-9cbb-0602cc11545d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cef50a-2930-4d27-9b6e-38f8b54f2c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01501e9-f96d-4be5-b35e-860fe2596d34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "721e5ee1-b3d3-4873-ba8b-3cb8f116fe03",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "349db902-cad6-44c4-8789-8dbfe6d63a18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e61d933-9985-4f37-ae74-eadfe34e44f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b203276-a62c-48fb-ad7c-b660f88b0761",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64404f60-9172-4317-8fdf-32984d9d8015"
                    }
                  }
                ]
              },
              {
                "id": "e300c7f6-e474-44a3-871a-f5e2d74ed0a3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f80c4bd4-f82f-4d22-8c74-61b548799b69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "525a6612-5ee0-42c8-a872-0a51c246d0c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "294c5f3e-946a-4787-a038-900ab8d40cf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c9d92c93-ff60-4449-b7d4-be5e4dbc165a"
                    }
                  }
                ]
              },
              {
                "id": "7f216268-8cb6-456c-996b-cdb9f1af2aae",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec1d03c4-c569-4d8c-bc6e-4b37e408879c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa0d75dc-d74f-421a-a66f-90063666f1bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58b1af36-3e4d-4630-b008-bcf49aaa493d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9369ab5a-12e4-4570-8786-532132c3d195"
                    }
                  }
                ]
              },
              {
                "id": "a7ee3cd6-af15-40c6-94f6-7d13681b46ea",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8f820a7-88f8-49f6-ad05-33c4da3efa81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5d67b26-351a-4ff7-b88d-dbbd6ce8c2ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f321e56c-8797-4fe1-98f3-ab8778468279",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f09e7935-10ee-4ff6-b053-bd260d503709"
                    }
                  }
                ]
              },
              {
                "id": "ba5c7a5e-afe7-404a-99df-6016e5125074",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3285eeea-85c4-4706-8512-dbf7e2772948",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58d044e2-a128-459d-a825-f9149743237a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62a9894f-8504-4087-84af-d6dd6ad99e3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "02220063-a7be-437a-92cc-c50db2b1f8f9"
                    }
                  }
                ]
              },
              {
                "id": "a1430d7d-d43e-4f90-a1fc-1081299e9820",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bcda5e7-c206-46c8-ae18-9fe854aa3122",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d40aab08-cc6d-4def-adac-b3e7d5f55fdf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a9c4ba0-476a-48e4-ba27-6a3ac78a0fdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "38d1ab55-2bb9-4ca2-b51b-d5e0e87d7661"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea296e3e-c670-4333-95cc-a06be344a6e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd07e043-5bf5-429f-b9ed-df687824b102"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c1cb8c77-75c7-4e70-ad21-e555d3278f19",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6127bbd-b672-45dd-82ff-736436bbe6e6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8aa37638-62ca-4300-8981-d00d14d2c26a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8d817e69-23d7-452b-9ebc-2bfbdfd5d407"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51ed11d8-60cb-41d8-bdd1-ceedf6b453f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c29b96d8-de64-4fe9-b11f-71e74371f99b"
            }
          }
        ]
      },
      {
        "id": "8c057c21-24b4-41a0-b2f1-b9fb0a6bc6fc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3adeaa4d-b879-49e3-9bb7-883f2dcbf85f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3cbc3160-3984-454d-9d46-e1af2f7cb4e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ee901a3b-1d36-419a-b4ac-f712a9be800a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef1a3ed-f134-41de-8de2-2b6fedf26e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b834cbb-dbbf-4f24-9045-8f893b6c0789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b957a7-c386-4206-bd19-cf27ba67066b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "19c5e680-5425-440a-a789-3e27a20d95b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9f7ea1-8f53-4a40-b549-5ea6a30e5995",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80c5720-d146-42e1-9f6c-9a368fc661b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3235933-ab41-4a12-83b9-9d067417c2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8776f720-5b66-4adb-9348-3743696a52f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d92da7ad-0d39-412f-a6a9-77683a2c4a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec79a0f-ae44-4ab8-8d1a-bea99151fa38",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ef59fe-a888-4409-a062-af652bf5fe70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e7b881-1e8d-4f59-af02-0c23e64b2050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a01ce37-ac72-4081-ad93-e38efa15440b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f97a724b-9dfb-4df2-b303-4d89e83f1c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647f555c-a635-4681-83cc-fef8b88ab9b7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccf2cad-bd8a-47f3-a100-43f5fba43b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fda600-c166-415f-add0-03225d7a6deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a922bca0-1950-4dc7-8a6b-8fa42f29e0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44fd9dfc-6efa-4bbf-80ed-b0fc4b93a835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23625b70-587d-497f-8106-4934f920a9a5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8311d7c7-37e5-4e85-9b88-9efc83befbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e32e51-67d1-41c5-8f8c-1e447289095b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe2f0dd-0f97-4875-87d2-50cae10265bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e82d60e-273e-471d-8b82-e267314ff06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a482dc8b-67a7-41b1-ac2f-4b4926cecfde",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8dff2b-3ea4-4007-b9cb-48761d9d793b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3fd16e-f1a5-4568-b15c-9361829aba06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8458bd-d917-42c0-85fa-fb77825f122c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86e0f46f-b5da-499c-b251-b5dc8c593bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca12208-e135-4918-a1ae-144ef1d82b4e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bc4e11-1c5c-4485-95dc-1073026ed479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa5de91-e6bf-46c1-9ab9-a1960c93fc49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cc0a82-c09d-409d-b724-6aa134540aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "60f7517a-2c95-4a84-9e7a-b1cf25dae389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dedbeb-6bc8-47d0-a320-7a1c7571d818",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6b33f4-8875-4dad-b57c-b352be3c0618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8e2353-f191-4a4f-a1d6-d47e191c0ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bb8786-008b-4139-88f8-72d9d47ba4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2f921b-4f80-415c-a360-ae69a4fa9dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cb9bf7-39e1-4d71-b72b-946a7d3bedf3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52d9a97-26c5-4ec5-946e-46a79b9b42c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74df114-6d6b-46dc-88b4-59a8366ccf24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a629254-ff17-4c11-ad36-21e8ebe515b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "135a5a81-e6a2-45e7-be8d-efb84be1a8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2751af34-3b3e-45d9-b0f8-3ef3f3171729",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807e25a4-fc00-4232-bd9c-6ce52965ddca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d46af6-0915-4217-b337-7ea0c2362b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9922e671-8202-47e1-b9f6-8366d665cefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20afda88-49fe-4abc-9653-5174caf55a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c431ec50-f774-443b-b09a-329fc7d48a09",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cb69a2-9655-4d5d-baac-c6b01c5c9896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c647e1-74e3-4034-8704-4e8a145e4bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd3282d-eb5d-4561-971b-c19144b8010e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e909355b-72bb-4f38-bb4f-04ef4c3e73a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e181c72-905e-4a36-827b-d373159bccb3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd273ab6-390e-43fc-a7c4-e8b890663a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d110b48-c6df-434f-813e-2d460b1267b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5529e854-422a-4ee7-9f82-51d899e62e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e364582d-f855-410a-a872-e33d3a2b3111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05853d8f-51df-4722-9cef-c89b71e28bd3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9fc340-eec1-4ed3-bb6b-09a2dc224345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d63e110-3c6b-413d-a60a-5318f4ad5a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822663a1-1f75-4f46-8d0a-28d6baf63af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "77931952-81bf-40ae-afb6-658eba700d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366c2ef5-86bd-4bcd-8157-59ba5e634e05",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbc3658-f655-4e49-b079-55176c83a03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58473fcb-d24b-42d7-b487-3cfca3104811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaef66e3-3abc-4684-a87f-13ad90d41160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b37a97e-1149-43a4-adc0-15dd1adbafc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a3d235-1c99-47e6-9565-eb690a440d07",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ff18b5-23f2-4d40-a1c2-7de36f17bdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81eb67b3-7864-4716-bcb5-2d2eeb3efb84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f311323f-b6cb-48cc-867b-6dae538eccd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd120378-9a2b-4c4f-b556-e5a50292d19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e66450d-704b-4489-afa5-3169c8da139e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad5a93b-cf6b-415d-af2f-f5d375422d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53bf550-940a-4b37-b26f-164192f9e68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea97eddf-60f7-4e9b-a509-58800fee3938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "add3cbe2-4fbd-4be7-a147-02503949753f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9467f45-255a-488b-886e-420aeb2b6af7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6285fb97-9bb0-4a58-8adb-1062cf7fda90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d92d31f-8ed7-4610-836c-314fd917d4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb9da87-f6b2-44df-8852-0fe7ac1cc96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "349b9e7a-e9c1-493e-9184-06e4089538d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40072799-cba8-4606-bb0e-96e5c9581543",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d7b0ff-e981-4083-8cbb-ec511b6213c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bb99e6-3b30-4556-9a27-7c86c570b02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d475ed48-a59d-4476-b048-908772f4bf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd424b2-7465-437a-b171-02d973e1723a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4600acaf-254b-42ac-a7bf-f0b98df61ab7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4b3ff0-1856-46df-a38f-8473c47fbb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb3ca03-f67f-4ad4-8284-8b026b95e8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee44954b-334e-4915-8231-b6b73423fce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec24588b-ab97-4723-84e5-c930c0a2336f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7ebab8-ce47-440c-852f-ecbafbdb186a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8810f5a-a84b-4698-a2a2-bcdb30924a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1450d3-f249-41c6-8300-de8193560c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93d98e1-cf09-4bd0-a0f5-373a30eac0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40b7e226-b939-4459-bcf8-360b31588f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae9f442-4ea4-4793-bc90-e49335724a19",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c620501c-b387-48dd-a421-a3be5114a2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7557243-8684-4382-98bd-7b7569db6d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27856ccb-dd39-4403-ac00-eb375b4c0c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "793b2f9d-9448-4e4f-96e0-f81faf746eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0ada79-4a04-440d-89e4-bc035a884c09",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8f90cd-6a49-4536-8f9a-d993da5cb080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228d3a8e-65c8-45c8-889e-610c50ecb633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a244cac-7fc8-408c-834c-6a9120f67e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95e2111e-8777-47f5-862a-00fb285e8370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea06709-aa0c-4491-a352-177f07af5ef9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c6e160-1e4b-49de-b4c6-626bf4b8aa6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb5fcfb-d8d7-4b4b-b71b-e4b8e78afdd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13231e7b-e9c2-4da6-b3ac-413dc68a3e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b394b5a-651b-41f3-9532-6425f30de2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ada5d52-5ef0-4849-842c-790ef8a45a1b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1481228e-64c7-40dc-961c-6a83f1525c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b398a70a-91ed-4f77-836d-a78dde48898e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107b5204-618c-40f3-961a-6c17d6b05036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "980f7e0f-789e-48b3-85d7-f87f0ea23683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200457ac-eb1d-4f86-9aa3-ec94bc68353c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f837d289-6a1e-469c-8ca9-511f9fee3bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c1e43e-4a24-42cd-94b7-fc88367d5a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27e3d3b-ec88-45fe-b1e9-59a46a2ff929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aef8fdc-95a2-4b66-8810-dc34642dcb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5173f7c6-1fd5-4beb-962d-8ef555b3b471",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73530769-9346-43f9-9b56-768fcfb24dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa634e3-9e53-4906-b156-d1ef933150bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459fd248-61fb-482e-9990-8a72138f5f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8896b049-3f6b-4e92-b095-112493bb08b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be6cb8a-1cbd-4b37-873f-c40addbae667",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02e7a25-3f29-456b-a1d3-4d73df14618b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d27a10-4220-4f73-b7c7-83549215782a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4078675-f80f-475e-a56d-819f6587ca0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4da632-2acf-486f-94f6-9144e58f7bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c67eda-01fe-4393-b3e6-e4d8785994af",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c99ba2e-7b45-4db1-aabe-7d2e5ae63e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d88c33-1bf5-4fd8-b80e-5c0733a70bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2871f37d-9933-47cc-8496-132bd7e86149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cfdb7d-19fa-4453-ba04-9288bc44a3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f23c9f-c3cf-4c09-ad79-430a2f1909c7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc60ecb-d1b7-47ff-aa74-3b5771c88cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206c5c05-4ef5-479f-bdaf-9e70c77185ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f79b9b-0171-465b-9c22-71d2764acae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "984bbd51-fb76-4c40-b88e-eae2cc48cd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3c3901-4f88-4ed2-aa91-409b06ab39f9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8400e197-c658-44cf-ab41-dd4a71eb3629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803f7896-249e-439b-b287-926e874ebbed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2efe7ee-b51f-46f3-b794-c884f47c355d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08d33a23-30ef-44df-bad3-b32e88b52a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc67d00-a0f6-4d3e-93e8-7aa2280892ed",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711b63b9-1eb6-4cbd-a56d-4ef33b78a943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241af293-0017-46e0-bb7c-53716893fc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada2e755-fcc6-4b74-bf70-99f5467cb534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "decc9bb7-9f7c-4d43-b568-0ca74d9ccec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cb2331-ff0a-41a6-853d-e1f63e739cb6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e0a584-22bd-4093-95d0-235b10d7c7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ba4b9c-c865-47f8-a9cb-e5d0c9a574ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca31796-3a96-48ff-bb08-dbc586935951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fbabaa9-cb07-4051-bc4b-09e89266c026"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5ee95444-5e84-4143-81da-ab8df8ac59fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dccb4d20-2d1d-46b0-ba02-b89e6389e221",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098e2726-19ae-4b6d-b991-4657528db58b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0c167d81-dc89-4734-9a1d-5292b9fd18a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39eea675-3576-4e56-a100-ec2d9ec655be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bd3209d-fc28-48af-8ffa-2a5757feb326"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74482cd8-0780-4229-a40e-828429ccd634",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "523d93ec-ef65-4f7d-a629-788fe980e6a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95c60e8d-b079-480b-bce2-d4520e8604a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9923001f-ef5e-47cd-ace8-2956de743837"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "585ef019-f73d-4f7f-9807-c80401a32683",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9f3aba3-bd98-4feb-b71a-7775ae1c6f73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f619a82b-7f0e-42bf-a3e2-c4469ec60300",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69f02efb-1933-4cb6-ad2c-0f89c5877b6d"
            }
          }
        ]
      },
      {
        "id": "9800b364-e341-4474-b200-4e206fd4c077",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8b2703d2-9fc2-485e-9c81-d3f6e65b0b9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f15ed3e6-de00-42c2-a6bd-2e80483a0fab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c8087b16-f4ad-4302-9c0e-a9d4a849464f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286a2d85-a020-4c45-b7a6-8c2ee5ebc74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a565fc-3893-40aa-b346-4c9ad2a29ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2828e2-fafb-4ed3-ae8a-4092ea38fe75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "219a1cea-b225-49fd-988f-425b28f2c758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360ae75a-dc20-4d02-90be-a94dcb4ecce9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb041aa-36e2-40d1-81c8-326244d13c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205d25ab-456d-4e25-afbc-2fc4da3a460d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1379f8-e3a1-48c3-a281-059478f8ad65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06bed639-1c95-4818-853b-63a06900c5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c503fac6-96e8-4743-b69f-0225de6c7662",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f39b2f-055d-40e8-a21c-c9be070a9016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ba81ed-174e-4ec1-9e9b-05952dc79ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c734c8-4dd0-423e-8b30-d703ee3f95d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a70f82-f503-4b21-8960-a672bbcec154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cc018f-96cb-43eb-94b8-4cbb7ae50442",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23530edf-8b62-4dff-9ead-604fc49763bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02f4f5b-a9c4-4bab-a0e7-6cae301a905c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f1faa4-1e90-45d9-8a71-ae39ecbce6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee3acef-ed1e-49aa-8d71-d35f738110a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8582339-b459-477e-b52a-39f6458b13ed",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda8946a-9c4d-4019-b29e-7954a5958585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7519a8a9-94c0-4d79-ba68-36c883050f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018a7e3b-9302-467f-b616-98b819431cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74fbf26a-eccb-4dde-ac92-1e50a7abff0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81bc943-5a57-4b5f-b2c3-fafaa2117103",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1b7ea4-bd5b-426d-841b-ffb52b8fad8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13fee3e7-027d-4b3b-b1b4-c20d9b017698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f704940d-5e8f-47e2-8dd6-9f7391a4f9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7f4e04-db24-4afd-98be-f134fe41c56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91707c5-98e8-4143-ac41-09522f5b27b8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8527c0e5-4af7-415f-8787-09fa875de268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e9fc1c-ddff-4f2a-a9df-74e9cd979fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e856f2a-eefd-4dde-a9f7-28f700f14e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "be87dc27-5ca7-49a0-a087-3098bbcfebf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23a5b4d-6479-4c3f-b949-74e8d1cce542",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e625dd-98b3-4f2b-bba6-c69de92ff06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c051c4c-ce07-4b1c-9abe-7608464f4995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5ea092-9fa0-4ab3-b1c8-7c988dc0d7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd54e2ba-63da-4947-9c1c-3270495a1aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17713cb-d6a6-4800-8c68-7abaec4d6942",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77bf666-0db3-414c-be12-b672152f882b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229f295f-f061-4603-ba7f-2521ea7331a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76745109-574a-4949-b61a-ec3148098823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d833514f-7262-4e5d-ab17-9062ccfaa9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ef7ef8-0b59-45ec-879a-c334ec31022c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c1cf64-e597-4a7b-b0e2-4acc0895da13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4164fc-9613-4e6b-8520-b917a36b72a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0c2e59-bf78-4916-baa9-b1c0e4879e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cffc652-746a-40db-9f9c-792a09aaa91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b970818-797f-4546-ad8f-094e4bb6509e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee8a2e3-995c-4413-a03c-a0becae29f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa3b997d-6fc1-48ac-a786-0758d7c54f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07090a57-3233-493f-a58e-89f4f81c7e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cd925d38-9613-4430-989b-d811a646c56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df52ac7c-4fa8-46ed-bbc4-025869bf8037",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2465598c-1c06-42c1-9552-a4ac43fd06cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d18bb39-ca1f-4ea8-98ef-2eb1fa1df995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d665f2ec-3cea-4b0f-ac8c-ce4f9b497073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b366867-90e9-466a-8f62-bb7dc5c7e3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9602c0-7e81-4941-9783-e86910e9ecd2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc5b0e5-6974-4fba-9921-c729e081dd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66657035-8bd2-45c9-b869-abdb252cf077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3349e6-7065-4bc9-8627-accd4b3fcedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c53a1c7a-1bd9-430e-af78-a97678cf62a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3e74d6-2511-44a2-b28f-2dc831f4cd73",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f63615a-2171-4eb5-a0bd-6e2fdc07b4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b107b78d-e9b5-49bf-b56e-37adb378354a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cc7441-1624-4f53-a56b-eead368d0291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "93e17616-9dd1-4929-997a-d623ca3348cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196ddb9e-9913-48c8-947e-b2b0003b5552",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0355ed3-e453-4cb6-b770-3b1c9d9348b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24f4e31-cd9c-48ae-a544-a63866711c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f74f64-56a8-40a7-b1c8-2555c0d2ff06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c094106c-5cd0-4b1e-9be7-41faf0a1e739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f17bbef-a1d8-4082-a0df-8c4d9b359d6f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71792a70-8638-4599-bf14-368dcc9cba15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b2e24f-65d8-40df-9321-d2b159cbf5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623477d7-19b4-40fd-99be-e3dca2898af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e368843-b56c-48bf-90fa-9b6af17e0848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9163aa5b-8a18-40c5-97a2-81a9d97c5ee7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca308e4c-40a0-4059-9f5f-30d926bbe69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d265cc-b4be-4a9d-9807-8585546b35ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ec752f-0b5e-4467-9c30-35414c633673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6530aa52-161b-49c3-aa36-77a3a41eb126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875d8ca5-a7bc-490e-9197-2433e4d5de3d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ee2720-1979-4804-a32d-eb89f890f69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d837cf50-a9a0-4805-bb5c-a14b484a4b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95b1dc7-8f7c-48c4-afb9-10c0255b3364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6833e819-13ec-49e2-a54a-3725d6f13a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d69c5a-e2b0-4351-b52e-2c71efc5ed7e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c038af-29a1-4542-8cc8-d165cc80e8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f667427d-f2e9-43d9-93d8-8b25a872fc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d5e774-762f-4e62-abe2-fc8241eae8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "651ca759-2d23-4467-b1e8-5ca160577787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df89d1a-ed3a-425a-abdb-7bc8b7e8dc8c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9918f10-9336-4b7e-becb-9df3fba28e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5ade5f-00e7-4a1d-b8d4-27e215dfb2f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23e1edb-1095-4ffc-a8f0-223f45d8d3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f61a5b4e-d851-4404-8caf-c327f12ecaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e795a696-afb7-4385-9412-8df88ffc876d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd30f9bc-f983-476d-9548-1a97dd3c4040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f8f150-e925-476e-8771-e91e1b8904ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a38675-48ba-400c-b4bc-f264134c639a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df450729-5eba-4e60-bbcc-da0ca7b225c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f9eee8-0650-4620-9c54-54c098e43989",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d37f8f6-5702-4b5b-b93c-685e14a2f90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76be329-2d2c-4062-b1c8-35c1f6e04107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84e6afb-868d-49a2-8975-a85fd8e98367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "750270e0-ea73-4f44-b7b6-b2c0bf7f6284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5307d83-b735-4c7b-bae0-68c20ffd98e9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d304b2e9-46d3-4f9f-87fb-637a2f7c138f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911e6666-adfe-4679-ba99-824bd93e3e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d43dd97-b8c3-4e24-ae12-853a2d9db28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96755983-93fd-4411-92b5-c27e3e3c89a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597c9628-5fcd-4126-bb30-c10636ef0e0b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b02e417-0fbb-44bd-8681-126530e30f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10583c5e-98c9-4d0a-83ab-0ff3492170d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b55747b-a339-4f06-8e4e-4a05e5e9effc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0451208d-aefe-4aff-a2e6-89e63a28a2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebe237a-a92b-4c09-a896-fc101a381a59",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5bf3a2-9d0e-427a-9e3f-8fb4a1596f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee99489b-33c3-4763-8222-7253cda84978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e3c9d3-959b-4ef1-941a-d802e86578b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4b0889-7e12-4f47-a454-086cf30289d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c98ff1-7ff5-4a20-b96d-b36b06ed8630",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8081d1-a5f4-425e-888d-e7e627281369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a80980-2ad4-480b-bb90-036234c2dd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fac675-ffb0-4c04-9a05-a7da09e4bd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e01d36e2-f6c6-4989-bae6-76438b2e0708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c70b09-7cbc-4101-a0ae-3bbd520986e6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa22e020-db19-4c6e-ad97-fe0de8a60189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec6af72-4f2b-473f-8df8-0dc81fda2bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5426a29e-e0d7-4f12-a0d5-3cbd6676d7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f71f3cf-07e9-4897-8643-7bfd965814f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e1f21b-16ef-4aec-a1ca-0c71c61b4c3f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4871e31-4b98-421b-a68d-5eab6434eb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f03b5a68-d877-433d-9e38-7c11f1401b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473f9eb8-cdc2-41ed-bf3e-1bb23afef62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "190a4cb2-8008-4454-88c4-5e582833eb27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1328d4eb-2d42-423d-b947-1d2c6af6dec8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6839cde-3bf2-4b7b-ae0e-a303ca83f5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60006373-89a1-439f-96aa-3e39e3f26f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a5317e-c4f7-4f66-984b-29169fe7831b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca53dcb-4d56-47a8-9343-c0476f6a8d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfda02b5-3ee7-405c-ae4c-f8d0f7d1d3ff",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b86525-6506-4063-9d0c-563986cce96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebeaac5e-a216-48f8-97dc-c3277c24772a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c3754e-4adc-4a43-8047-9aa398a9d0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44a64be9-0285-458d-b238-a4c02e827604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e75892-ddd9-41d1-a5ce-8a757a9ec764",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf515bc-7022-4901-bc55-cc9c9829f212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bad248-cd72-49e0-b5b9-f5f1550aad88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adef542-a67d-4f76-b061-26a66866190a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4050d8c8-084c-4718-a27d-7b9dfb2a12bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fd5262-e7ce-4cc4-b70d-6ced805b6de1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1a1af1-9084-41b2-a90c-5b9318bba6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6cc5613-88db-437e-bb31-556079d958b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95a5e81-447d-4526-bac1-3b6b9ca48c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9a0368d-d1a6-48ce-b6c0-603486a165e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e189d0-3daf-486d-a176-b7c5915b8eae",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7930a50e-8aa1-4c60-a9f9-ed1b2d3ab27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fdabec-05e0-4c0c-9e55-d048811e3782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564589af-f8f6-4ff1-8141-749a9d8b868d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42bcb92c-85e3-4835-9928-eb1fb1fbdd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999d9c83-6b7d-47ac-b7ec-68f1b88ba6e6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d223476b-597a-42f3-b54e-39afdb17e3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a763bf36-7ae0-4b5d-a078-5e8c64ec0d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f8134f-ada8-48ea-a5ab-178ba45d791c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2b1751-0b7f-4472-9acf-0f33b2fff6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6818bf01-0338-447d-af08-6a5d3dc84641",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148e386d-db0a-4245-91c7-20cc394024a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fa5ff8-b443-4c06-9bb1-c826e1c59573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e756484-4a86-4ea6-bea1-2730843d61d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55dbe87f-967f-4173-a8d4-160fb317b9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e517f825-3996-4824-a089-23469c1dd0b3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb4eb40-7401-40d5-b3d9-74905833ea00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51f4402-65a7-4d5b-980d-2d2fc3588e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ac7f6a-a2d8-4cc8-a381-90d4c1fda4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa0be8d-52aa-4f56-b862-bdb1652a35d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c47189-566f-4213-9a63-8e1695819f5d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc0b922-ab1a-41ea-b215-a90f5e37d9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49398e25-6230-41b1-86ea-6434a0e5cef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57131ee4-1511-430f-be94-223a164f14c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "148588c8-7673-42ea-b1c9-47eb8bd21567"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e65161af-efa7-4c62-bdf7-3c3a50ea4a4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09175196-244a-4123-ba4c-9ccff8479b3c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268c50c4-9773-4c83-b072-c7cbbb876df9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "97dd78c0-d175-4b8c-b022-10535ed102d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf952b9f-a8eb-48e3-8e6f-65f2c10a59e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc6bfc37-2fe3-4b00-ae22-f0da13776c79"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1157cded-cd7e-4bda-8770-4e4b14174d56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d8836f3-49e7-4a2c-84b9-516f4dc9ae27"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "12772c0f-2056-4a47-aaef-62eae3c9662d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8a96326-fabf-41d1-83a0-43af3daa682d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5a6f87d-4de7-439c-8e2c-a89006413d32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3a24e79b-1abd-49bc-b450-904d617a4e9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11e74a1b-083f-488d-8589-47033782a8d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e8f658a-1edd-4ffd-b143-0786599b1259"
            }
          }
        ]
      },
      {
        "id": "99427f7b-79a7-4003-b2c5-b9b16b762a4d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cb419277-93ba-468a-b1e2-6a428a39e498",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84f60149-6089-48a8-8b48-52385bb4ba84",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44ec01d9-026f-4af3-be37-fb8d8874d047",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a2a993-c17d-4af7-af0c-c26df6ecb637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfee3b87-16fe-42a5-aec2-ce7a9aaa915b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b2c8b2-9c46-4f36-a37b-9189fe92419f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728bfca8-7f2c-48f7-abfb-7a1b04260113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554f4910-4675-4320-bd96-70ae5f61909d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79cd9f2-917e-45cb-99c9-54f3c710fcd3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19a64d1-7650-4d71-aef3-66d79ccf7461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18d51b3-fdc0-4d73-af61-5f503e88ef8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc729481-ff37-4b0b-a06a-cf578d485cc0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64abbef7-629d-4e3f-ba48-9351fe6d2f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4ffb74-b70e-4a7a-9f0a-1a2a881ec5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a290fe59-8a4a-4ad2-9524-147d90929e3e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48b37f6-6048-4501-88aa-5bc67609a55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547271d0-d6fa-4f6e-a5c5-fce0f0d0a636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93717d6-9ee3-49c2-9a71-db2998a37891",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7014556f-2449-4e03-9446-1d5eed2efb23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056c5837-0293-49d9-9156-1285204d2410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e747cfd3-3f59-4018-b7c7-f441f57cbe6c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08debd64-6745-4ac6-b64f-9baa08bee866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a889b34d-10df-4c87-b639-751068e0a4a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a30121-4d09-4db7-b8dc-2d221a26a224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b75641-ba14-42a0-adf8-c5411600300c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82557f2e-3910-40b2-aceb-cccf3222e2fc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2469b00-9e4a-4d68-ab20-3b184fcc52e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf4c4015-9fc0-4f81-8329-435a7e33971f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df978367-8a92-4386-bcf8-cc35aa994c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8186864-3668-46b6-ba61-26299cd5d25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6ecb09-702d-48df-b51a-1381050a4302",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ad4cc3-eb7c-4fa6-a06d-9add987ea59d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e0d8750-cd0a-4b1c-ba83-9eee63b41030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33156d1-fa60-416a-a798-4380224061d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd72834-ed61-4205-9dda-780faf05ef95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42382bfa-2ae5-4206-9517-b374de7047b8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f795478-a688-49b7-be29-57dcbe3fb2a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d29a501-c7d5-4ad3-b3ff-c0606d7320ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b76bc8a-01b4-4697-95a9-a59c057b9818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3653d5e6-2f25-46c1-a390-434ae674a384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25170fd4-9594-41dd-8754-21db3e8631a3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71d643a-0a28-4563-be60-0cc9ccf8fc86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b371b14-8a48-4867-9c3c-4681a7d4a1ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c89fd3-ef59-4a4e-aca3-c565db29cb52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea00ea4-c08a-4a73-9f1a-be36c1fdcb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c0a705-b094-4ade-9e84-e6391111d8fd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ae2214-e7eb-4f6f-b382-53cc979f489a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c28b291-df3e-4f6d-8534-df8679427c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a55135f-f273-41f0-a66e-27eec8547037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a1daad-b408-4295-b9c3-75117513b065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c898b3-4a49-40fb-9cbd-8c2e797dc409",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18123279-3d66-4902-a81c-f1b5e6969e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2093197a-b659-435a-b4b3-41712509da4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f7e80e-a858-46a4-a89f-3349eb44a988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0f4262-2a4c-41d5-811b-6d228027b085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2317c7-52e5-4bfc-a35c-73c011f6e980",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fb1723-c68a-4423-9363-3779f131889e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f5fd0ae-ebc1-4242-827c-ae6b0e8fbfc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb010a7-1ee3-4350-8961-a08a3ab2a3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae557a4-7c1d-4869-be7f-4b7a63985193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33407082-93b1-47a7-9e6a-0a1544ca7856",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e3eb00-fb80-4741-aaaf-12e3f7e8917f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "843c8376-375d-4d7b-9a7e-f8387c57725c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64274f8b-4ed6-4200-bf90-099bb59caa96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f676886e-0ac8-4084-baf5-805ee109aa02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d959abe-cd98-488b-9c73-988f446515c0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f10cfa-37cc-49a1-90ed-06f30ad68c5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "855e7141-d277-4e15-bc04-404279de4899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f0790c-7715-4e18-994e-0e1da794368e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98b4cff-c2d5-44d1-ac69-7e1a19d68cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade6d304-2d59-43c9-a4a1-754b2bad770c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541477bd-afd6-4411-85b2-ea3f42187833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a28bae1-7c89-40b0-bad7-389f6a0085dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b9e357-8384-457b-ac96-6f1df7b707b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33bdfa7-3b8e-45f0-85d7-fdf730d0a737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48921d40-358c-49d9-9ca1-0bc6de65c9b2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4f68e2-5c9e-4313-a341-c585660ed2a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93204af5-60b5-4ecc-9828-fd6e920f407b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3be9df7-c4e3-42dd-a5a9-22a3ea45a8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2e3bbf-184e-473f-9bd4-65fbfe32275f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d837ff0-396c-4b4f-9893-2867d918590b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b9f712-d4ed-4554-a1de-53192be6cd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9eac3c-46fb-42c5-b11f-a2ea0f9a7ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a43285-0dd8-401f-8ab5-30207fe12ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aebd636-95ea-4cdd-a241-5b87b5a9ccf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58fa2fa-b041-4605-922a-472ccdeec8c3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ed2180-409a-4eb1-92d6-579d4e1b0348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7965188c-4efc-4ecd-a6f8-f20b18182ce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d9ea66-caf6-4a99-87bd-59d06d5de500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3287a81e-b5e7-4adb-9ebd-bb56a8d9e4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a95989-1bc5-4185-bf78-843d245925ad",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06754ed2-4ddd-4923-828b-fcc0c15f2c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07539e72-b088-438a-b34b-b17b404a5745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1da1d71-b2fb-40ec-9378-7cd8d96cf1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15059f40-3620-4a44-a270-3e96198c615f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca42a07-9eba-4a75-a644-887a2533ab0c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ae98d9-3232-4e32-abfc-caa39a82eef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4871aa9-57c5-4cfc-9618-e068ac14a2e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c7f15a-ba02-4d72-aae6-72a88369147e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafe1c00-9ceb-4231-b6fe-7ba62a70d9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435a7867-5e36-431a-9b33-c4e607df81ae",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b04cfe-50cc-42d7-af26-3f985b3f577c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856f80f1-1d71-4590-bf08-4706565686fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c194fa9-6340-49ac-9bda-5bafa879545f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ef29fe-7abe-4145-9464-5c8f82b3f5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5e905a-dbc4-4315-8906-de8a767f476d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5375737e-0489-4eda-a90c-ad3367e10017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cbca43a-d323-453e-97ec-32f29f41f2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2eb34c-bdfa-49e5-a19a-87f9083b89c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4cac642-e164-4471-9d95-30b90d27ca63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a007ad73-76c7-4df0-bfd7-49771f8fb563",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3326cf-3f6d-4d8c-99b9-3dbd13432cf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fc2a6c0-2dd2-46aa-9832-8eb93b964b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c6ab6a-d84e-490b-bfcc-26e3422f171b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4dae97f-5760-4c8f-8d7b-212616ea9e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc657b6-baec-4db4-abe5-ec21d85f6c51",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16923563-208b-4492-8b1b-4ec4cfed1d6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "698308fd-ac76-4bc2-bcbd-89352b9f7906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a8911e-ebe2-47cb-870a-25e04e560856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ba5be4-df17-4417-a105-7d05b1694607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a046bcc9-1b0e-4082-ac1a-2e96b08ea604",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a680ab-9f30-407e-b378-173f2d3f9a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "412e605c-ec97-4fb8-b55f-4b0dc11abe19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b29ec2d-6410-49ef-8b77-935603577444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1193e30c-444d-499c-bfba-0893b106a718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be66efcb-cb4d-4db5-b67e-72c630d8a861",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0212934-e0b2-4ddb-80bb-da45bc674b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac10831-08d8-4101-a8e9-6fb9ed020e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc291f0-0dbc-4b44-acef-5ab74a9bdd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e0ef50-5f2e-4790-8be3-b02bea68fdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5900e23-c7f2-4b06-a67f-a11835779e2b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4145907-f710-4dd5-987c-86e2288af855",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4f1a484-b06c-4aaf-897c-297fd1bf3486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44405282-6f11-4b77-ad6d-909684cbb6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e79070-daf3-4612-9fb8-96c6fdc4efd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e62606a-eba2-42a0-bc5f-7bdcfcdd1a42",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2f0b78-4f98-4288-b36d-877172f65006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "009c99f6-a12d-4691-92d6-a7a8f903e83a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b649ce-bf5b-4475-afde-f83b1bee023d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37811c39-6a8c-4dc3-8acc-4c25e754ea1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d14bef-3003-40c1-b052-ab54bbde974c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2777c764-9141-4125-b806-b75a5d1a171b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab51a4b7-9ef6-48ff-9d35-51c3339857a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9314d75e-3d58-48fb-b851-def73233ba29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385d4944-73f0-4e52-8429-36e6510c7c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fc0ed2-7b14-4ec0-b005-0e17590879a6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03723b9f-9714-404d-a846-16748af91379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60757c82-76d0-4d2c-abcf-c7964eb9e977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708528b4-98e7-4786-9ce8-2eedeeaa6f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a47c20-752c-4bbe-9dd2-11927c3cda62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ea4b2a-bf60-440e-ad1f-a0793cc04e77",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51303974-837f-4f5d-8613-02b89eace85a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40132297-e667-4742-a615-c6ab1dabe08f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045b2962-f00a-4035-a8b0-803b68395727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4daf24-f771-4119-a678-cfccf682a5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6726cc-83aa-483d-9161-667ff8bee2e3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4fb34f-e136-49e3-ae00-6aa72fbf765a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c095ed57-de86-4f65-97c6-0108b1545932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c73cf8a-2f3b-480c-a611-75492574f171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4879fba-dfe0-48ec-b300-074c4f58e277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7010375-0651-4854-ba87-4dc62eb141a4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f498a3b9-0695-4b05-b167-a713365f49df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0453903-ba68-4427-b0d0-21aa3d60f6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cec0300-c8b6-45d6-a5c2-fd7d2667c73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c64f767-3a5f-4c52-a176-ec0e891ee915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006dcf1d-cf08-4c92-a9a3-f99c473834f2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d70095c-86af-483f-a29d-c9dffe60c258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d8c65c-2a76-44fc-9aab-22807936c8fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6753a08e-cf34-4f4f-be79-3cc61c4b210d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a32a75a-a2e7-4991-abcd-8e0a7d688c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff56bd5-6e7a-4b5d-8c14-ea9fa8e313be",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d513b4e3-3b9d-4a63-8089-59494eb201ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7aa3b4b-2b9c-4193-824e-e7ec0633b815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2afe18-6599-449f-8394-2ef165420bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88bf60c-e515-4ebd-aa91-1bc779d7016f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673bcf81-6a7e-4034-af91-9fede44e1894",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e061a837-1fe3-4a69-b4a7-d7e64b7997ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e506779b-af91-42e1-8a77-271b390c2f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42431c97-5202-4091-b9e0-54f6a9d1abae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e2eb05-b381-4af3-97fc-78fa3a586555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56f86ec-b0dc-44c2-8c55-14403ecaa8fa",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe3030a-f8a3-41f8-8f75-9bcc1afa05ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76dd801-6631-4026-bebf-6c02709a8594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fe7071-39eb-4b0f-9ae0-85e08c1ba922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b6a411-fcc3-4ec0-89d9-743eb066ce67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986778b4-2b4b-4bf5-ae78-5052ddae6e27",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9176aff-e24e-420a-a0c5-8c58feacbb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4fd4fa-9005-4f54-908a-d22c2c071839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc84771-2006-41be-86e4-bf3c82c47f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57c6355-614c-423c-8306-660d802ee572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab76b1ef-d689-46f4-aaa8-64f1ec9884ac",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69662e64-b6e9-42f6-938d-76c23b898903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd23ff29-5a2b-4f55-93a2-08caceea3573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e4842a-ab5f-4c05-b95e-bd1a3f725098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56658dbc-95fd-4f9c-8c0d-6a2677e179ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb23c40-cc0b-477e-8dae-f4242d722f4f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef142711-8488-4c99-9691-12442e53c000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8088bf2e-9eee-45c3-b1ba-2eca094ab5e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8444587-f0a0-485e-a044-81592f75297e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5ffafa-c907-4be4-9b2e-d6a7776221a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac7bc50-349b-4d61-9c3f-8bf58bd21314",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b616f59-238f-42f7-b715-fc97894250ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2727ec-e5e8-4553-a619-c02b39650775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3c8ea3-282d-49f6-aa55-77209a3a8a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c88f86-62fe-46f9-9683-d1d9b496c61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c12fd34-acca-41c4-a11c-21d11f2eedad",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716d60a1-59f3-400d-b3c5-a43f3923940f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6cbe87-91fb-4e0b-9e26-8faacc9a0639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbeebba-91a9-49b9-bfc5-ae7ebd5c099c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc9978b-87b8-4983-8cb3-c6d930b2265f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77bbbc6-7397-4318-aac5-e9f17d79c8e3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a1e1cc-c4e5-4e9d-8720-6b989783c843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e378c075-57cc-4153-b79d-850f2ceb940f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cf11e6-3223-4efe-b266-53371f29c4f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515b24bc-fa15-4f7e-a24e-e1af9bc3aa3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80da0700-c4dd-41fc-9124-cbda6205417c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4d3444-ea56-4de0-be0b-f6ba76bbf534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c87226-2897-4873-980e-9a24250be059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65200c7-5bcc-43a2-b1d1-28d7d21f09a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed0d6e5-a23f-40b1-8e7c-697019b24e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ab448e-0985-4699-a490-53a57344470f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056ede58-ef8a-41a6-82b4-e8b1cff1929e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c519114d-2343-492d-bd0c-76cfba83bcf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6734a0e4-ffb7-4347-af38-44c65e583624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e2043b-c950-4bd6-8ace-c9da699972c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4047c73-749a-4526-b802-ebc3cd204352",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47468f8b-9163-4227-9cc2-86e412f18695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4986290c-dc9b-4ac1-a83e-95b2aae666de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "832d951e-2414-4089-a78e-0d7d5004f9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497ebcd9-cd41-406e-a406-149c17639054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323a8f01-b97c-44ff-bfff-4eec03fa96fd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4523d15c-17b0-4657-9806-93eb4c271354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420af916-4c1f-40ac-9833-a586421a6780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad49730-d50b-4dd3-b18d-8dbb137a0f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ecdd0d-fbb6-46a9-8978-d5e427af6f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34fb739-c1d7-4c55-be44-ef6798102e31",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3220870-e8d6-4c06-9c2a-917b213ea6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3db530-5fb5-436e-8ea9-ea31563c2e01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cb9c58-3efe-4313-a746-f63dd20c8997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b560622a-4734-43b2-8e3e-8a8e640ba02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03283962-0b4d-4785-863e-31aeea2b851b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39a2980-e068-4184-8d5c-595413b17809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a51489ed-fb15-4865-8da0-d0b46020af29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ed3f16-33e3-47f2-a830-0ec899cb8fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd25a16-9a66-4c0c-bbca-3a0fa221609f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1f72cd-1e9f-4373-9cb8-57f44fcbf949",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53e2782-6e01-471e-a22e-ca00465d4dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20bc90bd-a639-422f-a875-830ebdad7e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb29416-c132-42c0-a2d3-d6a5165e2cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46359234-f203-454a-8802-7f2030be0020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f4be44-e974-4a58-b4fc-8d7df4935dbe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901a0fab-4630-4fc6-8ff2-9661442391b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead9f434-c0d8-444e-beaa-73af0cb00635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb6a837-3b21-44dc-9d15-09a938e497f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b144a7-300c-4ab1-a559-c55cd3abf4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9093a5-0755-4030-b3e8-32a70c6f2ae1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b852f875-2fc2-4ddd-80bc-b40f8cce58ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edff7b95-e748-437a-86ba-eb0ccbd7d391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f45699-2db6-4fe3-98a9-24793d888837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2949fec7-d2f4-426b-9c87-979beeb8c03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ff8b19-2ca6-4d3d-a557-ea59a7554437",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66753c89-6ec3-43aa-b211-1db3592c29c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45805f0c-a16c-4329-af4a-de09285027c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a61e1ba-2e34-4dcb-a9b2-e2a5fb977019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86201e5b-da85-4412-806d-157147460e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcf9673-91c0-43c6-857e-a6740b9852c7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4f1fba-1066-4a93-bf58-6bbae9d74679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c038e9-fc29-4172-b27e-fd427aa7966b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac3d385-7a09-419f-867d-c2286ae5fc48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782877a3-9a03-4e08-a3e5-01e670db355b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbf9818-1238-473e-91ea-cd1e040ad051",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675888ac-618f-4339-bd07-7b62b891b8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d775e6-7a0f-4005-b4d5-2b9c518db4ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb63eb8-15e4-4689-9724-0145c9a152d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32655836-4e79-400d-ad96-54e733be998e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac39bc6-2772-499e-831a-1f0655ffdfe1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322118cf-acdc-4efc-a88a-cb3a701debe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e878765-bd79-4c10-9a3d-8168a3fdd600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5183ba-73f8-49a1-90ac-28f7882f674f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026c4709-9ac4-4fde-8ce3-4881f93448e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d06a7db-a52b-48c4-b012-c04a84403d19",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87002996-ff0f-4ecb-8b61-cbf623ba571f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996998c1-c563-4a1a-a0e5-d5ca9629f830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "debbd539-ce9e-4895-a6a9-dda3a648bc83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7073d873-a9ae-4549-b7e1-666bb37b33ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6c5c5d-fa5f-4d5a-b3bf-74d11d43f17d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af7a9f7-296b-4fb9-a4fc-b3b753c084d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd28043-a8eb-423f-b9fd-60107682352a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a5247a-ee59-4365-92ef-fb5347de4493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9632a5-18f8-4d5e-98a1-e0188cad5c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d260eb-5377-4d3c-a252-9b712086979e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e53c7c6-c1da-4be6-b576-2258c6bfbb54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422499e3-d800-4b27-9819-5a22e8c53299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519bc488-c1f8-4b5b-8cee-91e8321c9ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44836b93-26b2-4c50-ba13-99c21643ec73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb90306e-35e3-49f9-bd0b-0431408c4e01",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4893ec03-bf50-4f67-adc4-12002c65c63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1025148-0529-4184-864f-195334f80ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999d8c52-366a-4d56-9c90-074cad3400e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34de9af8-6c75-462e-b860-7c6cbc4bb72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0f292f-9090-4ca0-866f-675972f89e6d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e35451-f54f-48e6-98fb-a693b2621334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e21906-03f6-48f9-a717-3787f7a25f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5755ace9-9b29-47f2-aa52-114f3c49c255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32a5223-6390-40bc-a6d5-9c343201ee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036dddf0-4248-4cc3-b61d-bb6412211a13",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709a8bd7-e63e-486f-8bc3-44be0b570d62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed86ee8a-4bbb-4eeb-986c-a5201321b35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c768b267-d1f3-4369-9c15-844f191502c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e99b82-6447-47bd-ab0f-cfc7906b1a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fd4be1-6a5c-4877-8b87-e272b7cf5263",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9411791-88f9-44df-8cc3-c3f8bb2e373e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6d93a31-f8f8-4ef3-a402-b62afcee08b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b26eb3-2756-492e-9fa7-cd495588a0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63984dfd-f94f-492c-97f5-a78480763104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c01cd1a-3ed2-4f31-922c-92894a3755c3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1ef646-38cc-42dd-8fc7-74bf862c7bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d26b7a38-331e-4b6b-b077-8b90039d6fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d7c56a-dd7e-4703-8f5b-f0b12c54326b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6282bab-0f1d-4fa0-a35e-d10a11bb7a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c310d70-76e9-4771-87bd-87b346ba4a96",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81031155-a0fc-448b-9534-4ae15c5cf95c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d061ddf-3122-4d09-9383-d26d33a00a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d63956f-ff3d-4430-a762-6a2a40eb5d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1f9006-2922-4ce5-a824-8565e4ff9f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56562cdd-59b2-4a09-bdc8-6103002e17d3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347cf033-5745-485c-8c8b-9ffc2aa08a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b40837b6-fae7-496d-9522-2962c37d6a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d232277b-19ee-422d-a3d5-07c5596638c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07488a1-178b-45a8-b5ad-4f798320a2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b4e654-fbdc-440d-9e36-b5d0eac63f16",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5534ada5-6da5-4f75-912b-b0be95d5220d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea74b835-3636-4044-8824-4ef25fb30884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efecb1c-4a38-4deb-8d5d-39ba9e431edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24904ca-15a8-445c-be5b-5370613a52c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a0e0a2-ad1c-4fdd-b8c5-424ef4169911",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f750d1b7-9b22-4920-bc5d-0f0e36b6bcc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60b6eed6-893d-44dd-bae0-0c098ac42546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccde011-1620-4856-bf8b-e919796fa0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea58e4e0-10de-4921-920c-a5f53b5d6ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33180b9b-cd96-4568-890c-095cd528eec3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5417f0be-2a59-4482-a052-da2ed0623a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81bebdfe-177e-45d2-96f7-115d20248781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbef805-39f9-4264-9c44-b70391fc4d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c14ebd87-0b38-4236-bcaa-9233c6cd5f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681cb4af-6037-456b-88ba-529fcfd15630",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae18f3ff-93ec-4ed6-9b47-9c48d0249c06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7bd6a7c-a369-4b5c-9dd2-ff1ff6831aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66662144-dc61-46cc-aa9e-99f75af68b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3798b8-c57b-4fba-a542-9616c36c4647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e07baae-46d7-47a7-89c5-058493921a2a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db84c0e2-dcad-4130-96b9-999f07b562c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb56a275-c287-42f4-9b5a-7e714e20857e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b9e96a-4b02-4d2f-90fe-0b0777ce676e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc6a1c7-addb-4dd8-9b1e-2550354590c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e47bf9-f8a3-439c-9a38-20e1737b47fa",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed2bd64-5f87-4df9-8e04-d45ee4c551d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad45cff0-a889-4c91-be13-5ca76c612a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf8de05-a04d-4769-b696-f2d4fc9025b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85a07ad-f7fe-4d15-aaa6-b5c86d815ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd37ab2a-3b4c-466d-ab21-99f2fb8e7cfd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d15dfe-86c1-42fe-a87b-4248f5157ace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bade473-eef9-4395-9e75-704dff417e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a40bff7-8418-4556-9032-f42a7c854d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f0201c-e6f1-4110-97e9-d61b058d1707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65f8714-f61f-43b4-82ad-e14e39e0b2e5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfab9b2-1554-4fcd-964f-8d9775292b01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9acc06e-2c6f-4450-b114-97828875e206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72759b16-5c1b-4404-bd41-acd7f0def483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f2e9fb-6614-468a-a083-c82836206b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f174cb89-0d81-4d76-86f1-3edc9138eb8a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b11666e-745e-492f-8529-6a1feb1d6194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d158ec83-8cf6-4aea-95c6-27de36427d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a3fa70-bf8b-4e17-a7a8-3f3428352466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93e318d-ff82-40d9-8d6d-64688b796753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65037959-9515-402d-a580-9e902f77fbb0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434b105e-660d-4354-ab00-2c9a90818936",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5c7221f-3e7d-4339-8049-bd3ef1560bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d52fd5-84c1-48b6-b9cc-28cf198e1b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8106b6-cd02-44af-8d26-6db82d200afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481afda5-e467-450c-a130-c2af56e22213",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64de3ef5-d41b-4c86-8f3c-c79f9d0e75b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68af9ea3-2df3-4cdc-824d-b347845da280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6048b2-f90b-4697-8a7d-fdb5d8a59a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3941a54c-5098-40b1-9a8c-3efc57595b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fbfd3e-4e58-4360-b76f-8fc142e557d0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bffb543-05f7-46f7-adbd-28d0b9d7871f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "234851cd-fa04-46ff-99d5-3516d4ecbb7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0fbcf0-2f9e-4c23-9c95-b1098a71d00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82572343-e973-4447-b3e3-b9080c80d4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731f3b2a-70f9-4b34-9628-954188136694",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cf1113-4f53-41c2-8372-238500a0152e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "981efd01-ecd5-47ed-b0b5-c37cc0ab7715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0e6d1e-15dd-493f-ba0b-1aab5c10f4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2734018a-5906-43bc-bc78-cee8005096a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a42f48-9b18-477c-bcba-bb86dcdbaf99",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df67c0de-9ab9-4172-9747-83be5cee19a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "256f8fcb-38d3-4ab1-9ee6-4440dba5f7cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4516fc00-46eb-4fe2-bb8c-04467a22c178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fd34f7-666b-41d8-9296-37d98d8d3510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a24bb5e-97c0-4a3e-8732-60a407add8d9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b21b10b-62f3-4e19-9f70-e510b09596d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67bab074-25ca-485c-9584-035bb5205005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab2884e-d120-4bf6-9df4-9312cfbaf6af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8faf591-0602-4ee4-a47d-d68b1fe4fe91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0697422-c8a4-4470-8779-13698181ca50",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ee7197-c208-44f1-920c-4c3f3140890b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "018e9a05-34c9-483d-8b65-39a2eb7a692a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6478c46f-1acd-49cf-ad9b-6c6abbd107ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afceaafe-5fb7-44f2-9f94-3deb13e4b019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b668c863-905b-45cd-b639-61d0044668d3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82073e8-29c9-48a1-8be0-7ebb93f5d5fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9635cc4-3171-4082-9127-7ba53d4b4f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21874ff-acfa-474f-bc84-81f7f6d3430c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc153fa5-007c-493e-b48c-a138def461fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4c95b7-38f2-40c7-a72d-60e1d537557a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859466a0-706c-4f8e-9211-7cd32d115cde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f34d04b-7b67-445c-a05b-3f59f68cd0f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186dcf0c-4f7a-497f-b1ff-bf954c626cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4604c30-5e8b-4a01-a4a0-bcd5124fffdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97658721-1613-4441-8ee1-d7ec48912421",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4053ef94-88fd-49e4-90c1-c550c02ada95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af11c363-e74a-4a75-af58-29976c62bc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18edfe89-b229-4ac9-b23e-ad0f09bdb62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7914599c-e24b-4929-9e64-ec36925f0469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932b7b80-bceb-4075-91a5-010ad124cf90",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ca687a-5721-4eba-91db-e5a3f4b772ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "108ec48f-1a2f-4ab9-90f6-43f561512f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ceb8409-99b3-4202-b9a2-d484112eb9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c653daee-4dc2-43b2-bef5-fdc5e3ef6cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166c7faf-48af-40cb-bc13-2fbeacdacdf6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fbe7b2-d6a5-4c83-9da5-203ca6e485b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc25786d-ba9d-4dcc-ae90-c3db9a01eb31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "538abfba-fadb-4b23-966b-93d7fe1775c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cc725a-3403-4e96-b405-39bea0290e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6676d2-7d70-4473-b2ee-b5c115869fc3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa12b11b-611c-4bbf-822c-a82479d5c5f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6873cd59-99b2-4f98-b55c-a31e86c209f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba96ab6b-0275-4766-a841-8d66fcdad1d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf5ec546-285c-4d4a-8159-a8f42854daee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281994d4-11e1-4a2b-bb05-4ffe90c82c4b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491e8b7d-b3c5-4142-b94e-76c127df3b15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12af7d12-da1c-4c84-8fc6-3e610827fb71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea567fb-6436-439b-9687-2fd62d24da95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9abcd32a-f073-4a39-b9e0-93924f8dddb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4120feb-6c35-435b-8d4b-8dc2e4f0169d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4495710f-5aba-49ec-88c3-897613462280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3dc0f47-01e6-4eca-bec8-1dd3721109aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d2a339-923a-4824-913d-85a4b0f3b615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8651d11-fc59-4284-be91-57e93fccaab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e72474-f136-4de7-b6a4-f339874a821a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3a9e60-f778-42ee-8670-25c6ded27a8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55d53973-fa04-46c4-8c25-6eed04f0e353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89437ab6-e05d-4200-9d55-34c5f6b3fe74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7021e197-60e5-4a41-aa5a-821c636f2478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd3424a-4f19-4c89-8d79-76eb88a7d5a5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c12fef7-c553-48ce-9fe7-2fe7afe10fe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a160fb09-c417-4017-95a7-fe66f55cd5a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a4dd97-de3a-4062-aa2b-3962bd2af52a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b23ad77-f3de-4ded-b852-2802ed503e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7bad8f-2ee1-404a-8ad1-33ded81433b0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9d53b4-ee74-433d-9779-4975fb024b0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ef2750c-afb5-4f99-9c08-89547e95e7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0968bb0-1310-4951-b0bc-13366d86523d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291ea303-7cab-4bae-ac1b-43fd7863df00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faba827d-a22c-4e30-b75c-44d2c6eaa432",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e186fc8-9bb4-45a4-aa0f-1eb45396abe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "558ab04e-e06e-4e3f-ac61-adca949ce3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4f30e0-8f9e-41b8-8022-ad20e1f726c8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ffbcff4-85cf-4535-8930-cc87db6be79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9774371-ed3f-4708-a24c-f2babb22f0da",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f093c0-6015-4392-ae6c-5b5b668eba30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c95dded-774a-4c0b-acda-bcb682ded379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fe132f-64c4-46a6-945e-356b892ad888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10339e2d-9a81-499e-8281-e66354693caf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65a83b51-936f-466e-8939-0b3a773d133d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87be5c05-7c1a-42b0-acd3-c4c75bada531"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b9dc38d-0899-40a8-a85c-a3ba2a54c944",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe13371a-da5c-4a0a-b935-508e3f995fed"
                    }
                  }
                ]
              },
              {
                "id": "f71b175a-13b9-4f4e-a8e7-2ccd29530781",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97553013-c792-4a77-a4cf-509fad7c65c3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67816135-1550-4db2-b087-c03a712a7bb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "085c07ed-47bc-466e-a9c1-c335571519f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64131579-c162-4d84-87fe-8e9bcc281d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "074cc570-7faa-48df-86ec-8ac395105823"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d6590a2-8406-4b8c-9991-a5cd0342f2b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5f901cd-18c0-4fc4-8c8c-48a18568b49f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60a1f674-f990-4e7b-8058-b0c11ffda886",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1f52a0d-515a-4b5a-98f3-9071b5bb4b7c"
                    }
                  }
                ]
              },
              {
                "id": "14f315fc-e8d9-4c4b-b391-c8843cbb504e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "44f79199-ed3d-43e6-9f85-4441cad26c94",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbf3c00-c3ce-4544-a46c-0500ae7b323e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2d5dfd84-f5a9-470e-a7dd-ff204c0d6ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb45c489-9d2c-486c-b9e8-8c92e1b32105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f8d6a55-aa14-443d-9a46-b8f68ed61dee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "51550b24-dcb5-4159-af38-64152ff94bcc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a57159e6-f5a4-479b-9f13-9bb11f3b1875",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9beb9451-a49e-4a7a-9ddf-5c2f0b87a9ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2e08dae8-fb57-4a3b-a0d4-805d17b3763e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa3fdf88-b481-4c55-b392-53c33c51fe75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4691d08-5343-4673-b760-eba7e203b531"
                    }
                  }
                ]
              },
              {
                "id": "5a078178-37bd-4ddc-bc5f-e24d0084a04a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19e710c1-f454-4efc-9bf0-46a93391f2d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6a5606e9-bc21-4487-8b43-418b2e126df9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5bfdc33-1384-4463-94eb-7b35c562f978",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "718a8cd9-8c81-48a1-9874-a1c94bff8f5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa287a2c-3656-4952-b76c-3c19a82ae887",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6ba85d7e-bcdc-41df-9738-da927f715f9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0781bd1b-4733-45ae-a4db-ffb60c41ca11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "921d34fa-fbae-4376-b422-eddabcaab96c"
            }
          }
        ]
      },
      {
        "id": "59ea34b9-13e3-428c-94ca-c865232cd791",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fdab4fa2-cfe1-494c-895f-2a4bf5deedb6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03aa7d6e-de75-4dc5-8b97-9271e930610f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9eb31f30-6d59-485e-9f02-0738b64a9674",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7477097b-d511-40a4-8615-8ee54dd336dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5d029682-038d-4e8d-b8df-823ef13f6082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edf603c-974e-4fca-8d04-7772c0663bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "945b769d-b556-42d6-9030-2d7b2d8ed480"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a54e8930-757c-4d23-a376-e44f8bc08327",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f270b59-1f6e-4fa2-870f-231376ab3d86"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5256e212-9dd1-498a-8458-6087ce399503",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e250940-a777-4c2d-ac70-9424217e11c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e2b2e0e-7c56-4bc5-bac0-16bdb2e8e6f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "04b1c9ac-d644-44b3-b27f-cbd61b9458d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f4320c1-99ac-4e6f-b013-19d52ac67d0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6d8d3e5-2c60-41ca-a428-4c81416382b9"
            }
          }
        ]
      },
      {
        "id": "7e310828-cf69-46cc-ac28-80f6309ffcb9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c1326df4-714e-4b1e-94cd-d2debdc76188",
            "name": "Negative Testing",
            "item": [
              {
                "id": "28ffab4f-154b-4b59-b8ae-68af053109cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67f18edf-cd6a-4172-9004-1fcfe4576117",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6306ae48-d561-405d-a6b9-68e5ac4cdb88",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2fa2b53-3bbf-4c36-8938-d82e67afae46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58923e1f-edb4-444f-ac34-39fc02f64209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d4c6c5a-f498-44f7-a807-04a93878706e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7f513fa-e44f-4d2c-87ce-2a6380fbc08c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a30fc0ad-2e74-4ce3-9da9-520c3ab3f0cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e3fecbb-553d-4511-939a-f0dfcc86185d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f17f9916-7bee-4769-b81b-3f79e811af18"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf8ef2eb-783b-4b60-b92c-d9f8a1b55b8e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bc7844f7-8ac1-4df0-8830-53b7f1600d3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31d3854a-93b6-4dec-a159-7fd3b2199845",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad0e23f2-4009-4697-b209-3283d936d0a7"
            }
          }
        ]
      },
      {
        "id": "4549384e-8e32-4ad9-b5d8-ac7192106a6b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "703a7320-2cc8-47f8-8426-a4b52bb6046a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "afb5b352-4ba6-404c-bc1c-2ef82886d32a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71c5a450-4663-4c4e-8cfd-ae85e20af8f6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da63dc7-4461-4c0a-9b02-074503e6f994",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ac0019b-6b22-4911-a07b-9cace39a1e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6c4d90-af02-433c-b28d-eb1e4e77923b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20a7eb4f-a347-497b-92e5-9b8da8fae601"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d624a267-1944-455d-a781-727e9d6bfcb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1ee766e-48d3-44eb-a6b3-5e04be7eb6de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85173696-a7d2-4f58-89ba-e7948bd54c77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a15e16db-8cca-40cc-a5d6-6d7c0d52e610"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5e500d6-dba5-4ee1-8fc8-fe13f5569534",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0e8aa839-e549-461f-8582-a8c72bff1df5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d9239e5-45f5-4dfa-ba2c-ce78afff8b82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f40ee406-c4b8-4bb1-8c01-476cc60920f3"
            }
          }
        ]
      },
      {
        "id": "b878152e-167f-41c9-bf76-90c473ef1fe3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73688a5b-8a80-4d90-b6e3-78bc9e404622",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f360c79b-c3a8-4b4f-8152-9e3f91eaeaf1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a4c2279e-ab3c-40d1-8ff8-5d1b1eea1c33",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c3ebae3-2d2e-4fd1-87c2-ded1e4a726de",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73b9e2aa-dc26-458e-8de4-59022faac6e5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 52.93684210526317,
      "responseMin": 6,
      "responseMax": 494,
      "responseSd": 62.65575296412445,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705365374028,
      "completed": 1705365398499
    },
    "executions": [
      {
        "id": "1cbf14de-ffe1-47cd-a5c9-80ef8606a1b9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9e1d0a8c-28a2-4101-9bf9-3c2a1acb3cd1",
          "httpRequestId": "10518d19-7e42-4d76-aa68-e2a6d064e983"
        },
        "item": {
          "id": "1cbf14de-ffe1-47cd-a5c9-80ef8606a1b9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4b5429a6-98a0-4c82-b8b3-50a400e6c333",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "09f8783d-d974-4f3c-9866-415b633837e9",
        "cursor": {
          "ref": "7824d2e5-f886-48f8-a04e-eec05a2396eb",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "077e80c6-4212-47aa-91bf-44f72d6cb452"
        },
        "item": {
          "id": "09f8783d-d974-4f3c-9866-415b633837e9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "29e4d778-cbc1-4066-8b76-595de5e36380",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "dd5f9750-db06-4662-844a-830d90bd1694",
        "cursor": {
          "ref": "7384f398-9c49-4d6b-a2f5-17212bac56ca",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "797263db-cb71-4a69-a189-47f21513d6f2"
        },
        "item": {
          "id": "dd5f9750-db06-4662-844a-830d90bd1694",
          "name": "did_json"
        },
        "response": {
          "id": "73d297df-a293-4f91-a989-d6ea3326b7de",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4f6837-b62f-4578-b669-fa8dd9187e8a",
        "cursor": {
          "ref": "26460c44-f885-4370-ae1d-dc1e742312b1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52378fc7-f623-4322-b230-b715afb4a1ef"
        },
        "item": {
          "id": "ce4f6837-b62f-4578-b669-fa8dd9187e8a",
          "name": "did:invalid"
        },
        "response": {
          "id": "ade22c77-8b8d-495f-9592-29409e6b5fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4f6837-b62f-4578-b669-fa8dd9187e8a",
        "cursor": {
          "ref": "26460c44-f885-4370-ae1d-dc1e742312b1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52378fc7-f623-4322-b230-b715afb4a1ef"
        },
        "item": {
          "id": "ce4f6837-b62f-4578-b669-fa8dd9187e8a",
          "name": "did:invalid"
        },
        "response": {
          "id": "ade22c77-8b8d-495f-9592-29409e6b5fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529f1268-1322-4753-ad11-d9968fdbcc5d",
        "cursor": {
          "ref": "d77ea022-9961-4723-aafa-2d21244abaac",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "88c63248-ba5b-4fb3-9902-0fe9396500e6"
        },
        "item": {
          "id": "529f1268-1322-4753-ad11-d9968fdbcc5d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5bd2afb0-b5df-4e96-b39b-b79d0d9fe1fa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857dff98-d858-4784-9e6f-7967fe686982",
        "cursor": {
          "ref": "560cd1c9-97c2-4ff1-816c-52ece4b384b4",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4ef2ddfe-95ca-4b6f-a9b8-c66f359b3bbd"
        },
        "item": {
          "id": "857dff98-d858-4784-9e6f-7967fe686982",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2dd62352-a8a0-4988-8f1d-f1c4531f7be9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4296966f-a403-406d-9724-1d45ef0a7a40",
        "cursor": {
          "ref": "6fdba8f5-387a-4f3f-a146-0bf72ac28ca7",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "22916bc6-82d9-45be-8874-ae5f8a6a3a95"
        },
        "item": {
          "id": "4296966f-a403-406d-9724-1d45ef0a7a40",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "992d8542-fa8d-418b-8f41-2865220db936",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570ac697-9b33-4b96-ac28-99b5eb41cf65",
        "cursor": {
          "ref": "4699ecce-b1a7-442a-a887-71f2b593c494",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a0d27e40-7e3e-4a72-86c4-efcc7c7c5386"
        },
        "item": {
          "id": "570ac697-9b33-4b96-ac28-99b5eb41cf65",
          "name": "identifiers"
        },
        "response": {
          "id": "0d984dc9-e0e3-4038-9004-3b4309bbac14",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4029545e-5298-45fc-ad75-3dd679c2f237",
        "cursor": {
          "ref": "0219d52d-f2d8-4a2e-85dc-99d8b7023e2c",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "544317a1-db45-4c97-a98e-109dfa0fdd66"
        },
        "item": {
          "id": "4029545e-5298-45fc-ad75-3dd679c2f237",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4f0465c4-0dcb-45f3-a60b-6f4d7715a317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1643cda1-9d02-4be9-9602-50f03f0481ab",
        "cursor": {
          "ref": "7435bd88-7af5-4c3e-b83c-e800b427e9fe",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5fe9f663-ac4a-44a5-a431-54833fc9ba04"
        },
        "item": {
          "id": "1643cda1-9d02-4be9-9602-50f03f0481ab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "26e615b3-2120-4aef-8e49-283da8226ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfa84fc-0a32-45d6-a06a-901ebd9ae807",
        "cursor": {
          "ref": "613f4939-2961-45cf-a4c6-7d5898a0b820",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "472deef2-f3f9-43a2-9c8f-85052e08b8c6"
        },
        "item": {
          "id": "6cfa84fc-0a32-45d6-a06a-901ebd9ae807",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3e56d2f5-ad2f-4c3e-9653-56996fe8d22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d1cc44-6979-43d8-91f4-0402901cdf43",
        "cursor": {
          "ref": "25b5d06f-7a86-489f-bbe8-36e8b7f312b3",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a87a29e4-6d23-4031-bac2-87f6e8aac1ed"
        },
        "item": {
          "id": "09d1cc44-6979-43d8-91f4-0402901cdf43",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cdfac9c7-caa3-4b3b-a491-42272cdda37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06554dd6-2bed-4df0-b7cc-21584215a8c9",
        "cursor": {
          "ref": "cedcf5a7-1adf-4b57-9646-84b88c9014aa",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6111757d-c2a6-4156-a97f-2eb595977639"
        },
        "item": {
          "id": "06554dd6-2bed-4df0-b7cc-21584215a8c9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "707e2dab-c43f-41b3-8f27-99e7e24bb50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52eff327-a815-43b2-b18b-360fa0f14a97",
        "cursor": {
          "ref": "e756fcf2-0888-41d7-9a77-b1f29e87afaf",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dc057c12-dbdc-4e67-a019-3e9e9288de2e"
        },
        "item": {
          "id": "52eff327-a815-43b2-b18b-360fa0f14a97",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "70db2195-498f-4676-b24b-e899cc2b2ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27dcb852-0bf3-41b0-83fc-e25176bf08f3",
        "cursor": {
          "ref": "c45a269c-ca33-476f-bada-2d696dd26867",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b50da793-1488-4556-9856-882113b1dc34"
        },
        "item": {
          "id": "27dcb852-0bf3-41b0-83fc-e25176bf08f3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0e9e59f6-cbb6-4ebd-b862-44939a673bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b407be-eaea-4aa3-a7f8-9a419b20f08c",
        "cursor": {
          "ref": "592206ff-ceb1-43a8-ae7a-e654299252b6",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fe0f30f7-86a6-4f4e-b841-6360e7bb5388"
        },
        "item": {
          "id": "55b407be-eaea-4aa3-a7f8-9a419b20f08c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "39540b2f-9899-4327-80ba-b845b181d2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacf9714-4fae-4a88-9096-02a9157157ae",
        "cursor": {
          "ref": "ed9df6b4-6c16-441b-a24a-f164e0548b3f",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e52ba02e-cb53-40e5-a22a-c313eab3bdf4"
        },
        "item": {
          "id": "aacf9714-4fae-4a88-9096-02a9157157ae",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c578352c-41cb-45b8-a940-ae215b771b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503327c1-fdd3-4e17-a01a-a2c722fdf414",
        "cursor": {
          "ref": "0e9ec79f-ea8b-463b-96b9-76ad54c2b52d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5c5d8189-4745-4e7d-8413-09fe8ce73dd4"
        },
        "item": {
          "id": "503327c1-fdd3-4e17-a01a-a2c722fdf414",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "344832c2-3b12-4260-bb39-3541b52089d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e557c0b-b4ce-41ae-a5cc-e5bf8c441445",
        "cursor": {
          "ref": "8cf38cee-9069-4069-a89e-10455848c433",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "920e5eb7-0f2f-4420-ac26-c08cc3d10e1f"
        },
        "item": {
          "id": "8e557c0b-b4ce-41ae-a5cc-e5bf8c441445",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "985c69ea-3517-4fa8-b6ab-328683cd4037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d43deff-b9a3-4ed7-8fcb-abdaa540be12",
        "cursor": {
          "ref": "ecc3d3dc-7eef-459c-a21d-35440df473a1",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8bb042d2-a867-4694-85e6-84d82882bacc"
        },
        "item": {
          "id": "5d43deff-b9a3-4ed7-8fcb-abdaa540be12",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "beca3d7c-0db3-4e06-93d0-a830aa471687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4499c618-43f0-48ba-9944-810b44727fcd",
        "cursor": {
          "ref": "4a64b276-cc08-4ff4-a458-7ca9ed864ad2",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1778fc08-0a34-470d-8e1f-0a765a4167ba"
        },
        "item": {
          "id": "4499c618-43f0-48ba-9944-810b44727fcd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "29828fea-0074-422d-853c-013f6681d3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1cb6d5-2657-43a2-8ef6-5c4a239c7c3f",
        "cursor": {
          "ref": "7548f439-8e90-4671-a976-a4f9db8ef167",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ee4e0533-e458-40d4-84eb-2371d7fd9005"
        },
        "item": {
          "id": "5c1cb6d5-2657-43a2-8ef6-5c4a239c7c3f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "17b71483-3c9a-4334-920f-2c647d729b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2309c6-7706-41bd-9863-acb22db283f9",
        "cursor": {
          "ref": "983ec6fe-532a-4552-a83d-aaea52cfd563",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "99378e69-5a5e-424c-b247-292f19530668"
        },
        "item": {
          "id": "ca2309c6-7706-41bd-9863-acb22db283f9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b1498b9e-80d7-4b72-b880-032378873110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10354c27-c8ce-4308-8849-dfa720e91b8a",
        "cursor": {
          "ref": "61b6edbe-f1b8-415f-aa0d-524858059e12",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "78a32380-f65c-4eca-abd6-8b65e07ed351"
        },
        "item": {
          "id": "10354c27-c8ce-4308-8849-dfa720e91b8a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d9011ad2-a09c-427d-9435-1f244e8bc9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c5ee35-2bc2-4f25-ab18-052ebada1093",
        "cursor": {
          "ref": "ab6d5c2e-b6db-4f2c-b2dd-d264f51a84fe",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6a93c0ee-a551-4e92-8de1-f5883c0faa6b"
        },
        "item": {
          "id": "12c5ee35-2bc2-4f25-ab18-052ebada1093",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cb9fd88f-a338-424b-b9bb-93679d6f5c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c7bbbd-d41b-4ccc-bc92-f49527e206e6",
        "cursor": {
          "ref": "de09d3fd-cb5b-4892-aaf1-4e826c6066d9",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b156d83f-ee2c-448e-aa07-d32e1120d561"
        },
        "item": {
          "id": "63c7bbbd-d41b-4ccc-bc92-f49527e206e6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "19cc3701-2c73-4767-ad22-55525cdfcc40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66a62d8-68c5-4d73-9755-c35186ac9e03",
        "cursor": {
          "ref": "685b8e78-7b31-4f0d-867f-b530f3e8e7fd",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6befb5a9-7cea-4558-a9ae-efc05f1d4002"
        },
        "item": {
          "id": "c66a62d8-68c5-4d73-9755-c35186ac9e03",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b10d584c-1c34-4a6d-8e1a-aca20f072d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1791d777-2f5e-43d6-9981-3461e194d191",
        "cursor": {
          "ref": "b19953ea-6053-4bd2-b780-4b2c2f0276b1",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "259c2217-6772-4358-bdf2-03391823cf0e"
        },
        "item": {
          "id": "1791d777-2f5e-43d6-9981-3461e194d191",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "54b41c7e-52cf-4c80-9086-b8550e270497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94fc5fd-3132-4a03-ad8a-80d8cc9ad8f1",
        "cursor": {
          "ref": "b9d40547-ec17-44dc-a455-ce7f56bdfc7a",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "54fedf27-7610-4663-80c0-07a140186781"
        },
        "item": {
          "id": "c94fc5fd-3132-4a03-ad8a-80d8cc9ad8f1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d03b0df4-d315-4cf1-8709-6aa586b1a6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7062cfd5-263d-4334-9507-f0400666d243",
        "cursor": {
          "ref": "fc49c1bf-02d6-47dc-a57a-66587dae15a2",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1e20d8da-236a-46d1-be6a-55593d16fd28"
        },
        "item": {
          "id": "7062cfd5-263d-4334-9507-f0400666d243",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5491c085-0584-4715-bcac-d1da386799f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde3a187-7a9f-4e0f-9f02-301682de3a58",
        "cursor": {
          "ref": "c53f9b9c-d3c1-4073-9d5d-cdb7ebce5c1d",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e672e13b-cdc6-4ff4-8d88-a6db388b5d2c"
        },
        "item": {
          "id": "fde3a187-7a9f-4e0f-9f02-301682de3a58",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "130c0a18-623a-4a26-98e1-e3dcb38ba10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca19eb9-6e70-44a7-a208-b13f1aae49ef",
        "cursor": {
          "ref": "c2423cda-545a-48d9-b820-de1c4daee0bb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4de04bde-e0b7-43f9-978b-41dfd890a681"
        },
        "item": {
          "id": "0ca19eb9-6e70-44a7-a208-b13f1aae49ef",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "896e8b4e-4d9d-4b13-b948-99a3c76813ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd4e95c-a172-4d9c-95ea-4f180427170b",
        "cursor": {
          "ref": "e2a77367-695e-43d9-8362-46ffff63369e",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4531f8a7-cc3b-4abf-b569-ed10853c20da"
        },
        "item": {
          "id": "bfd4e95c-a172-4d9c-95ea-4f180427170b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "617802e0-3ad2-4dde-b2f7-be18768728f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d225f500-f382-4c72-920f-0d7a6837aaa8",
        "cursor": {
          "ref": "a8e91fe5-b7ed-4545-a191-9cfef49d45ba",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d8af63bd-50e2-46eb-be11-df5040066ac1"
        },
        "item": {
          "id": "d225f500-f382-4c72-920f-0d7a6837aaa8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "52977fa6-cd15-4d43-a8e3-0a106b9baa53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ada32c-af7a-40b9-9174-a23a4f0f1358",
        "cursor": {
          "ref": "0c195d07-89c1-4c44-8164-13bd9b30c11c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d2dda272-8764-4ed5-b412-dfde52ab0169"
        },
        "item": {
          "id": "61ada32c-af7a-40b9-9174-a23a4f0f1358",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "226e955e-6d43-4aaa-aa8f-3b7eaa6aa80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f606e15-4756-4f7f-ad5b-89985f7f4086",
        "cursor": {
          "ref": "a629dc48-f3e6-4d48-a389-ad4fcf1ea06d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0371934d-df5f-4189-8cbf-58b93718f39d"
        },
        "item": {
          "id": "5f606e15-4756-4f7f-ad5b-89985f7f4086",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4aed40d8-14fa-4270-bda3-4b51ad164933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b28d45e-8131-42dd-96a6-0d86a6d09b1e",
        "cursor": {
          "ref": "9d2915a9-baf2-4b22-b14f-648af13ce02d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b1e65d28-94ee-468e-9b9e-5ef8a82d6188"
        },
        "item": {
          "id": "6b28d45e-8131-42dd-96a6-0d86a6d09b1e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8c57d5bd-4674-4dad-8f8d-13b3a015e3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad37da9-e238-4d40-bed4-26e324efa9fb",
        "cursor": {
          "ref": "89c53136-5ea6-4e81-856f-11d0bdce4b40",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f381aa3a-23a0-4e21-ab9b-8493b7f37103"
        },
        "item": {
          "id": "2ad37da9-e238-4d40-bed4-26e324efa9fb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0aaff6f1-3eef-48ed-b28d-42b8286e367d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d60044-af02-4525-821e-3e099418a63d",
        "cursor": {
          "ref": "2b968c7e-5030-4028-8302-56d4f64a3846",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "50787e4d-b4d9-41f4-a8f9-d719c7f4e5d9"
        },
        "item": {
          "id": "25d60044-af02-4525-821e-3e099418a63d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0afc779c-7f50-452f-98a7-56d5d20fc5d8",
          "status": "Created",
          "code": 201,
          "responseTime": 494,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e45eee34-77d8-4f21-a2c1-eb735ba5adf5",
        "cursor": {
          "ref": "88ec6c6a-aecd-49a3-8eb0-d5282a3829a2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "10051e50-1197-4cc8-8009-c205826ed59d"
        },
        "item": {
          "id": "e45eee34-77d8-4f21-a2c1-eb735ba5adf5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b60adf97-7d7a-433d-8c26-8342c5a615c3",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f8206aa1-b46b-42a4-b2e4-519cc38148de",
        "cursor": {
          "ref": "a744a730-9635-4439-873c-60aaf8547240",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "71465631-7035-420e-8543-48e38fe08894"
        },
        "item": {
          "id": "f8206aa1-b46b-42a4-b2e4-519cc38148de",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b9035741-e622-4050-8bbe-76ebde214d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0ea9b793-08ef-4aeb-bdfc-e7ebd14fcc87",
        "cursor": {
          "ref": "5458596d-79d4-4618-baba-efdc806d9ead",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c1827efe-6b10-424e-ad40-7affdb3fa49a"
        },
        "item": {
          "id": "0ea9b793-08ef-4aeb-bdfc-e7ebd14fcc87",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6f2e2262-762f-4c29-a7c7-791dbfe73d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7677827-0799-4ba1-82c9-4538537e2c8b",
        "cursor": {
          "ref": "4f3ee628-0e93-485d-abea-5898bc5799fe",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8d2219f6-65b3-4e1a-8751-07b7777a441b"
        },
        "item": {
          "id": "a7677827-0799-4ba1-82c9-4538537e2c8b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2cc23a90-16cb-4496-a27d-27c10d78712a",
          "status": "Created",
          "code": 201,
          "responseTime": 212,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c67a4dac-4109-47dc-bac2-f21a9205460c",
        "cursor": {
          "ref": "ddc16d4b-3d89-45e1-b1fc-05c4f386eca3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "20d017e5-f57b-4388-8b09-fdea9b86f2ec"
        },
        "item": {
          "id": "c67a4dac-4109-47dc-bac2-f21a9205460c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7435ec4d-6fef-47ef-ac79-d6434e43935d",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2bf33982-d500-4f78-822f-201a0e5d557f",
        "cursor": {
          "ref": "aeef06b3-4448-437c-8645-f5bc5fdd92ac",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9ae2666e-1514-4ff7-983a-c9972154cada"
        },
        "item": {
          "id": "2bf33982-d500-4f78-822f-201a0e5d557f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c8c0f1aa-43e2-4305-80fd-11d8170ed27c",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "56f06c67-8304-4dc7-89ce-97dc265c258c",
        "cursor": {
          "ref": "881a1bb2-9b04-4a75-869c-ed3c1523bff7",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "acba9fb3-a9f4-4d0e-94bd-291e142b776a"
        },
        "item": {
          "id": "56f06c67-8304-4dc7-89ce-97dc265c258c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "98a21234-d977-4f0c-850b-693e2c10d330",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b10265fe-6ea7-4ee2-b458-e886202d89be",
        "cursor": {
          "ref": "f977327f-7a1b-4fb3-bca9-f540a97c86d2",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "59623e47-9e8e-4e92-92bd-d21dd80c54e8"
        },
        "item": {
          "id": "b10265fe-6ea7-4ee2-b458-e886202d89be",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cf3e74e7-4c97-44a7-8bf1-07eec5a2e0ce",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "12002b82-ada7-41fe-a513-52d727598571",
        "cursor": {
          "ref": "e0feff81-faee-491f-b7c1-1518eaddf354",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0d310c10-7e20-4acb-bea5-f72c390b301e"
        },
        "item": {
          "id": "12002b82-ada7-41fe-a513-52d727598571",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ca253c08-81a1-4792-9617-0a7cd7da1c7c",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6c1b7143-ec51-43ee-8d0a-134eaaa88a57",
        "cursor": {
          "ref": "2e6fc2c0-0832-4bd2-a164-e67a6d3cc254",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "28c44321-18bb-4f7e-a3fc-8e4128380f91"
        },
        "item": {
          "id": "6c1b7143-ec51-43ee-8d0a-134eaaa88a57",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "23326056-0f56-4fd0-bdb2-58763c997615",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a9506967-d7d6-45eb-a19b-5fe463929a88",
        "cursor": {
          "ref": "72dd6a7d-965f-4165-857d-e80a62a85d64",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "15058f02-8bb8-431a-94da-7e3fb92bb4d1"
        },
        "item": {
          "id": "a9506967-d7d6-45eb-a19b-5fe463929a88",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b2ff244a-bd26-4c06-9d45-d0dedd3725a0",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b43bb5c6-a80e-4745-bfd8-321def2b3a11",
        "cursor": {
          "ref": "4edd42fe-fc51-455e-b778-0a970d69e39f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d0099e94-a013-41df-95bc-06f8c1bcd6ec"
        },
        "item": {
          "id": "b43bb5c6-a80e-4745-bfd8-321def2b3a11",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1d438bd7-beb8-4af4-be63-2e91e7a103a0",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1e672966-4fc1-42a0-a9a7-7caefb4c020f",
        "cursor": {
          "ref": "a531d1cd-7bc6-4d39-af1f-cb633644fc8a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "73a280cd-8fb5-48ef-99df-099b39482bf0"
        },
        "item": {
          "id": "1e672966-4fc1-42a0-a9a7-7caefb4c020f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6b2c9b66-7273-4e6e-a1af-24c2e66b530d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c67486-389b-410c-bbd6-d7017c37f332",
        "cursor": {
          "ref": "2cf6b9da-b55a-4835-bd4f-8d657896dc62",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "59e41776-8fec-47da-9ffc-8128a7c2e74b"
        },
        "item": {
          "id": "b9c67486-389b-410c-bbd6-d7017c37f332",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1f09ce5e-9fc4-4874-874f-d093ae88b103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426c98e6-f0f3-475e-90fd-6787c420378b",
        "cursor": {
          "ref": "48785ec5-f689-4a09-9c92-8c48a1eb36fa",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d559493f-48c1-4ee0-9e99-38aca4a1b2d1"
        },
        "item": {
          "id": "426c98e6-f0f3-475e-90fd-6787c420378b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "94323a48-e8f1-4799-8abf-a06d2b029b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ca0c57-002a-44e9-afd6-befe9ca89c08",
        "cursor": {
          "ref": "6d17ea24-0096-47e4-8bba-f14017d06aec",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7e49af59-786a-4ba2-908d-b70fead02b24"
        },
        "item": {
          "id": "10ca0c57-002a-44e9-afd6-befe9ca89c08",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4a1f32bc-f26b-4a8f-9a6f-a6f2397bc064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a75308-203a-450e-b097-4742e182a2f3",
        "cursor": {
          "ref": "021abab1-129b-490c-9cb4-3e6fa39a9acd",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b79bd117-0194-4ff3-9f60-ab620f30359d"
        },
        "item": {
          "id": "b3a75308-203a-450e-b097-4742e182a2f3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2c63d5fd-a79b-4056-91aa-399cd5698c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e179a84-6788-4d9b-b1ac-7361d39ae980",
        "cursor": {
          "ref": "d2a0c9e1-a887-4efd-bcd8-55fafdd8f75b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "da682acc-c438-4861-9cd1-ed092901c51a"
        },
        "item": {
          "id": "4e179a84-6788-4d9b-b1ac-7361d39ae980",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f8703f85-6322-4221-a463-c4b463d73bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4cf5586-3aac-4256-92f8-5297b6bb1243",
        "cursor": {
          "ref": "d5d1582e-04c0-4ea5-b210-e8099f58e165",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "86ddfdbf-c40d-40d5-a080-d50a3c9ef176"
        },
        "item": {
          "id": "f4cf5586-3aac-4256-92f8-5297b6bb1243",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2bc49644-d109-43b9-b56c-bffb5e3f6c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786c27c9-95ce-4701-8a6c-ddb452e0f3a3",
        "cursor": {
          "ref": "f3de7ca4-87da-41cc-adb0-447acb7ea3a3",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1708ca04-f576-4566-ae35-5f644ca7ed71"
        },
        "item": {
          "id": "786c27c9-95ce-4701-8a6c-ddb452e0f3a3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d2f652fb-3cc4-42ac-920b-968aab2634d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456cab73-72a3-4ef9-95dc-d24910c69e92",
        "cursor": {
          "ref": "3c171031-3681-47d0-9f7c-5f2e99aa8153",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "42530faa-37db-45f9-a24f-935a0f1cf40f"
        },
        "item": {
          "id": "456cab73-72a3-4ef9-95dc-d24910c69e92",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4a332009-3b6a-4c11-9fee-95fd5d8e77d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696b6a88-e486-4a3e-806c-64ba234ce8ec",
        "cursor": {
          "ref": "8174b5f6-4f18-479d-89f9-aa156c6daf98",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a60e342e-1fa0-4020-a8cf-7366765f72ae"
        },
        "item": {
          "id": "696b6a88-e486-4a3e-806c-64ba234ce8ec",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5c93faec-20e0-4704-913e-aa6605c0de14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d049ea2-b0c7-440e-9df0-5bb877dc8330",
        "cursor": {
          "ref": "2abd2bed-8a30-4d89-9155-202e98e7aa8f",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "49872344-bf2c-445f-b750-8bc12f3e71ec"
        },
        "item": {
          "id": "7d049ea2-b0c7-440e-9df0-5bb877dc8330",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "32f37018-0915-4d1f-95c3-66a1af9bbdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cf6a33-5e6e-4044-bfe5-308d026bf297",
        "cursor": {
          "ref": "877244e0-1fb4-4a02-a7b6-71d86db702c6",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5ce2a74b-b79d-412d-9dec-3cceda9d6971"
        },
        "item": {
          "id": "88cf6a33-5e6e-4044-bfe5-308d026bf297",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bba6af48-3728-4d6c-9b3b-ec5e86a3f74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cbc400-846f-4356-9618-c16af97cf1b5",
        "cursor": {
          "ref": "cd170a8b-09ea-452d-8c79-b74ae076f42e",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3c1a411f-3051-41f4-9a94-b90bf4601359"
        },
        "item": {
          "id": "36cbc400-846f-4356-9618-c16af97cf1b5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "aa2d7d37-8127-44dd-8173-f0d8cdc2c85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9c9fe6-4056-40cd-b6d8-9a6f183a4d60",
        "cursor": {
          "ref": "033de591-2470-4d32-919f-25ce2bbed290",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a7a884da-ad2a-459b-9158-fb71c3bb0ff0"
        },
        "item": {
          "id": "0d9c9fe6-4056-40cd-b6d8-9a6f183a4d60",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9cbe057f-0867-4ce9-9e18-77d7c63f2227",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "419c9c2d-d886-4098-a8b4-20c9f1a330e0",
        "cursor": {
          "ref": "80d87b12-0148-4c68-8156-e1218efa2f98",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3e80021e-54c6-4e9a-894e-bd6e8e952a0a"
        },
        "item": {
          "id": "419c9c2d-d886-4098-a8b4-20c9f1a330e0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7d94795d-b736-400c-8a36-d0c5c3a49d4d",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "54f60cdb-b90a-4b4f-8483-1b365e3132db",
        "cursor": {
          "ref": "c72f66fb-e38d-4e3a-8275-f69d41ea71ac",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5c3ec458-3ddb-4623-a508-ec07b2cdc58a"
        },
        "item": {
          "id": "54f60cdb-b90a-4b4f-8483-1b365e3132db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2ced0d1d-c594-48e5-897c-464e1264a0a1",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6a411440-f8f2-4476-948d-d85da2ecd34f",
        "cursor": {
          "ref": "50d205f5-811e-49ca-9a22-39c4419b1709",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1c305942-2bb6-4053-8ec0-79381bee00e8"
        },
        "item": {
          "id": "6a411440-f8f2-4476-948d-d85da2ecd34f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4efefb3f-858f-4d08-8a6b-92973d5d6d5f",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5b1ea149-46c5-4e84-9794-dcf816eff61b",
        "cursor": {
          "ref": "8bcff92d-be19-4506-95bc-d0220aa67aab",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f70da99e-65f4-4a08-ba01-65d126e22ac7"
        },
        "item": {
          "id": "5b1ea149-46c5-4e84-9794-dcf816eff61b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "12a131fe-1658-46e0-ae11-8011d2745874",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ce8acdd5-c13f-49fc-ab80-1994dd1b979a",
        "cursor": {
          "ref": "13337f09-8d8e-427e-88db-abb2df035ff8",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b3f03106-555b-4322-9a29-802652033616"
        },
        "item": {
          "id": "ce8acdd5-c13f-49fc-ab80-1994dd1b979a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "46ad2419-5ecb-43b6-bfc0-eeac4f8dad52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793eb96a-3300-47b9-8f02-d534a21ae37b",
        "cursor": {
          "ref": "40d7ba6c-fa57-4f3d-b21b-e3d96c97ed5d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3e72aca5-2cdf-44b6-8af6-3b483f51ab6d"
        },
        "item": {
          "id": "793eb96a-3300-47b9-8f02-d534a21ae37b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8d228733-d5ea-40e7-8444-776ccb516bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b42663-1b52-4c4b-a2fe-531ace669ab0",
        "cursor": {
          "ref": "2a458e11-ccff-4890-8dcc-4e94b53ce9ce",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b1210f73-edba-492c-b9c5-ad8e18e4e79e"
        },
        "item": {
          "id": "98b42663-1b52-4c4b-a2fe-531ace669ab0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9684a6d7-cec4-4804-a219-fe37df5585df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e383dd-202c-4454-9d56-c1986d0f56f1",
        "cursor": {
          "ref": "3aec44af-231e-4985-9874-d356265dc1f3",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5a082da5-8294-4021-990d-c1e8fbaa35e9"
        },
        "item": {
          "id": "91e383dd-202c-4454-9d56-c1986d0f56f1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "77e96d49-0fa5-4e98-8577-12a528bfc32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0906f950-2b28-4383-8eaf-728c8ca89eef",
        "cursor": {
          "ref": "6bc5a5b5-931c-4f1c-92dd-6bdb91058a91",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0c235a94-cd92-47fc-b398-acbc6e9acb7f"
        },
        "item": {
          "id": "0906f950-2b28-4383-8eaf-728c8ca89eef",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ba3feef9-655a-4a8d-9559-b384ab2c8b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cd4157-8366-4ec6-bf87-b24ce1af95df",
        "cursor": {
          "ref": "cf204d28-b765-4acb-9e8d-8448cfda924d",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1752dae8-aac9-4b19-9fd7-d8babca54cff"
        },
        "item": {
          "id": "f8cd4157-8366-4ec6-bf87-b24ce1af95df",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "868c9d63-7cbd-4906-a56f-48a0c52c534d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63b1a9c-3d28-4aa5-a47a-b4d7fad0cd35",
        "cursor": {
          "ref": "6ef54f1a-a824-4317-9f99-07d618597c0f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5223be87-38d3-4fe2-b11a-a1d227d534f9"
        },
        "item": {
          "id": "b63b1a9c-3d28-4aa5-a47a-b4d7fad0cd35",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3fe65d48-f718-46f8-857c-1052f3607741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f64d8e-038a-47c5-8e5f-06697a5e9703",
        "cursor": {
          "ref": "f55df8fc-0c8f-4c79-b8b1-9ad9a8b0411a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e82811e4-dd9e-4857-b68e-1fb98adfd117"
        },
        "item": {
          "id": "39f64d8e-038a-47c5-8e5f-06697a5e9703",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "48576964-d3e2-4290-964d-0e00fb368db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152d7de3-abf6-4169-963d-e5afa05d2924",
        "cursor": {
          "ref": "44056ac7-c629-47b0-86e1-f5e8147425e0",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "67207aa6-34ae-43dc-96d2-c74805f37914"
        },
        "item": {
          "id": "152d7de3-abf6-4169-963d-e5afa05d2924",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d54470de-7d2c-4239-bf08-5b7c3bbf0428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea0ff5a-0f3f-49dd-8f54-34d1515fc283",
        "cursor": {
          "ref": "36ae1f9e-21a4-41a5-80e8-ff02f03df443",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5799274b-e797-480e-9979-f3a78479b3f0"
        },
        "item": {
          "id": "5ea0ff5a-0f3f-49dd-8f54-34d1515fc283",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5cf0cbbe-06aa-458b-bc0b-099e62611a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59896866-15ba-4677-963c-91f6c12e4395",
        "cursor": {
          "ref": "7f6f4f48-69d0-4577-921f-06e21467330b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dc1d28e7-d6a8-4c72-835b-ff53e4201412"
        },
        "item": {
          "id": "59896866-15ba-4677-963c-91f6c12e4395",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e1e70c34-832f-440e-9829-5de0b64d2986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9048cb7c-9928-4c53-8654-bb86ad061d9c",
        "cursor": {
          "ref": "b1585ec4-2e79-42a9-b075-98f753e051f2",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ddff9989-a606-40f6-aa48-0011385bbfb6"
        },
        "item": {
          "id": "9048cb7c-9928-4c53-8654-bb86ad061d9c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ef6ed1a3-990f-42e3-a51b-c74a14ee733b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b57ccb-ece4-4bff-bea5-ce22787cff79",
        "cursor": {
          "ref": "ee8b3884-fbb6-402c-b004-2e776be412b6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5b2e537e-04d9-402f-8778-1ceb8abcd5e7"
        },
        "item": {
          "id": "32b57ccb-ece4-4bff-bea5-ce22787cff79",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4569ee53-9f28-4f37-b243-485c48f8d049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9676b5-2f06-489f-a26c-c357cb78a46d",
        "cursor": {
          "ref": "f4edf74a-8451-4650-826e-b5cf97ce2104",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f05a9102-57dc-4ea6-a8ac-c9e826239cab"
        },
        "item": {
          "id": "4e9676b5-2f06-489f-a26c-c357cb78a46d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "76b6e503-99c8-44e4-8816-4c9ff622dd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c9fc91-c56f-429c-81ec-b9816f16acfb",
        "cursor": {
          "ref": "10d39a9a-86b6-477e-aa49-07a0fc042c1e",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f868b692-49ee-46ae-990e-861ae193198c"
        },
        "item": {
          "id": "43c9fc91-c56f-429c-81ec-b9816f16acfb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dc981003-e9d4-482f-a4dd-83de0024fd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2ec6a7-eb87-4580-8917-7057a3172674",
        "cursor": {
          "ref": "6faa4792-374f-4020-bf0d-dad2ac86ec8e",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1d511c4a-c77a-48f0-a04e-0b9bdb5b8429"
        },
        "item": {
          "id": "8b2ec6a7-eb87-4580-8917-7057a3172674",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "570bd37f-44a8-40ed-84ad-2e6149447af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88c750d-bfd9-4a3e-934e-485b4fb0d160",
        "cursor": {
          "ref": "b5bc3697-eb16-4772-9a3c-d81162f3b11f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5e62a0e6-b685-45cc-8100-b11e724589c6"
        },
        "item": {
          "id": "e88c750d-bfd9-4a3e-934e-485b4fb0d160",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "dbdabd21-254b-4303-b7c7-3877a13ee6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c040dc-c04b-4ac1-a0b2-d61f4f5c8f47",
        "cursor": {
          "ref": "d6696092-6563-4fd7-a0fc-f9e1715993f6",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8ead766f-7535-458c-9739-8f6c08a42ea2"
        },
        "item": {
          "id": "37c040dc-c04b-4ac1-a0b2-d61f4f5c8f47",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8f4690f0-84ee-45e1-8060-68825cde6c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5beb529a-0ec2-4156-86e1-1c44e9271372",
        "cursor": {
          "ref": "fdca0a76-4c27-4e3a-8b55-dfa646570845",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "68cf9790-3b70-42fc-9e1e-78e442616eb1"
        },
        "item": {
          "id": "5beb529a-0ec2-4156-86e1-1c44e9271372",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ec95da62-dbce-487f-9dc3-2406c2dae69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fe9a52-b6b0-4878-b057-b596c818b858",
        "cursor": {
          "ref": "a8876ec1-f7b7-4a08-b45d-38fa1ea17836",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3e7f5d23-21da-48c3-817b-6ff5d4610398"
        },
        "item": {
          "id": "26fe9a52-b6b0-4878-b057-b596c818b858",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0810c55d-a35b-4429-b508-c90c77437c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898718ea-8869-4412-9cb5-381b23ac7a71",
        "cursor": {
          "ref": "5c9c9763-8e6d-4dc2-9c7e-db19aac5a86b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "83152952-0243-4693-a6c1-6dd1e330f484"
        },
        "item": {
          "id": "898718ea-8869-4412-9cb5-381b23ac7a71",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a2dbda1a-4a12-4b7f-ae8f-6dac26eed2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd399541-1320-4f56-acd3-e8e5e107939b",
        "cursor": {
          "ref": "841bea33-637f-4f6a-8fd5-9a9be83f3f30",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bf3f457f-2976-47cb-be43-cc2f0445f4b3"
        },
        "item": {
          "id": "cd399541-1320-4f56-acd3-e8e5e107939b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "19ee46cc-9baa-4754-bdf6-83b340fae302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c22992-97f8-467f-ae4c-7e47f0c9233f",
        "cursor": {
          "ref": "dc235783-9296-4b48-891e-458d44a9f171",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a15ce35b-d645-40ec-ab88-c256cf2d3137"
        },
        "item": {
          "id": "50c22992-97f8-467f-ae4c-7e47f0c9233f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6070794c-6e37-41c6-8c7d-94b80e523e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50412785-491b-4099-b618-f15773b38c5d",
        "cursor": {
          "ref": "995ca7ed-d720-42ac-8f16-3d7f3dc314a2",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0e80406a-c127-4b3e-b34e-8d214605ab81"
        },
        "item": {
          "id": "50412785-491b-4099-b618-f15773b38c5d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "64150d01-8ea5-4cff-906a-9db194c19b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fdc45f-a1a9-4094-9d83-a7f49503ac30",
        "cursor": {
          "ref": "dddd9170-181a-4a56-9416-6e4a0a2decdb",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "39a9528a-be94-4245-bac2-fced7c74b02b"
        },
        "item": {
          "id": "80fdc45f-a1a9-4094-9d83-a7f49503ac30",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cb46a0c6-66c9-44b0-8dd1-5142ace62da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af33220-c680-43ac-b73e-052a3caf7eb5",
        "cursor": {
          "ref": "b47ce5e7-18c9-49e6-b90b-2925ec3d01e4",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "87c16fde-a6e8-4490-9c25-05c9741d6b84"
        },
        "item": {
          "id": "8af33220-c680-43ac-b73e-052a3caf7eb5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "945b7b12-3472-4884-8e19-c6189612f8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ecad36-eec4-4b2c-b2c3-603223dcd0e3",
        "cursor": {
          "ref": "55d84def-e7b7-403e-babb-86f28d4aaef5",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3c15a570-caee-4ad8-94ec-7a487228321a"
        },
        "item": {
          "id": "f3ecad36-eec4-4b2c-b2c3-603223dcd0e3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f81014a3-baec-48bb-998a-3243c7297b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cab7186-0eaf-42d8-9759-d8b1643c5192",
        "cursor": {
          "ref": "8fa0912a-2a8c-49cf-acb9-1d51970dce00",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "244a89d5-54c5-4b65-aa97-ac2394516bca"
        },
        "item": {
          "id": "3cab7186-0eaf-42d8-9759-d8b1643c5192",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0227c895-c650-4275-8229-d4e20cabadd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92625d1-0973-4f90-8aff-6395054af296",
        "cursor": {
          "ref": "dc3da247-a2db-49c1-81da-23259d042844",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7e98dd15-eaff-4484-832b-ebec6955aaf5"
        },
        "item": {
          "id": "f92625d1-0973-4f90-8aff-6395054af296",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a81c63b4-141e-4636-a93a-a7674378d5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6552f77f-d24b-44c0-b359-4d8d6ababba0",
        "cursor": {
          "ref": "b769704e-4be7-4fc9-86cd-86cca67331cd",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4e17a92d-31e9-4aae-b657-503a7b28ba4e"
        },
        "item": {
          "id": "6552f77f-d24b-44c0-b359-4d8d6ababba0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a6888520-26ef-4146-8a65-d9bc68f56845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895ce128-cbb0-49f0-b507-df25b048cc46",
        "cursor": {
          "ref": "c55296b1-60f1-42f2-988c-30526e820089",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "30cd288e-6d55-4634-9bb5-f72a35487903"
        },
        "item": {
          "id": "895ce128-cbb0-49f0-b507-df25b048cc46",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "aa1cd4fe-91e5-4cbe-850f-109e78e72901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0689a778-75c7-4066-a93d-bf3df75840e0",
        "cursor": {
          "ref": "59044b0c-9a20-4b8b-9184-844ffa2313a4",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "30c380d8-7316-482c-823d-73481ab9925c"
        },
        "item": {
          "id": "0689a778-75c7-4066-a93d-bf3df75840e0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d29101eb-0c94-4b68-a735-922106fe9bea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6889d72f-f0fb-466d-9940-17d0e201ffa7",
        "cursor": {
          "ref": "a9de999e-9b54-498f-bec5-f6e07bbaa2da",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "be74baf0-09a1-40c7-87cb-ed6479db09ab"
        },
        "item": {
          "id": "6889d72f-f0fb-466d-9940-17d0e201ffa7",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6f2a794b-04e6-45aa-885b-0ac4fe36c30e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "721e5ee1-b3d3-4873-ba8b-3cb8f116fe03",
        "cursor": {
          "ref": "d443db83-4248-4cfb-90ad-f8456b4094b5",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c20d6851-5733-4880-91f4-7c64ba0d92e2"
        },
        "item": {
          "id": "721e5ee1-b3d3-4873-ba8b-3cb8f116fe03",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5d698621-b834-4704-aa61-afeeb96cf4a7",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e300c7f6-e474-44a3-871a-f5e2d74ed0a3",
        "cursor": {
          "ref": "a1dcd6b2-0995-4213-b604-a1dfe49f064e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "444f8764-38cf-423a-a3a0-827050d9c4dd"
        },
        "item": {
          "id": "e300c7f6-e474-44a3-871a-f5e2d74ed0a3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1fb4a717-ec75-4951-a8b6-3d8eb2765073",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f216268-8cb6-456c-996b-cdb9f1af2aae",
        "cursor": {
          "ref": "dc2c8f4d-4c54-4ef4-aa3d-68b9a0898f79",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2888bba9-b75d-4564-9613-391c32c7903a"
        },
        "item": {
          "id": "7f216268-8cb6-456c-996b-cdb9f1af2aae",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6570d8d5-8314-44d4-8d17-bf832dd08c13",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ee3cd6-af15-40c6-94f6-7d13681b46ea",
        "cursor": {
          "ref": "5ae59660-d32e-4c75-9c0c-0ba311292d8b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "91062df9-b3c6-40b5-8272-a3d42b5f0b8e"
        },
        "item": {
          "id": "a7ee3cd6-af15-40c6-94f6-7d13681b46ea",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "55fa7761-e508-4055-949b-86e6b36e48ac",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5c7a5e-afe7-404a-99df-6016e5125074",
        "cursor": {
          "ref": "14038e11-1936-48f7-ab4c-a89adbb48151",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c0cf0f33-6183-4bb5-864b-6f2fe1758fad"
        },
        "item": {
          "id": "ba5c7a5e-afe7-404a-99df-6016e5125074",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "716c281b-76b9-4a36-86a8-567faea87d18",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-16T00:36:26.020Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-16T00:36:26.020Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a1430d7d-d43e-4f90-a1fc-1081299e9820",
        "cursor": {
          "ref": "4865f290-a972-4fda-86da-7b4329ab6453",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a3c79bc7-a10b-4b63-8074-fcd9badddd99"
        },
        "item": {
          "id": "a1430d7d-d43e-4f90-a1fc-1081299e9820",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "39e2c8cd-bc21-407e-8739-49498162b8f8",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee901a3b-1d36-419a-b4ac-f712a9be800a",
        "cursor": {
          "ref": "e71b7911-0bdb-42b9-8ad2-a84893c8d74b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "279b88ef-eab1-47c2-9ea7-9e15869e2a94"
        },
        "item": {
          "id": "ee901a3b-1d36-419a-b4ac-f712a9be800a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5357d5b0-20dc-4aec-b38e-05afe2fd0f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9f7ea1-8f53-4a40-b549-5ea6a30e5995",
        "cursor": {
          "ref": "e337ad89-c7f5-40cf-965e-1eb499588783",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ddfe18b0-c6ef-4be9-ba53-7718b57ef382"
        },
        "item": {
          "id": "bb9f7ea1-8f53-4a40-b549-5ea6a30e5995",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5a27fcf9-43cf-4562-9121-0ad75ce5164f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec79a0f-ae44-4ab8-8d1a-bea99151fa38",
        "cursor": {
          "ref": "9a4e1b47-4645-43d2-bc7a-2d9cc6a0b29d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "db53b197-9fb0-4074-8bf5-31f799708fec"
        },
        "item": {
          "id": "8ec79a0f-ae44-4ab8-8d1a-bea99151fa38",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7bf72689-3b1e-431d-8f87-6a17be18201d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647f555c-a635-4681-83cc-fef8b88ab9b7",
        "cursor": {
          "ref": "65d0b149-0385-4813-bd69-62cac28e0b59",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5f6fb5b2-fae9-45af-a031-7c937d8f7be0"
        },
        "item": {
          "id": "647f555c-a635-4681-83cc-fef8b88ab9b7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "08e3c161-9cb7-4aef-aab7-36583f368b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23625b70-587d-497f-8106-4934f920a9a5",
        "cursor": {
          "ref": "2dc46459-8f06-4b3b-8550-7b4114e4fe11",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "262fd8e7-d51b-431a-b0ea-82305b4fbe99"
        },
        "item": {
          "id": "23625b70-587d-497f-8106-4934f920a9a5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4a7f816d-0b24-43a4-ae22-e2f409240c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a482dc8b-67a7-41b1-ac2f-4b4926cecfde",
        "cursor": {
          "ref": "90fc7a58-eb1f-4561-b7c1-40e9b1c2eb68",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7cc86692-f0ff-4e71-92b0-0cb5ef98219c"
        },
        "item": {
          "id": "a482dc8b-67a7-41b1-ac2f-4b4926cecfde",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0352900d-e0d2-4059-8680-04968cb3c343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca12208-e135-4918-a1ae-144ef1d82b4e",
        "cursor": {
          "ref": "d95056e1-4904-4112-93ee-5fab9babe6ed",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a3b85bc0-1940-4301-bfda-c4ecdbbac371"
        },
        "item": {
          "id": "1ca12208-e135-4918-a1ae-144ef1d82b4e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "659cce6e-019c-498b-9898-3f53c489cec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dedbeb-6bc8-47d0-a320-7a1c7571d818",
        "cursor": {
          "ref": "5f0c792b-880a-45d5-9403-a6e002c8d577",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "551c87c1-c29e-441a-a2fc-4f46d9f6b14f"
        },
        "item": {
          "id": "e4dedbeb-6bc8-47d0-a320-7a1c7571d818",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7a4abad8-b2b5-40bc-a708-8fcc94b540a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1cb9bf7-39e1-4d71-b72b-946a7d3bedf3",
        "cursor": {
          "ref": "9b58451a-21ab-4b14-b84c-9e4480e4a894",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e8f84b2f-5ebb-43c3-a71f-6e55770017ba"
        },
        "item": {
          "id": "c1cb9bf7-39e1-4d71-b72b-946a7d3bedf3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e28287ef-c51d-41a7-9079-1a27dd0066b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2751af34-3b3e-45d9-b0f8-3ef3f3171729",
        "cursor": {
          "ref": "0addede1-0bda-4cdb-a701-6f4abde32a4a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "25fb6e29-a124-49a6-a464-2a86b950f1a0"
        },
        "item": {
          "id": "2751af34-3b3e-45d9-b0f8-3ef3f3171729",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c37b7910-af21-46a9-ac2f-c35d294af6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c431ec50-f774-443b-b09a-329fc7d48a09",
        "cursor": {
          "ref": "82cca818-212c-4698-bb8a-87c3bb038f52",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6f6ddcee-fa09-4d6c-9240-fbc0a4c42fc3"
        },
        "item": {
          "id": "c431ec50-f774-443b-b09a-329fc7d48a09",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4e1a88d5-02b9-46b0-acda-3f923149f288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e181c72-905e-4a36-827b-d373159bccb3",
        "cursor": {
          "ref": "d78e484b-9227-4dad-be59-5abb0dbd7736",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "42409ffe-0526-4e2f-bde4-23e4b9477c8b"
        },
        "item": {
          "id": "9e181c72-905e-4a36-827b-d373159bccb3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c173d1c2-7fc1-470d-a4f3-19713c72396b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05853d8f-51df-4722-9cef-c89b71e28bd3",
        "cursor": {
          "ref": "5745cf55-31bd-4df1-87ea-70d605499750",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "dcaf50db-26b7-4136-8f2c-31112663919b"
        },
        "item": {
          "id": "05853d8f-51df-4722-9cef-c89b71e28bd3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0ac2b924-eccf-46dd-81c3-57228f235cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366c2ef5-86bd-4bcd-8157-59ba5e634e05",
        "cursor": {
          "ref": "68c21a81-f0ce-48a2-84ef-4a18f0d4de10",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c3a04cb8-3a6c-4063-a893-e940b5daabb3"
        },
        "item": {
          "id": "366c2ef5-86bd-4bcd-8157-59ba5e634e05",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e753fcf0-4f17-420c-a6fb-efb6b27d214f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a3d235-1c99-47e6-9565-eb690a440d07",
        "cursor": {
          "ref": "6d82616e-5319-4fb7-b193-ad1c98d9a12f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a3c3e4ac-5874-4a7b-b84d-e4398424669a"
        },
        "item": {
          "id": "49a3d235-1c99-47e6-9565-eb690a440d07",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "570b972d-fe98-4d84-b010-790527515c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e66450d-704b-4489-afa5-3169c8da139e",
        "cursor": {
          "ref": "24aeefad-f0e7-4a0f-a1ec-6bbf050fd9e2",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3e977375-ffb5-441d-92bf-7d9484659517"
        },
        "item": {
          "id": "1e66450d-704b-4489-afa5-3169c8da139e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "df5dcdae-9bae-4a16-9988-fe528713ab64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9467f45-255a-488b-886e-420aeb2b6af7",
        "cursor": {
          "ref": "610efcaf-5e05-49b6-8a86-9d6b6cd7bfd7",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "01e5e978-d1d5-466f-95ed-6b7973eac607"
        },
        "item": {
          "id": "f9467f45-255a-488b-886e-420aeb2b6af7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "af6ac9b2-f540-4087-8978-d6aedf53501f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40072799-cba8-4606-bb0e-96e5c9581543",
        "cursor": {
          "ref": "8cd0bd99-6588-4a6f-b8aa-6e696ea507d9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1929c187-a7a5-466e-ab53-c165c78d56c2"
        },
        "item": {
          "id": "40072799-cba8-4606-bb0e-96e5c9581543",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e400386d-6a5e-4d5a-8399-3b9cee52a9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4600acaf-254b-42ac-a7bf-f0b98df61ab7",
        "cursor": {
          "ref": "f19f371d-67c3-4ff9-b7b9-7fcbfab2a1a7",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "31fc2a9b-e174-4180-aa01-6160fdaeadfd"
        },
        "item": {
          "id": "4600acaf-254b-42ac-a7bf-f0b98df61ab7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5dc66dc6-50d9-4724-a9b6-2ffa54212d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7ebab8-ce47-440c-852f-ecbafbdb186a",
        "cursor": {
          "ref": "54b8cc0c-11b9-4e7a-acff-e6252e332138",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5f3f6b85-aaef-460b-84cc-c6260cdf2782"
        },
        "item": {
          "id": "1b7ebab8-ce47-440c-852f-ecbafbdb186a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b1eb524b-caf7-4288-a0a0-316ec1ed3902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae9f442-4ea4-4793-bc90-e49335724a19",
        "cursor": {
          "ref": "9f0eb56a-aa03-4f6b-abe4-424d1d5e523a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3eac2b69-998e-41b6-9481-08a194e3a942"
        },
        "item": {
          "id": "bae9f442-4ea4-4793-bc90-e49335724a19",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f094ac92-4608-43fd-9ad0-22010f733e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0ada79-4a04-440d-89e4-bc035a884c09",
        "cursor": {
          "ref": "4ecfca64-2f28-4da5-b07d-ddb14d97f3d7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "106f8cce-3d84-492e-9079-337c687e8a23"
        },
        "item": {
          "id": "4f0ada79-4a04-440d-89e4-bc035a884c09",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4b053362-3110-4a8e-9b29-ffbc33c63434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea06709-aa0c-4491-a352-177f07af5ef9",
        "cursor": {
          "ref": "e84431e9-c6ed-42a0-ba34-cae89d26a684",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "90a8f5dd-ce63-40ea-be58-d6fcd757e0f4"
        },
        "item": {
          "id": "fea06709-aa0c-4491-a352-177f07af5ef9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cb1c3e04-5b14-4581-b767-e31fb8e7a83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ada5d52-5ef0-4849-842c-790ef8a45a1b",
        "cursor": {
          "ref": "e583457f-e9a9-486a-b488-2e07e29e7a2b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "df7f4379-94cb-47ab-a9fe-a306907dfce4"
        },
        "item": {
          "id": "3ada5d52-5ef0-4849-842c-790ef8a45a1b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b6a1ec37-e773-4562-be56-2eb6a2a780e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200457ac-eb1d-4f86-9aa3-ec94bc68353c",
        "cursor": {
          "ref": "68ee218d-bbbe-49a2-a292-0324e6f81ecd",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c7e6fef3-5e10-448c-b589-9728587bb485"
        },
        "item": {
          "id": "200457ac-eb1d-4f86-9aa3-ec94bc68353c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5add162e-1e59-4c59-bad2-ed8a8d33e224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5173f7c6-1fd5-4beb-962d-8ef555b3b471",
        "cursor": {
          "ref": "5724da50-a4c3-4b5f-bf85-9f7d315a1d78",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "01cab4e6-fe4f-4dd6-8fe5-af0f89c287d0"
        },
        "item": {
          "id": "5173f7c6-1fd5-4beb-962d-8ef555b3b471",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3c14aedf-e18f-4b6b-8801-2214b99d8cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be6cb8a-1cbd-4b37-873f-c40addbae667",
        "cursor": {
          "ref": "5eaaa07f-d2b5-4001-a763-6b7b4cba7732",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f9768f32-0c60-4fd7-a404-ebea38d4c878"
        },
        "item": {
          "id": "8be6cb8a-1cbd-4b37-873f-c40addbae667",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b81fbb5b-5c1c-4225-8a4f-3b10148f7b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c67eda-01fe-4393-b3e6-e4d8785994af",
        "cursor": {
          "ref": "cc157cc7-1c59-4e38-9eaf-79621803172d",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "94592e39-5d8c-4c52-8aff-1e73b94fe56d"
        },
        "item": {
          "id": "b5c67eda-01fe-4393-b3e6-e4d8785994af",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3eeba644-d347-44dd-a898-2fc14ec8150c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f23c9f-c3cf-4c09-ad79-430a2f1909c7",
        "cursor": {
          "ref": "2cfbff48-e2c6-4ded-bc38-c1699cbc86e9",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1dcd7647-a88b-4939-a374-ae2429a40173"
        },
        "item": {
          "id": "97f23c9f-c3cf-4c09-ad79-430a2f1909c7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3bf5d0b7-720b-4312-97c4-cf4cc7089ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3c3901-4f88-4ed2-aa91-409b06ab39f9",
        "cursor": {
          "ref": "fa88e17e-b235-4932-bd5c-ff5a09709db7",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c73922c9-ce10-43af-87df-a2ecf6cdce43"
        },
        "item": {
          "id": "fe3c3901-4f88-4ed2-aa91-409b06ab39f9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "845c77ad-fab9-4d57-a2be-07155ac36fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc67d00-a0f6-4d3e-93e8-7aa2280892ed",
        "cursor": {
          "ref": "9063df0a-a584-4e97-8b03-73488bc32d37",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c7337d3c-d342-46d2-bdfd-f0202e000091"
        },
        "item": {
          "id": "ebc67d00-a0f6-4d3e-93e8-7aa2280892ed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9e9cca28-ad0e-416c-8a47-f798e2f1e6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cb2331-ff0a-41a6-853d-e1f63e739cb6",
        "cursor": {
          "ref": "f0323d11-d6ad-4b6f-beb7-09cdcf3285a5",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "342ca33e-102c-4821-aa40-60e92750ddb3"
        },
        "item": {
          "id": "90cb2331-ff0a-41a6-853d-e1f63e739cb6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b09343e2-c252-4a57-8bb8-1a190e26073a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dccb4d20-2d1d-46b0-ba02-b89e6389e221",
        "cursor": {
          "ref": "a476a629-f264-4486-a5f7-54906413368a",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dec85369-da62-48b4-ae91-395470f805bf"
        },
        "item": {
          "id": "dccb4d20-2d1d-46b0-ba02-b89e6389e221",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "47d6f4ed-042f-46ce-8325-e14f0963155e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8087b16-f4ad-4302-9c0e-a9d4a849464f",
        "cursor": {
          "ref": "9c0cab88-9abd-4b13-b8eb-bf83ef48a84a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c8a9fefa-270d-429f-9055-454b176171de"
        },
        "item": {
          "id": "c8087b16-f4ad-4302-9c0e-a9d4a849464f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a3139ca0-cd13-462b-a772-b33f55a92a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360ae75a-dc20-4d02-90be-a94dcb4ecce9",
        "cursor": {
          "ref": "a43a5f70-4ac2-4493-b7ac-4d2ebd0ade4c",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1e6e344a-a7f2-498c-9d1e-1c9773eb3f66"
        },
        "item": {
          "id": "360ae75a-dc20-4d02-90be-a94dcb4ecce9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ec60cb48-82cc-41fb-a15c-f5601b3df552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c503fac6-96e8-4743-b69f-0225de6c7662",
        "cursor": {
          "ref": "1bd4d8b5-d610-4270-bb30-44bd87a57078",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "80d602be-c58d-435c-8ba9-ca8c26b7cc33"
        },
        "item": {
          "id": "c503fac6-96e8-4743-b69f-0225de6c7662",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f558300f-4b71-43d7-9d87-2a17835db4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cc018f-96cb-43eb-94b8-4cbb7ae50442",
        "cursor": {
          "ref": "9a94e2c1-1d99-4743-8a3c-a5d4ed81b37a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3b658e72-100d-464e-8feb-c630a6ccf18b"
        },
        "item": {
          "id": "18cc018f-96cb-43eb-94b8-4cbb7ae50442",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9732086c-3d2f-437b-8e95-0c53c31442ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8582339-b459-477e-b52a-39f6458b13ed",
        "cursor": {
          "ref": "daf73cce-3e2f-4576-a658-6f9fabb43591",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4460081b-88f9-400d-844f-c220005a52d6"
        },
        "item": {
          "id": "a8582339-b459-477e-b52a-39f6458b13ed",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "51762832-76fc-4f5b-acb6-6c4f06ce4907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81bc943-5a57-4b5f-b2c3-fafaa2117103",
        "cursor": {
          "ref": "917df69e-215c-4fa9-949b-948745830336",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "40e6f874-d465-4d9c-ac29-bbe943cee32b"
        },
        "item": {
          "id": "d81bc943-5a57-4b5f-b2c3-fafaa2117103",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "24d21782-a704-4142-b2b6-10d7cb1cac7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91707c5-98e8-4143-ac41-09522f5b27b8",
        "cursor": {
          "ref": "db787aad-bda9-4f50-b988-844c8b217d07",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ccfcc33a-9ddc-44e3-8594-bad7359e9199"
        },
        "item": {
          "id": "e91707c5-98e8-4143-ac41-09522f5b27b8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fe76a339-7611-433b-b220-26f806c68967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23a5b4d-6479-4c3f-b949-74e8d1cce542",
        "cursor": {
          "ref": "a3661d8e-647b-4382-a018-f94174dfa24f",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e4f58378-ea98-489b-aaca-fbb53bb6a7d2"
        },
        "item": {
          "id": "f23a5b4d-6479-4c3f-b949-74e8d1cce542",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eb1d300e-70d6-4e3e-9a72-f448eecfa888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17713cb-d6a6-4800-8c68-7abaec4d6942",
        "cursor": {
          "ref": "0d87cef4-3309-4187-b433-087f0c10806d",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ca47c4dc-b519-44dc-93d9-f1db4ac625df"
        },
        "item": {
          "id": "c17713cb-d6a6-4800-8c68-7abaec4d6942",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "80d06298-289c-441e-b000-dd5306c68ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ef7ef8-0b59-45ec-879a-c334ec31022c",
        "cursor": {
          "ref": "6386aa21-1d6e-48fc-8963-b8b7dccea043",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8c6d464d-a1d2-4c3d-8505-c81e0b1996bb"
        },
        "item": {
          "id": "d3ef7ef8-0b59-45ec-879a-c334ec31022c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "06ce084b-68ec-466a-bae5-ba8054f53849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b970818-797f-4546-ad8f-094e4bb6509e",
        "cursor": {
          "ref": "b2dc6458-6da8-4156-b91b-ebdcc719ab3e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2ea13a36-9fbe-4f62-8eed-fb2d05d678c0"
        },
        "item": {
          "id": "3b970818-797f-4546-ad8f-094e4bb6509e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "79355b81-4bd0-4d32-9d07-04dc3faddcd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df52ac7c-4fa8-46ed-bbc4-025869bf8037",
        "cursor": {
          "ref": "0f4d19fe-5e07-49f8-a1f6-3fb3c50f07d8",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "78ccdd4e-5091-4816-b006-bdf6510bcf80"
        },
        "item": {
          "id": "df52ac7c-4fa8-46ed-bbc4-025869bf8037",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cc3d9c7e-8615-4733-b978-7e6c00badfa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9602c0-7e81-4941-9783-e86910e9ecd2",
        "cursor": {
          "ref": "a069be88-9530-41c8-a905-3ea8cf82fb4b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e1684486-9c17-44a0-ba72-e5bd461640d4"
        },
        "item": {
          "id": "4d9602c0-7e81-4941-9783-e86910e9ecd2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cd6e395c-b60f-42d0-bb18-c231a1495662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3e74d6-2511-44a2-b28f-2dc831f4cd73",
        "cursor": {
          "ref": "97510d60-3103-486f-a12c-f202b32c14ba",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dff701c8-17ad-4108-8ddc-1f48bba37713"
        },
        "item": {
          "id": "2d3e74d6-2511-44a2-b28f-2dc831f4cd73",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d7f5fd04-ada0-4c30-856a-1ff372c05dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196ddb9e-9913-48c8-947e-b2b0003b5552",
        "cursor": {
          "ref": "4e28ae4a-6bbd-4f28-900e-5469c0fe549f",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e2ca781d-cb43-49fe-8129-c90925f7b7f0"
        },
        "item": {
          "id": "196ddb9e-9913-48c8-947e-b2b0003b5552",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "df725ed2-9f91-4cbb-89d2-005664eb22ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f17bbef-a1d8-4082-a0df-8c4d9b359d6f",
        "cursor": {
          "ref": "7fe15f72-3ffb-4530-bf82-f2c21d5e5754",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "83456b5e-cfd7-48df-9d7c-a4cd57d6e2a7"
        },
        "item": {
          "id": "2f17bbef-a1d8-4082-a0df-8c4d9b359d6f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "524cc93c-52b3-4dff-a8f2-a1e25b3ca0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9163aa5b-8a18-40c5-97a2-81a9d97c5ee7",
        "cursor": {
          "ref": "0a627558-2f92-4ff3-918b-f698d1b075d3",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3e13a470-7a45-42c4-ae78-972d9c002321"
        },
        "item": {
          "id": "9163aa5b-8a18-40c5-97a2-81a9d97c5ee7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5a628e58-3de9-4abc-8195-62e08102068d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875d8ca5-a7bc-490e-9197-2433e4d5de3d",
        "cursor": {
          "ref": "29c4aa48-c1d6-4143-bf2a-ec5cbf911456",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "42771599-791e-4938-8c9e-d2cbedcfeb86"
        },
        "item": {
          "id": "875d8ca5-a7bc-490e-9197-2433e4d5de3d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "13d70876-f0e1-4985-87e8-0bc5406e954e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d69c5a-e2b0-4351-b52e-2c71efc5ed7e",
        "cursor": {
          "ref": "78aad17a-8f80-4cdf-8dc0-239d22928acc",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3da49593-cbbe-4cfc-a65a-14eaf16a720b"
        },
        "item": {
          "id": "35d69c5a-e2b0-4351-b52e-2c71efc5ed7e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b2112b33-998e-46f7-a594-0604346ee211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df89d1a-ed3a-425a-abdb-7bc8b7e8dc8c",
        "cursor": {
          "ref": "5f5adf6d-865f-4831-bd49-bb143db338e9",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f7c0ca71-0360-4844-bd61-9065e8eb0827"
        },
        "item": {
          "id": "7df89d1a-ed3a-425a-abdb-7bc8b7e8dc8c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b76c955c-e866-478e-8884-8507c25c30a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e795a696-afb7-4385-9412-8df88ffc876d",
        "cursor": {
          "ref": "985b21a6-536c-443c-af2c-5f14342d44a7",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "934e99da-5c9c-4af1-aa78-b3ffeafdbaad"
        },
        "item": {
          "id": "e795a696-afb7-4385-9412-8df88ffc876d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4256c315-cf34-429e-94d7-f02eebcf51a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f9eee8-0650-4620-9c54-54c098e43989",
        "cursor": {
          "ref": "6a671ca5-c567-4bed-8c23-57f00b10e1b0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5d1ce7ca-aef3-4b21-bf2e-e5983da1ea3e"
        },
        "item": {
          "id": "59f9eee8-0650-4620-9c54-54c098e43989",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ab6ad94d-fb55-4c27-a88d-1b709cee10fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5307d83-b735-4c7b-bae0-68c20ffd98e9",
        "cursor": {
          "ref": "417bf328-c6ef-4403-8a17-9d1a617df083",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5869139c-1f95-4287-86a3-0416ede8ca44"
        },
        "item": {
          "id": "d5307d83-b735-4c7b-bae0-68c20ffd98e9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5235c34b-4b49-42fb-aafa-37327ff17393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597c9628-5fcd-4126-bb30-c10636ef0e0b",
        "cursor": {
          "ref": "73d6ebe4-9cdd-4119-aee4-0fbd3bc29a28",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0c912ccd-4a10-48f3-bcea-4d7b0b3aae8a"
        },
        "item": {
          "id": "597c9628-5fcd-4126-bb30-c10636ef0e0b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "aab56fc8-272d-40d7-8e18-b39fb79194a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebe237a-a92b-4c09-a896-fc101a381a59",
        "cursor": {
          "ref": "7dde0df2-8ff4-46a6-8c53-a504121b313f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cab0af48-06d9-47ad-8cc1-55028360ab28"
        },
        "item": {
          "id": "5ebe237a-a92b-4c09-a896-fc101a381a59",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "843b938a-d8ea-4fc4-a1d8-fb3032120dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c98ff1-7ff5-4a20-b96d-b36b06ed8630",
        "cursor": {
          "ref": "2494ba27-51a8-4a38-a2a5-8db3857dbd8f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a39156e0-e97d-4cbc-a4b7-b479f831a796"
        },
        "item": {
          "id": "f8c98ff1-7ff5-4a20-b96d-b36b06ed8630",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eedd21d1-563d-4dca-82fe-4d1fb3b97e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c70b09-7cbc-4101-a0ae-3bbd520986e6",
        "cursor": {
          "ref": "6c957391-2c5b-43c5-adbb-286b5483912d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ebc2a645-9917-47f9-ba75-d9efe4411b77"
        },
        "item": {
          "id": "62c70b09-7cbc-4101-a0ae-3bbd520986e6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fa72a6f5-e7ef-41bd-83d8-121ad4a987d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e1f21b-16ef-4aec-a1ca-0c71c61b4c3f",
        "cursor": {
          "ref": "261f1c6b-2b4e-4638-8a44-9a3919d9e10f",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c820a6a7-d0ac-46e7-87f2-5b1217e7fb32"
        },
        "item": {
          "id": "71e1f21b-16ef-4aec-a1ca-0c71c61b4c3f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "88b709ab-29dc-49e7-b2bc-357433df458f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1328d4eb-2d42-423d-b947-1d2c6af6dec8",
        "cursor": {
          "ref": "63c48c1b-11a8-4e6f-9544-475d99ac761c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "563eb3ea-9dd1-40d5-9103-3a4f0df91fc7"
        },
        "item": {
          "id": "1328d4eb-2d42-423d-b947-1d2c6af6dec8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7cd18a1c-2bb8-43fb-aab0-f9dd161cf435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfda02b5-3ee7-405c-ae4c-f8d0f7d1d3ff",
        "cursor": {
          "ref": "0f345053-ea0b-4ec2-8e28-f93158ed2bb1",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ad5a17cc-f7df-40c1-9517-45782e1013d9"
        },
        "item": {
          "id": "cfda02b5-3ee7-405c-ae4c-f8d0f7d1d3ff",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1a2376b2-f7f0-4f26-88a3-d7d3260d2ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e75892-ddd9-41d1-a5ce-8a757a9ec764",
        "cursor": {
          "ref": "e496c424-dc89-423c-ac80-e750a499a72e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "34cd1937-d8de-4bd4-b6fc-412ca3075028"
        },
        "item": {
          "id": "78e75892-ddd9-41d1-a5ce-8a757a9ec764",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "774468f4-975e-486c-9d02-521ef8bf3509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fd5262-e7ce-4cc4-b70d-6ced805b6de1",
        "cursor": {
          "ref": "3756d2cf-10ee-4319-88aa-40b9cc8057b2",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a86f31f8-791f-4d27-9d05-20da48178e8c"
        },
        "item": {
          "id": "c1fd5262-e7ce-4cc4-b70d-6ced805b6de1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "da2116ae-aaba-4c51-a90c-51f98e14b18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e189d0-3daf-486d-a176-b7c5915b8eae",
        "cursor": {
          "ref": "ee3e3099-34af-48f5-b63a-f3e9c58b8450",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "864029e0-d013-43c2-a7cb-257f3bf52ecd"
        },
        "item": {
          "id": "b7e189d0-3daf-486d-a176-b7c5915b8eae",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ba4ce3a3-72e7-4cf2-bd2c-e42849fb146d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999d9c83-6b7d-47ac-b7ec-68f1b88ba6e6",
        "cursor": {
          "ref": "e15db1a7-6529-438e-b4ac-47bdfcaa2fad",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "31b88b7c-cac4-4660-a37b-5b69215f2f47"
        },
        "item": {
          "id": "999d9c83-6b7d-47ac-b7ec-68f1b88ba6e6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "df92d686-0b54-4129-8806-cec24121233c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6818bf01-0338-447d-af08-6a5d3dc84641",
        "cursor": {
          "ref": "a5da2f8a-4484-4835-8582-fbc0daa50114",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "97a73a58-3223-4f64-9fe6-e04f2225d98d"
        },
        "item": {
          "id": "6818bf01-0338-447d-af08-6a5d3dc84641",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c0a40b94-1061-4fc5-838a-105b9d8c5efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e517f825-3996-4824-a089-23469c1dd0b3",
        "cursor": {
          "ref": "075c24c5-29c3-4eba-a7de-b7c0bafd2fd5",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "19a63db0-b7ce-4b1f-b923-e8e514b7cafb"
        },
        "item": {
          "id": "e517f825-3996-4824-a089-23469c1dd0b3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8ff83886-2f8f-4f57-88b4-919b3c8d62fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c47189-566f-4213-9a63-8e1695819f5d",
        "cursor": {
          "ref": "6d357427-53fa-45ff-9db5-102dd47d6dff",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a0a54f7c-3413-4fa3-8a89-36e2de097155"
        },
        "item": {
          "id": "46c47189-566f-4213-9a63-8e1695819f5d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ccb68ca1-6d06-44a9-87e3-77c49e4ca6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09175196-244a-4123-ba4c-9ccff8479b3c",
        "cursor": {
          "ref": "1b176ed1-9631-4ba2-80b8-119557e81aec",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dc6e9a89-51d5-40c5-addf-a1d47ce2192f"
        },
        "item": {
          "id": "09175196-244a-4123-ba4c-9ccff8479b3c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "30b60a11-9fab-421e-ae09-420736c2af51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ec01d9-026f-4af3-be37-fb8d8874d047",
        "cursor": {
          "ref": "1bdf92f7-7690-48ee-b7d0-beb9937e7f0a",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f3bb458c-5137-4aab-be6f-61fc9f8e9e08"
        },
        "item": {
          "id": "44ec01d9-026f-4af3-be37-fb8d8874d047",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7b304fbc-06c2-4910-bda7-c18a3d76170d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b2c8b2-9c46-4f36-a37b-9189fe92419f",
        "cursor": {
          "ref": "30e8a676-2fca-4d9d-8d81-380140cfaa55",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "21d13d62-9c71-4b4b-b13a-8707d9d8cc97"
        },
        "item": {
          "id": "a9b2c8b2-9c46-4f36-a37b-9189fe92419f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "71467368-e002-4aec-b846-1a321fe6d4bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79cd9f2-917e-45cb-99c9-54f3c710fcd3",
        "cursor": {
          "ref": "9c6543f6-e305-444b-b1a2-03afaf594c34",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "661c5cc7-5d1d-4ecd-98a2-28b113590869"
        },
        "item": {
          "id": "e79cd9f2-917e-45cb-99c9-54f3c710fcd3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9a903e09-63a5-4222-beeb-3109e4966d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc729481-ff37-4b0b-a06a-cf578d485cc0",
        "cursor": {
          "ref": "6f00e053-4b43-4030-8830-2e06d939be0c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2c7a547f-c758-4c5b-8a98-ad95fecbb3c6"
        },
        "item": {
          "id": "cc729481-ff37-4b0b-a06a-cf578d485cc0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dff3c74a-2dd3-4930-903c-2720549e9c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a290fe59-8a4a-4ad2-9524-147d90929e3e",
        "cursor": {
          "ref": "0346ee7e-7bcc-4359-a46c-e434e116a294",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dae24926-3613-431a-9f7d-136c558471fb"
        },
        "item": {
          "id": "a290fe59-8a4a-4ad2-9524-147d90929e3e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fbc40eab-9af2-4fa1-a225-8da1e24ca4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93717d6-9ee3-49c2-9a71-db2998a37891",
        "cursor": {
          "ref": "cab3dc67-2aaf-40b8-b9bb-8b17bb411aad",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1ea469c6-1865-4a25-9712-46d5379fb2b7"
        },
        "item": {
          "id": "d93717d6-9ee3-49c2-9a71-db2998a37891",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "89e3a566-9d0f-4fd8-bb0f-486c8e31e8d5",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "e747cfd3-3f59-4018-b7c7-f441f57cbe6c",
        "cursor": {
          "ref": "0706d0ac-d89d-4111-8dc4-650d71ebab3d",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "29863dc2-3b0d-4043-97bd-6be5fef7b606"
        },
        "item": {
          "id": "e747cfd3-3f59-4018-b7c7-f441f57cbe6c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8867b550-d018-45be-8831-db2594c26429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82557f2e-3910-40b2-aceb-cccf3222e2fc",
        "cursor": {
          "ref": "b49b3074-5b67-427b-8071-9bdd802794df",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a9f04bd5-8044-4f2c-9ebf-9c2d9a2e2ee8"
        },
        "item": {
          "id": "82557f2e-3910-40b2-aceb-cccf3222e2fc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "85f50b04-a3ed-4f15-acc4-4c99361197aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6ecb09-702d-48df-b51a-1381050a4302",
        "cursor": {
          "ref": "8270452d-12ea-41a8-b664-140e18f9a90e",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5677f8eb-d29d-43e5-a0a9-5cd8bced5f5c"
        },
        "item": {
          "id": "3f6ecb09-702d-48df-b51a-1381050a4302",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7d3773f3-338d-4525-95aa-35cc514c9a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42382bfa-2ae5-4206-9517-b374de7047b8",
        "cursor": {
          "ref": "bce3681e-327a-4b2f-81ad-3fb7262b72ce",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "707f3f7f-24c3-4ea9-8980-7cc2b7b0f58c"
        },
        "item": {
          "id": "42382bfa-2ae5-4206-9517-b374de7047b8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "84913787-8c1e-44d6-8404-4cf202e06429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25170fd4-9594-41dd-8754-21db3e8631a3",
        "cursor": {
          "ref": "7f3a9c6e-c0ad-47d7-9693-45c3b0236f69",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "53d18412-2578-475b-8501-7d80e627b166"
        },
        "item": {
          "id": "25170fd4-9594-41dd-8754-21db3e8631a3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "cb14493e-1918-47bd-9306-8023d10db41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c0a705-b094-4ade-9e84-e6391111d8fd",
        "cursor": {
          "ref": "575ecf00-4c86-47f4-8b0c-f363d93234f9",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b0b24c3c-6906-4148-aeca-b994b3f63c8e"
        },
        "item": {
          "id": "37c0a705-b094-4ade-9e84-e6391111d8fd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e0bea304-0fb6-4886-a9ec-185dbb65f645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c898b3-4a49-40fb-9cbd-8c2e797dc409",
        "cursor": {
          "ref": "c18e17b7-1a7e-4a73-98d1-ad33b1246668",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "22fd6dfb-cfa7-4bef-8ef6-12655da00a9e"
        },
        "item": {
          "id": "49c898b3-4a49-40fb-9cbd-8c2e797dc409",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "eaf3d6b7-223e-43a5-895b-a712f1e5fde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2317c7-52e5-4bfc-a35c-73c011f6e980",
        "cursor": {
          "ref": "c6375077-801f-44af-aee7-187909d358a3",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c6a1fb8a-fdd3-4231-ad2e-41c201b5c88c"
        },
        "item": {
          "id": "0c2317c7-52e5-4bfc-a35c-73c011f6e980",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "dd087684-939e-4192-ae3f-94b234c59bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33407082-93b1-47a7-9e6a-0a1544ca7856",
        "cursor": {
          "ref": "34c0bebc-a119-4c85-806f-9a41a766a87b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e34d9f9b-fd2d-4476-bc84-05805b759aef"
        },
        "item": {
          "id": "33407082-93b1-47a7-9e6a-0a1544ca7856",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1f283b0a-495b-427d-ba6b-06d380430832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d959abe-cd98-488b-9c73-988f446515c0",
        "cursor": {
          "ref": "89ef3615-b4c5-46b4-aad0-54e2b81ffdd3",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5ff92316-a4eb-4841-9cd4-d1dd4cb56d13"
        },
        "item": {
          "id": "9d959abe-cd98-488b-9c73-988f446515c0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cc785140-748a-441f-93e5-f14b3b49663a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade6d304-2d59-43c9-a4a1-754b2bad770c",
        "cursor": {
          "ref": "9d6e1f3b-0fb0-446c-b8ab-fd4e84366c99",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f9bc86a3-9aab-46f9-bca5-14027ea1be3d"
        },
        "item": {
          "id": "ade6d304-2d59-43c9-a4a1-754b2bad770c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "726d5b6b-7753-4c02-a283-f716ca672af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48921d40-358c-49d9-9ca1-0bc6de65c9b2",
        "cursor": {
          "ref": "cd0e295c-74ce-4adc-9a74-1ce414249e28",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4dbf1fce-7f1f-4812-81a5-998e210dcded"
        },
        "item": {
          "id": "48921d40-358c-49d9-9ca1-0bc6de65c9b2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "372767f4-2fda-40b8-a3c6-425461b8ac76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d837ff0-396c-4b4f-9893-2867d918590b",
        "cursor": {
          "ref": "8ec0542b-3602-41d4-978a-2090fb2b5bbd",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "87e20aab-36b0-42fe-bccb-76bd9dac82ba"
        },
        "item": {
          "id": "5d837ff0-396c-4b4f-9893-2867d918590b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6bcc47a0-f481-42e5-8aa5-7395f4b3d1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58fa2fa-b041-4605-922a-472ccdeec8c3",
        "cursor": {
          "ref": "4bb832bf-97b8-4e2c-b7c9-0760be1a5eb8",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "788cebd7-f613-4de6-913a-357a08c09ad3"
        },
        "item": {
          "id": "f58fa2fa-b041-4605-922a-472ccdeec8c3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "33384af3-1556-4356-8d16-31a43b4a8151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a95989-1bc5-4185-bf78-843d245925ad",
        "cursor": {
          "ref": "f2a9526d-6661-4bde-a821-1b1ebeb3cca4",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "080d5877-8bce-42cf-90b9-cde2ae3d88b7"
        },
        "item": {
          "id": "06a95989-1bc5-4185-bf78-843d245925ad",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "702123b4-0c9a-4b21-8158-c3d3d2eedd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca42a07-9eba-4a75-a644-887a2533ab0c",
        "cursor": {
          "ref": "b52cfa0a-6a3e-4716-84bb-13a0936d0777",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b1387a12-d02f-4b50-8419-3f174dd8e857"
        },
        "item": {
          "id": "fca42a07-9eba-4a75-a644-887a2533ab0c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cb9f8b1b-85bc-452b-8659-a2c606c91276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435a7867-5e36-431a-9b33-c4e607df81ae",
        "cursor": {
          "ref": "88df68f7-4d6d-40f6-ad24-766c5b28d088",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "631d9b10-9bf3-4c49-a424-434bb5429eff"
        },
        "item": {
          "id": "435a7867-5e36-431a-9b33-c4e607df81ae",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "eb2aebe3-aa47-406b-91b7-3c717f017d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5e905a-dbc4-4315-8906-de8a767f476d",
        "cursor": {
          "ref": "9da71b94-b2cc-4a9d-a1cd-af85c2256015",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "24e0b85b-7aeb-4d9a-b5b2-4c2243226ffa"
        },
        "item": {
          "id": "bc5e905a-dbc4-4315-8906-de8a767f476d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1c0b269d-a81a-427c-888a-90c10cdb2060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a007ad73-76c7-4df0-bfd7-49771f8fb563",
        "cursor": {
          "ref": "19b1e082-e37c-41c0-a139-afc7f33a1d12",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1f0b63f1-13c7-476d-bf4c-9e58310a9168"
        },
        "item": {
          "id": "a007ad73-76c7-4df0-bfd7-49771f8fb563",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5bd69372-026c-4cdf-8578-1f3cca2bfa51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc657b6-baec-4db4-abe5-ec21d85f6c51",
        "cursor": {
          "ref": "df868b56-0072-4863-bf6a-e0a0c97721d7",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b93d7884-4d81-4c92-97fe-1619a313da6a"
        },
        "item": {
          "id": "9cc657b6-baec-4db4-abe5-ec21d85f6c51",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "36a3abe6-9d36-4f4c-838a-bafac13ac525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a046bcc9-1b0e-4082-ac1a-2e96b08ea604",
        "cursor": {
          "ref": "14d00fe4-45b8-41ce-825a-687a87bad79e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c9243673-5a73-4ec8-a194-a493615f0e44"
        },
        "item": {
          "id": "a046bcc9-1b0e-4082-ac1a-2e96b08ea604",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "216a8d21-e804-48f4-b208-a0bb2ce82790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be66efcb-cb4d-4db5-b67e-72c630d8a861",
        "cursor": {
          "ref": "6bf59a77-b26f-4e11-ac1c-f30a3f6af7e1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e46ebbd5-d5bf-4284-b455-f65c9e78f50f"
        },
        "item": {
          "id": "be66efcb-cb4d-4db5-b67e-72c630d8a861",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e9983df7-50a3-4e84-bdc2-38dce80d65ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5900e23-c7f2-4b06-a67f-a11835779e2b",
        "cursor": {
          "ref": "d156e6d6-8e19-445f-b278-b51484aa5cdb",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ab8bd145-cf96-4c50-b2ca-d4dede636c0f"
        },
        "item": {
          "id": "f5900e23-c7f2-4b06-a67f-a11835779e2b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e4c339d5-ee67-4892-b4c6-193586fce8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e62606a-eba2-42a0-bc5f-7bdcfcdd1a42",
        "cursor": {
          "ref": "b3d898b7-259d-4675-bbbf-13a82fc4a25a",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e0d2d67e-3720-4aef-8325-61ff3ac381f0"
        },
        "item": {
          "id": "8e62606a-eba2-42a0-bc5f-7bdcfcdd1a42",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d3bbf58d-6961-4f4e-bb86-e0a83593b9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d14bef-3003-40c1-b052-ab54bbde974c",
        "cursor": {
          "ref": "65ab4fec-353b-4c9d-a9ca-1d0cc9d61d09",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "010d98ed-885c-438e-a9ee-9107e4e4e79b"
        },
        "item": {
          "id": "32d14bef-3003-40c1-b052-ab54bbde974c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4ab69b72-8753-4e7e-965f-993309adc26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fc0ed2-7b14-4ec0-b005-0e17590879a6",
        "cursor": {
          "ref": "70a61e45-147e-4444-8281-b9ac70ca3dd1",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bdb414d5-7afa-4040-80a9-568ee2ef08e9"
        },
        "item": {
          "id": "b1fc0ed2-7b14-4ec0-b005-0e17590879a6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c53429f8-9147-4d40-a6be-aba647915e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ea4b2a-bf60-440e-ad1f-a0793cc04e77",
        "cursor": {
          "ref": "2032c334-7699-4df1-87d1-80f8ddd76186",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6b1696bc-be10-4b0f-b8d5-728718e81567"
        },
        "item": {
          "id": "73ea4b2a-bf60-440e-ad1f-a0793cc04e77",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cc80322b-346a-4296-adb9-a0f2bd1ee253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6726cc-83aa-483d-9161-667ff8bee2e3",
        "cursor": {
          "ref": "9696b0f0-5175-4784-9fce-d99198c0698f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5135af09-f527-4235-9b57-5cad1f0f7ea4"
        },
        "item": {
          "id": "0d6726cc-83aa-483d-9161-667ff8bee2e3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "61faee43-6e68-40d4-954b-31f0d935138d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7010375-0651-4854-ba87-4dc62eb141a4",
        "cursor": {
          "ref": "d607e768-328e-4e98-becd-811d331af448",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4c4fa20a-a133-437b-a92e-d60059073c5c"
        },
        "item": {
          "id": "a7010375-0651-4854-ba87-4dc62eb141a4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2b26117f-7127-4861-bc6a-cc178da06d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006dcf1d-cf08-4c92-a9a3-f99c473834f2",
        "cursor": {
          "ref": "a86f5b7d-201f-4162-978a-fd76d89189ed",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b486e9d1-37c6-4f19-9150-c2818a728b8c"
        },
        "item": {
          "id": "006dcf1d-cf08-4c92-a9a3-f99c473834f2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1d4456d1-4621-430d-9474-8d92574290c8",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "fff56bd5-6e7a-4b5d-8c14-ea9fa8e313be",
        "cursor": {
          "ref": "82849724-2c98-4369-912c-1eea25b22366",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4b7aca51-adb8-429d-b721-55fcf7ef7fed"
        },
        "item": {
          "id": "fff56bd5-6e7a-4b5d-8c14-ea9fa8e313be",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fe615c3a-e1b3-46e2-a808-707b193ff968",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "673bcf81-6a7e-4034-af91-9fede44e1894",
        "cursor": {
          "ref": "b3d6d2ed-bfb1-4090-9a08-04a0a8bc82ad",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "97b42c48-3617-4e24-9632-db0cc4a934bd"
        },
        "item": {
          "id": "673bcf81-6a7e-4034-af91-9fede44e1894",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ea89f9da-dd86-442f-be84-42eb73702437",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c56f86ec-b0dc-44c2-8c55-14403ecaa8fa",
        "cursor": {
          "ref": "aed8359a-2e59-4208-94f6-80751fd971e9",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4d8503c4-7685-4ab6-a891-3a6d57841b7e"
        },
        "item": {
          "id": "c56f86ec-b0dc-44c2-8c55-14403ecaa8fa",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "eb767215-fa63-4ccd-9fa7-15fae56aa212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986778b4-2b4b-4bf5-ae78-5052ddae6e27",
        "cursor": {
          "ref": "aaa38253-52a6-4ba2-ba30-1ddbc18e3332",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c16f9f3f-676d-4626-a644-f6cbc65f8405"
        },
        "item": {
          "id": "986778b4-2b4b-4bf5-ae78-5052ddae6e27",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b3b64a19-043b-4753-b8f2-6a364b6e8c6b",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ab76b1ef-d689-46f4-aaa8-64f1ec9884ac",
        "cursor": {
          "ref": "205bb406-d6ee-451c-a68f-45f8aed5d4b1",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "796dd7a8-fc89-4041-b16c-39fa7ca6e302"
        },
        "item": {
          "id": "ab76b1ef-d689-46f4-aaa8-64f1ec9884ac",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2fe99f4c-531c-4d00-8122-52c7328b0821",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4fb23c40-cc0b-477e-8dae-f4242d722f4f",
        "cursor": {
          "ref": "2b66e4f7-ebc9-4388-8d7f-76ea0360c696",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ee787e21-af00-4e84-81f6-0c8637469898"
        },
        "item": {
          "id": "4fb23c40-cc0b-477e-8dae-f4242d722f4f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b8af51c7-000d-4634-90e9-9a279c059e33",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8ac7bc50-349b-4d61-9c3f-8bf58bd21314",
        "cursor": {
          "ref": "309499d6-1940-4ee7-86cd-a41313431408",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "deb1dc03-b794-4756-a3ba-891175ba5261"
        },
        "item": {
          "id": "8ac7bc50-349b-4d61-9c3f-8bf58bd21314",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bed41a6b-4655-46b9-aff6-c934f723c105",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2c12fd34-acca-41c4-a11c-21d11f2eedad",
        "cursor": {
          "ref": "4fb8ffad-8765-4a48-95b2-e6ce078a3052",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2ce55847-1c36-4237-bbeb-abacdc77701b"
        },
        "item": {
          "id": "2c12fd34-acca-41c4-a11c-21d11f2eedad",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a372e496-83c3-4518-ae38-f31e29d1cbe8",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "c77bbbc6-7397-4318-aac5-e9f17d79c8e3",
        "cursor": {
          "ref": "e3147009-82f6-4d34-8087-0c53f76eafea",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5de69770-0ea0-4fff-addf-4922856d14c9"
        },
        "item": {
          "id": "c77bbbc6-7397-4318-aac5-e9f17d79c8e3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "30b9438c-77e2-4d1d-a0b8-12308e69d3eb",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "80da0700-c4dd-41fc-9124-cbda6205417c",
        "cursor": {
          "ref": "e2d0c0de-9e07-4297-bf4b-c903b5dbb788",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "19c72993-5cc8-4bee-99aa-0d71982cf253"
        },
        "item": {
          "id": "80da0700-c4dd-41fc-9124-cbda6205417c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "db88150e-0f87-4304-90c5-cd2809181bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ab448e-0985-4699-a490-53a57344470f",
        "cursor": {
          "ref": "1fcc0e44-b44d-4c76-b41d-dcc277751201",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b6216934-4f8e-4a2b-ac7e-73a4da51e84e"
        },
        "item": {
          "id": "13ab448e-0985-4699-a490-53a57344470f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3c2f5979-cf84-4d1b-acae-66255eed3d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4047c73-749a-4526-b802-ebc3cd204352",
        "cursor": {
          "ref": "42fd1de8-3312-481b-aeea-198f3ef06652",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3fafd1de-bfc7-4f6f-b196-0b9917fa383b"
        },
        "item": {
          "id": "d4047c73-749a-4526-b802-ebc3cd204352",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2bb34ddd-0b4a-48eb-b9f5-e87e4289b649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323a8f01-b97c-44ff-bfff-4eec03fa96fd",
        "cursor": {
          "ref": "c9fdadf0-04a9-461d-b813-7264d5d130f5",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "83ac097c-32c6-4a62-bac8-c3d5990b8228"
        },
        "item": {
          "id": "323a8f01-b97c-44ff-bfff-4eec03fa96fd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c31e8ef3-3e30-4655-bdc8-8fd3506cb3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34fb739-c1d7-4c55-be44-ef6798102e31",
        "cursor": {
          "ref": "8cf0521e-cfa7-4770-bff4-fc71c288a069",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "970d1e37-0999-4de1-98a2-64b20e165355"
        },
        "item": {
          "id": "c34fb739-c1d7-4c55-be44-ef6798102e31",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "322d4d5b-d35e-4c4e-97f5-8db0b570feb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03283962-0b4d-4785-863e-31aeea2b851b",
        "cursor": {
          "ref": "0e7d17bb-f02b-401b-95c7-afd0c27e5cee",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4415dd0c-9ea1-4e2d-9fd5-98fe95cd08fd"
        },
        "item": {
          "id": "03283962-0b4d-4785-863e-31aeea2b851b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fb9cb3b3-8212-48d5-9389-cfe01bdb9f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1f72cd-1e9f-4373-9cb8-57f44fcbf949",
        "cursor": {
          "ref": "5b163d07-10f2-43d2-8235-c2832ee58f47",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f934dcb3-a18f-49e8-9e35-45abe789d340"
        },
        "item": {
          "id": "da1f72cd-1e9f-4373-9cb8-57f44fcbf949",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "84e7fd0a-ac92-479b-8ef0-383296e05c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f4be44-e974-4a58-b4fc-8d7df4935dbe",
        "cursor": {
          "ref": "87023428-f228-4cd0-bd83-c8aa27c8e2c5",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "731be875-f5af-4881-912c-60e7ec9c05fa"
        },
        "item": {
          "id": "83f4be44-e974-4a58-b4fc-8d7df4935dbe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "879acacc-60de-40c9-8da8-832f9755bb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9093a5-0755-4030-b3e8-32a70c6f2ae1",
        "cursor": {
          "ref": "bbb00dcd-bee0-4793-8502-ff1778db95e9",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "89744a80-0b81-4556-b035-8ea155eeef1f"
        },
        "item": {
          "id": "7d9093a5-0755-4030-b3e8-32a70c6f2ae1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "24902371-b4ee-4092-84c3-076d71dd30ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ff8b19-2ca6-4d3d-a557-ea59a7554437",
        "cursor": {
          "ref": "9244a3e8-88ab-4e21-b20d-e3ff422fe278",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cac95fe2-efa7-46d1-910a-72b8652dcb11"
        },
        "item": {
          "id": "c0ff8b19-2ca6-4d3d-a557-ea59a7554437",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8279b4ce-5a68-45f3-bee5-648f92c07155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcf9673-91c0-43c6-857e-a6740b9852c7",
        "cursor": {
          "ref": "356a55cb-7fdb-41a2-906d-d6e0a6a9ffb3",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "af7ef3f1-1e65-42ab-9fa6-97de8394b26a"
        },
        "item": {
          "id": "bbcf9673-91c0-43c6-857e-a6740b9852c7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ddad8edf-c2fb-4735-a773-63021fcfa4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbf9818-1238-473e-91ea-cd1e040ad051",
        "cursor": {
          "ref": "5a973d73-8bd1-4ab3-a9e4-dcd572805666",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4353d8fb-ca63-45ef-9070-322de344fdeb"
        },
        "item": {
          "id": "0bbf9818-1238-473e-91ea-cd1e040ad051",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2384c446-529e-404d-88a5-d7f832f82ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac39bc6-2772-499e-831a-1f0655ffdfe1",
        "cursor": {
          "ref": "dcecfe44-c263-4da9-b00f-1861a1c4a07b",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e960a658-d1c5-4c28-9ba1-4b1e454dbac2"
        },
        "item": {
          "id": "5ac39bc6-2772-499e-831a-1f0655ffdfe1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c69dc8c8-ee5a-4595-a1fe-bfa30a15033c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d06a7db-a52b-48c4-b012-c04a84403d19",
        "cursor": {
          "ref": "529572c6-7c05-4406-9cb8-4973779710c2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a82e4d70-3ca5-46a9-afe5-1e3f31d55dcf"
        },
        "item": {
          "id": "3d06a7db-a52b-48c4-b012-c04a84403d19",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c5fb4f9a-9088-4583-857d-dfb5a1a00aa0",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7e6c5c5d-fa5f-4d5a-b3bf-74d11d43f17d",
        "cursor": {
          "ref": "683b519c-7702-4f2a-a0e0-5837733a6555",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a4ec75c4-23a9-4b74-9848-7ba91bab848d"
        },
        "item": {
          "id": "7e6c5c5d-fa5f-4d5a-b3bf-74d11d43f17d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9a810ba9-074d-41d6-b3e3-3c4ef3740114",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "42d260eb-5377-4d3c-a252-9b712086979e",
        "cursor": {
          "ref": "39cd86c8-8ff9-4321-8976-22b343ba6727",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6dab53ae-4f7f-46b6-bcc5-bd213dbe2044"
        },
        "item": {
          "id": "42d260eb-5377-4d3c-a252-9b712086979e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cb159fc1-2810-41c2-8874-aed4861779f9",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "eb90306e-35e3-49f9-bd0b-0431408c4e01",
        "cursor": {
          "ref": "e86054dd-1b19-4925-8b3b-a16cd2e355f6",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c4e2bebf-ac29-48c1-86cd-20a63244957b"
        },
        "item": {
          "id": "eb90306e-35e3-49f9-bd0b-0431408c4e01",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "03fe6262-9587-44f8-910d-936f75b47990",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "cb0f292f-9090-4ca0-866f-675972f89e6d",
        "cursor": {
          "ref": "83e3302e-4246-441d-b077-397dd570af75",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e4104a54-bb65-4283-a15e-debccca4d216"
        },
        "item": {
          "id": "cb0f292f-9090-4ca0-866f-675972f89e6d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "56e273c8-26d5-4e60-b99b-6d2766f18e53",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "036dddf0-4248-4cc3-b61d-bb6412211a13",
        "cursor": {
          "ref": "1ae33527-dad9-4bb6-9ba7-b32907bd5750",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2233398e-86c8-4177-973a-e23d5d24cd8f"
        },
        "item": {
          "id": "036dddf0-4248-4cc3-b61d-bb6412211a13",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f5f403ae-6913-4189-b9c7-8690cddab18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fd4be1-6a5c-4877-8b87-e272b7cf5263",
        "cursor": {
          "ref": "13ed271a-b6fa-4441-9af5-ad8a89fcf3f4",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "80688242-f076-450b-8e39-ce7d1ca59c76"
        },
        "item": {
          "id": "35fd4be1-6a5c-4877-8b87-e272b7cf5263",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e76562ca-df89-4ddc-bddb-f0cfa7cd2fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c01cd1a-3ed2-4f31-922c-92894a3755c3",
        "cursor": {
          "ref": "d7c5d916-a5c6-4a17-82c4-08a59ec18063",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "98ac820e-28ee-4db5-a172-1246f34e0b98"
        },
        "item": {
          "id": "6c01cd1a-3ed2-4f31-922c-92894a3755c3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bae10986-637d-4eba-8445-009b40a60b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c310d70-76e9-4771-87bd-87b346ba4a96",
        "cursor": {
          "ref": "05f33d19-8daa-42f8-b811-2d3b57e0cacc",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "826769d1-a2fd-4562-823c-9d07d3c1101a"
        },
        "item": {
          "id": "8c310d70-76e9-4771-87bd-87b346ba4a96",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6e7ed6e4-a492-493d-b4b1-f5feff1074bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56562cdd-59b2-4a09-bdc8-6103002e17d3",
        "cursor": {
          "ref": "94d3d8d3-f0e3-44cd-9c63-84f88acbf447",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4a91bd0e-270c-4855-adc6-98e6069370f8"
        },
        "item": {
          "id": "56562cdd-59b2-4a09-bdc8-6103002e17d3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e3419028-270b-4aa2-97e4-17dddc25a720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b4e654-fbdc-440d-9e36-b5d0eac63f16",
        "cursor": {
          "ref": "b6dcb9c4-f454-4cc1-903d-7ecda8b0d10e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8519bc85-d2a7-46dc-ae3d-7c191dccf6a5"
        },
        "item": {
          "id": "60b4e654-fbdc-440d-9e36-b5d0eac63f16",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e632b213-8b49-4e8f-b380-7da4b520fc7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a0e0a2-ad1c-4fdd-b8c5-424ef4169911",
        "cursor": {
          "ref": "62a53c02-7e19-45aa-b454-635ac0b872da",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0c509a30-60cb-450d-9312-62ecce62529f"
        },
        "item": {
          "id": "06a0e0a2-ad1c-4fdd-b8c5-424ef4169911",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9a556502-21fe-46bc-84a1-b2cc67ca917f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33180b9b-cd96-4568-890c-095cd528eec3",
        "cursor": {
          "ref": "b6c97c36-5fb8-4b75-ab31-badbe12bc918",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3cd50f6f-678e-4b41-9543-11ae53f9525a"
        },
        "item": {
          "id": "33180b9b-cd96-4568-890c-095cd528eec3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c0580b72-1798-41be-b052-f216882b7109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681cb4af-6037-456b-88ba-529fcfd15630",
        "cursor": {
          "ref": "2dffc0a9-5e82-4076-b91a-c40a94954edb",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9e94db37-b3f0-4fce-9dc0-ac1f48a079e9"
        },
        "item": {
          "id": "681cb4af-6037-456b-88ba-529fcfd15630",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "29baf090-8981-4e7a-9d5a-ddfa21a251c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e07baae-46d7-47a7-89c5-058493921a2a",
        "cursor": {
          "ref": "c78bfcfb-9ed0-4984-8f78-951e4e92bac7",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26888fe7-32da-476e-811f-60f354a7dfb3"
        },
        "item": {
          "id": "6e07baae-46d7-47a7-89c5-058493921a2a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cbfe8052-9e32-4a73-8610-a849569c51fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e47bf9-f8a3-439c-9a38-20e1737b47fa",
        "cursor": {
          "ref": "e7254553-7220-4cb5-9b42-05454c84b18d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "85a363c9-4e5a-4db7-9b0f-c14b5bdcfd84"
        },
        "item": {
          "id": "02e47bf9-f8a3-439c-9a38-20e1737b47fa",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "acbe2ecb-e1fa-4f9e-bf4e-6a4372cc20dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd37ab2a-3b4c-466d-ab21-99f2fb8e7cfd",
        "cursor": {
          "ref": "077007f8-9b77-484a-8f46-0a90362ceef8",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8d277e17-2591-4db9-baba-d004c193ce0b"
        },
        "item": {
          "id": "bd37ab2a-3b4c-466d-ab21-99f2fb8e7cfd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d4da7e22-3315-4795-a73f-0d8609eb5248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65f8714-f61f-43b4-82ad-e14e39e0b2e5",
        "cursor": {
          "ref": "b7c18497-f16f-4f84-bf49-91420a496cb8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "39029a4f-e8dd-4ca3-8a30-f74f62f418f5"
        },
        "item": {
          "id": "e65f8714-f61f-43b4-82ad-e14e39e0b2e5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fa5e56f3-0a81-4699-ad97-534c41172a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f174cb89-0d81-4d76-86f1-3edc9138eb8a",
        "cursor": {
          "ref": "1fbd62e2-f4d0-4d4e-980f-c2ed8f22ead8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "be9f2320-03fa-4fb6-9567-b48660af3246"
        },
        "item": {
          "id": "f174cb89-0d81-4d76-86f1-3edc9138eb8a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a2efaba8-7676-42a9-a55b-5f22bf96e8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65037959-9515-402d-a580-9e902f77fbb0",
        "cursor": {
          "ref": "b1df7b8b-f27c-4884-8c8f-c7a5f0a7b2ff",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7412305a-9965-47ed-b68c-f56c6247b3e2"
        },
        "item": {
          "id": "65037959-9515-402d-a580-9e902f77fbb0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f82ca361-1f22-47a6-b9e0-52126fe6a7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481afda5-e467-450c-a130-c2af56e22213",
        "cursor": {
          "ref": "285efcc1-e21c-4976-9a70-1ed4e64b6d53",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8fc46767-395a-425f-94d2-c97e9263d00b"
        },
        "item": {
          "id": "481afda5-e467-450c-a130-c2af56e22213",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a03f3a0d-3d08-41c3-bae7-0c1494d7e718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fbfd3e-4e58-4360-b76f-8fc142e557d0",
        "cursor": {
          "ref": "ddf0b796-f505-4e1c-a59e-77ecd7f2272b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "fa8d8dec-078e-4951-a7d8-ce2281029b88"
        },
        "item": {
          "id": "60fbfd3e-4e58-4360-b76f-8fc142e557d0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9674bdcb-cf06-4d58-9df1-3e761589e9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731f3b2a-70f9-4b34-9628-954188136694",
        "cursor": {
          "ref": "7452f0e2-e493-45fd-8ecc-5fe0964b718f",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "18b62032-a4c1-4ffe-98ae-e0551acf3ac1"
        },
        "item": {
          "id": "731f3b2a-70f9-4b34-9628-954188136694",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cd972c60-47d6-49f8-85c2-9518d8254215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a42f48-9b18-477c-bcba-bb86dcdbaf99",
        "cursor": {
          "ref": "29bb42af-b3f3-49a3-9241-09a4489c73ec",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "e73a340c-ff09-466c-badb-ac54070b1577"
        },
        "item": {
          "id": "61a42f48-9b18-477c-bcba-bb86dcdbaf99",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ab0acadc-8494-4826-b203-102944a8f65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a24bb5e-97c0-4a3e-8732-60a407add8d9",
        "cursor": {
          "ref": "b66e070d-a2a9-4b11-a3ec-3cc16d50e200",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "cd6e354b-369e-4c46-8393-0c7f451f5e3a"
        },
        "item": {
          "id": "4a24bb5e-97c0-4a3e-8732-60a407add8d9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6f5e521c-d5f4-4958-b321-f2e901e165e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0697422-c8a4-4470-8779-13698181ca50",
        "cursor": {
          "ref": "4990c0c9-a752-47dd-b24d-5430ff27f3d6",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "efd9428f-4363-414a-adff-df2c761c0200"
        },
        "item": {
          "id": "c0697422-c8a4-4470-8779-13698181ca50",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "27cb3943-63b8-4746-8f76-6bc5de68b0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b668c863-905b-45cd-b639-61d0044668d3",
        "cursor": {
          "ref": "dd0ff343-7f48-463f-993e-1cf618b1df16",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d5bdcc2f-3dec-4361-9fa8-6a45d6a0f328"
        },
        "item": {
          "id": "b668c863-905b-45cd-b639-61d0044668d3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a8c2e07a-4a37-4410-890d-953e1d850803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4c95b7-38f2-40c7-a72d-60e1d537557a",
        "cursor": {
          "ref": "145f1f85-5d91-4d0b-9b13-baf75ed3a6f1",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a6690c02-f30c-4525-9f34-23b3fbdffc3f"
        },
        "item": {
          "id": "6f4c95b7-38f2-40c7-a72d-60e1d537557a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dd218fc1-95d4-4676-bb32-6cbf7e63b0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97658721-1613-4441-8ee1-d7ec48912421",
        "cursor": {
          "ref": "89efb73b-98bf-4c7b-9f18-a5c5f0893313",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a653a572-c88e-4449-9c40-0b4e1f9a80b4"
        },
        "item": {
          "id": "97658721-1613-4441-8ee1-d7ec48912421",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0a4480bb-ba19-4fcf-ba48-2349c9e28394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932b7b80-bceb-4075-91a5-010ad124cf90",
        "cursor": {
          "ref": "bfcf98b8-020b-48e8-80e1-7cc011153728",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a5ef61b1-89da-4028-89a5-1d8711cdddb1"
        },
        "item": {
          "id": "932b7b80-bceb-4075-91a5-010ad124cf90",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "22a690d8-de07-466f-8be4-ed835841a02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166c7faf-48af-40cb-bc13-2fbeacdacdf6",
        "cursor": {
          "ref": "010c81ad-c3ed-477b-ad75-3300036e2e57",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "cf8bcccd-9c82-4075-a6a6-fc921c8234a8"
        },
        "item": {
          "id": "166c7faf-48af-40cb-bc13-2fbeacdacdf6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cdb327b3-6d11-4877-9e19-b63ea90c72c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6676d2-7d70-4473-b2ee-b5c115869fc3",
        "cursor": {
          "ref": "76f4e941-a422-47d9-be92-2864045fe1a7",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3e0c90ed-28be-43b7-8c2e-e640c5baf783"
        },
        "item": {
          "id": "6d6676d2-7d70-4473-b2ee-b5c115869fc3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d9d42244-5727-4f54-9efa-ebfb6490b36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281994d4-11e1-4a2b-bb05-4ffe90c82c4b",
        "cursor": {
          "ref": "8ffed537-8a63-456a-8062-8401aa34c00b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "cb09f88a-c613-485d-b7b5-13265a25d85f"
        },
        "item": {
          "id": "281994d4-11e1-4a2b-bb05-4ffe90c82c4b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e933fb72-134a-4e51-99cc-b22a567fc045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4120feb-6c35-435b-8d4b-8dc2e4f0169d",
        "cursor": {
          "ref": "36a9f394-2de0-4ae5-8806-66578539d76c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1ba18a2b-b758-4cb6-81af-acab43c103aa"
        },
        "item": {
          "id": "b4120feb-6c35-435b-8d4b-8dc2e4f0169d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "64ae4f77-70bd-46ea-a0c7-66601fb9948c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e72474-f136-4de7-b6a4-f339874a821a",
        "cursor": {
          "ref": "73cefc1c-2a75-4172-baf5-5e59450f00d9",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4e366ff9-1dcb-4d1c-a0fc-3695e60cb3c3"
        },
        "item": {
          "id": "e9e72474-f136-4de7-b6a4-f339874a821a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d8931c52-5d49-416c-a1f6-9f88bc5d7114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd3424a-4f19-4c89-8d79-76eb88a7d5a5",
        "cursor": {
          "ref": "9132309d-5c67-444f-acf4-ab0783a64ffa",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2b3946c4-869b-46b6-b7ce-d23931d1898c"
        },
        "item": {
          "id": "0bd3424a-4f19-4c89-8d79-76eb88a7d5a5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e675a243-a926-4d55-9dee-4069c0e4c0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7bad8f-2ee1-404a-8ad1-33ded81433b0",
        "cursor": {
          "ref": "5ed94bb6-24e5-497d-b4bc-af5de69dc11f",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "72c48e8f-3837-4f6e-a17e-f8aef062142a"
        },
        "item": {
          "id": "3b7bad8f-2ee1-404a-8ad1-33ded81433b0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f3507c93-ba9a-4c3e-9ec2-1e7d1d8dcc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faba827d-a22c-4e30-b75c-44d2c6eaa432",
        "cursor": {
          "ref": "20a1ff29-30b8-4405-9cc0-d6424ffbed54",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "eea4bf58-8644-47ad-a062-5b3141a1f7a4"
        },
        "item": {
          "id": "faba827d-a22c-4e30-b75c-44d2c6eaa432",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "15325311-e802-40f6-a26f-66e0c1f9ac8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9774371-ed3f-4708-a24c-f2babb22f0da",
        "cursor": {
          "ref": "010edda9-7450-4573-b9ec-c95189b2e6c1",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0ca4f2b8-8af5-4ca8-823e-7afe00e7513f"
        },
        "item": {
          "id": "d9774371-ed3f-4708-a24c-f2babb22f0da",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bcf8781e-1bdd-4df5-9774-bac5ae3173f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97553013-c792-4a77-a4cf-509fad7c65c3",
        "cursor": {
          "ref": "b6196803-a62f-409c-8df3-2a89db2c2d14",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c8a3692c-8500-43af-b033-f3de23ae3588"
        },
        "item": {
          "id": "97553013-c792-4a77-a4cf-509fad7c65c3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "58dc5bc4-2ec0-45a8-8933-6afeccf55a77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f79199-ed3d-43e6-9f85-4441cad26c94",
        "cursor": {
          "ref": "04d23a95-2d66-4d3b-9b44-141f6e936340",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "6c170e4b-f5d0-4996-9da4-3ce1c3e86736"
        },
        "item": {
          "id": "44f79199-ed3d-43e6-9f85-4441cad26c94",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "73c0022d-a570-4a77-b44f-806db4523860",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a57159e6-f5a4-479b-9f13-9bb11f3b1875",
        "cursor": {
          "ref": "973be7a7-42ec-4a42-9d86-4e8b60716612",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "67f0d414-919c-4e7a-8648-e239f05ffc6f"
        },
        "item": {
          "id": "a57159e6-f5a4-479b-9f13-9bb11f3b1875",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e48b0fab-0adc-4dae-b1d0-8de9129318f7",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a078178-37bd-4ddc-bc5f-e24d0084a04a",
        "cursor": {
          "ref": "b21b04fb-73e6-4ec0-823e-b70af015a65d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e660710a-0d0c-4a3f-9432-69f66501992c"
        },
        "item": {
          "id": "5a078178-37bd-4ddc-bc5f-e24d0084a04a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aacb15ef-1938-4e83-b5c9-c21433da4040",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb31f30-6d59-485e-9f02-0738b64a9674",
        "cursor": {
          "ref": "576fd0b8-1c49-4990-a561-c9c226100954",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c23f1f5f-03a4-4f60-a26f-4d8ab8276062"
        },
        "item": {
          "id": "9eb31f30-6d59-485e-9f02-0738b64a9674",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6d0e1eae-2722-4b7e-90af-608deae5eabf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb31f30-6d59-485e-9f02-0738b64a9674",
        "cursor": {
          "ref": "576fd0b8-1c49-4990-a561-c9c226100954",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c23f1f5f-03a4-4f60-a26f-4d8ab8276062"
        },
        "item": {
          "id": "9eb31f30-6d59-485e-9f02-0738b64a9674",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6d0e1eae-2722-4b7e-90af-608deae5eabf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f18edf-cd6a-4172-9004-1fcfe4576117",
        "cursor": {
          "ref": "85e0f0f5-b27c-4d6b-8349-d5af678f2fc6",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "4538beef-ab49-41c9-96ae-ba1f2eeb67ed"
        },
        "item": {
          "id": "67f18edf-cd6a-4172-9004-1fcfe4576117",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "81fa4cbb-ee94-4b59-a833-3994e62129e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c5a450-4663-4c4e-8cfd-ae85e20af8f6",
        "cursor": {
          "ref": "e3357ff8-ebb6-4ead-98db-0faf8d76fce4",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "a6b5832e-620e-40e5-a85f-bed0acf0acb4"
        },
        "item": {
          "id": "71c5a450-4663-4c4e-8cfd-ae85e20af8f6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "02b1a99b-c5f9-4497-ad6a-49381216dcdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}