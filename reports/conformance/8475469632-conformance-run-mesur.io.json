{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "980f0c2d-35a1-46ba-8d34-cc767c9b316e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "db0cb87a-b80d-44e8-9638-f156d5572ccd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79eee8fb-15a5-48fd-8c23-ea7f5b2c5a8a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9c919ac5-51c5-4fdb-a626-6cdacf511b25"
                }
              }
            ]
          },
          {
            "id": "84c210e0-5dd7-40d0-b347-6595eb6c6751",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d43e54b-7283-4059-be22-ffaca31340c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d741a96f-6469-4da6-80c2-5e34ca2c2dbd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1f059d8a-7cba-4d60-991f-305a4e2392eb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "85fa001c-b75b-4fd6-81a1-d9dc850b2660",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d293354b-ae1d-455d-8df6-83b3c4c9e5b5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "966045e8-5bc3-4613-bab5-9572be740543",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41d7e4cd-235f-4b8d-84f5-6a3530dc5856"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "faf512bf-c269-4c3f-8feb-dca92579eaf1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b004eddd-2e5c-4371-925e-bcd7717537ba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e89ad09-0143-45b5-a851-8ae5d5df81bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69b0c5f1-572e-4d2f-98e5-e1777149e832"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32a32cfa-5045-4c1a-8af7-8f912ac9d324",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "df2b244f-b548-40c2-a36e-3c74dacdcaa9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23da2dcb-af9b-4b72-a6c2-6341815b66fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35d58ee0-9b1c-40d4-a81b-abb941782f03"
            }
          }
        ]
      },
      {
        "id": "effe369f-6f38-46e4-bb10-50493626954e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "835227ef-8ef6-4371-845e-eef2a1a8e1bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8cf1e6d8-c0d4-46b1-9b92-53a0554e3b6b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "113f6505-4129-49a5-8a61-fdca8c298dea",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373a7e8a-5828-46f8-b8e1-caa85b3938a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8324e112-7a63-43bb-98de-da3e5cffb9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7a9b9f-7c23-4369-971e-e938c024a271",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9358e4-f435-41a5-a869-fe4374492b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce369352-f0d2-459c-b7a4-d4489f895c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07624139-62d1-424f-bfba-a23cbe4768df",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ec1d8d-1988-4f5d-8549-3a6d90264826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1796b75-ad7d-4756-90f4-0eb8c708a3f2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0a1c26a-6c3c-4e6a-a4fe-d80bb2b0bb2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c29417e5-7215-4793-9808-beed3c1f39cc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfce41d-3015-4e39-9af7-6d7d4e33bda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfb02d8f-bbf8-44ac-9b80-951db805177a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2db5409-959e-439a-b329-7e99741fbd13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726a1a32-3198-4cc7-b73a-75cd641bc6ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e62f786c-b99a-479e-a839-32bd7f93b3b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3efa253c-84bc-4c79-80d4-ac6659c49bfc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65c9c47c-3b23-411c-8ed8-59c34946516b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0f6b1777-d03e-464d-a03a-1483ad8e2bdf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28c9a51b-cdbc-44b3-a6d5-956a8361c0aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "74983e36-6b59-4291-b8e2-529dbbf1f9c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea188655-96ca-4536-ad2a-716b50eb4644",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d7d5d11-c369-4a1a-9fc2-00fe44648af8"
            }
          }
        ]
      },
      {
        "id": "08eb0f25-6480-4b6c-acad-4e9225eda17b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1e2d58bd-2ce3-4ed3-844e-8861fbf376c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4db2d966-e32a-40a4-b394-01854bcb89a1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "82582f39-22d1-41b6-a273-d6c3c56f6a43",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b02a5c-1907-4375-980a-425d96867b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e400d7-7496-4ebc-909d-21412a77ada5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d267174-67c7-411b-b104-d01c66968b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "738643ca-fb0d-46e7-9938-85b9840ca5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0696979f-b75e-412b-9568-6c488e3b0f5a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427cf06e-a11a-498c-b3f9-c4b077d861a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a67e8d1-c269-49ba-b155-aa7bc1d10158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bd51ca-bed9-4f7c-a6c5-d2e4cac431fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5851e57b-4291-4bcd-8a2d-6ae8f4903aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8452d09-ea29-43ee-9cd9-f71eb49724ee",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe22ec43-6d25-4619-a7ea-b9da610bc681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0131689-0925-411d-8e5e-8158a43b1cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f209c4-39e4-484a-b6af-e7ea795c9dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da846de9-3394-406a-b0ed-89a30ddca66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08009ac-0923-4c25-bd95-4251ff907253",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec113b28-3b6c-4b96-bc2a-c9dad0ed129c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ea6d1b-db84-4cad-a0c3-16a64a00317b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d2574b-e112-493f-8e55-610f56b4e85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c8bb7a9-609d-4e2a-a2e3-ee72a80aa30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b765ed26-6083-46bb-bae1-5574e7445262",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1195fc-be2a-49ab-aef9-d0453e3e277f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6509ec-5739-48bd-a1ce-deeeb5e19227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17141cde-05a0-48b1-865a-840d7a9c1a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8d84c7e-6810-4165-b6b4-1ece13319e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3d78da-a5a6-4aa3-9fa3-0c063659cd58",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d7b742-10ad-4b6c-9d4b-5a01ea19dd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e069ce2-7d36-4f2a-90e6-155ab2890325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0ce2fb-8111-407f-9c35-092cf5c1e210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "428bfda2-27b7-4f9b-8898-d35ea906f220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa6ecfc-2a3f-417b-86b4-38c9d1ea0998",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07478b16-2dae-42fc-a237-e4f6951d7e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd755982-bf7d-4ebf-93c4-0458e5b81c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55898a79-b147-43e3-abd6-b12db5a623a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "978600ab-49fb-42d8-a579-c89fe318b538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16886df-09e0-4290-9a25-cb526010eb4b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d555bb66-7229-437e-a22e-69549a48ed1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19230453-b460-457d-9af2-e6a8d9bc9575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa1d2e5-c200-4bc3-bfa9-d02dd4121ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b28fca04-0bf9-4260-9bb9-c3dbd9bc09b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102c3d10-1b2f-4c89-96f2-a5e51eb27120",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f9176f-a3ed-4039-ab13-1779a29a5585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9b2c13-d19d-4792-bdba-cfbef78be106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb52043-cfc7-4964-bd13-60e33278d50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc77369b-912c-4293-9335-d1f9d8d86bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8af155-dd9f-402e-bf2f-7b5d0ac30dea",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c47f44c-cfe0-4cf4-8133-8448ae37a10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c6b9bb-86a1-4c8e-8747-c21fe19daa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22203bee-2729-4803-af27-1990bdfbecd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1ec2f5a-199a-4b0d-a7d1-03f9c97a6286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172b148a-9d62-47d6-a2a5-b6eabe4ac9b4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2918ff98-9017-4bff-8712-e7c1e9c1a097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa799837-aa35-424c-8bbc-171d228971d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1eb5892-bb0a-4457-a881-5374703360a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c5d2166-3a51-4e13-acf1-723324de06c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d4ec2a-87a0-4f5f-9382-fa98698850a3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ddfd7c-5e55-4aa5-93cf-3f23daef7cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "662cad74-41bc-45c0-8998-47064d46ca68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a0c270-5efe-434a-9971-f2734d700070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eec6a050-66a8-41d1-83fd-957e07c4842d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95774f91-3eda-4872-bdd4-4c9dabe23b1d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947b2888-1866-4c62-a38d-bbe0a7f34234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba9f6af5-b1b9-4780-b649-0ec9798a7bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d3a41e-9af3-404a-a421-d8564d3e125d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0ce3efc-fc34-4a61-b205-14f978051364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3881df22-c3f1-450e-a037-db77d267fedd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bae7cfb-29f0-4750-b104-b47a07fbb6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d6216c-eaef-4ad0-869d-c0c8efbed1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1414208-1679-4100-8289-9e4f08b4f139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d5be04f-b4cb-447b-aae7-1da3e2e5fcfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7add968e-a007-43c3-9731-091fc744ee9a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1701d446-37b5-4b62-aeb5-3c57b9f08dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594cdb59-6e54-4a91-bdd7-77320b965175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a86ffe5-67a4-481f-ac4a-64cf69cb2fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bf6d6fb-6941-4e7e-8220-7f6749e3e2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88ef7c7-ac1e-4a4c-a1dd-862985d65635",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4db2d8-f532-45ee-9eaa-4141b4ab4e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98825610-51b8-4ae2-99c9-3e28ffab0892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b74b85-0b57-49e7-9701-d509d89a5936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afa3741a-5c30-465e-9ab3-d1c686e9c811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111b1331-d9f6-46c0-8c63-0594b30ad1f4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e01abe3-1b59-4cf2-adf2-1cf818ee71d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e771bd3-d737-4b49-8655-7b7b4d40bc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5672e44-95e8-4b3a-ad48-a941a6cedd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91fe46a1-7392-491b-8440-b633dfbdd12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f898d9f-f679-4f06-b4c5-8119e3f75e6e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac978a9d-08f2-4bea-865e-cfea2bdeed9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d15b452-f5e1-478e-afd6-aebad27b40ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff130ae-4760-4903-8e1c-e56c047571e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3438fa3a-c533-43c0-89df-58a3af2809d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac3f47c-4f91-4f8a-a3c5-06756baa8213",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919669d7-4593-4138-bbad-6dd64f741a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5322860c-fc2e-479b-8fdd-48a7e55c565d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db09c70-12f2-436b-a54b-305fc02d2eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e1b4b2-ec9d-4932-abb8-49be7f770898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db89eecf-67bc-48d2-937c-07bf700c78bd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caaa0134-3114-4571-ba5b-a6ffe113d275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc50afdf-02a5-47b8-a418-cbea5c97aa8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20eefbd1-8734-471f-93c3-3a7aa73154a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89495854-8d3a-4c84-a510-0ec1b0e30ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58362ed0-3d01-4fba-ab5b-f1edbc20bbb6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78c836c-50b3-43c8-9b90-57ee563aa06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f117f473-3d79-414b-9c96-442961d7f7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1daa7cf-c1b6-4b77-a1d8-7cc57a3a283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "138ceda5-9a98-412f-9887-089e08ef71a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61908eaf-a36b-45cb-b1b2-2b0bd7c63021",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8055ac2-c955-4fb0-855b-a239291f191c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a4a771-f9c8-4f72-b464-60eeec36026a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0724a9c-3f57-4b48-b26a-0f13bb7cfe8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "777e92d8-d4db-4a10-a1bd-3fec1d98f497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801d38c8-ce28-4d5d-94a1-c32a73d34bfa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fead39d5-d623-4b5d-b378-dfc4630c25e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1938fa-ee9e-43f6-9311-91c9ac4a0fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1915b35-ebe1-4a19-93f8-f3e27d0f0ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34a1fe4a-19dd-4771-9153-729c2bdd77aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e17cb2a-62b1-44db-bf09-319544d9e4d7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5490e7b6-0c70-4e23-8a23-9b164a86048e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc7c81f-5080-4501-be72-7b439b4d565e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfd77bf-ddf7-4ec4-ba4a-c40e809dbaff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eead9b1-e67d-4bb6-a38a-b4d10e7cc342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77de4839-236f-4e1e-92f2-9e74d9e6bc4b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bb880d-c467-4ee6-89ec-cee7f37373fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b874347-35f2-4b5b-b94b-93ba05a1dd6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cafd64-ffb4-47f0-a2ed-a98ee323191a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e6acbb-5882-4697-846e-203d641317a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721835a1-619e-4734-b6b4-ad883a9c34fe",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9132c1a2-438a-4184-bccd-a616d4c750a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25266e1-41e5-49b2-9d7d-b85c1eec1713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da26915-1c1b-4810-a0a2-2cae3ddd05b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92861417-c136-426d-a0d9-44b6e0ca1ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfec552-52f8-4b9a-b955-522d60523808",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4412b7a4-74c9-4429-9f6a-22fa81c0241c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9d6b08-b78e-4099-b42e-dcc6a91458c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fa670c-4616-4e79-8c16-a70a0405dec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f57d6f93-d2c2-4a96-9ba8-f0b5f7d2d427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a03f19-bb46-4057-ab05-25f0999c2e47",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca623c46-1896-4b94-b04e-14c871fa9e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1644c2d8-5e31-468d-a78c-056c127e8531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e54581-80d7-42be-a046-76d24d340ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef2ba75-ccc6-4fd1-b36b-fe90cbb0d10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58987c4-e0fe-4e8d-9e8f-7457c029f181",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ce5db3-e47f-447f-bd77-0569474ee958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589420b2-70f9-473b-9225-07386a353542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780278ea-6773-4939-8959-bca819d43b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4547c2d-d228-4171-872b-a43ebcd6d38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de6bbd9-9e7e-45aa-8a51-e19a93bb9e1a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06b6cd5-c74a-4c5f-8f79-81f7f6429cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b3bbf1-8dc6-4e6e-870a-6a2ab6ccca75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dead22c-d144-4158-b94e-fc5e81502417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f77ec7b-1e09-4515-9e30-61ff31e5ed1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4b6c30-5fae-471e-9547-e5a4d841007a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602356b0-dd7a-47dc-be83-58132d827331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569ae2e8-21f1-4baf-ad14-6dc2c12c3647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eea65fd-b2e5-40b2-b02a-8903c3577fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a88c3178-8800-465d-9f30-dbb42494866c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363c7912-8039-481f-af38-4e7ca395ce0f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e47daad-3f3b-4fad-8e08-6c79e394a8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc34036-bd53-4fb8-b088-18c608655280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9872aa43-203c-4a9d-a0a3-8264be709dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec45b1a8-aad1-423a-9ba9-299dd9e31649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efae37e-4708-4924-a316-f82e0c5e64f6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcd371b-c12a-4d17-a425-4f03caeecded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8c1f8e-f57b-4854-b995-31e882fdbed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7887dd-dec6-447e-a111-94afc3893ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63c69be3-3668-4ee9-8e54-a77f8fe2a16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31edd4d5-cd64-403d-be88-fa84fbd9d854",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea45339-1e41-4cdc-9884-07b32b21d0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4b279f-8a41-4bc6-8b6a-fe726039f4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f72078-a66a-427b-bf91-28b260a38a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e033aad6-e3bf-45e0-8f3f-a375ffb7720f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c41d283-b13c-41c4-8081-e68d9e5484d2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bac79b1-fb97-406f-b79f-93fb0f769240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3552b15c-9513-4ddf-8a91-0f775e620bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42d050b-7c2f-44dc-b314-850df9df3eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "39a7bb0f-d6bc-4617-bb2d-2d2903a258a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bc8bbd-60b0-4ee1-86a8-747e72d9996a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00253652-cc91-41c8-995c-142344b074c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc89f7d0-78dd-48ac-8c5a-cd567fb7504a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7dab7b-ddc7-43b9-8e19-39417b832dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea84f27-5b12-495c-ab22-d8e1379d758a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbf4337-4298-4e99-9a64-93f8524acb46",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264517cf-2614-45f1-b49e-a441c20f791a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35e4e4a-cf8b-4c7f-8d7b-6d5f7683dc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b6a882-2d5d-446c-a773-0ed5a4c9b669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37a54f38-69f0-4a91-bf27-39a7b57d7c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1898ed9-d421-44e1-8d31-4289fec1b07d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cbbe12-94cd-4bf0-ac39-810629969fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f597e8aa-c278-414c-9eb1-9113aa02977f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa91bed-8036-4d17-a18c-7741516017e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ba75db-60d6-4dc8-bfa0-08d6dc1d998d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed34fd77-03eb-466a-89b8-7be0130b35c1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b74c57c-85cb-40c2-871a-cc6ae37876d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b225e45-4bda-4656-8abb-fca41e14db80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6897d8d1-835f-4c3a-ae10-3e113c40856d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e4afd47-c0c4-4969-83b7-39603b62ae0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759e7680-32da-4c6b-b3f7-5971313f8a72",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162c57e4-2fb2-4035-a367-baeba62f4f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed570fc8-858e-4ad5-989b-14839d8d45b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1528b03f-363c-4a08-88b8-c7ad49baf9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3459f7f5-2ff6-42e0-a637-0b5dd8664595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e07229-c8c3-42da-bea5-7ed37023a4b9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d1d1c5-6191-4fd9-a9d7-2a256f67984f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff7c656-4064-44c1-8957-0b646c9ca9fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043e7a14-939d-4160-b77b-ccb342c7cf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f03e2c6-2845-48a7-8d6b-bd4bc1a73a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15fa0c1-2e7a-4648-ad29-120094035cf3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b564f7-3896-41c7-82de-a04279c36f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b877664-2aab-4270-a703-167e823d1dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70539b9e-15d4-4259-87f1-450f0897e9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5d595230-eca8-4659-8383-a0d083897723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82547b8-6293-4d2a-946b-5947a294d358",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8b4d1d-9f92-4891-a929-0bec4c70bea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ba17b9-eea8-429a-b97d-5627525c824e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608eaaa6-710b-40f1-8a13-b2c82157d992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d201d1cb-077a-4b17-b1b0-b921ffb158ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405174cd-2857-45d0-b568-08c1feb73063",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7acd8f6-b92c-441d-9a72-52c327694492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f4b02c-c4c8-4256-b7e1-d17c2969d19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caa6a01-33a3-47ee-aab4-dffc77cbc1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6d833c-da28-4de6-8831-2a6f506b881e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bb9b98-ad47-4e61-99c6-3f6dff8c30e3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edd29af-2b59-40cd-a5b1-ce31b03cf199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcbcdd4-82e8-4b86-81ea-31ce23d70517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de530f6-54b4-42e9-9559-ec76f0d5ed5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "25788b13-da88-4bd5-a302-dda9c21ff480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a843f3f3-5ff5-4479-a1e8-ed85b9509c60",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dbda58-7cd1-4a6c-b94c-1c75a8e39704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b070cd-47ef-4257-84f5-bf3f9be2496c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f36274-9035-4a5a-b164-183f9a126d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbf0950-0988-41bc-8973-d3a36b59eaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b60f4a0-0ad0-47c6-ad14-d9c842bc2cb0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8af020-b845-46fb-a840-838e153b2940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58839356-a159-41e5-b67b-bbdb9189949a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad953afc-64d1-42a6-95f3-89faa77bc39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecdcec2-470f-4e6a-9835-53e62c461c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca3d3ec-91b2-4e1c-8971-f547c1af7f7f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e8b6a2-af42-4728-b7ad-36108f4c426b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbc0f71-30d3-43f1-9d1e-e7c57c2dd327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4500c42-9930-4021-8273-e2d200dc39ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53202903-c295-48db-b301-821bfb0d3063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f1b2a3-cd4f-4fd2-aec5-d13ec5388f51",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a71285-de9e-4270-8a0f-fa85af68ead0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6498fd3d-15db-4497-af3b-d737be042933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f9a8c6-39df-4a7d-8134-03cb89909976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6de9acda-456f-4b0c-ac25-b2d6a745b4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb520198-0e0d-4591-8666-6ea819b3e9bb",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d4fac1-a815-4872-a50e-909e55e4ea8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d348c7d5-f4be-412a-ba5e-f59adbcf800b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d54439f-346b-40ec-80e0-23ac3facc276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c90bec4-cee8-4f7f-9992-f34517d72628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6aed94c-8923-44a4-aa82-718733d3aa0b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e779ae-2a4e-4f4f-9939-783145056d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1c14bd-befa-4b98-a058-3c2a3d50822f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00f6bf8-a0d4-44ef-ae2e-f3753b49a5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b345aa2-ebf9-4940-9674-ccd5328867b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa96f7f-8e85-4ee7-a6c1-93a05f8e82cd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fc77ca-4ba9-4aa8-a4be-9ba96bd136db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe56e053-02e2-4d97-9659-b647584e4238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b4aad4-35f3-40f0-8ac6-fe94283899f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "607dc4af-6059-4dfc-abb8-d673387302c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea9929e-4dde-400b-9056-15f7d1c26cfb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d42949-5b14-40ea-9442-0bad3ef22b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa1d101-5260-4e26-b90c-106b4ec6cb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52fe4d3-f8bd-4290-9195-b99c1a695070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "473b9bd7-2376-4b0f-bf22-36b31d60d438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948b09d0-0c73-48ac-9fa1-2ff117f04441",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ccf85e-475e-4a72-9f05-ea8e327bd83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbb53c7-03c1-4332-a162-39a2ee285e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74cc74a3-8df2-47c8-8845-39c038e49110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86594bcd-c676-4b01-b5f4-4bde1a6cd7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cfaed6-3920-4124-bbf0-cc900dc8ce8e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f396f8d3-132b-4be7-bbb6-8af9a95fcd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97dee538-2e13-40ee-a587-2959ce0d80d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254f3c97-8440-49e1-8607-bebad4d29e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a99bd4c3-9dba-4d10-930b-680c0487782e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0562deb1-4a62-403f-b193-d508bb9096cb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618be315-07fc-4e10-bee5-85882aedef5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20138a9-7a18-455f-9c7b-472d40f898b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c8d648-ce0f-42aa-b3f7-db77c66b1dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc28db3-efee-4dd7-a6a1-7ed0aac55187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c416a3-96f3-4f7b-9ec9-5bb006ae9915",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be93842-f8de-4936-b250-f4fcb2c105d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e5286b-0074-4875-83a3-d4caec5a630b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3b646b-41bd-4293-b614-7b8718b0f812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e696c787-bbfa-408e-a55d-52362c0c14f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a299375-c30b-44db-8410-e58215653789",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ae8c41-e581-47a9-86ae-60bd2eb40f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0900cbfa-0025-42ea-995b-a44ed39cd15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bdf7d0-a786-4bca-8544-49afdbbcb424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0338deb5-2bba-4a7d-b233-7f004d4e0a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209965ad-2b37-48d2-9f58-f109e3792766",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b979ace-1076-4a0b-b365-b8ffa8d45ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0f7500-f7a8-4053-91de-75880c33d303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd1820f-ccf2-451a-a07c-0ccce84a50b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "94108f9a-c34d-4244-bb9c-3c473186d4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa45e9f3-9612-4e27-91db-e83b09bce45b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4049d32-ab20-464e-919b-b131141413e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd55d963-bed7-4b67-8df6-ccec8969527e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a29a89-b3ed-4673-915c-37c98f4d7c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4157525f-5c8f-45fa-95f4-d13d880ece49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c910d8b-9960-4251-bce2-031edf11660a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1dd598-2b77-4280-99f8-7c56d85ffb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4788db7-12bf-4b4f-b278-855567705168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e7d73c-23c5-466b-8766-4991e4c253a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "97423648-8fb0-4b64-bc77-e8ebae20429c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cd982f-301a-4e79-a414-bf3ce6c04f45",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "770967c1-7924-41fc-9554-c024076dd17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e6bd6d6-0dc2-49c5-ab56-fdf1c3b58ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d4ac6a-5b0c-4e1d-a289-d22742208e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cea79cc7-b7e6-4cd5-a9d6-0d571cb8caef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedf8c57-f769-4e5c-9a4a-035febce5ad7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d578b5-fa14-488f-8e96-2e000916f3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba24c36-c667-40a7-abbc-5da71a5b8c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6a8f67-c721-440b-9390-66aaf7c0b517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8770e2f-4625-4b9d-8720-dd2a72792ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb50fc3-7d80-4011-87a6-ecc0d173a144",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e0fabb-af48-43e9-990b-11d77ad6c857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f7b30c-cca6-42e6-b761-b03e6f90ebf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58035086-0aa5-49b7-b944-05f58c18e0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "798f4fbe-e1d8-4e36-b448-844414e808c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f8e8d3-5006-43ad-bc0d-b10774cc65ca",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005c8c36-30fe-46c7-90c2-654d4252c81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874239a8-217c-4c5e-87a4-33463e5b2e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809356f3-6097-43b9-8678-0dd8ddb09eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "136c7827-4cb0-4084-b59a-e82e7e4040a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4b9c51-82b0-4d35-993d-3858b2065122",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d9d1d3-0b19-43df-a0c2-83160e31290f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e16056-970a-476d-acda-cffb23b705cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01fa9a3-e3df-4bd9-82b1-55ebc54ecf3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c220960-2b09-4bd1-84b6-21471e46340a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86d842f-785f-4f37-a2ed-ce51d45ec28c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4048ce2d-ed0b-40ef-9e70-4d48c8b99963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b641251-3dfc-4686-b7c1-ca28dc7e590f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b5e2dd-78ba-4804-b9a8-3a4c3241ec65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae8c55b-5a79-4819-b853-dcae22f93646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef05eb3f-595c-4f6a-b089-5899dcc6adaf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87099e63-d981-42fb-8400-b16e64ef6989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdaebd21-fb6d-473b-a071-be7426396d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17214b5a-6e36-46e0-ab68-a6dfb970bef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f269b9-19bf-425f-926c-00ee010bd47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1f6d9c-3e72-48d5-9772-69e62899b147",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80f7be9-bf7e-44a8-863b-9ae8c9441723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e70ca1c-fc1d-4953-bf9f-93874de39213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3862d3-e5c3-418b-b6ce-9aa8a092a4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f91d26f0-6f9e-4633-8d70-df7a43a03d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60b6069-12da-422c-a20c-c6c537dcbc57",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7f3feb-cc19-4b0a-8dcf-97eeca3cc792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df28029-79f1-4bc2-9892-99615b7290cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5711ef-6058-4c52-8efd-1707144b189b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64f681fc-74f6-499f-a0dc-091ee84c9cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9c396c-0a1b-4700-9323-21bb9aa2aaf3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccabbcb-7e35-43d2-ae7d-5c294348a45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5594659f-afe1-4e82-8860-cdec3fbb5518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e47fc6-14a0-4213-af69-3d6dd5d4006e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcfbd67e-ef73-43bc-bf35-f4aceebdae08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2617de-a58c-49bc-8124-e300817467aa",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e931ec98-5379-4843-90df-ec0afba54063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb146b3-40a4-4ee6-a44b-30bdd28a6680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23891f57-7120-4c5b-9618-1e615b76446d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90760a53-a0ed-4387-86cf-6227978696bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a40a86-d00a-44d8-8890-dcd39749a1e2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755b5bd3-40c6-4653-a0dd-c84f83c0cdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766ced0f-811e-422b-9bac-5debc259456e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe1f37d-b588-441d-9f3b-6574f8298508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37d084cc-0531-4ff4-8402-5d6b43b152cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc3cfad-4e17-4d2c-b378-5603660417d7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e462194-530c-41b3-a9f0-f8f4b69482e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e74c97c-afa0-41b6-9d49-0da9e98ad0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd01012d-50d0-4377-baf2-0946a7675fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3758dc-504e-411d-ba8e-503332a5f745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51667a16-8730-42eb-b9f8-16e150766337",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd62eb54-42d5-49d0-9ef5-01599130daf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569ed48f-b2b6-4b1d-b489-7d2ee37f6374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e83a359-2bc8-4309-abc7-1c37c8bd633e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc78241-3fec-4f86-8809-cc7d463edeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eee5f1-9c1a-43dc-8f1b-a77f856de2cc",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec7e1be-c103-4ef8-99ed-51860788b06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef4ec56-0f68-4536-9ada-16571497a4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a5ef0a-9741-4f74-9cae-e802ade47f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "906d37dc-6610-4e97-b5dd-c92b658465de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685c3f18-189b-4567-8600-43ec553e5712",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6ebdaf-0a4e-4f09-b314-5cc434db1c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e5b1cf-192d-4e73-bda4-abec8162665f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c856736-c5ee-48a4-9dc9-ba4d2fd594dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5890c44-93fb-457f-a84f-7e5bd46fab84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51ebf78-5ba0-43b5-a299-befaf0f4f369",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffbf38e-0a52-4544-bc4e-40ed2a0f8e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073671a5-9cb5-4a15-b014-4f1b9e728974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d912b09-234e-4025-834b-9cf87b539271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "537d7455-80be-4f6e-b4d3-d8afb01e8403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca796b82-7a4c-4882-bc7a-f9ea534edfe8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d56b0c-583f-41d7-9fd2-b06c8799bf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f65707-48ea-4856-a20a-a4827ba1862f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25b2dd2-2789-47ad-8856-5a6922a039e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c368f905-1c40-4f96-b6b3-7c6629aac9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7cd682-c6fa-42ac-9873-d31b0feb0661",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25bf4ec-42c1-472e-8f20-d21727ad7c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23c1c3f-c0ae-4da4-9835-0e39d5f239c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc86028-f00c-4f06-836f-996b301e25a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbacf5c-5e41-4c73-b3ed-686d6365ec57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a205e193-3ccb-487d-b313-00b33d2f447d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c945fc2-54ba-4dd9-8559-8d1f79941880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5467a5-ecfd-4e2e-8950-79ce9d57ae2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4979b338-32e9-48f7-89b8-5ec5be4d4a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6df6144c-e662-4748-a18d-1776313245fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68fb95b-62fa-4afa-92e2-21d53c5410fb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca83f99-bd00-4260-981c-353c6eb6ba0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26a02bb-50c9-4ff0-ab12-c5b8f2908daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447149eb-a340-4ab3-a84a-ffcd42e87448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e15644f-4f49-4955-a79e-6fae6edb3703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b39825-027b-446a-93e7-48651f966ee7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3b32f8-8acd-49af-ba6a-478c6a36bf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b833e63-3254-4a74-a378-adbc3cd36899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3057d9-e55e-410c-95c0-bacf43318bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ee69cb-f04a-4ede-80af-c3386731e05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427d1815-e8ef-49e6-9036-ad67e036fdf5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc8f59c-da15-4e32-8e72-ae5fc2f6c56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6508c2-d8e5-4b74-9dd1-a6cdec1390c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a779566-cd5d-40f5-9552-47422ec0bb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "291d5cc3-8d69-41e6-88c9-a24da8eeefb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494ed7a7-df32-4a5f-9964-708660a7a298",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54103786-427b-4aea-8b17-705f4cfe7a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c39ff76-e024-4c0a-a18c-70545f759956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4e465d-5bb5-404a-b5dd-c17bcaf6b5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61bb9f5c-011c-4449-8b67-0c844c788073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba01c63-bf93-4c53-8d7b-46b099261183",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b425849-83a4-4a7c-ad67-12dd66331ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b27b7a-6585-4329-88b9-c0e3ef4d0025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb473c5-e8c0-4f0c-8dd5-75690e01ce35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4640333-b52a-4bfb-b862-87e0f5b0eb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f6de6b-8564-4641-ab23-2d20ae78ac71",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afd6a24-1e5e-4111-a16a-34cf8489d16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3033371-c576-432b-8454-e19fb701e09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7716cc96-5927-42e8-a5b2-7a6945008973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9fc548a-889e-47bf-91ac-b3ead9e2c1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f086e41-c614-4944-8be9-4d61f80c155f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6733069a-b5fd-49b5-beb3-ff3cff5dea08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f063988c-7d34-4d2d-bcf5-d1b513def41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c253d9b-49ca-4877-bf61-1966bc711042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e3bb0b1-75d5-45aa-aeaf-04313d5c0a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932adc89-4402-404a-959c-460522e8acbc",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28e754e-e4c2-453f-a2b2-c9afa638db41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1470ec-717c-4ce6-b61e-0d8e9279cece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc269d3-d124-4754-a4d0-0a9ad8df2cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "54a41369-6a6c-47de-9c74-e57c026a5944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1278ef-70b5-442c-82fe-d0c9b8ea0c24",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b009874-f420-4605-b81a-60fddd9b746c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6265076b-dbea-44a2-ad8c-1b894e80f8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bb2999-580d-4e4c-933b-877e619c6959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "19bba610-8ac0-451a-81ae-dabac56e3359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cfc732-6e5e-4e3d-9520-7509fd46bdb3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb53952-0a35-46ba-a5a5-07caac838e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f072ad-97ee-4117-a99c-55d2da94f750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b86104-13a2-4c7d-8f9d-8edcfc1d2b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "39b101fc-d333-44af-915c-546ac7cd8a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6889d1a-302d-4765-8d51-b8af98e52c4c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234e4550-ae50-48b6-aac5-08e4e975bc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ab7d6e9a-2934-45a2-8591-3a84674005b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f706abdf-5fc8-4ca6-bde7-d547fe7c1c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d39755cd-de94-459a-b73b-7ca4f69acc1d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d0e39738-c368-4108-a04e-fe239986dcfc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5527268b-73c9-4a0e-8bb1-5ab0c2dd74bc",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3653cf17-f793-44de-a9c1-1ba8ec54731b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08df9954-8f8f-4d11-8c52-1df4b54b8088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b987b93c-d643-4ab3-9d53-413300b0c18e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e182c13e-5019-41b7-a51e-b40d5ce9075c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee24dfb8-7e11-4930-bb68-90d58b5679a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75ccb284-cdb7-4e2e-9da4-ecd340696143"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49071619-046d-49cb-a950-b775b533323d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fe7c510-4333-4d40-b0a0-9f194304fe53"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e77baa80-e738-4ba9-bfdb-187b7a98e9b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc9e7297-c774-430c-b3e8-562bf703d0be"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1f252526-a005-417f-be52-bf20658b3862",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b35b311-9139-4145-b5ce-3186bf02dd4b"
                }
              }
            ]
          },
          {
            "id": "7a93fc9f-8a64-488d-8827-2a3d67ec8c2b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7a39e7b4-edad-4f95-a661-7e5d65da9000",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e736bbf5-d016-4cb1-8744-9a928cc913a9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89eaa906-adb2-4e98-83f5-7a194155f243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ae2025ff-471e-4734-9595-30ebc9ba82c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d382f8f-410c-4a0c-b7d6-4f811824951e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501773ca-35af-48f6-94b4-1dbf8238503f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2aee1de-0553-4727-a79f-31df51f83685",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02ceb4af-de6d-4502-9fee-c6db836347c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3853455-2a6a-497a-a3cd-88e8bb57d61e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5de848e-1527-4d2e-b025-97f821ab4c0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "06d4aedd-1fcc-48db-9c4b-a801c65dbc4f"
                    }
                  }
                ]
              },
              {
                "id": "0bb728ad-692b-44db-a844-db839222e824",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f8e00f4-6aab-4b1d-aa12-75bcec8558ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf62cd72-40f0-4181-8f91-3306497ea303"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a94fd254-a215-49e1-9aeb-1d368f90354c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "116a44e0-be08-4422-b316-d8a1fae4a8df"
                    }
                  }
                ]
              },
              {
                "id": "4bed7726-95bb-44a4-aab0-2cc7f5d58eeb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "141c2ee3-eb1d-4fa2-b671-df5d559a974c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2930f725-cf41-42eb-8f89-8c3ff7f1de72"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccdcbe9a-f87e-449b-af51-583accfe9d9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3286a681-8795-4171-8062-dec22c1218ba"
                    }
                  }
                ]
              },
              {
                "id": "46fe19e5-6479-45ef-bff2-697c100fdc5c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac0de5c0-adaa-46fe-97f4-7ee4a907b332",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24ced3f1-fd4b-4ad6-adee-352ff03caf34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e328cc3b-53ec-4217-841c-bb4d1eee427c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5f4c1c45-d9e7-4478-a725-fa703f54f9cd"
                    }
                  }
                ]
              },
              {
                "id": "87f682cf-2ecd-44b6-ab54-f0eb89b2f631",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eeb7e096-14b2-43e2-b8f3-8dcf5632070d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25a48622-9b5d-4746-8dca-1436a8b31774"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2db8d67f-256c-4c2a-8fd6-ed9d1dad1a2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1db991f6-a3a2-43e3-a77e-673640199302"
                    }
                  }
                ]
              },
              {
                "id": "f37fcca0-e3a5-46c5-9838-49e2a19978e8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7407ca4f-a3a7-49e4-80e3-f08daf90b56c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ffb8876a-dc15-43e9-a8d1-4ff532cdcc3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ff7cb86-8722-4bfa-bb60-130e79c53962",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4bd8eecf-a3a1-4453-9f29-05c75a833ccd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "876f12f0-cd8e-4f85-925f-9272023c2d11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ff21d65-f551-45f3-9a80-d5158f1f4a2e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dc2eccfa-6d11-4175-ac04-17e91a5ac19b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c883094-b6bb-4b01-bacc-53b9a21d58a3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f388084-3ca1-483a-b1d9-2a5fd19f6585",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0a07b229-00bb-4d3f-9f91-3b3a8363a673"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5aff083-70d1-4e51-9e1b-5dc6d48981f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2519ad2-d779-4d32-aa66-5cf61c2c210f"
            }
          }
        ]
      },
      {
        "id": "f3f5bd02-14cc-407f-86e3-8004118680a7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2acb967b-7f27-45d6-b428-556fd9fb4780",
            "name": "Negative Testing",
            "item": [
              {
                "id": "326fe0dc-db23-43d5-82d8-eb9c639b8caf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4f14104e-3f79-4532-b3d6-af1b953bddc9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab30d2c-1fe9-4cb0-bf4b-5df80d478766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f786c148-7ed1-41e5-a620-a6a0c69bb84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde653c3-9a33-49c3-90ab-8876ff0b4758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "74ecee10-4ce5-4ced-bb80-642fbc2398bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37ff2d3-5cc3-4df7-8e4e-18c1c5f6c7d7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffe365f-f7cd-441c-ae65-90048004f05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbcbfc7b-ac32-48c0-a194-7dc16db36542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b829e1ca-1f31-43ba-a6da-0e7c5a7d09c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "35d247b0-2cc0-48a5-a21b-32ccf45efcdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64daf21-db4e-4c51-a13d-d6c198e3219f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8621d08-6366-41bf-9b82-9f2d52ace7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd82dd88-ccaf-45c0-aec1-578cd225c9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9d80e6-1a23-4b0d-8865-b78e57ab87d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85bb15e0-c7a6-485f-9a4f-e3f5d22d3cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f4e7f8-d0b6-4af0-b60f-d9c632220c68",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2847564-ce81-46c1-af55-2c2a067c0e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9391f4e2-ba5e-4965-9c4b-56b999552127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecae812e-deb9-4c23-84fa-b333d5d4e907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f93cc64-2537-4f87-bae5-2b809fb220e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9270298f-df39-4a78-8660-3d8653e0ee52",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93044d6-c45d-4102-9d17-fa7b616f7334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c5a0cb-6941-45cf-9940-a9d91712997f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de9882a-66aa-4e7b-a17a-23d13a32a7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e76ebab-615d-4d72-b8be-311af5796e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95d2483-05d2-4a1a-82b5-88983e1238e0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf43c93-5119-419b-a9a0-71792734e031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4435fa-b6f1-4190-a021-598e3c45df9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13cab1f-56c7-47f8-9628-4bad25a5ca30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb6944e-0067-414e-8830-a4721fa13f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e1ee8c-0acd-419b-9306-3b9d022e847f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e96cf1b-1038-4198-9f44-4b92dbdf3e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc97b35-7a88-4c62-a160-b18d13364566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ad9334-157e-45f0-a30d-6f00640907df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1adcc456-8d38-4e5e-ac1a-0f205fe93c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddc58b3-ca39-491c-9f33-41e02b6d8c20",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99367b11-ad6c-47c6-ad7c-3d130e7fa409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c88658e-9b49-4bdf-a70d-843a5c269559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb04549-aeab-4af3-8580-dbc9748adeb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f564669d-6abb-4673-a0c3-ae12cba77e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9284ed-692b-4774-aeb9-c2c14ca5ca95",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71118e19-0329-48ca-966a-bf7ae0424236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13483220-3ade-4f30-802f-1b97c6d5b525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058b31d8-0199-4084-984b-6a4cb48b52d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42833971-2421-42d3-8c90-2f6697b43ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148b2c09-11fa-4091-b4b2-4be0d179fdeb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c5ccec-3d76-45f0-845c-c54a4fa136c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae93eeb7-a1c9-4280-b31f-a18b5edc0d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bbf741-550d-4759-805b-7a81180d9bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e0abce-9c86-48b1-964b-e5b74893027b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9c03eb-cdff-4530-a391-284348201b1d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60ef4e8-daef-4545-843f-5b4917e2a21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853802d5-6323-443e-a9ad-70b4b19ac9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea47c64-ef5a-4392-810d-de5469a5a04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e546d054-fe6f-4f8b-8515-7d8728ff0a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2505ca57-6ece-418f-8519-7ba613b13399",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d374b476-a60d-474b-8c19-cba2b49cc737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f4e9af-ad18-400b-8a5a-a0539e73560c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12dcd0d-2eee-426d-a4e6-2ba02bd1950a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4442094-2856-4b1c-9f87-1f73d5e732f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7882c2f-a828-4d92-b88b-ac88579bb526",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d820a350-b3e7-42b7-ad3a-abd1898ee2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abbb9008-03a6-4ac6-aa05-4d12a42b6452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eca7e91-ecb1-41a5-8638-b29e0b847986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "54604035-9478-450a-9852-70563d7f8659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cc760e-0530-4fee-97c6-b37360ceb2e8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ee1509-a030-43dc-a926-11987723e1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b85d7d3-0062-4e10-ac05-bb4029d5e1b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a239a00-62fc-4ab1-bff3-303def820fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca962ed-f62b-4aa4-821b-971e3eca6959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e580df02-3560-4544-a9ef-4841241c4be1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077c5256-59a6-41ae-a562-5f7c24573417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06628c3-e0cd-4244-9656-acf951176361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591c9404-1000-43ec-84fd-64202edad34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "760d743f-b9fb-4c54-b1af-9f9335b2dd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92031ce0-8fdc-46bd-8066-716695a48b90",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ab64a3-ae89-47c0-842e-b4d74a3de6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465928a3-469b-4ab1-80c7-a07694abad7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395af0e3-149d-467e-9bf1-c6546b0cf8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c3672d-4ad1-4fc1-92e4-42c3d3efe6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1959bde-8e22-490f-9f92-8766073d71ea",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ef1168-c4ca-4925-9873-12a55d368cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a3a357-ff52-4a34-b3bf-797f6cfca1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afda606-1663-436b-b72f-923396443d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f46931-b302-433d-9ab8-90d4ad3af52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6e1db3-afa4-4f6b-a9c6-378cd6150c23",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cade47dd-cb53-4639-b2df-aa1672112ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef19cdac-adb8-400f-8a3d-d53e4b02b6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d8380f-5fc0-4036-9a47-c5faa3194a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8e4290-cd85-4d89-9ef0-6bccd7dcf309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b01fa0-cf4e-4c80-9e16-1268706b40f6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f583126-5a43-4b07-b5b7-aadfff1e5e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c294adb0-21b6-4f7b-b85c-34710a1af6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0d31cc-2aa1-46cd-9171-dd4b016f5042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b711669-1508-4207-b62b-4ce1a0472dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1ca097-afa2-478b-982f-1e3f81c67b09",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6b383e-6937-4785-a97e-f17f62773f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805ca132-a0db-4a5d-9bcb-c78542d519cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d037249-77b0-412b-93be-c39eafe3eb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d81e32d-95a0-4ff6-aedd-de2446ddf78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cb402c-6d9e-43cd-b223-3e720af4725c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769ef856-9cd4-4e6c-92e3-14c4157ded20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74eac738-ded2-4561-b395-670776f61ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9435bbe6-e0f5-4387-93e4-facfbd14dbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b982f417-cbd4-4d2e-bb28-a6c3a9b5c3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050b7718-2532-499d-93b9-d784eccad39f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1db9203-3962-44ac-ac6f-dadcecc03c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ecb087-1c9a-4e3c-98d8-a9c9e62a27c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02418e10-c332-4b1d-bc7d-54e060aa8772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f6b48f-dec4-4f00-898e-85504da1c1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ad292c-c5e5-46eb-83d4-2c84496da507",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e88be3-32f0-4735-bc34-5443feb33fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a99277e-168b-487e-abca-0c6fd7e09249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965f21f5-e210-4989-bd38-6f9c69c2b16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5038209-be28-4b18-8052-1cdeebf1b39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0398dde-b1ce-401a-8f78-e7b1a32f67ba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18448c72-2a03-4f7f-9c96-e62b35296d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb4d239-e0a0-4e7c-a87b-4b82e2cd0318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34eb5bd9-bf36-49bf-8af8-2d8b1269894a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ffdd45-f492-48c0-ab62-bc55900b82dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9fab80-f134-4eaa-9313-0a320d0e4b97",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca96191-69cb-4643-9144-25f7643a659a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8a9358-e777-4b72-a77c-8630001d70af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c612ea0-bad8-45ce-a29f-7ce12e1a7d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff68471-ca55-4bdc-a8d5-da9f1d048b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a25bc9-d49c-4fa9-8845-3403187cb78e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8510421c-0067-480f-b500-1a5d158bca2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcb08cd-2135-4798-9dbb-d24403df8309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f318e972-12e2-4d81-bae9-9b7748d22995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2ff43c-4249-451c-9305-f757bdc0faa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2ca9cb-9bbc-4fb4-a1ec-ebce607bfc24",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f4c626-0069-427e-962a-8f92aea7278e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf54509-8009-4714-bc32-324d82ec9a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23135407-057d-4f2d-ad1d-2e8f249cd4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfea4efb-c4b8-49f8-994f-a99e4ad9bfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ac2750-19b4-430a-a657-cd2b8e503da0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bb3cac-afda-4c7f-8448-a289b64aa6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe0fd61-c360-4e36-be0a-1ac93dbfdd18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f3533f-f959-44a1-b55d-82ae04ae8d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c67b8f56-9275-4d1a-bdbd-a1b05e779061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f244d73-32a8-4456-a8ee-082ede036316",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c804d25-29f1-491f-9a05-cf91d703683e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb4a8ee-fcac-4c56-bb45-281caa990fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2d5439-9624-4d8b-9957-ae8baf6915dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2893d3d5-f79b-4a61-9be2-e0921396502c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6cbc07-57da-41b1-861e-90bf3acd3dbe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd06445-e649-41fd-b66b-886bd526a2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411978c1-1e03-48a2-9825-5f6866468db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28380cb-974f-41c6-ad47-54a2e3ebdadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50d384f-191e-47f8-9fc8-81a620f17045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fbd396-5da6-4745-9dbc-be1c7e52761b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a26150b-ed13-4e6e-95cb-66be4897d863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f85bbf-cef7-45b8-bd16-761d2f053b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f3f86b-1508-4ae1-bc23-b127fcfecc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4950e2ec-607a-41aa-9086-db1e4acaf13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abf7c57-e754-4b0e-9df5-d0fb4854c2f2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94ac2c6-7ac5-406f-9d7e-4f278460516e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7dc5e7-266e-4dd3-b97f-00b7813970bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5625ebff-353c-4208-ae9f-68e7513c0fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8ee4a6-9307-46ce-8513-5c1b38f7284b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aadf2266-56da-4c72-bd77-7d84f127e681",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7f3efc8-bd29-402b-bb5b-9dedb2de95be",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb526eb2-6b2a-41bc-b9c2-3f24d639fc1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "daadf083-4aaa-4869-8621-b47ebba396c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7696af-1b00-494a-8936-5570ac8c0ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28cc5dcf-ee6e-4ff8-94cb-80c8965b7d3b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60c76455-7136-4f5c-a670-62b082105476",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b86bb524-fa59-4303-9d61-0bddf5440359"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af358012-d60f-4425-a226-8a1fde83eba8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82139658-3e2e-41bc-b52e-2f0b4d6f9b32"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a98da6f-4cea-4180-8885-2a2046aec85f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0ecc71d7-f9b8-4b6c-89d9-ac86a400f09e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1518b502-01d0-4e04-af3f-993bf10d7609",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d54098cf-01ba-4300-b5f1-bd835e7f0f0a"
            }
          }
        ]
      },
      {
        "id": "87d88d9e-03dc-4eec-b0cb-246ed425a02a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "32bac33f-0ae2-4a61-95ab-d5b3baed144c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb1ae5b8-b3e2-43db-b15f-33e197fc977d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "192f8435-d68a-4535-9182-af6ffd085b6f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e004677-8124-4727-bd54-83d7714014ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e319e1-c71c-4031-bf44-14c7a521997d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d9f6f4-8384-4693-9adb-fb3c80dc2a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "efe50b1f-a410-4ac0-a8c5-2332e362a075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8778c5f8-4ca5-4b7d-8d31-83e8d427be24",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5991a7-39a6-4dfc-ab7f-a76113e1c1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab888aab-a307-46b3-824c-93dcbcb9bd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dde9b4-2fc0-464f-8c39-ce2868c88177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e03b54fb-ac85-4d5b-8b2d-947de38a4f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df575ad7-177e-42cc-be8b-84bdf3244734",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491449f9-aa17-43dc-80b9-b59797e6dfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ec7541-4450-4bff-918e-e0685d665eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5dff90-c553-42f8-8789-a76786dc8de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8dbce7f-a570-417a-b5e1-546021c62d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77cbe01-89c8-43f2-abd0-17bd918b27b4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78872ae-351c-47ba-8f0f-4eb35f42c101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e61cbbb-3ebb-42af-a887-26e329424e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697b70bc-4e66-4cfc-8ee2-96197b0695c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20e56039-bc82-46df-9e68-7c69c8a11615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3068bad0-77b0-4dc6-9043-282b065c700c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c788f367-f6c5-497f-bf45-24654c5022b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b3a0163-334a-4051-ba65-7b819ca26799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b309536-4bf4-4c0e-8a14-5c13e953db53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a21693d-86bc-4002-b9d5-8470e1076308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff2d6c7-f5e0-44e3-8022-c175b9d6a081",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfa3729-d9af-4d65-8b41-6a9d3b29fd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af59b8ff-3fac-4cd9-a03b-f39d8c81ed1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3461183f-564d-4906-93db-513eee6f1ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "662b8902-0733-4b5e-8d2a-12334ffb0d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2df4524-2ae9-4f15-878c-052b322e2002",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68be4cb-d18a-4d9a-b564-ca7056e08c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78534187-a006-419b-a438-617e303c1328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2765b46-14a2-4401-b5d7-70a2a4a7215f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2a8f04-e387-4230-8055-ed8a6c225fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ba7cac-df34-4f10-8f12-c7daba5b7f6f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da94da44-1d43-4927-b3bf-52768283e012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa03edce-4402-417d-9c39-017bb9aac8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fbffdd-b6b4-487d-bdc7-00972060eb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a5e0674-b701-4483-b18a-b46998999ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7149603-8d46-41e1-95cc-246a595f03f6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3233ed40-87e8-4a9f-9b65-e99949cfdc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb89aa3-375b-4cd8-b043-23c93cf8546f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e833f8-10a1-4a11-86e1-0dc2d319d8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6775041-a15b-4586-b17a-aaf64d28d51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7866414-61b6-4113-8771-dcedda416a48",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec457e11-c5e7-4e73-b393-9d15341155f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7ee625-1fac-42f0-92d0-a5e2b608d36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113eed36-46a3-4a2a-9b3e-9ab1f76d62e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d4350f-4166-4afb-b78e-f2e0ae321003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11152c7d-3842-4985-ba37-51f2f3b02c55",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa33a57c-dc58-4562-8e2a-d2faf4ef0879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb44f54-b7fd-4f72-8058-f496d49dc8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce929c4-eba5-44ee-b8c4-c61a91365eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f21a306d-3bd9-498d-a37a-c4b2ab8b84fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f07dbb-9254-468c-acbe-d6b135fd0677",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01d4988-c566-409d-99e5-dd1b9ba459f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ead84e6-63c5-4bfc-864a-e7045854ba2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce086649-a55b-4fb2-962a-6549de2826fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc152b7-6dc2-47b1-8ee3-8dc138453ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e703f590-5ee8-414c-ad5d-1f7876a2eebb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed697ed-69fa-48d2-9e05-68079fd12d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7637ae-de4d-48d7-b37a-a8cdd95e7dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06edbb01-5370-4c60-a394-61836b5e4740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc856029-4bbf-4595-95f4-1e41e4a72c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16f84ae-e445-4217-8d34-b8979d314ae5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f268c2c2-39f7-4f39-95d8-db1fe9dd2652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ae6d09-fae9-43a5-9c50-7ef749f9c003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264409f5-8d76-4139-8d75-91d06969188a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "47ef35ad-686d-40fe-a3c5-b75bbac79ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99dacbb4-16f8-4ef2-8948-98ba7316bfc5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e8c4f6-5ebc-484a-b64b-29990468d1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b076cce4-990e-4722-9e12-69e87d120bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c74440-3855-4f75-b7e0-8fce58b3247a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "deb73a35-5843-4e58-be56-c400631d6abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77baf61d-fb57-41f8-ab46-f39a63b2488c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4e54a7-bd5b-4b9e-9337-f8f11d714a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabeb45a-4974-42d3-adfb-7128f7c65b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad62ed6-f86f-4549-a3c2-ce645c6bd33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e63ed3-e676-4b18-a8e6-7b18a0342485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914686b6-4845-41e7-a510-424151053495",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9797b4b8-e3b2-475f-8baa-94bfdf56c738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c1f080-f73c-459c-8a67-0ac6d319d08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9fc66a-6e3e-417a-a053-92a43d9bd615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b318559e-391e-480f-a746-cf78e12714f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6dd684b-f880-487a-896e-032d00f6e8c1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7fad57-6da2-4c82-8f86-576ccb0c06e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708a6343-062a-4702-96dd-c4254cb262e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f8de7e-70d0-4318-84de-761776e2533c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa33d30-2b51-4f6f-bd15-4725e77d48d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb6d8bb-6d03-4495-9e47-c6fded61bbf2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050c55ac-8ee8-49e2-9808-c31c6d1cb6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510f1f62-30ad-4963-b5f6-311ef8f93aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9da97b-bc8d-4858-acc6-f8df449aa22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a85c1698-c3de-474d-8df8-34130b11e24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee59dc42-d964-4d63-a8a5-c37554ce13f8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2235bc07-265f-4290-882a-6687ab8297c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72df5678-5bc5-4487-a1c1-47c38b040e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4fca96-14bd-46e2-9996-7a4625a14704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1906365a-9728-4417-860f-9335f1a92fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c687da4-ff2c-4c20-bc6c-186852998046",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c939ebf4-2686-4f7a-9226-bccb077693ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b822bb1-0d3d-4c64-a02b-d4eeec9c0907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899eaa3e-c576-4da1-ac2c-9831d2f3d122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f2bca1-ea71-4a3e-9327-11818c2ea16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec068d1c-de27-44cf-a333-fcfaa57b2b12",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71580fc1-d1b0-40b8-a318-4d07a2538435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09d18b0-9ff0-4607-b8d8-6384ad503fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33391aa7-a2f8-4111-bea5-13d8888a1b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dfb0611-db1d-4d53-b8fb-b380e4b4560a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569deb5d-6132-4434-b034-0a2846183d1b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf9dc49-6f0c-41e8-ba19-d9b5d326d0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3076503-d0d1-4e0c-97ba-b66123988de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e61058-72d1-4793-9eae-201302beb2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50e20d2b-8304-43eb-a478-d4b277396735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c287c6f6-ca11-434e-8e46-d41301c58d13",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283ff329-f8d9-4a0e-b0fb-e3e6d1072d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a230c215-3d01-4d88-8077-4a63385c6e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb66e37-240a-4ef7-9ff7-8a0fe1866b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcabf11-bf22-44d0-a19b-3e3b5c03cd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9bd145-2f1e-41e6-bd5e-c7a59f8394f6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49f672f-ea48-440d-a0db-8e1d5d578666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20366014-984b-4979-80e9-6fca4bb0d73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5b5504-8b18-4f86-aa5e-7fb4e18a0d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6dd013-7e49-4ba8-a355-d98de17a5d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d76597-7fbb-48b3-b833-c78179288c88",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11202bd-24ef-4019-975f-dde4b4f615bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d57ec2c2-7d7a-4149-8e05-c8d11df8e427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3933bcc3-dd40-4400-95bf-bf5598aa7e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3e47a0-2d13-4bd4-b33d-a7095a9e4fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81b783a-3e95-4023-9f2d-f9af39b0377f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f0a9ed-2202-45ed-b257-8bf490ee4f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3f927f-2753-40eb-818e-bc352ae954f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6013e9b9-8cf2-4427-af2a-c924800bb8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b48a7a-e3ef-4724-80b1-68b0bf65465d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a125875-d0f9-44d6-9f7c-9e91d235ba6e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceaff5f0-3126-4f4d-9b56-e9aaa680c564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57064e12-961b-4aba-a60a-6cb2dca7e1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c0fec5-b724-4293-9dd1-49f94cce2670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a09d32e-aa87-41d2-a43c-0349c0221e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3fc806-d6ba-4292-9231-254fa9e3140d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f127c2-deba-4958-a481-df473580ac91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3368c9b-0dcf-419f-88b2-eb91d48ce916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183d155a-e5b4-4759-adf2-436e91a6c39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf20f90-62ca-44d1-bf7e-23b554193f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512ddd2c-c47d-4b58-88e1-e50305dd1947",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cb5785-b7c7-46e0-90ec-a85761d2e368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ea3330-6dab-415e-aef6-227136dcb68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7535bd-744c-4625-923a-700c0cbbb695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17d2beca-bd45-41e2-9310-cedc3b83c8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb6f7ce-982a-44be-845e-1fecf85e72a0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c86f6d-eaae-4b64-811e-0e73fa440bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e4bf33-991a-4172-b83a-6854d207beee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce720049-fcc3-474d-b809-f8ebe3d34f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d433227e-c1bd-47f0-97b5-20c200504fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87660bb-f6a7-4e2c-ab0d-ef2b3d43baaf",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f733fe-4fd8-40b8-af03-3ea8dbdc2852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2189f2-b5de-4af7-aebd-d25f399b8550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9e279a-5f9d-4b81-b47a-eeff0f4739ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5baf7283-c4f1-4292-88c7-accf908c59a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a91a11-5ac6-4372-a5bd-4417c3ce7baf",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70638900-0d70-4910-828a-75b86b985af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e6229c-6af1-45cf-acd1-5b8926f60c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78b845f-13f8-476b-acda-f2179c3bca7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aea5000-5d3d-4e04-9b0e-09b1056e047b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39262d6-f4d1-48d3-8f37-7337f8166d1c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8756bc87-3467-4536-8b75-4db189a05ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5017f5d-03b5-4bd6-a325-7f5c718d2b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d235312-f730-42c9-bdcd-53169368417c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27914897-1ee2-42b1-8579-045388bcbbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6086b28-2dcd-49c5-943c-cbf9b6e7a760",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f14e282-648b-4adf-9c46-d12b8fac9834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d10e50-9442-4237-82a9-24d739071e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef12346-7f60-4665-88a9-d7f0f0a567bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a54e12d-d12c-4113-a0e2-185f8ef0ab8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c113564-8fc3-482d-852a-4aaedcdc929e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c34a5c4-3026-4f09-94d7-a4954b8294d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a014ffae-52db-47c5-a545-5719eeeb64b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bea983-9ff4-4ed1-914b-29210e5e7a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3dc1a8-d8ff-4068-8318-36781bcff015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdda619f-5653-45b4-8513-1abdd0ad5026",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7738ce38-77d2-4331-bdbf-d808c0052e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446d2ad9-262d-4c7e-b70a-24b104a34236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8dbf2f4-70f1-45ae-97c1-bc4c4af7ac13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7540a62d-c2dc-4691-98ef-bf8774204ff7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4bbb4917-1c81-4e14-97f0-37da69b18c6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c9483d2-f89f-48f6-8070-f3b1f92fab05",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f860a585-5b4e-4fbe-bbf6-422714c3e30e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c40e426c-1422-4e45-a40a-fc4a3619825f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b4b7c0-4020-4c09-9782-1feeb079bcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dceef9e0-fbfc-415e-924b-30ba497c070d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43ffd26f-04b1-47ff-af97-5380e70eca4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e13b70a3-eae8-4c1e-af50-4a4c66a47f8f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1a3c924-89bc-4354-ae99-48203fe62d3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07f7573f-fb1f-4444-939b-b714a68f9670"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "919bebc5-355a-4b1b-a883-b81801aeba91",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1e23f5bc-913d-4224-a63b-24a8fefb35f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2f467f5-61d6-4c2a-9580-2698d5861725",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0ca5d66-062a-4ac9-a57d-d1f1ab419026"
            }
          }
        ]
      },
      {
        "id": "80f3a2b3-3a1f-426b-80bf-49e56b0be388",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "67168ea1-45de-43e2-8c57-4438d1524a39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b9ab654-7761-4861-95e7-bd9cd96c7082",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7443ca52-e8fa-42e7-94f2-fa908313d729",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e88517-3987-4a08-8c10-00ea88fc3c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3611c377-a216-404d-b9fe-9897c16c608a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1674eea-75db-4b6c-919a-f99b9ca89bb9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80424928-e2b0-4b2c-b909-90d2cc507d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f15079-79fa-420c-a4d1-137b79424569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6077518-e2a5-4eab-a2c4-d9dc79764227",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f971b5-2375-4f9b-baf2-756001b64615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4792a0-e96a-45b2-a7cb-85b2b59d9ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03509574-5113-4972-a859-5a3e55d6ebe2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2825c765-f4d1-4cd3-b500-120666624643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a8faa5-af96-4d84-b083-5ee2340a2105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b67424d-ab27-48e8-9318-699ba2ffc73e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59af266-168d-4250-a9e0-c5bb074f0b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb00aa0-8d17-4924-b82b-1f2206c307b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d333a54b-a0b0-4cd6-aacb-2b39a40bebba",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e82572-33b4-4da4-b1d2-01488b2656c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee33835a-1455-488b-950b-963b084eb73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0169777-ff5e-4542-b0d6-fa32ed3c39a5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db757d2-e477-4f13-892b-9de8af09c6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a49640b-c549-406d-a4e5-5f9f65e1624a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a29bae1-402a-4159-aba4-1369a9f31ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb79493b-4dfd-416e-9960-11e9e4d09d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175fdbf5-88be-408e-9af1-70f0a47555d3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44677b56-58fe-45c0-b7ab-61494883d3e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9de04de-3554-4dc1-897a-0d3d578aeaba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d360cc9-23da-4a44-8ba3-5479c91c2721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58e2427-9d9c-4b5e-978e-a89d606cb4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7c7ef7-295c-41d9-9ce7-b9fc376b2558",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79acd813-0192-49a7-9af0-038802381eac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df517df6-3bae-430c-b211-eb201f90bee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb694977-90e7-4cb6-8734-3f2fafbcbcab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60980968-4eee-4706-8d5b-a166dfffd1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3743c5-1b5d-4216-976e-0776642cd130",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247aeed8-d1f7-45bf-b086-1693dfd8c471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2e66d63-a97e-4a24-a9a6-89db5b40a6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a950db-a00e-4794-b663-f5c2d07ffd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f891fb-c01a-43a1-86bc-d1ece8c7133f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063cb364-c90a-4859-99e3-456545d4989a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c92d735-9a7c-4b11-89e6-344ca28170da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5f16b7-365e-407e-ba48-6bf7d5c46417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6aab3f4-c7de-46a6-8c4d-6b4ce79aaf9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065578ca-55f0-4a80-ba3b-6b560fcc5d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac80a1a-07b5-4b64-9957-3b573ec8a487",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900d2001-ec10-4c5e-a912-f8f28a691897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0d39b4-0b50-489d-817d-b2c518624cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eec9947-64b7-4a7c-8f38-3869146ae529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5804af5b-54bc-4fb6-8f3c-8ec38c621378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c73c8c-d737-4f92-94ab-8ad6e85b4085",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932521ee-a9bd-4e1b-860b-28694dfb35d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c3c98f-65c1-4366-aafc-8675bd90c512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce52202e-cd4b-4dab-b552-05503507ad66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3de9dc-13f7-4b89-beac-ca284aba9621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e10b88-94ef-4228-a091-304b5d355d3c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4dd3e1f-64e3-4365-89f9-107474674e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad62e1d2-e47c-4f12-83b2-36e3a1e31a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e91722-ff43-4624-929d-a579fb30d6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5383eb9c-ccde-4842-b2b3-6511ebf051a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699252d7-4ce6-4af3-a492-9a49db4fc238",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73348826-6c32-4bf0-be2f-44ce0a209ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73bbdad2-4660-469e-b139-15a36f06734e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86f8116-cd82-4d3c-a327-cb6049e3c128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076a2db5-3ee4-40e6-ba13-30031be2ab0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fde0a6-948c-4115-8631-f88d3f025844",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e6eb29-03a0-4dae-97fc-7a2d19822d30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d708e686-421a-408a-a906-9d8a6505ec64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4b3d8b-3e3c-40c9-8435-3695fef663a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81b47ff-6b87-4f99-a528-24d1b248a66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33964375-737e-4142-ac1a-2caf67465007",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd45881-1a20-4c5c-b99b-c3b1be9e6f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31350bdb-e3ec-4fa5-9977-40206572deb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dddfc5-e5bf-4dbf-8fdd-38c951e5881f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1efd802e-7d77-4306-b886-cfc1aa7c25d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a180e00-686d-4443-993c-2abdccbfa8f4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd887da-71fb-41da-9879-4f62a12664d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542bc4ca-679c-4e83-ac22-cd92a5163390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0920ca34-b591-4c99-8812-09dbfdc2ea9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec1d3ad1-3fc6-4d05-a504-4e06476ceafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58633a1f-5c0a-42bb-a293-edbfad3df085",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40211aa2-cbf8-4ff5-bcb0-33730d79d888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a242b8-247c-45f1-8298-fced8a0410e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f9b907-b17f-498a-ab5f-403433752333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae00996-9b98-4bc4-8c64-05d26d7552ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5451ac-1a6a-4769-925d-e299de073f4f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37112976-8f64-4ed3-aef6-7d5a4357d715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940a669c-9976-42fa-b33e-6acd1ebabb39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339148c7-1c39-44c0-9dfe-4e70786fee7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0107262-e066-4c26-b304-95ed58bc1873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec4d1db-ed82-4676-8fe7-647c41ed2d86",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0135c623-f863-48c9-b644-77a414bbdf9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dafcaf-1309-432e-a8fa-0289eab637b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777421a0-77a7-4867-987f-6ff707cbe9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79876a64-2e77-4635-a9f5-68ad79157c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9872c9-0bc8-4d3a-8928-32db7ed4a749",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70982c80-63e5-4d8c-aabc-44428eea8441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63648ad4-a267-471c-b35d-8f61691b4353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2d80e4-63de-4813-acbc-c4a6cb426702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba085321-890a-46d3-8bbe-8e3f0ada611e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1028edb4-f7dd-4eea-8e22-e8676144755b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a36b4c-02c4-460b-902a-4f389671b9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bc8f54-1579-4e5e-ab0a-3a64af04dc64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f763e934-2253-47a2-b75b-afd26f0be15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2238a2d-b45d-43ec-b314-26ce534200eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5b9a0a-53a8-4a2f-b309-618b18b352f3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14714700-64b1-41b8-af60-287456a1e81c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40d92188-6355-4c7b-8179-6bada9d908e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75831f5-2d9c-4dc8-b5a3-8616bf7b11ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8c5080-8436-4b07-af3c-f1ba5623d0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b71e705-4505-4766-8f4c-740a732fccb8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee30001-7025-4483-a036-ffd9807dd0ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bb06555-f540-4cd2-8311-cd9ac6e1d185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ea4938-0369-4770-95ee-3f22a8d529ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e33a15c-9b6d-49cc-ad51-7a33196de343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899db05a-5776-4fac-a60f-152f421ba1ac",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc493ab-cc63-426e-be3b-1a7c37e7648e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "223eca12-36e5-4e43-8587-ddfab1cb36de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8d4060-fb5d-4331-9a95-70c332a2fadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98bef91a-d8e5-4755-9dfe-2bc208db0bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffec74b5-9343-440c-a5b6-718c5d2605e2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5db578-71a3-46ff-9c49-10206443da8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f821483d-41cf-42bb-822a-a8ecb91b66f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e20275-52ce-4c67-a35b-b8c692ed8207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f0b6b6-2727-40f9-b274-de2313a99c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18dba285-dc92-4303-90ca-838a97345307",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50103d31-6f57-4829-bc9c-ea4a83525b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b07359e-15b8-4587-89bf-51f2f131f089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ec8e34-4c40-4b07-88ac-0d7efe280b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18857f62-8f32-4ec9-94de-c2f537916f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9eab37b-6ca6-4aa0-9591-42c75741ddcc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05081ad9-de85-4993-a654-e1d4bc92746e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94032302-d4fc-4b72-939f-1ba69eabfb85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ec025e-813d-49b4-be01-a64022a505c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147693c4-cb42-449b-a6d5-30ad3b26990a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6e3f1e-371e-43a3-a0d6-cb4244bd3d63",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb623f9-1198-40bd-bc19-65d89813f892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6503e4f9-823b-44e0-87e5-8f6d3d7f4e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea8555b-c314-405d-a5df-4f449ae98983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b123c058-4698-4382-a3cb-d55bdff8aaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c56178c-55f8-44df-a261-59f60ad315fb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a321d08d-bfc1-4221-87a7-8f483f2d62a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ea77fb8-d3db-411f-af66-910ed6fcbe4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e66451b-95d9-41b4-81fd-4603afc22485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0d6a58-b3dd-452c-9567-ecee747b05bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e47d066-971c-466c-88e8-14513f97418d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbe9fcb-cea5-4db1-bdd6-099ba0311a48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84a8e8b2-c06d-4642-9392-b8709ebf8ce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea792b81-38b6-4fd4-895e-3b6e3bd19ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f2c49f-d8a7-4032-b85c-e029c4bdc22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb71a9b-3e13-4320-b82f-1ae23ddf54d4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28eb83d3-2967-4fbb-a6db-ba71f8a3c87b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0809e2fd-bb75-417c-b862-56c7534090d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209560e6-6853-491f-8d24-2e15eb143c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04090a9-df8b-4820-b0fc-cdd77ae394d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2175e4c-1375-4f28-9085-f47d1fbed18f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f75b15a-8c63-45e4-89f8-026b05e5db9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12de3769-33d6-4f95-b3af-7af41ac3a555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296e25b8-ecff-4004-8405-aabee287612a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85740c49-6893-450e-a6cb-432045c1155e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c200e18-ae14-4361-bca6-296497ab7c1c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503d3348-1215-4f09-9aca-0258b95be5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad765f1f-7cf2-4634-a3f0-e77963883538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed02981d-d768-4369-92d4-d4e6c12440e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74f8627-ec83-4f18-972e-bf52cd1a5971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53787e5e-bcaa-4279-aa50-e7f76b306d81",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acceb31b-5aef-4e0c-9a38-c8d7b608077a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33dcf0e3-5fe8-41b4-aaf0-2c0a89d333f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65e926b-1056-4816-baba-66937acd90ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad8481f-e54c-46b5-a721-6b0670c1e43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb43caa4-729f-4775-985f-dbac17b207fb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1949f299-9a0d-40d7-936e-1a8f119661e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd007879-95cd-4ae9-bf61-42eb71be588d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f166189-d5c6-4888-81e6-d24eebd715e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c5b073-e249-4cc9-be4d-4e309e55b090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8edb83-6770-4fde-b440-67aa0e6b54bd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b792923f-4415-4025-91cd-331ab7539c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e9e7f90-d89b-4ac7-ab4a-c306c93437f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20da98d-32cd-4f16-b3dd-d5b8158d45c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df36bcf-e0ee-46e3-8881-aa49e929513e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43f87a3-8805-45d5-8030-7ff072435afe",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d05c0e-1c34-4e8b-b3f5-93097b112316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237b40cc-997b-4e34-b903-753137be4aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e68522-8481-441a-881c-c4d343012e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "decb02fa-f08e-439f-a8c2-828845a6bcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d856db4-b143-4816-88d7-7383fdaa4d5b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ff8440-1a63-4ac4-9625-5c72c8173be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f1fb2b3-abf9-4ad0-88fa-66f93160d50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f58354-a48b-41ca-9730-db0a19277be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872c2771-0b7e-46c3-9619-d282da5e9bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc655c7-1095-4fee-8c71-052258f71be5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ead065d-ec3e-4390-906f-8b1e27b90bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3ed9cc-d570-435c-87b6-26e1aeb26f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afb30f0-1852-46c1-b753-0948a652897d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444f745b-5354-4d0e-9ff7-43db17f0542c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ffb5bc-43f5-44d7-b218-50167177472a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba42f48c-660b-47a3-b5b3-cdf341105c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee1ae43b-908c-4667-9bca-f33de301ff70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc82e38-96c9-4962-8380-ff2cb00a844c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c2be15-f8f5-4ab7-bfcb-650724af1ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e87be56-6032-4a23-928e-338dbfcdcd69",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2bf6ea-f085-4d80-9e66-90cb4c8e575d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56536fe-2768-4987-99e0-adf2656831b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66145e1d-d8e6-470c-96e0-9dc5e3dfc288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde27c0f-bbea-45a9-aa38-24a3a5dab294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d765a63-da5d-46b5-8a78-98fa9b430377",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4376e66-6538-40f2-994a-b9279bd16f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4addc697-f543-471e-81f6-ec5c4266af36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b161998e-7aaf-439d-918c-6d6cc274964b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd41903-47cc-4c73-b17c-ae3bfdeaef01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd362a6-ee2d-489d-ac27-0048452439d4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51543f43-bbc4-472a-af7f-e40f45aecc79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e09ceb8f-fd5c-4820-a027-228184bee218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16528fd-091e-4127-8da2-b9d71a7a3c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497b2309-2bea-48f0-a8ba-379f0e18d069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be73056-2e7f-4803-bc47-f6948808dfe1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c34d22d-8d29-4efe-97fc-d3b7e94be5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc0066a-0767-4d66-b151-5e5ee3dd8d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5576b45-4450-4eb4-96d3-baa1e01958ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6936e29c-32e7-45bc-816f-e09ad98f9102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad785067-4edf-4277-99b5-d8a40c4d36dc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2674626b-4216-4587-a15d-e4e54f594449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd0ff248-d512-4d97-9d7a-75e02173567b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "324497fe-3eaf-469e-8457-da3ecc235665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958f481f-598f-4412-a680-ef3ed49a5bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02df403d-ed8a-44fc-89de-20fa7fc4e00d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65a048a-a0a7-4fd5-9de7-1df4e0b130ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3c530d-efdb-4fc1-83a5-95d74209778c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d858cd4-aec5-4b04-aa24-c5622120614a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb5b3e1-09f4-4700-9428-8469fc61e405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8817f03-8c26-4dd8-b2bf-7cf4bc2c71cb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d7398b-7ddc-4807-8d51-6f953f11ce20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a6b42d-02a4-408f-93a3-716be2aed759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fd5ea6-c743-4db6-a0e1-604185acdfc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fca0bc0-ce64-424d-b853-b9330982d956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5353ffd-8962-4ddf-a530-c39e3df788fe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c925943-c255-497f-9130-abbe8170a368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b42dd1-1340-46e0-af5e-49c5c705f379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1bf80a-aea1-4e9b-a62b-242a10fe196c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a6de32-3268-4aed-a98b-d777654f5931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f88e53e-6ba0-43c2-bbaa-265e8901f73f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ff72a5-ee7f-4672-8c01-dff005c0bb74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863af899-7588-4c84-9557-4bcf9def4a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed94450-7e8a-458b-bdde-e2fd51d34990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66622393-98b9-48f6-9441-123547fa7ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d85c46b-5f60-49e5-b8a3-a7a3e407dac2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b0e95e-53d3-4133-819d-8e5c6a580b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe0161b-cc9a-446b-9736-50ade04047d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12da61c4-7e17-4325-9af4-621b6c99b68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3ad895-6527-4559-a4bb-3b3f9fcc2228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44c7523-a2cd-4aee-85fc-a6d172047ecc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a750df90-b99f-4fb8-8945-8ee47e6dfe28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308b457a-9a00-4f3b-b7e3-1f1a55522d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf79869-efb8-406e-931a-06df555f4f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be051672-e611-4793-9580-c4a7fa7f6d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1448ad-788b-4762-8e92-9b2abbf0ef8f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e80030c-6bdb-426a-ad32-16519433d26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9966fe2-77c7-429f-9be4-20730963959f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b972a2-eddc-4e46-ac19-c9a1d3151f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9256cf1-2579-4546-9315-aaac50363ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f37d5be-2964-47f3-a597-7517898d481a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed793eef-72ba-430c-897f-d743e7fe4635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe85c609-b520-48dc-a2f7-376eb40fe868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d38104-3d50-4c5b-bb50-1266db1fb3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a084dfae-bd4a-468b-a81b-a96921e4044c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70184b64-3a84-4fc4-b64b-ea5ee8e3ca13",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c02e32-a052-431b-8bc0-212bf5bd2aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5967c6-ab1d-4f37-bc27-953eac63e9c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "284a96b4-7a72-451c-b978-6d82f2344825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad16828-dd2c-49f7-93af-4665377b02b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e277299b-9eae-4ea4-902f-3a428235a6c5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e68a5f9-f8b8-4ad2-8c5d-7f7ea1b606aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df889de1-0021-4c91-9e5b-263387b42d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09514571-1b6e-4ad1-891e-615194590733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9ff5f5-606f-4cd0-8aa4-bab1eadf0ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12461416-79e3-4504-9c02-a514dff8d1d2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1402df07-e6bf-4c8d-a054-69b1db15639d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ae35b1-4bb5-4a3a-9c7d-8d42f1536224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fc8e05-dbb8-47d8-a1c0-74d866f41e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755e02c6-f330-40a1-bb9b-2564ad7ef6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cef2df-9c81-48da-8067-46b238770810",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858fd514-555d-43a1-bec3-e12693ba3bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8bd69ec-8bbf-4e8a-b16d-3eb34f92c5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7699e8d2-0460-423f-88c3-4b92ff685112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29d08a4-8519-49e7-a433-1d4b6734cf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295735a9-a245-49d0-9bf1-388878969334",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e065eb5-3c2c-4cc9-970b-33209a2e1ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a771ab-0e1c-4ed2-bf23-2d15bf121e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe0680a-6356-4fc8-ae51-99fd77c4979f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78358220-8e5b-45e5-9586-c007a6e875a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956fdcf7-2b54-4896-86e6-83a9105d853c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815665cb-8715-4a5e-99a6-7bfa9e77f29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b342ba5-a5d9-4090-82ee-ee1e94f53a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1dfd4e-2d83-4457-afce-d861e6f7f363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431ec353-47c7-4ab0-8164-83f0aec5a19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd641c2-84af-4212-b880-cddbdd94959a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463807e1-b3e4-43f0-b9d9-2442340f2a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d575498-687a-4459-a07c-a3714e4d7c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaae512d-ead4-4d70-b6c1-c3204576a3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e182a0d0-c2f4-46fa-a6ed-b786768227f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20cfba5-3a9d-459b-a302-4d01a096fa20",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea144e3-e536-476d-a891-2160812a77e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64f5d3f-2a3b-4b66-8fea-9acc47541ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "518dcd1e-22f9-4658-a0aa-8b7fe257963d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbb630d-ffaa-4424-a7ba-26f1f73ef8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d8780a-cd6e-4067-a9e2-f79bf21bdc1e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab9de80-56d8-4f03-b53c-05786cb1955c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3be258b-b528-4f02-8514-de49a9bd5d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f29c53-f872-4d28-8bf7-3ec731bfeb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73bc9fe7-cf6c-4732-a321-430a513d31f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24975f2-6840-4b60-92a6-41dcf138a640",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01982621-e058-49b4-bdfc-2df4fea24dcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64166e17-f637-4913-b72f-cf63e4a2d146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8c7095-beb5-4197-acfb-af10a06a14ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f71be52-0782-44f9-a409-be5bb2ac562a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4632769-11cd-4450-9535-f1860017efe0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb56997-898e-4fd2-8086-22aacf1cfc00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a7c21d9-058c-4cf8-9ec7-8679d62517c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68c779d-ce10-4cb1-9981-98475d11136f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce744628-f772-41f6-9e5d-65210779f099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfc7bf3-53a6-4071-9fc0-4daef3489be3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5888540-0076-465e-bdbc-27811c8b3ac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed037be0-458b-4216-b24a-e839235548c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046a64c4-8fd3-4c4b-84a2-7c4733b0da46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061a06af-2b2c-4135-8a0f-e375d666a29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96e1b9c-346c-42d3-a8f5-d006e09cf6d8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33b8c7b-cf44-4b93-86ab-16f02b1672b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3298ea-bb25-473a-b7b9-bc19b48537f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a83958-745c-430d-8164-86627e96b38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb4bd1c-1284-445f-9ff7-83b4770995a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14648255-4b5b-4b74-bca7-63e92a1fee41",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce54d60-3d45-4e8c-abf2-1e028c77dcc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59e3e040-0f2f-4cd8-9dd9-c688d9e28b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0d41c8-d8d3-4108-bac1-27ab34492f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3358943b-a021-4425-98bb-34b4a9f46ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7657c2cd-a276-4ffb-9d37-f68c639d7c03",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a575af-37e4-4066-a075-4a9dbcb27102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e031ed2-3ee8-4376-9c99-217834523219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f772be-5b51-465c-a59f-53416426d53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae70f7e-6326-4235-af57-c2d7ded76106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484677d1-a7d9-4a13-8bcc-3272c0771b12",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1f78be-0c4a-456e-81bf-ddfb1f1d1eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ca19f4c-b76a-465f-a4b2-4db445dd00c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3a364f-4f09-4b3e-a74d-6407236de9b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f454c8af-5c85-49c5-a677-3e63805733e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2ecea8-98f3-474e-9277-17b6f5d02091",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96579e23-41a7-477b-a4a9-766a271f21c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "757f93ea-038a-444e-8c66-5eb185eba929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e677ca8-56dc-4508-915c-1c6412f55f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f25f3e-4a92-459c-84ea-82a432883267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110d4b5b-93fb-46bc-a184-be824b504562",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983bba3b-03bc-4144-848d-53b8d8004304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42951e82-b5b1-4fe5-929a-5ce4cf2a2134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12063ca0-41cb-4fc7-9391-aa83f2ca141b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bee6468-1841-4d2a-8956-dac057406b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a61f72-fa66-437d-9f44-c37a150a7204",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ed894f-fb1f-4058-9a7e-e5f25d0b392f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2437a653-f6fc-4ef1-b834-d8c719573e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e713c6-d5fc-4078-b133-f57bf2526da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9da0e0-0172-475d-a39e-55741f296f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44418e7d-c76f-4724-8ab3-b5f5e6b9365a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09597ce5-963c-4405-a725-89c126e58b16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcf2f3dc-78cb-4165-8a37-7815198ed7af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "424f525a-ac6b-485e-9310-dd56cc054b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7231062c-f568-47f7-a0be-60a286985f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eea5e62-9ede-4bf3-a923-4c6b470806c2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4635e035-9b57-4865-95f4-5fd4e75d6e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eab60dc-03ef-44db-89c7-6dec6eca46c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5e51eb-d4c3-4e37-992e-ec02983334d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b32c7b-7ded-4fb0-ba27-dee432408205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d308221f-bf01-4fb0-8e7b-2eac02a2a1c7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a1ee25-0520-4643-bbfc-29942728237c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f078c8-a39e-47c7-ae01-46d4619a0b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4177d992-cad6-4eaf-92ee-90b7f0fd2299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0ee1ce-12ca-48db-b248-90e42283dcf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0332b68d-4163-4530-8e5a-2f548feb9e7b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b00ccc-ca99-48d7-8579-134b8c5e4366",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "272341d6-8dd0-427c-98dd-3cfb46822036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2300224b-fc9f-4a9f-b51a-b3ca28180b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32a0cd0-5571-4f87-ab33-b7e58ebab7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e914b5e4-d881-49b5-924d-bd4a16de3a3b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2089b2-1eca-46af-9cd8-d0cb3943eb8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77e0fe0e-4c3f-4c56-ac2c-6735d008e10e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c24054-991a-409c-9155-4f54e3c24944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d996d7-86ea-48e6-be5e-67601523e318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587f5c7b-46eb-443b-93e3-08c1d62c3617",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cd6bf1-3576-475f-90e5-1a3028225986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb3ea61-c089-4b67-9559-0c23ac3a3f97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79377e7-c0e3-4030-84a2-ff00d5021a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce69ab3-bca2-494b-95b4-ae938ffb1281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2375237-06a0-4c9f-bd9c-04ae907f4dfd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb7ecaf-ba98-4fb2-a5e4-8d1483d15f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da0d37a3-2b3f-4db6-af07-4b3e34766c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e082d7-fff2-4314-b88e-ef4502bea3c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9524088-ba27-47ef-a836-d04cbb1b2743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0750586c-13c4-402f-84aa-4e0db449fdf1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9175453c-8874-4e75-8f13-8ca6d7413993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "351b7a0c-993d-44d1-b377-d7c462142dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3b6514-90bb-46e1-8db2-87849bf005a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a212d4-89e5-4429-9189-0e61656405a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c41c2a-aa07-4e94-92dd-aa2600888056",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a1dba7-5dcc-4754-b019-4114a0e89dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e54e045-fa1d-45d1-b003-825c7cfdd350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4353f465-f50c-403a-b994-68ba3cd686fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e5fd38-91fd-4d12-a3b2-a4dfcd4dbd50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcfb663-6df6-4833-b3ac-50d4cf39188f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57853436-b772-4978-9c9e-d69efec4f070",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22b8affb-9cec-4211-b313-c58d33fd9a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a4f5ba-0d36-443f-bdf0-04a1b085c2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a82037-0b22-4e08-9f8d-3c90e7ce971c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994d9b91-af93-4bfe-bc95-24c264fed1df",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a32612-8977-4149-839d-c6b8c3828d2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e17110-2905-4973-8ee8-5360210d2c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dced3756-12c3-432c-afa6-3e0df2a36cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4dedad5-001b-4346-9a63-ffabb45d471c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8677c787-5df9-46bc-9569-990e1501fd78",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec91cfa-7365-484d-8128-639c1e0bd8d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d40d8d51-ea82-4e12-a0db-fd60a5b7e07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fe72a2-96ae-40cf-bfa5-748135d7c942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae84b8bd-8aad-419a-aff0-c4fef8273ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bf0dc7-fc87-4b86-92ba-f48f7a60db57",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d6b50e-b9f6-429a-af47-f76fcc4d95bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afff6227-4fe2-4051-b306-449e2fbac278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bedef68-e345-4711-8134-2e6a485c216d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0811b3c4-8662-4059-b1f4-3ba7e2fab767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1d70be-3ff7-4bd0-8611-13eddd725c48",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7a9144-bff4-48c1-a343-959dea9041cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48154db0-b071-4a2f-9642-74fe20b44993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e100316-b1ca-4bc2-9862-c9920f88cdc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b7838b-4f09-4781-9013-c74f60c83b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4641b53-fe95-4430-b862-4959da970f75",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8adc771-6ec5-4dde-9789-4b2a3c188bfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "015151fb-668c-4177-bfb9-b47f3c88b3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7a370c-5532-4d74-b38a-74fa8e3af8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7325cb-9e59-4c15-bb91-6a97cc66de1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96c7788-8fc0-4194-90c5-fe33f20b2343",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d244cf61-0069-42d0-a41e-8972763f846a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e6dbf2-e4cd-4c17-b201-9983c0ecb3e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2b3510-5b9c-4b4b-b877-e6202868c86f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ac5d14-9c63-4089-a257-d0a6b7c5c15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec263f5-98e6-49d8-b8b3-8a9a41ff74d5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13180b6-afb7-403f-b38b-5a555ccf0424",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c0d1b7-31fc-4a8d-a3e6-54dd9dc35de7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52077c5f-8ac4-4672-a4c2-97b4a80b6c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c15df2-a124-464f-97cf-d3883eda0cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36bdaeb-3765-4cbd-a4d8-079e3cc54bc9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af48dc0-ee17-4114-8bcf-7130f4e4e8b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45d8af64-9a07-4805-9ddd-df847bf1a36e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65b1676-fdcc-414e-90f2-deda26a5bff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c941fd-6b23-4b83-b8fc-2e4863267134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1295a6-c3c5-4d1e-8607-0af12c50a868",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfced01-8ead-4361-83ea-31d0daa9c7d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8d0a802-3ae1-45d5-8d0e-c53787596d07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c436f2-12a7-4e8b-831d-c67deceb07c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05361f8-deef-45bc-9536-79a82f9073c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c32a8f-6705-4bcf-8603-7342f41fa36b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6de1dd0-4c3b-408d-b0ad-d1b7e045f01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41964a32-31e4-4ba9-8ba6-db27dc7e5b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbe518c-abc3-4023-85e2-22a8c7ea0692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e6e0da-c80f-4474-aabe-068b0e166f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777846b0-de26-4efa-b393-41547c0c973e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38674976-60d9-4066-b232-e2053391600d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61128ee8-770b-42f1-908c-c37c0a911109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "892744d7-0a48-4dea-b3fb-9f6599eed060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c514666b-7344-44fd-803c-559ee2ad29b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e132f788-e40d-40ca-bff1-cd3545dcc89d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40ed345-6308-45dc-a05c-df39adda2475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "469c69d8-b3b1-49fa-9858-3643b42d8e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71438203-1bff-467a-b6da-7bf4509db70d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0685367e-9eda-4e84-9116-6986569027ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0158fe3c-8931-4f91-8e67-880d05222dfa",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4317cf-3936-4249-a9c5-54dbe22cf237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f8d1519-9840-450d-842e-521d7d35c4f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4556c21-c6ce-40f4-98a7-16e6d264c73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5ed28f-b43b-4c6d-a17e-71dbacceeab8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f19e0bff-db43-4e6c-a6b2-ebad9ff53519",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bcb5dd0-592f-411f-a5c3-c5a9b256b312"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e51365e-ebc4-47da-a476-5143380baacd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5679be60-4005-4663-82c3-456a6c91afc6"
                    }
                  }
                ]
              },
              {
                "id": "24816861-9a6b-47bd-9e67-353e821ba47d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a614d19-1bf1-4b7a-9020-5f090cd67ba2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bf79e3-5bf9-412d-8045-c83ed833f826",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7cbb09fd-ce05-49d7-88ac-2fa27cc504a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe890a2-2bab-41a1-94b3-df304e127132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7faff9f3-a738-4730-a1d4-17bd327f907b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cbeb348-f151-49a9-bbf5-36b57c56c998",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bec42ec5-3eb3-4860-b357-45ae4414d2ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b5006e9-372c-4dbd-af3b-b4d9fd26f87e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fab9c375-04e1-4c27-a65b-437f6149178f"
                    }
                  }
                ]
              },
              {
                "id": "3c8bb229-bdd7-42ff-bb95-0f691060b2fa",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "67265c2b-0dcf-4f52-8a1e-266696d1f16f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d00e9e-62b1-4d55-af36-15a38d2349e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0293c9ae-6a01-4645-8528-2a0075c0fd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5e48d6-46fe-4588-9030-73a896339d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d0e2fd-f0c3-4fe0-87c2-a3987e1748f4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ea206e91-cd2a-430f-9048-b3ef59339c33",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a9bfcc13-e280-420e-a16f-75f4c7dadc6c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c96b5edf-e8fb-45db-9479-26c2d164ce81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1609998e-68dc-4e87-8026-29fa5b0d3be8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "240ecef4-3676-4d61-b206-c16bd40fda0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b9c1098-5ae9-4932-92a6-c2c5b81eb129"
                    }
                  }
                ]
              },
              {
                "id": "825d9abe-de28-4838-a03c-3fbbbbd48e96",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3c02aac-326f-488c-bc4c-2f5847909744",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f2e403aa-b31d-44b3-b01b-360b3f841f25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86ef5417-f1bd-49d1-8d8b-91594614aa2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f59831b1-c38d-4a09-80b6-f06395d965c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f7ee57f-f341-44df-a11c-3386f310dfa2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b1858d97-a9b6-43c4-b7cd-a4f925087143"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "932ac639-412c-40e0-82eb-6f2aa01a8c13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26317da5-9e9c-4ee2-a3f3-c49d835d8834"
            }
          }
        ]
      },
      {
        "id": "b3154f73-a640-496a-9fd1-4b99bf5c7be9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d645dad4-c700-4bf1-8da6-ff59c3ceb2a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d6b9ff9-799f-46b8-a965-41f4eef0d33c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4feba08-5f4a-40f6-b5e9-da4b7f933a0e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b361afb-be0a-4fb3-903f-04c493518eff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f10cd6d-5a5b-4390-af9a-a1706edcdf3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcdc62d-b9ca-440f-a4cc-9eb8fca250d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02cf992d-e292-4f31-903d-6eade59e42b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90e7423f-14db-4083-a3d1-92d7c4f6433b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3440f06b-135b-47c3-9140-a4c7f98378bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc68b42f-9766-4180-8b25-544220a0a004",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbdc8b4c-d0b5-44e2-841e-f1332266ef1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31dc0293-8439-420a-af86-d43a1a439747",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c5d34651-3602-43a6-ab28-26a634e1382c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e62bdac-16b0-41ae-b66c-1e0ab57bf3f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb7e8366-108c-41af-b8a3-9dbd17f4b9da"
            }
          }
        ]
      },
      {
        "id": "2c8a5522-8e88-401a-a81e-e68d0e26dd5b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "73bad7d9-ab56-4c7e-bffd-575946c96789",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1929b70d-c025-4877-af13-f16f5363cf26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f956c5b-b777-4969-83a0-c5a67b3cb5c6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ba8421-9e56-4124-9e6a-75f8c9ac490f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ef12ae4-e659-4d2e-bef8-969a458c7f2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1226660-37c9-4b96-9e70-446376495fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "047a5291-5887-4dfc-a51d-d0e01c7d201d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f5cd148-2399-4894-8038-437ae1d9f12e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1297fb5f-4c69-42dd-bfe7-0d365926792b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01b813cd-bf3b-40d8-bd9c-ffe6ddfa95c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bf3833f-bd7f-438b-8a28-6ef29ae3e43a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "684363e7-e3de-4c4a-81cb-af6dbc7c9af1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7b310793-3a7a-4427-a072-1462a5fb0083"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9c14664-8cdb-4eb4-b81e-1da7fdb6f539",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20887701-ccd9-4e5e-98b7-b745e95df4e7"
            }
          }
        ]
      },
      {
        "id": "e71afe05-1e68-4cb0-a96b-e612966b51fc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2526739f-ac04-4a33-96bd-1e975f76114c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fa2d364-2788-420a-83dc-c7e850c4ad53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8119787-f4de-4e48-a268-498fc1ed59e5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d32f1e4-445b-47ae-91be-6487a16c04bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a51596aa-892e-4e0a-8be4-55d9d98a99c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abd87bc-de4d-41f1-8cfb-758579c92ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2225079-bbd0-4461-8a6e-aab61b5ef504"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39d8e21e-375f-4e07-9b17-487a4a2666ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d967773-4936-408b-a2d4-db3129fad1e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9804826a-aeb9-4940-8856-221bfcb057f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3e7b258-5830-43f2-8688-8c958ecbb8f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70a10e88-815e-4caf-9490-3b159a634920",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "698d7955-abae-4806-b939-c72cfce49e94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "860f0907-857b-4e82-a9bf-445e987b5312",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4ee1dc9-829d-4def-bbb9-f2940ada0a5a"
            }
          }
        ]
      },
      {
        "id": "575ffd44-1589-4317-b883-4860c7cb99f5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fd766b7-59b9-4821-b1e5-051a8c9d7a0f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2af9ffba-e4fc-4bef-b7e3-8fdb5d351c99",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1bd42b1b-d1af-4c5a-9c1f-941aabf678fc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64b81cdf-17d2-4c22-ad6c-e0c960f14a2f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82be7bb6-8f78-41d4-9a39-adc4ab5e7365",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.44210526315798,
      "responseMin": 5,
      "responseMax": 307,
      "responseSd": 21.228274321187442,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711672460204,
      "completed": 1711672487501
    },
    "executions": [
      {
        "id": "db0cb87a-b80d-44e8-9638-f156d5572ccd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e7edd33c-845f-4cc2-8389-61075c185802",
          "httpRequestId": "afb624ae-1a02-45e0-b811-bc5b060c1ed3"
        },
        "item": {
          "id": "db0cb87a-b80d-44e8-9638-f156d5572ccd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "734696e4-b4e2-4909-a9dc-90aaa7360936",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 0
        }
      },
      {
        "id": "84c210e0-5dd7-40d0-b347-6595eb6c6751",
        "cursor": {
          "ref": "c4e49bb5-3add-4d36-b2bd-701db40dc986",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3e2a6838-f98e-45ed-a1e2-e03b0f166187"
        },
        "item": {
          "id": "84c210e0-5dd7-40d0-b347-6595eb6c6751",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9a43b414-a02a-4637-b609-cb57615b8c17",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "d293354b-ae1d-455d-8df6-83b3c4c9e5b5",
        "cursor": {
          "ref": "a3090f2e-92f0-4242-a392-e2c43827d849",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cf534c92-4c0e-4f84-b7ca-2a8650fb0d0a"
        },
        "item": {
          "id": "d293354b-ae1d-455d-8df6-83b3c4c9e5b5",
          "name": "did_json"
        },
        "response": {
          "id": "637dbd75-e810-4ae5-8ba2-83f7c619b05a",
          "status": "OK",
          "code": 200,
          "responseTime": 307,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113f6505-4129-49a5-8a61-fdca8c298dea",
        "cursor": {
          "ref": "6aec83ac-030c-41fd-8bd3-311fbb9d4553",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "501e4567-9cff-43bd-b120-7e952a655c3f"
        },
        "item": {
          "id": "113f6505-4129-49a5-8a61-fdca8c298dea",
          "name": "did:invalid"
        },
        "response": {
          "id": "ed137f88-7d2e-4a17-9af3-2e23fd12e452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113f6505-4129-49a5-8a61-fdca8c298dea",
        "cursor": {
          "ref": "6aec83ac-030c-41fd-8bd3-311fbb9d4553",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "501e4567-9cff-43bd-b120-7e952a655c3f"
        },
        "item": {
          "id": "113f6505-4129-49a5-8a61-fdca8c298dea",
          "name": "did:invalid"
        },
        "response": {
          "id": "ed137f88-7d2e-4a17-9af3-2e23fd12e452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7a9b9f-7c23-4369-971e-e938c024a271",
        "cursor": {
          "ref": "8197ed8c-527e-4ed3-9f88-a78c21f6b177",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "03fbf402-2da1-4300-85b7-266c28f47cd4"
        },
        "item": {
          "id": "df7a9b9f-7c23-4369-971e-e938c024a271",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "cffd71f3-b4fa-41b2-b037-8cbb2934a9a6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 155,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07624139-62d1-424f-bfba-a23cbe4768df",
        "cursor": {
          "ref": "13e7d56a-d58b-41d9-9036-171ec2560e87",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f6d5af14-00bd-4c1e-8bae-3df505d29424"
        },
        "item": {
          "id": "07624139-62d1-424f-bfba-a23cbe4768df",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e0e69639-2af7-46b6-b874-0865970a5578",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29417e5-7215-4793-9808-beed3c1f39cc",
        "cursor": {
          "ref": "5c6aafa2-43ae-435e-b22d-7d58ef0cec2d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a5c8c46e-c375-4297-89b4-97fe07066a5b"
        },
        "item": {
          "id": "c29417e5-7215-4793-9808-beed3c1f39cc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c1b644ad-5004-4cb5-85ba-0b7ac9c44a0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efa253c-84bc-4c79-80d4-ac6659c49bfc",
        "cursor": {
          "ref": "01823a1d-071f-4a2f-b999-4dd3fd8c19de",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "87be4bbb-127f-45ba-98b5-b395a482c75f"
        },
        "item": {
          "id": "3efa253c-84bc-4c79-80d4-ac6659c49bfc",
          "name": "identifiers"
        },
        "response": {
          "id": "840d7596-0a71-4693-ba84-a4b6ddea6985",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82582f39-22d1-41b6-a273-d6c3c56f6a43",
        "cursor": {
          "ref": "02f6dc25-e637-49e9-a56e-56653d8b1e48",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "77025e51-f238-4026-93be-0eed096bfd25"
        },
        "item": {
          "id": "82582f39-22d1-41b6-a273-d6c3c56f6a43",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9a278696-7f98-4a77-a2bc-86f8824c232a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0696979f-b75e-412b-9568-6c488e3b0f5a",
        "cursor": {
          "ref": "e84cca29-9dff-443d-8610-e80eed192f0c",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3c7de962-a49c-4617-a2ee-c7c9795f4155"
        },
        "item": {
          "id": "0696979f-b75e-412b-9568-6c488e3b0f5a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "13f07f80-5f4d-432b-a9e9-79472be6199a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8452d09-ea29-43ee-9cd9-f71eb49724ee",
        "cursor": {
          "ref": "19d5fc4b-896d-412f-8e14-4eac023e21de",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5084303c-8fd8-45b0-b606-62c2ef7dacde"
        },
        "item": {
          "id": "c8452d09-ea29-43ee-9cd9-f71eb49724ee",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ac2679f8-5e54-4bab-916e-b5bfca25a2b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08009ac-0923-4c25-bd95-4251ff907253",
        "cursor": {
          "ref": "0a6b4f1b-83a7-4da0-b72b-262507bfd932",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "35646ca7-88b3-4762-b39c-97216018b54c"
        },
        "item": {
          "id": "c08009ac-0923-4c25-bd95-4251ff907253",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4c91acd2-14d5-4bf1-a34a-b563b16a094b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b765ed26-6083-46bb-bae1-5574e7445262",
        "cursor": {
          "ref": "f2f41c09-4ffb-4a01-9f02-947de67ef08a",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bb8f5dd9-fcc0-4945-866c-f4544daf0108"
        },
        "item": {
          "id": "b765ed26-6083-46bb-bae1-5574e7445262",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cd7fe845-df05-4758-88dd-eba6ab4d702b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3d78da-a5a6-4aa3-9fa3-0c063659cd58",
        "cursor": {
          "ref": "c3974b74-17a2-4344-a7a7-71f3a36938ee",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d1ffb2e1-e771-4f9c-882a-ea95cb3aca26"
        },
        "item": {
          "id": "2f3d78da-a5a6-4aa3-9fa3-0c063659cd58",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8b51bd9a-b345-4c90-8767-05395ffd75b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa6ecfc-2a3f-417b-86b4-38c9d1ea0998",
        "cursor": {
          "ref": "0b21911b-2dfd-4696-8591-bbb65896b7a8",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "59dec6da-43cf-4442-8f01-953c23b21f0d"
        },
        "item": {
          "id": "4aa6ecfc-2a3f-417b-86b4-38c9d1ea0998",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "cc38e832-3b3f-43e5-8280-6b885f06992b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16886df-09e0-4290-9a25-cb526010eb4b",
        "cursor": {
          "ref": "436cf4f6-71c8-4979-bc45-25f4a9dd2737",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "717ac2e2-a2aa-4bfe-843f-75ff504d00f8"
        },
        "item": {
          "id": "c16886df-09e0-4290-9a25-cb526010eb4b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6cfbc569-7d3b-4948-8565-1f1a0b3e23b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102c3d10-1b2f-4c89-96f2-a5e51eb27120",
        "cursor": {
          "ref": "f05ffd62-453d-402a-88f8-88e347c63b92",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "236d35b6-edba-41ad-b142-4ab6c500784b"
        },
        "item": {
          "id": "102c3d10-1b2f-4c89-96f2-a5e51eb27120",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f2f74fe1-b01d-4649-a441-a5f0589d2053",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8af155-dd9f-402e-bf2f-7b5d0ac30dea",
        "cursor": {
          "ref": "46cec8c5-98fc-4432-9091-9167a4c0c955",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bf6f3c51-2f1f-4627-9efb-a5916a18a5bb"
        },
        "item": {
          "id": "6e8af155-dd9f-402e-bf2f-7b5d0ac30dea",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "49323e86-2281-46aa-a168-44cb54a7b677",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172b148a-9d62-47d6-a2a5-b6eabe4ac9b4",
        "cursor": {
          "ref": "841963b4-d73b-44ba-b4c7-89a09e8aa9db",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e7b279f8-2002-47b7-908a-371c2ff38cc3"
        },
        "item": {
          "id": "172b148a-9d62-47d6-a2a5-b6eabe4ac9b4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "84746dbb-ab51-4106-9af9-e8a5366fb057",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d4ec2a-87a0-4f5f-9382-fa98698850a3",
        "cursor": {
          "ref": "707707bb-90a2-4477-8158-cf62950917fb",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f0d3924f-d35f-4c1d-af73-d1da5ce85f66"
        },
        "item": {
          "id": "17d4ec2a-87a0-4f5f-9382-fa98698850a3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7d590c6c-5edd-4cd1-8c0c-b1a689cc6d2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95774f91-3eda-4872-bdd4-4c9dabe23b1d",
        "cursor": {
          "ref": "d581feaf-704e-43b2-aed5-7552009788b8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c5ed00b6-3edb-47ae-9225-003482d44f8d"
        },
        "item": {
          "id": "95774f91-3eda-4872-bdd4-4c9dabe23b1d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a970021b-2310-4559-89c1-0ec2aa68c10d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3881df22-c3f1-450e-a037-db77d267fedd",
        "cursor": {
          "ref": "2a08ab12-3c7d-4b25-8431-9b1f71eb9ff6",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4b116cf9-41bf-4638-b7b1-385847ee49dd"
        },
        "item": {
          "id": "3881df22-c3f1-450e-a037-db77d267fedd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0c1509e4-b3a6-4b58-ae34-ad195f563635",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7add968e-a007-43c3-9731-091fc744ee9a",
        "cursor": {
          "ref": "7e61c557-2817-4f94-9a24-2083cc826126",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b593ae4f-f605-4988-899b-9c6e870a68ed"
        },
        "item": {
          "id": "7add968e-a007-43c3-9731-091fc744ee9a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "28d4bc7e-4990-4325-b909-59823cabe04f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88ef7c7-ac1e-4a4c-a1dd-862985d65635",
        "cursor": {
          "ref": "de86e187-623f-4c3d-b859-9306166ead8d",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6b1b6a97-07e5-4504-acae-2cf4fb538eda"
        },
        "item": {
          "id": "d88ef7c7-ac1e-4a4c-a1dd-862985d65635",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c342b11c-2a7e-47d2-ba75-9709ce4d573e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111b1331-d9f6-46c0-8c63-0594b30ad1f4",
        "cursor": {
          "ref": "40c9f26a-1ebd-484d-96ab-16787735c34b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4b9580a5-a5d4-4aa7-b099-e03bb4f68b4f"
        },
        "item": {
          "id": "111b1331-d9f6-46c0-8c63-0594b30ad1f4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cc826daa-91fb-404f-b1b9-99e6cd0701ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f898d9f-f679-4f06-b4c5-8119e3f75e6e",
        "cursor": {
          "ref": "e749e0cf-19fd-408c-a42c-cee60d76fe72",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ccacf530-2712-4111-b9dc-ec3f92198482"
        },
        "item": {
          "id": "2f898d9f-f679-4f06-b4c5-8119e3f75e6e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "73401ccf-643a-4ec0-bdc0-3ba77b79ebeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac3f47c-4f91-4f8a-a3c5-06756baa8213",
        "cursor": {
          "ref": "eb517f62-9d8d-439e-9f74-89cc04f8a705",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3ae62b47-cf99-429b-a05a-5e4d2381d422"
        },
        "item": {
          "id": "bac3f47c-4f91-4f8a-a3c5-06756baa8213",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4c01b136-24f3-47a9-9e7c-f99f2e75bdc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db89eecf-67bc-48d2-937c-07bf700c78bd",
        "cursor": {
          "ref": "3b905334-31c6-4450-81d4-195da5b0bef0",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f8de5bec-e610-4cf5-a19e-2cf79738c189"
        },
        "item": {
          "id": "db89eecf-67bc-48d2-937c-07bf700c78bd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "94d31ec0-f0c2-430f-bb26-2feffd13adb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58362ed0-3d01-4fba-ab5b-f1edbc20bbb6",
        "cursor": {
          "ref": "b31ce0d4-2fd1-432b-b421-5434ab90a22d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "be5670bf-79c0-441c-b887-047da728df1f"
        },
        "item": {
          "id": "58362ed0-3d01-4fba-ab5b-f1edbc20bbb6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "51529463-fc2d-4289-8d1d-dcb58412e097",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61908eaf-a36b-45cb-b1b2-2b0bd7c63021",
        "cursor": {
          "ref": "eb0f94b8-a2af-4bd9-9490-42d1f72967b9",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8397dfc2-8e1c-438d-bf8a-75a2046e30d2"
        },
        "item": {
          "id": "61908eaf-a36b-45cb-b1b2-2b0bd7c63021",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ecf06cdb-ab14-4cb2-b738-43f8d8d85067",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801d38c8-ce28-4d5d-94a1-c32a73d34bfa",
        "cursor": {
          "ref": "5c16a43b-993f-4af4-a527-57f357537789",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "946f7f65-d5b6-47b1-94e6-63d722465894"
        },
        "item": {
          "id": "801d38c8-ce28-4d5d-94a1-c32a73d34bfa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "53732517-69f9-4694-8964-ffacce221c0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e17cb2a-62b1-44db-bf09-319544d9e4d7",
        "cursor": {
          "ref": "1ddb1e16-d7bb-4d94-8033-0e7a906cdec8",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8f6842fb-0d92-452a-a8b3-614cdecb604a"
        },
        "item": {
          "id": "1e17cb2a-62b1-44db-bf09-319544d9e4d7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d60640d7-f673-46ae-9021-221a2b9a0642",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77de4839-236f-4e1e-92f2-9e74d9e6bc4b",
        "cursor": {
          "ref": "e554f18d-ccdc-4666-a6a0-1c01c5c702d7",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1d81a0d7-4701-4dea-8512-4874b23c8ceb"
        },
        "item": {
          "id": "77de4839-236f-4e1e-92f2-9e74d9e6bc4b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4d3b0ab2-dfd8-49d8-8b46-0dfe431604fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721835a1-619e-4734-b6b4-ad883a9c34fe",
        "cursor": {
          "ref": "a959b609-0708-45df-b7a6-57a5f12a3dc5",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b1781e00-f852-4a22-b123-411b9bb69788"
        },
        "item": {
          "id": "721835a1-619e-4734-b6b4-ad883a9c34fe",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "786fceed-b202-4a2e-8bc9-d2b6f05bea35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfec552-52f8-4b9a-b955-522d60523808",
        "cursor": {
          "ref": "d75a7c49-4fa5-4056-8b29-aa9a793efd91",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0a0f9d8d-156a-4a0f-8d94-db6591101437"
        },
        "item": {
          "id": "acfec552-52f8-4b9a-b955-522d60523808",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8e92cc8f-f557-458b-b0f0-ec85013746d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a03f19-bb46-4057-ab05-25f0999c2e47",
        "cursor": {
          "ref": "b7230e2f-7b9f-4ed4-96e3-98154f84071c",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6094fb5d-1104-4261-b2a1-b814dbfe30eb"
        },
        "item": {
          "id": "b3a03f19-bb46-4057-ab05-25f0999c2e47",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ed72c68a-bfb8-4ab5-b6ae-911ac2fc8ea5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58987c4-e0fe-4e8d-9e8f-7457c029f181",
        "cursor": {
          "ref": "2057552c-5884-4f05-b0c1-fbab6b465328",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "52920425-185f-4c3c-91fd-bd2277163fc1"
        },
        "item": {
          "id": "c58987c4-e0fe-4e8d-9e8f-7457c029f181",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "265405db-e0ae-484f-9a05-c861aff7d57a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de6bbd9-9e7e-45aa-8a51-e19a93bb9e1a",
        "cursor": {
          "ref": "0ed378d5-818f-48c6-8f18-17650dfca183",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "79affc21-d67d-408d-b860-378463c4a100"
        },
        "item": {
          "id": "4de6bbd9-9e7e-45aa-8a51-e19a93bb9e1a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d0710734-28b7-45a7-8c61-fef1ab2cea04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4b6c30-5fae-471e-9547-e5a4d841007a",
        "cursor": {
          "ref": "d1ebc1c9-933b-4223-8a77-5edd46598932",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5ed5c468-c741-4900-8d87-2c1555717f35"
        },
        "item": {
          "id": "9a4b6c30-5fae-471e-9547-e5a4d841007a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "95550b12-c2da-4416-8ebd-c82a65546c5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363c7912-8039-481f-af38-4e7ca395ce0f",
        "cursor": {
          "ref": "f99f7fd5-4a4a-4b0c-9086-bcd63c19cc3f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b12f625d-f963-4780-ae59-a49648b7421c"
        },
        "item": {
          "id": "363c7912-8039-481f-af38-4e7ca395ce0f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3539858b-7c66-4e3a-a410-12df5fdb2f55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efae37e-4708-4924-a316-f82e0c5e64f6",
        "cursor": {
          "ref": "26cd3d10-0ee1-4cb6-b0ac-f4cce2ba0d57",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2c7cf73f-2c40-41f5-8dce-491b5cc84f5e"
        },
        "item": {
          "id": "5efae37e-4708-4924-a316-f82e0c5e64f6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0ecb5a59-23e5-4cd3-aa23-d6fdb2d6c6a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31edd4d5-cd64-403d-be88-fa84fbd9d854",
        "cursor": {
          "ref": "599ec24a-3b4a-493c-b914-99b542a47ed5",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bc3fe1b1-9061-40ec-a82d-e7c5cc41f1a2"
        },
        "item": {
          "id": "31edd4d5-cd64-403d-be88-fa84fbd9d854",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8bbe4bd3-6d93-4d06-9d82-5c46452b6143",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c41d283-b13c-41c4-8081-e68d9e5484d2",
        "cursor": {
          "ref": "d9b87c8a-7efd-48b1-bcb9-2ac36f2199ad",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ab4c30c5-5bb1-4520-baac-fc90864b5497"
        },
        "item": {
          "id": "6c41d283-b13c-41c4-8081-e68d9e5484d2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b92ac4a8-e5ee-426c-b43f-c2b1ca0a655d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bc8bbd-60b0-4ee1-86a8-747e72d9996a",
        "cursor": {
          "ref": "3f62f0d5-da18-4d8a-bf09-d763e6367781",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9a3d1129-e06d-4140-8180-d28ae1bc267a"
        },
        "item": {
          "id": "03bc8bbd-60b0-4ee1-86a8-747e72d9996a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3307b1c9-1ff0-4bb0-aef5-62bef3be5c9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbf4337-4298-4e99-9a64-93f8524acb46",
        "cursor": {
          "ref": "308ce33b-4faf-4e26-98e8-e8f91e9b1312",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bd326e1f-35a1-4c2a-b51e-382e0a150570"
        },
        "item": {
          "id": "0dbf4337-4298-4e99-9a64-93f8524acb46",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9988cd44-8428-4200-82ca-ec283fe060ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1898ed9-d421-44e1-8d31-4289fec1b07d",
        "cursor": {
          "ref": "e69fe2b1-e1fc-472e-9a33-871a2553a9d3",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "07a006c0-bc80-46c1-8e40-63d1f60cd46f"
        },
        "item": {
          "id": "c1898ed9-d421-44e1-8d31-4289fec1b07d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d53f3f6c-70e5-4932-a2b6-9a0c49c02b66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed34fd77-03eb-466a-89b8-7be0130b35c1",
        "cursor": {
          "ref": "f1818d66-cd1b-4b32-bd33-adbc4028121b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e842f7ea-5ede-4eee-8d12-cd4a3416c99a"
        },
        "item": {
          "id": "ed34fd77-03eb-466a-89b8-7be0130b35c1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1fe68a3d-2e1b-4cc8-98ec-0c1b19889b2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759e7680-32da-4c6b-b3f7-5971313f8a72",
        "cursor": {
          "ref": "be1dbb33-d91c-420f-82ce-00c57cb01737",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "14cc7efe-91a1-409e-bd8e-be03ec98b2e3"
        },
        "item": {
          "id": "759e7680-32da-4c6b-b3f7-5971313f8a72",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e0a8ee6c-8ae4-479b-8ab1-5b3504d79154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e07229-c8c3-42da-bea5-7ed37023a4b9",
        "cursor": {
          "ref": "f0418053-0107-4fbe-91c6-d4816a4d6b0d",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "baa3c04c-7c0e-4b7b-899d-83a0f9fc538c"
        },
        "item": {
          "id": "05e07229-c8c3-42da-bea5-7ed37023a4b9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "37b7e37a-3371-43f2-a705-31b62dc5ea51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15fa0c1-2e7a-4648-ad29-120094035cf3",
        "cursor": {
          "ref": "e8c54f82-c726-4a8c-9e6f-2e201f563661",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9d7dbe31-6a63-40a7-9cb5-e07fdbb7ce05"
        },
        "item": {
          "id": "b15fa0c1-2e7a-4648-ad29-120094035cf3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c2e6b0de-0abb-4529-874f-650743f777a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82547b8-6293-4d2a-946b-5947a294d358",
        "cursor": {
          "ref": "fd1e6842-6c4e-42a2-8738-0ff782acc18c",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1e171d1d-99a1-4012-b3c6-dca11d6d7cc7"
        },
        "item": {
          "id": "f82547b8-6293-4d2a-946b-5947a294d358",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6cbb1422-a6f4-4427-8f0b-3df85f8c8db8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405174cd-2857-45d0-b568-08c1feb73063",
        "cursor": {
          "ref": "f6046c9a-ae2e-46fc-81c2-1bb63033aa42",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9f79d8ce-d3dc-4e6c-92b8-03fb0f2a492c"
        },
        "item": {
          "id": "405174cd-2857-45d0-b568-08c1feb73063",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4951954b-ccbb-4ba8-898c-ee9008ec1ff9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bb9b98-ad47-4e61-99c6-3f6dff8c30e3",
        "cursor": {
          "ref": "3ef47341-0ab0-4dcd-8bbf-dcde24a5e32a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7ac6c84c-3ca9-48c6-91e1-518b83d104d0"
        },
        "item": {
          "id": "d1bb9b98-ad47-4e61-99c6-3f6dff8c30e3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0ad66a15-af30-46de-9e5b-64a7a904af49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a843f3f3-5ff5-4479-a1e8-ed85b9509c60",
        "cursor": {
          "ref": "2ce26acc-24eb-4017-82b8-244fe8e16680",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e587bc04-7fe3-4e2e-9077-3ad6dc3fa0d8"
        },
        "item": {
          "id": "a843f3f3-5ff5-4479-a1e8-ed85b9509c60",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0cad0899-9462-4c1d-9359-6fe00e136050",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b60f4a0-0ad0-47c6-ad14-d9c842bc2cb0",
        "cursor": {
          "ref": "1f9eb614-6d69-48c9-9420-c2b8c8e18b90",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bdf97f0e-146b-4345-87d0-4c36b655e87e"
        },
        "item": {
          "id": "3b60f4a0-0ad0-47c6-ad14-d9c842bc2cb0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "83693b89-a1cf-4a77-b4f5-528854a533a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca3d3ec-91b2-4e1c-8971-f547c1af7f7f",
        "cursor": {
          "ref": "5cabbd4c-fdd1-4a14-b8d2-57245f3c1879",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1bb40b4e-d4e0-47cd-b238-9c9c9a5a0bfb"
        },
        "item": {
          "id": "cca3d3ec-91b2-4e1c-8971-f547c1af7f7f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "aa87cfb2-5a43-44ad-9056-0673fb5b8bf4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f1b2a3-cd4f-4fd2-aec5-d13ec5388f51",
        "cursor": {
          "ref": "e6cdee9a-34f4-4a9d-a8a4-f31255c196a3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "00946180-b25b-48de-9a84-08edd11e7480"
        },
        "item": {
          "id": "76f1b2a3-cd4f-4fd2-aec5-d13ec5388f51",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8a45572d-6e97-40ce-869b-21436b0ea9ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb520198-0e0d-4591-8666-6ea819b3e9bb",
        "cursor": {
          "ref": "7f1f0186-fc57-4d10-a3e6-42412b6b0d74",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ef811c02-137a-4552-a19d-1bc50c4a02e9"
        },
        "item": {
          "id": "eb520198-0e0d-4591-8666-6ea819b3e9bb",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b5a0421d-aa24-4ead-954d-40d843c39946",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6aed94c-8923-44a4-aa82-718733d3aa0b",
        "cursor": {
          "ref": "e30b1126-07da-4a95-a33a-ddfda1f47823",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d192b343-4a4b-4ad8-86a3-1b456b2e7697"
        },
        "item": {
          "id": "d6aed94c-8923-44a4-aa82-718733d3aa0b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c53893f7-7c3d-435c-a929-677a74adcfa7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa96f7f-8e85-4ee7-a6c1-93a05f8e82cd",
        "cursor": {
          "ref": "829e0614-186d-4dfe-92d0-b514a18c58df",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "94b5d21b-14f0-42f5-a550-f1991deab251"
        },
        "item": {
          "id": "ffa96f7f-8e85-4ee7-a6c1-93a05f8e82cd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e14048ce-54c3-4ab8-ac39-048948e69451",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea9929e-4dde-400b-9056-15f7d1c26cfb",
        "cursor": {
          "ref": "3be3271c-a550-4389-9708-f0358bd3851e",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fcae82c0-a406-4af3-87aa-68f5814b951d"
        },
        "item": {
          "id": "dea9929e-4dde-400b-9056-15f7d1c26cfb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "38571b72-347e-4499-aca3-ea43ceb607f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948b09d0-0c73-48ac-9fa1-2ff117f04441",
        "cursor": {
          "ref": "f690c02c-960f-4f2e-a7cb-5930750692da",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "24820ec9-3007-4408-991a-79b8db5ea648"
        },
        "item": {
          "id": "948b09d0-0c73-48ac-9fa1-2ff117f04441",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a4cd1665-795c-40b3-a9f8-483d8739dfb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cfaed6-3920-4124-bbf0-cc900dc8ce8e",
        "cursor": {
          "ref": "2fbb6bb5-b59c-4364-bd3d-2c860b5d7fe4",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d2a06a16-5861-49a6-be7f-dfb33fa2573a"
        },
        "item": {
          "id": "47cfaed6-3920-4124-bbf0-cc900dc8ce8e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b4f88765-5928-4fcc-a4bd-7b3a6aff453c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0562deb1-4a62-403f-b193-d508bb9096cb",
        "cursor": {
          "ref": "f3632dbf-9250-4add-8f6a-2653c9e72e7a",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "84967b01-e8df-4c50-8bb8-f92e3f8e314f"
        },
        "item": {
          "id": "0562deb1-4a62-403f-b193-d508bb9096cb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e8a5d658-9cb4-4c62-870a-775b7f47c150",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c416a3-96f3-4f7b-9ec9-5bb006ae9915",
        "cursor": {
          "ref": "2943335a-d98f-4030-8a24-49a554979f4a",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "db3d4c42-7e5d-422a-a0af-e5c1add13588"
        },
        "item": {
          "id": "30c416a3-96f3-4f7b-9ec9-5bb006ae9915",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "831ddf06-d71e-482a-9ee3-c0ad06ae1f61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a299375-c30b-44db-8410-e58215653789",
        "cursor": {
          "ref": "476987fe-407f-4a4d-91e8-6de656a19993",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0028888f-fbf5-4284-99d6-1639c55ea2d1"
        },
        "item": {
          "id": "5a299375-c30b-44db-8410-e58215653789",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "455afd11-743c-479e-abab-2c32aa21c1a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209965ad-2b37-48d2-9f58-f109e3792766",
        "cursor": {
          "ref": "28c413c4-8ce2-438c-a180-ed8027949856",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8ff231b9-0752-4b41-adce-f2f81e1144c4"
        },
        "item": {
          "id": "209965ad-2b37-48d2-9f58-f109e3792766",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bee26ed8-d2a6-4089-9ede-e4c54c0e981b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa45e9f3-9612-4e27-91db-e83b09bce45b",
        "cursor": {
          "ref": "a6390ac5-9bd4-4872-b4a7-4656c09baa57",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "27c58017-a00f-4c38-aa89-2d4e6bc22ac3"
        },
        "item": {
          "id": "fa45e9f3-9612-4e27-91db-e83b09bce45b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5e8d1538-6649-4695-bf7e-8933bb315b58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c910d8b-9960-4251-bce2-031edf11660a",
        "cursor": {
          "ref": "84939781-0d29-4d22-849d-ceab206e43e3",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e54219bd-4cb9-42a8-8ba8-6a9cb0a0c941"
        },
        "item": {
          "id": "4c910d8b-9960-4251-bce2-031edf11660a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "07089cac-8688-440b-a0c2-4d20b0437b55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cd982f-301a-4e79-a414-bf3ce6c04f45",
        "cursor": {
          "ref": "0cf43d5d-ee8a-4b28-8cf8-3e138d720e38",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c40e646b-713e-46e5-9654-b4a6e99517fd"
        },
        "item": {
          "id": "83cd982f-301a-4e79-a414-bf3ce6c04f45",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ffc1552a-e5c9-4f64-bddd-a732f80abc9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedf8c57-f769-4e5c-9a4a-035febce5ad7",
        "cursor": {
          "ref": "900c09dd-12a2-43e5-ac04-575f9462ac08",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "91ef9dca-bc39-43b2-9b8f-f3f972db464a"
        },
        "item": {
          "id": "bedf8c57-f769-4e5c-9a4a-035febce5ad7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "46bc066d-944b-4342-a983-1ed4b6cff291",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb50fc3-7d80-4011-87a6-ecc0d173a144",
        "cursor": {
          "ref": "b215a172-4c21-4ad3-92db-64ce1c83d91f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e7be2df8-1fca-45b6-aa5b-5b680684384d"
        },
        "item": {
          "id": "dbb50fc3-7d80-4011-87a6-ecc0d173a144",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "84b8a4c0-a3dc-4b2b-9b6a-ab2aa034d721",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f8e8d3-5006-43ad-bc0d-b10774cc65ca",
        "cursor": {
          "ref": "94d2f2f6-3b2c-44b1-af56-297af2d61555",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d5adebab-0eb5-4ce2-bb1e-4fd6a6f433ff"
        },
        "item": {
          "id": "b5f8e8d3-5006-43ad-bc0d-b10774cc65ca",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4e3ad61b-7a07-4cca-a572-934b339978f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4b9c51-82b0-4d35-993d-3858b2065122",
        "cursor": {
          "ref": "20c66f72-e448-4ba1-8323-99cf4c3d9506",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a70b8de8-3a20-4ae6-8faa-1110efe01591"
        },
        "item": {
          "id": "7d4b9c51-82b0-4d35-993d-3858b2065122",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1e7809b9-d098-479d-92ad-e3ba9076c75d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86d842f-785f-4f37-a2ed-ce51d45ec28c",
        "cursor": {
          "ref": "0b0dca65-d789-409e-a2f2-3a2a9623f723",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ae3689a6-892c-405d-92ac-6e9bde9de7a2"
        },
        "item": {
          "id": "a86d842f-785f-4f37-a2ed-ce51d45ec28c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b5106dbf-00b0-4e13-8ade-f9ed2d91fbfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef05eb3f-595c-4f6a-b089-5899dcc6adaf",
        "cursor": {
          "ref": "a1e300f9-1d52-493e-a3fd-7da017a50bcc",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "204571ac-b331-40a6-aa8d-f9cebc3ca9f2"
        },
        "item": {
          "id": "ef05eb3f-595c-4f6a-b089-5899dcc6adaf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "55d54718-0a67-4b51-a308-1cb93d5eab8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1f6d9c-3e72-48d5-9772-69e62899b147",
        "cursor": {
          "ref": "ea9ef658-c627-4a3d-8fff-51d82a5788f1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c511302b-766c-414e-b69a-b0fbdae87a41"
        },
        "item": {
          "id": "1a1f6d9c-3e72-48d5-9772-69e62899b147",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d213007f-82d2-4860-8802-e638ffa00567",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60b6069-12da-422c-a20c-c6c537dcbc57",
        "cursor": {
          "ref": "5123b71d-3fd6-4738-a142-072c184c6ba2",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "58340f46-af82-416a-853a-e8dba2391035"
        },
        "item": {
          "id": "a60b6069-12da-422c-a20c-c6c537dcbc57",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "faeca69d-dc51-4113-b82f-87dbf9398a22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9c396c-0a1b-4700-9323-21bb9aa2aaf3",
        "cursor": {
          "ref": "b0ee849c-a098-4e41-9ac1-90e3024e1156",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fccf2c96-379e-4cd2-8fa4-c517d4fc2593"
        },
        "item": {
          "id": "0f9c396c-0a1b-4700-9323-21bb9aa2aaf3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1e22029e-ac48-4fa3-86e2-4fd16ab7cfcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2617de-a58c-49bc-8124-e300817467aa",
        "cursor": {
          "ref": "f630b240-1c38-4bef-817e-d45c32b1c663",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3517e15b-a83d-4661-9320-535c145e1a18"
        },
        "item": {
          "id": "fd2617de-a58c-49bc-8124-e300817467aa",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9a1823c7-858e-4930-9c51-4c7844066c5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a40a86-d00a-44d8-8890-dcd39749a1e2",
        "cursor": {
          "ref": "28712b51-159c-49f0-afc4-a04acd52ef74",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e2f302a3-65ce-4066-8132-c6c069d90ff2"
        },
        "item": {
          "id": "06a40a86-d00a-44d8-8890-dcd39749a1e2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a05691a6-04f6-4a5d-9acc-da16c6be2cbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc3cfad-4e17-4d2c-b378-5603660417d7",
        "cursor": {
          "ref": "1d9c5b8e-9984-4992-b7bb-63c20c03ddb4",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c9aa50bd-0148-4456-875b-e18c1b3b2dbe"
        },
        "item": {
          "id": "acc3cfad-4e17-4d2c-b378-5603660417d7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8e98105f-fe78-4d96-8a58-d34d450c9768",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51667a16-8730-42eb-b9f8-16e150766337",
        "cursor": {
          "ref": "5fca0667-7278-439d-a451-84de1cfdb556",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "392e5414-534e-47c9-9d1e-dc855647d16e"
        },
        "item": {
          "id": "51667a16-8730-42eb-b9f8-16e150766337",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "349aef48-a599-4f2b-9fbc-7299e151e0f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94eee5f1-9c1a-43dc-8f1b-a77f856de2cc",
        "cursor": {
          "ref": "837f8cd7-a643-453b-af2f-87c6700700c3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "69d85183-e9d5-44a4-ae92-de55a53c6b01"
        },
        "item": {
          "id": "94eee5f1-9c1a-43dc-8f1b-a77f856de2cc",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9e773191-4c29-4939-8000-b154b8896e24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685c3f18-189b-4567-8600-43ec553e5712",
        "cursor": {
          "ref": "0a1eefa2-5c60-4e45-a0da-0a80110d4ee1",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a6f23fe6-d4c9-428e-b9f7-57b720087872"
        },
        "item": {
          "id": "685c3f18-189b-4567-8600-43ec553e5712",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ebb7d1e0-e9d4-4a29-b609-404657ab0f01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51ebf78-5ba0-43b5-a299-befaf0f4f369",
        "cursor": {
          "ref": "ccaea5d8-f268-4233-aef4-1663b724ceba",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f7b6136d-c103-4628-9ad9-fba3bd6bc8a1"
        },
        "item": {
          "id": "d51ebf78-5ba0-43b5-a299-befaf0f4f369",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f2f04b30-5ccf-4319-9026-0bcdc2eb6ea0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca796b82-7a4c-4882-bc7a-f9ea534edfe8",
        "cursor": {
          "ref": "cda66892-a25e-4f56-8375-a5dd05618de5",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0eda8e22-5f45-4224-95b9-e432c1242d09"
        },
        "item": {
          "id": "ca796b82-7a4c-4882-bc7a-f9ea534edfe8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6d7c04a5-c2d0-4888-b823-17cb13608f16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7cd682-c6fa-42ac-9873-d31b0feb0661",
        "cursor": {
          "ref": "7c4e72eb-ecbf-4ee6-92f0-3e96c2485160",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "569ff814-7a4f-4934-b059-13e990f2218d"
        },
        "item": {
          "id": "8f7cd682-c6fa-42ac-9873-d31b0feb0661",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9ff513aa-1c8a-40cd-9075-6f376548a627",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a205e193-3ccb-487d-b313-00b33d2f447d",
        "cursor": {
          "ref": "c8335e9a-26f7-4237-abf0-fcf2e6ee7097",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4f982b47-2050-443e-8507-40321bee7e0e"
        },
        "item": {
          "id": "a205e193-3ccb-487d-b313-00b33d2f447d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3e9715f4-205a-46af-ac29-74735860bcfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68fb95b-62fa-4afa-92e2-21d53c5410fb",
        "cursor": {
          "ref": "de8d53f4-4533-460a-9c4d-deb6042edc95",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d09b7090-df48-44ad-aaae-f89ffb31f9db"
        },
        "item": {
          "id": "d68fb95b-62fa-4afa-92e2-21d53c5410fb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a9334c31-2bfa-40cc-bc05-6c7732156149",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b39825-027b-446a-93e7-48651f966ee7",
        "cursor": {
          "ref": "705ce146-f4ef-45bb-9862-7b78252d757e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "65df6c16-6576-42fa-87ac-39170c425c57"
        },
        "item": {
          "id": "54b39825-027b-446a-93e7-48651f966ee7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dcc47552-f4ed-4320-afd6-23d656da7161",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427d1815-e8ef-49e6-9036-ad67e036fdf5",
        "cursor": {
          "ref": "901c1b59-a818-4752-876c-6572691b1210",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2598810c-f84c-42fd-819d-906c13fc8dc4"
        },
        "item": {
          "id": "427d1815-e8ef-49e6-9036-ad67e036fdf5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5ee2ed5c-9743-47ef-8144-1fb7d365be58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494ed7a7-df32-4a5f-9964-708660a7a298",
        "cursor": {
          "ref": "667d4a87-5bf5-4027-a7c9-55a676a23d1a",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4d0124a5-24a1-4df0-b5ec-d96c73fca92a"
        },
        "item": {
          "id": "494ed7a7-df32-4a5f-9964-708660a7a298",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3aaf1fdb-f87d-4e2c-98d8-f0b9dc16e915",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba01c63-bf93-4c53-8d7b-46b099261183",
        "cursor": {
          "ref": "f88d49a4-b6de-4876-aa26-e91cd7ea8a00",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d41a3f9f-2759-4d6a-9cd7-eadc2931afe8"
        },
        "item": {
          "id": "3ba01c63-bf93-4c53-8d7b-46b099261183",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e813e21e-aa34-41a3-9312-b614a19da2b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f6de6b-8564-4641-ab23-2d20ae78ac71",
        "cursor": {
          "ref": "89b45c61-e8ea-489f-8dc0-8bd12f7a805d",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7e84c1fd-d1a0-4227-a209-a41296d8cec2"
        },
        "item": {
          "id": "f4f6de6b-8564-4641-ab23-2d20ae78ac71",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3189012b-7ca3-4303-af35-cd21152db82c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f086e41-c614-4944-8be9-4d61f80c155f",
        "cursor": {
          "ref": "eee3327b-3f2c-413e-8355-3e87ab2e430a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ea91c4cf-8cb5-4f73-852d-4f473839f6e6"
        },
        "item": {
          "id": "0f086e41-c614-4944-8be9-4d61f80c155f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "49c418ee-8d34-490b-89d5-81469a880a3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932adc89-4402-404a-959c-460522e8acbc",
        "cursor": {
          "ref": "d0d1d652-d8fd-4997-8fc6-2308a5a19d91",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3a835856-d902-416b-a057-5ee0995024b8"
        },
        "item": {
          "id": "932adc89-4402-404a-959c-460522e8acbc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1ccc9eb9-5c03-4f86-b4f4-22fa3dcedd83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1278ef-70b5-442c-82fe-d0c9b8ea0c24",
        "cursor": {
          "ref": "2f310849-7b82-4aaf-b139-3f42dc60e669",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "eac31d65-30be-425a-884b-51f141d52433"
        },
        "item": {
          "id": "ff1278ef-70b5-442c-82fe-d0c9b8ea0c24",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "653749db-7aef-44bd-96ea-e381d58dbd4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cfc732-6e5e-4e3d-9520-7509fd46bdb3",
        "cursor": {
          "ref": "8e882c8a-c536-49cb-9dd4-0b9a2b050866",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b1172ac9-883c-4463-849e-0f790d8d5d61"
        },
        "item": {
          "id": "38cfc732-6e5e-4e3d-9520-7509fd46bdb3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a1d79eb0-c86d-45b0-bdb5-5afbb3868361",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6889d1a-302d-4765-8d51-b8af98e52c4c",
        "cursor": {
          "ref": "aaa5bdff-8c64-42dd-ae4c-9d7f706b51e1",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a1b5af6b-79ac-4985-8096-b6159de0d6b5"
        },
        "item": {
          "id": "e6889d1a-302d-4765-8d51-b8af98e52c4c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f0c09d0f-13ac-4fae-b788-46b5b79aa7a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5527268b-73c9-4a0e-8bb1-5ab0c2dd74bc",
        "cursor": {
          "ref": "44984d41-5c21-429e-ae09-5b4d823f23e4",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a10ed570-3f4c-40aa-b89e-35adc672c4e1"
        },
        "item": {
          "id": "5527268b-73c9-4a0e-8bb1-5ab0c2dd74bc",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d9e91d30-df51-4607-aaec-755022ca6dc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e736bbf5-d016-4cb1-8744-9a928cc913a9",
        "cursor": {
          "ref": "fe796060-1e77-4ac6-b465-55f132860dbb",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "eeeb315e-71a0-45ae-bc52-67971e8afcad"
        },
        "item": {
          "id": "e736bbf5-d016-4cb1-8744-9a928cc913a9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d5bad226-f619-4c95-94c9-31ed938a1d0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c2aee1de-0553-4727-a79f-31df51f83685",
        "cursor": {
          "ref": "1f0ee5b1-b2e6-4b3e-bcf6-fbbfc610ea35",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d52f8bf5-7feb-44bc-aa16-d56a46d21d37"
        },
        "item": {
          "id": "c2aee1de-0553-4727-a79f-31df51f83685",
          "name": "credentials_issue"
        },
        "response": {
          "id": "41b16ef8-7ad7-4dc3-92d2-c833653db87d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 198,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "0bb728ad-692b-44db-a844-db839222e824",
        "cursor": {
          "ref": "a0d98153-b57c-4a09-b0b8-cc9f7d99351a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "39dfaaa1-44f0-45fd-bd3e-c9deed0f0b0b"
        },
        "item": {
          "id": "0bb728ad-692b-44db-a844-db839222e824",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "03d099ee-1ae6-4283-96db-110807292a95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "4bed7726-95bb-44a4-aab0-2cc7f5d58eeb",
        "cursor": {
          "ref": "62129a1d-c401-421d-8493-3d4f892709b9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6bd0a825-8f07-4d71-bb75-395b905d8b77"
        },
        "item": {
          "id": "4bed7726-95bb-44a4-aab0-2cc7f5d58eeb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2317de8b-9744-48aa-af3b-d36cd27cbcfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "46fe19e5-6479-45ef-bff2-697c100fdc5c",
        "cursor": {
          "ref": "caa55c1a-70fe-481a-9383-c1406d3301ed",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2dec9657-445f-42b9-b605-71b6d323dc7c"
        },
        "item": {
          "id": "46fe19e5-6479-45ef-bff2-697c100fdc5c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6d7bf999-bd6e-4ea8-8b1b-2cb417569645",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "87f682cf-2ecd-44b6-ab54-f0eb89b2f631",
        "cursor": {
          "ref": "52b8e6f6-d38d-4a13-ab41-3049b3652ecc",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3065d3a9-c2b4-4324-a504-228ca4971685"
        },
        "item": {
          "id": "87f682cf-2ecd-44b6-ab54-f0eb89b2f631",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "61334250-3e43-4b00-b1a8-92253ceebd39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f37fcca0-e3a5-46c5-9838-49e2a19978e8",
        "cursor": {
          "ref": "65906f2a-429f-499b-9a1e-649042bd57e8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e7e73d0b-e599-4864-b5cc-b91f4a24dcef"
        },
        "item": {
          "id": "f37fcca0-e3a5-46c5-9838-49e2a19978e8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "48135920-0c60-4e52-9836-bd2248e26b7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "4f14104e-3f79-4532-b3d6-af1b953bddc9",
        "cursor": {
          "ref": "0517fe50-50bc-45f0-98af-286c1dd3ce1d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e83d5cbe-5799-4767-83fd-28fa11c49f5f"
        },
        "item": {
          "id": "4f14104e-3f79-4532-b3d6-af1b953bddc9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d5df5e3b-b1fc-42b6-8978-4a3ec4ccb5c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37ff2d3-5cc3-4df7-8e4e-18c1c5f6c7d7",
        "cursor": {
          "ref": "d6993212-0179-4b9b-bc3e-b05d65fa206a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "673b8ee1-b04a-482a-8598-000e18104cbe"
        },
        "item": {
          "id": "d37ff2d3-5cc3-4df7-8e4e-18c1c5f6c7d7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "636078be-4883-4ce5-9e99-e55ff96b41d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64daf21-db4e-4c51-a13d-d6c198e3219f",
        "cursor": {
          "ref": "dcaa90fc-1046-4803-88c3-10498c7b0ae1",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7e9ab174-1ad5-40f3-9f19-2391cf800ad4"
        },
        "item": {
          "id": "d64daf21-db4e-4c51-a13d-d6c198e3219f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "addf1007-85d7-466b-8255-56aa2d689437",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f4e7f8-d0b6-4af0-b60f-d9c632220c68",
        "cursor": {
          "ref": "dbddfba5-dece-4c21-821f-a7c832fadd57",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f608a1dc-6714-4d8f-93a1-d90dc790630a"
        },
        "item": {
          "id": "e1f4e7f8-d0b6-4af0-b60f-d9c632220c68",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8cd47ce9-7147-4654-b9f6-664129ec5746",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9270298f-df39-4a78-8660-3d8653e0ee52",
        "cursor": {
          "ref": "b7c6ac31-c93c-4a99-8137-ff0997421ea8",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a54ecbfd-2917-4ecd-bfc6-485243853737"
        },
        "item": {
          "id": "9270298f-df39-4a78-8660-3d8653e0ee52",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "511efff1-29ef-49ab-9c45-5560f942621b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95d2483-05d2-4a1a-82b5-88983e1238e0",
        "cursor": {
          "ref": "a95a62b6-bd26-4ce5-a180-61dd8b9762d6",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6ac61d14-3c86-419a-a155-551d27a12b6e"
        },
        "item": {
          "id": "a95d2483-05d2-4a1a-82b5-88983e1238e0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d959c746-bbeb-4ef7-a394-a018bc3e1d26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e1ee8c-0acd-419b-9306-3b9d022e847f",
        "cursor": {
          "ref": "5d22afd3-ed38-4c1e-89ac-28e9798893db",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7bf577be-3242-40be-9c94-eecbbee68c9f"
        },
        "item": {
          "id": "68e1ee8c-0acd-419b-9306-3b9d022e847f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7cae2f43-c2b0-4c5d-a468-ee7d9ad8acc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddc58b3-ca39-491c-9f33-41e02b6d8c20",
        "cursor": {
          "ref": "e06f00ef-1c8f-48f0-8b37-d5257526ca3b",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "70734d5a-7010-47af-80d9-47637c5e6a2e"
        },
        "item": {
          "id": "6ddc58b3-ca39-491c-9f33-41e02b6d8c20",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5908eb05-0b1d-471b-ad4e-c1541687f618",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9284ed-692b-4774-aeb9-c2c14ca5ca95",
        "cursor": {
          "ref": "037d355b-3bd9-4c53-af3f-8fb6c029400d",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bb89d179-d73f-43f7-9fea-c8dc290d2078"
        },
        "item": {
          "id": "dc9284ed-692b-4774-aeb9-c2c14ca5ca95",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "85a06614-7ed3-48bf-b225-811141301f36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148b2c09-11fa-4091-b4b2-4be0d179fdeb",
        "cursor": {
          "ref": "03d580c6-2c06-4ddb-847c-6926d0d927b9",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5e295732-5cb0-4c12-a415-0d40ccb8ad7d"
        },
        "item": {
          "id": "148b2c09-11fa-4091-b4b2-4be0d179fdeb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6ccb5b72-70ad-4f07-bb65-d5cc43391ede",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9c03eb-cdff-4530-a391-284348201b1d",
        "cursor": {
          "ref": "a2aecaff-3489-46ce-8e49-b3d9ac8c2731",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6bfee5d4-7d7f-4853-9ec0-4a74a87c7eeb"
        },
        "item": {
          "id": "4c9c03eb-cdff-4530-a391-284348201b1d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cf07fd57-4a37-410c-815d-610cf4790a47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2505ca57-6ece-418f-8519-7ba613b13399",
        "cursor": {
          "ref": "61067fd9-cf39-430b-9ecb-dde993ba573f",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9ebe3bce-69f5-4856-9652-1cc62b40ea9f"
        },
        "item": {
          "id": "2505ca57-6ece-418f-8519-7ba613b13399",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4d6504c0-ecee-4597-9337-8c123423737d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7882c2f-a828-4d92-b88b-ac88579bb526",
        "cursor": {
          "ref": "122b6ba4-7b18-43ef-b689-d8d7e6b1597a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "14731001-913b-44fe-9025-a75319e8b191"
        },
        "item": {
          "id": "f7882c2f-a828-4d92-b88b-ac88579bb526",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6cbdd9a8-b4ff-4903-a1f4-c88d6db35b9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cc760e-0530-4fee-97c6-b37360ceb2e8",
        "cursor": {
          "ref": "142d9fde-e398-4306-8f05-4e593bddb052",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "98acefb5-ba4d-436f-a69d-138c72997f39"
        },
        "item": {
          "id": "00cc760e-0530-4fee-97c6-b37360ceb2e8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2907e1a7-fdd7-4fdb-83c0-1efff61847dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e580df02-3560-4544-a9ef-4841241c4be1",
        "cursor": {
          "ref": "82dd1662-f914-43ff-b08c-c8663cf4eb1b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "29ff3e64-8923-4484-9a9e-d86c8de93f74"
        },
        "item": {
          "id": "e580df02-3560-4544-a9ef-4841241c4be1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "46c141e8-240f-465b-b017-826343e99cf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92031ce0-8fdc-46bd-8066-716695a48b90",
        "cursor": {
          "ref": "057221b4-81b2-4050-a479-a563da2c4264",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1e71db10-6906-4c5c-8846-86f3d0b5c30e"
        },
        "item": {
          "id": "92031ce0-8fdc-46bd-8066-716695a48b90",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a3dad275-7505-47e3-9b93-9a4c89b986a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1959bde-8e22-490f-9f92-8766073d71ea",
        "cursor": {
          "ref": "b2f94166-a9f0-4d88-b592-a47b4cdb304c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b294132b-38ea-4efb-9c1d-05c341c29e56"
        },
        "item": {
          "id": "a1959bde-8e22-490f-9f92-8766073d71ea",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6f66d12a-e0ed-4225-b2b6-e2915ee305e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6e1db3-afa4-4f6b-a9c6-378cd6150c23",
        "cursor": {
          "ref": "9c75fa54-aeb5-4fc3-8e5a-640f70cee743",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "62c7944b-749f-453f-ae9c-a6a8146410c9"
        },
        "item": {
          "id": "9e6e1db3-afa4-4f6b-a9c6-378cd6150c23",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e0ba6880-c50a-491a-8bd5-08270165f2fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b01fa0-cf4e-4c80-9e16-1268706b40f6",
        "cursor": {
          "ref": "0056d776-fe61-49b0-92a4-d9aa5f6e7816",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "69613a66-521b-4827-af65-bb8db99d1c12"
        },
        "item": {
          "id": "d8b01fa0-cf4e-4c80-9e16-1268706b40f6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "806b12b0-e652-48f3-a8dd-fd80c3097cc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1ca097-afa2-478b-982f-1e3f81c67b09",
        "cursor": {
          "ref": "f0fedd05-804c-498f-b7a7-1c46b7c2a504",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f04e3b26-f882-4b39-9daf-2033b39b944e"
        },
        "item": {
          "id": "bc1ca097-afa2-478b-982f-1e3f81c67b09",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e10c1b5e-b78f-45b8-bd59-6bfdd225b8d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cb402c-6d9e-43cd-b223-3e720af4725c",
        "cursor": {
          "ref": "4c20207c-c470-4a04-bd18-0ed76a8ded5d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bcd8716e-5267-4254-973a-002b4b07fb77"
        },
        "item": {
          "id": "49cb402c-6d9e-43cd-b223-3e720af4725c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "55f25003-9270-438c-9b09-acd99aa8066e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050b7718-2532-499d-93b9-d784eccad39f",
        "cursor": {
          "ref": "a357afb5-45c2-43ca-a543-82c84ea7712d",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9a8318c6-63fd-4081-a18a-7f4147f91238"
        },
        "item": {
          "id": "050b7718-2532-499d-93b9-d784eccad39f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "446dfa64-07eb-4866-b4e1-2901ee746f3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ad292c-c5e5-46eb-83d4-2c84496da507",
        "cursor": {
          "ref": "282b1190-632f-4994-be65-80ab3bb478d6",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6020d6da-079e-4670-9ffc-c88ca55fde00"
        },
        "item": {
          "id": "d2ad292c-c5e5-46eb-83d4-2c84496da507",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56620838-864a-4c76-9038-1b40cc489428",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0398dde-b1ce-401a-8f78-e7b1a32f67ba",
        "cursor": {
          "ref": "ad5045ec-cb4a-4baa-a9ae-a313c1384d17",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "34bdd825-b1b9-437e-814e-c4c28c839795"
        },
        "item": {
          "id": "b0398dde-b1ce-401a-8f78-e7b1a32f67ba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5602c6de-92b7-4733-b085-2e5794f3f6c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9fab80-f134-4eaa-9313-0a320d0e4b97",
        "cursor": {
          "ref": "fc5e5325-0bf6-41cd-aef1-eb214e7db68f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "08a38c95-fb6e-47b6-873a-ed4a7211a1c7"
        },
        "item": {
          "id": "db9fab80-f134-4eaa-9313-0a320d0e4b97",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5542b498-f2a3-42fd-bbe3-3c06e432e8fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a25bc9-d49c-4fa9-8845-3403187cb78e",
        "cursor": {
          "ref": "73a3fce0-c9d8-48bb-8c28-5c3e48db2e15",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "83ac8c23-1130-4cf4-8056-3d75f8d408d7"
        },
        "item": {
          "id": "b4a25bc9-d49c-4fa9-8845-3403187cb78e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "de3d0f37-5d8f-47ed-92a8-2f85c57485bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2ca9cb-9bbc-4fb4-a1ec-ebce607bfc24",
        "cursor": {
          "ref": "fb19e807-54ca-4b13-9963-6d1a2bbfe4b2",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ea3e4d76-6957-4806-8b07-25ef17c6dbd0"
        },
        "item": {
          "id": "ef2ca9cb-9bbc-4fb4-a1ec-ebce607bfc24",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f110ff2e-5c47-4953-9551-06c981a7e85c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ac2750-19b4-430a-a657-cd2b8e503da0",
        "cursor": {
          "ref": "8fe1fb89-27bd-412c-abb1-4ad5bc0bd1fd",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b40a4fcc-81cf-4f35-9e1f-e644b9fb85ad"
        },
        "item": {
          "id": "98ac2750-19b4-430a-a657-cd2b8e503da0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "28a9a34a-f0cb-4c86-9d6b-3209222be874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f244d73-32a8-4456-a8ee-082ede036316",
        "cursor": {
          "ref": "26bb7f67-30f1-416d-99e2-686b5ded21be",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "04fd15d0-a67c-4ad9-9ad6-09d55d0c6250"
        },
        "item": {
          "id": "8f244d73-32a8-4456-a8ee-082ede036316",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d4b3da80-9f25-405f-b312-1082bb740a34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6cbc07-57da-41b1-861e-90bf3acd3dbe",
        "cursor": {
          "ref": "cc5d4e7c-55fd-4083-8596-3a5e9a9e9503",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "41ea9940-efdb-4d0e-9232-f674132df313"
        },
        "item": {
          "id": "cd6cbc07-57da-41b1-861e-90bf3acd3dbe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9b3c9877-648b-4e22-a500-fb85640552c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fbd396-5da6-4745-9dbc-be1c7e52761b",
        "cursor": {
          "ref": "59447116-7856-4c60-97ff-a09bfbba34bf",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "65f4009b-a1e7-46d5-b467-f77c7128a52e"
        },
        "item": {
          "id": "53fbd396-5da6-4745-9dbc-be1c7e52761b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6f76dc13-13a1-4630-a2c6-6b5a90526b8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abf7c57-e754-4b0e-9df5-d0fb4854c2f2",
        "cursor": {
          "ref": "0ad436d5-9c50-4d7e-943f-af72e53ec4f2",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8b544fb9-d246-41fd-88db-6d4df75cfb67"
        },
        "item": {
          "id": "7abf7c57-e754-4b0e-9df5-d0fb4854c2f2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8be78858-b06b-4300-9986-de88dad0f18d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f3efc8-bd29-402b-bb5b-9dedb2de95be",
        "cursor": {
          "ref": "f0188341-7c5d-4b49-b8f4-d76eb9f4741d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "45f883bf-c51e-487a-9b1c-e9f0182d1ce7"
        },
        "item": {
          "id": "b7f3efc8-bd29-402b-bb5b-9dedb2de95be",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "41c87c5c-6321-4cf8-9322-2ba4e522fd5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192f8435-d68a-4535-9182-af6ffd085b6f",
        "cursor": {
          "ref": "c4409dfa-e397-4db2-9836-a18bfd16ac51",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4f4217ed-322e-4648-b2b5-fd31fecf1396"
        },
        "item": {
          "id": "192f8435-d68a-4535-9182-af6ffd085b6f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6e87e072-90ab-4886-b570-19553f9eaea8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8778c5f8-4ca5-4b7d-8d31-83e8d427be24",
        "cursor": {
          "ref": "9302080e-6400-40cd-b1a6-e630fca0d5bb",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7489dff5-b33a-405d-a215-f3b1ad5308c4"
        },
        "item": {
          "id": "8778c5f8-4ca5-4b7d-8d31-83e8d427be24",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a8ea90c3-4757-4101-a946-38fde0b0508a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df575ad7-177e-42cc-be8b-84bdf3244734",
        "cursor": {
          "ref": "814e5f50-550d-437f-812c-d60ea36915f9",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3135b864-b0dc-4788-a8d7-b8e177e6b95d"
        },
        "item": {
          "id": "df575ad7-177e-42cc-be8b-84bdf3244734",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5caf6acf-bdd8-4046-a937-32ce51cdd2ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77cbe01-89c8-43f2-abd0-17bd918b27b4",
        "cursor": {
          "ref": "afd53b0d-2fbf-42e2-804b-1af923f92a5f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ae0385f3-f22c-4ee7-addd-61f08f52c579"
        },
        "item": {
          "id": "f77cbe01-89c8-43f2-abd0-17bd918b27b4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4ca3e534-e6ae-4f62-a659-712e7345c67b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3068bad0-77b0-4dc6-9043-282b065c700c",
        "cursor": {
          "ref": "3522ebcc-99e1-4ed3-8920-d97fd73e4753",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "09e4307d-fee6-4763-93b4-d6a5116a054c"
        },
        "item": {
          "id": "3068bad0-77b0-4dc6-9043-282b065c700c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6f3003af-4bba-4c82-b5b8-f00affbe0a11",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff2d6c7-f5e0-44e3-8022-c175b9d6a081",
        "cursor": {
          "ref": "38ee041f-0bd1-470b-b37f-d92f5a870b53",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "589fe71c-d35e-4059-9b56-c1a7921ffd42"
        },
        "item": {
          "id": "2ff2d6c7-f5e0-44e3-8022-c175b9d6a081",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a75557dd-b56d-4b13-9d4f-d32f14825991",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2df4524-2ae9-4f15-878c-052b322e2002",
        "cursor": {
          "ref": "58d87dda-e425-40fb-9e80-d030c81543c1",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c38c67b8-d702-4651-af0e-879cf26aabbb"
        },
        "item": {
          "id": "d2df4524-2ae9-4f15-878c-052b322e2002",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "263163ca-dcc5-4c60-ab52-b44ea444a446",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ba7cac-df34-4f10-8f12-c7daba5b7f6f",
        "cursor": {
          "ref": "c43a86d6-3236-4f9a-a7c5-60797c3f9884",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2d8b50f4-3430-47ed-bdec-9cf4776e32bd"
        },
        "item": {
          "id": "c0ba7cac-df34-4f10-8f12-c7daba5b7f6f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8b66bd9e-7528-474a-95c1-2b55ec22374a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7149603-8d46-41e1-95cc-246a595f03f6",
        "cursor": {
          "ref": "fa43af78-299c-456f-9da3-d1f7219e1846",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b9f10c2d-926b-4b8e-895e-c55af56f47c6"
        },
        "item": {
          "id": "f7149603-8d46-41e1-95cc-246a595f03f6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fdc9201c-3c97-4efb-9af3-721c0f001337",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7866414-61b6-4113-8771-dcedda416a48",
        "cursor": {
          "ref": "0af81211-15da-460f-8933-e0da7e8dc387",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "faedd2da-0c8e-488a-8368-fcde38e8bebe"
        },
        "item": {
          "id": "f7866414-61b6-4113-8771-dcedda416a48",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4637a894-f01e-489e-b0a4-173805ad35e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11152c7d-3842-4985-ba37-51f2f3b02c55",
        "cursor": {
          "ref": "89fce492-ef33-4e7e-9cc4-6d0278f29b7e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e392af34-8745-4647-a504-8a376f99d642"
        },
        "item": {
          "id": "11152c7d-3842-4985-ba37-51f2f3b02c55",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "31b19ae2-bbd2-47f1-aa6a-6528c497baa7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f07dbb-9254-468c-acbe-d6b135fd0677",
        "cursor": {
          "ref": "f135c7d5-ea99-4ebe-8b96-2da70b72f04a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bce46d36-8c99-4851-af6f-2bf222426f35"
        },
        "item": {
          "id": "d8f07dbb-9254-468c-acbe-d6b135fd0677",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "69efc044-fd57-42f2-b599-fdfc70c85d63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e703f590-5ee8-414c-ad5d-1f7876a2eebb",
        "cursor": {
          "ref": "76dd2860-6ec0-46b0-a01b-e856ac530d40",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "feb92bc7-871a-4938-8025-107c8e4b8985"
        },
        "item": {
          "id": "e703f590-5ee8-414c-ad5d-1f7876a2eebb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3291f620-ff25-419f-b06c-ed82879b057f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16f84ae-e445-4217-8d34-b8979d314ae5",
        "cursor": {
          "ref": "0280340c-037e-42d0-b40c-282834551a53",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bae94d9c-1a32-45eb-9701-8cd491297a37"
        },
        "item": {
          "id": "f16f84ae-e445-4217-8d34-b8979d314ae5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0afe4f21-ddc5-44e2-a4c2-50f896b3a36b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99dacbb4-16f8-4ef2-8948-98ba7316bfc5",
        "cursor": {
          "ref": "e4dc48e0-d77b-4a16-af61-135e2b169b1d",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9eb0cb85-ff48-408d-ade5-c79fe5f2662d"
        },
        "item": {
          "id": "99dacbb4-16f8-4ef2-8948-98ba7316bfc5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9ae1e995-c222-447c-9610-2256a8ee4de2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77baf61d-fb57-41f8-ab46-f39a63b2488c",
        "cursor": {
          "ref": "1904f576-5372-4ee0-aac9-2454b388e4f4",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a83b8c14-303c-4e58-b3e8-9c685a429463"
        },
        "item": {
          "id": "77baf61d-fb57-41f8-ab46-f39a63b2488c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "36ed2eb0-5107-43ca-ac08-8044409df233",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914686b6-4845-41e7-a510-424151053495",
        "cursor": {
          "ref": "cd61b9a8-0c50-42ea-bb53-b990ebea4c63",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "aa73820b-4f51-46ff-b224-b00ad2856856"
        },
        "item": {
          "id": "914686b6-4845-41e7-a510-424151053495",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "416ce709-6b38-412d-b5bf-63a20cc87fe5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6dd684b-f880-487a-896e-032d00f6e8c1",
        "cursor": {
          "ref": "16a68c72-52ed-43b9-a08f-1458fd4d8d22",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "14b25bfa-9797-4909-87c1-f96180952bc5"
        },
        "item": {
          "id": "d6dd684b-f880-487a-896e-032d00f6e8c1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d9e371e1-1665-4f22-8e12-15aec9bc6015",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb6d8bb-6d03-4495-9e47-c6fded61bbf2",
        "cursor": {
          "ref": "57fa60e5-c041-4384-8a0e-91c1435029d6",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "dfee0ba3-c12e-4664-9f47-81ac179ab13e"
        },
        "item": {
          "id": "7eb6d8bb-6d03-4495-9e47-c6fded61bbf2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bfd473d6-cb56-4d20-b1f0-6751ba6beeab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee59dc42-d964-4d63-a8a5-c37554ce13f8",
        "cursor": {
          "ref": "3d8b611c-00c8-43da-b8cc-7ce489539646",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "82e9d04a-2326-4d97-bbb3-e2033382a95b"
        },
        "item": {
          "id": "ee59dc42-d964-4d63-a8a5-c37554ce13f8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "447bf010-dcb1-4ccf-96df-ecdfe7a46b8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c687da4-ff2c-4c20-bc6c-186852998046",
        "cursor": {
          "ref": "3ff8a11a-77a1-404b-86ae-1bc960976c2f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "295b08b8-2f3d-404c-8550-867f1d568def"
        },
        "item": {
          "id": "5c687da4-ff2c-4c20-bc6c-186852998046",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fa01d0a4-3201-4890-a46a-ff5ae69df3e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec068d1c-de27-44cf-a333-fcfaa57b2b12",
        "cursor": {
          "ref": "99222522-a9f8-4e8d-a12d-bb6b010f805a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c4659e6a-76c1-4e91-9963-2dd84c6dc033"
        },
        "item": {
          "id": "ec068d1c-de27-44cf-a333-fcfaa57b2b12",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1617f4dc-7f2a-4804-b539-2320693da111",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569deb5d-6132-4434-b034-0a2846183d1b",
        "cursor": {
          "ref": "72f4c4fe-1e50-47c3-8fa0-0485f47406c0",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f4485ac2-0088-4e59-b1cb-e4cbf59abd8f"
        },
        "item": {
          "id": "569deb5d-6132-4434-b034-0a2846183d1b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c0752a49-4dcc-458b-b9bb-d8b1e4431fc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c287c6f6-ca11-434e-8e46-d41301c58d13",
        "cursor": {
          "ref": "9ee7888f-36bc-4f70-b78b-3edd0ec3669b",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fe31daa3-5f20-4932-b522-e55db4105ea7"
        },
        "item": {
          "id": "c287c6f6-ca11-434e-8e46-d41301c58d13",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c3e73314-2696-4d49-adcf-3ce75a57f86f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9bd145-2f1e-41e6-bd5e-c7a59f8394f6",
        "cursor": {
          "ref": "d8f2b41d-7fe6-4963-8675-5adb13605473",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e7ab5188-adfa-4dfa-9c8a-fbb2d2e8a956"
        },
        "item": {
          "id": "0f9bd145-2f1e-41e6-bd5e-c7a59f8394f6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "52828a1a-18e2-497e-a4b9-720d7141b31d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d76597-7fbb-48b3-b833-c78179288c88",
        "cursor": {
          "ref": "20e96624-934d-4af2-b387-2a62a19b84cb",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bb14ecc7-e1d4-4814-b131-fa78efb00de0"
        },
        "item": {
          "id": "25d76597-7fbb-48b3-b833-c78179288c88",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3fc39bac-86e0-4376-aa73-bd8e32abe184",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81b783a-3e95-4023-9f2d-f9af39b0377f",
        "cursor": {
          "ref": "bd2d2b57-8c71-4a8a-92d7-04e034b8a11b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3464308c-a536-4569-95bf-ffc046f6cab1"
        },
        "item": {
          "id": "b81b783a-3e95-4023-9f2d-f9af39b0377f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "77391374-3c42-4133-8487-73e5fb5ffb2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a125875-d0f9-44d6-9f7c-9e91d235ba6e",
        "cursor": {
          "ref": "7c6b597a-f580-4c46-857f-156eab1e6c79",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f7a0a32d-ebfb-442d-b611-92f1eb111fbd"
        },
        "item": {
          "id": "8a125875-d0f9-44d6-9f7c-9e91d235ba6e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2da8dc42-4535-405b-b72a-cbe21db99819",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3fc806-d6ba-4292-9231-254fa9e3140d",
        "cursor": {
          "ref": "d80bdd39-c84e-487c-9f2c-677644df9041",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "798e90fc-c444-41f9-9bcf-9c9e6bfe455c"
        },
        "item": {
          "id": "1d3fc806-d6ba-4292-9231-254fa9e3140d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cbfcd59a-2324-491b-add2-f5c8a5b548cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512ddd2c-c47d-4b58-88e1-e50305dd1947",
        "cursor": {
          "ref": "712e8e9a-2d15-408c-b156-d3eed0109d15",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e0038023-97af-4b5d-9864-40dd80dee57f"
        },
        "item": {
          "id": "512ddd2c-c47d-4b58-88e1-e50305dd1947",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8f8f884c-c667-4c69-b2b6-a14a5f47a869",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb6f7ce-982a-44be-845e-1fecf85e72a0",
        "cursor": {
          "ref": "0598d0d0-cdb3-404d-9715-c7a4b2a21ffe",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8e5bd1bf-317c-4793-a8f8-05fa1454e197"
        },
        "item": {
          "id": "0bb6f7ce-982a-44be-845e-1fecf85e72a0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "deee16c7-6b6a-41dc-a965-0340919edab5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87660bb-f6a7-4e2c-ab0d-ef2b3d43baaf",
        "cursor": {
          "ref": "a490c50c-6a17-43ca-a383-118433c9f189",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bb27f534-15ce-4c69-a224-8c3f233ed517"
        },
        "item": {
          "id": "e87660bb-f6a7-4e2c-ab0d-ef2b3d43baaf",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "90966211-a8ae-4a68-a63b-3bf5dd89e211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a91a11-5ac6-4372-a5bd-4417c3ce7baf",
        "cursor": {
          "ref": "e4f5b842-f3b9-43ec-b822-8c01ff8bca26",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "63fee31f-2040-4520-9620-bd131269d937"
        },
        "item": {
          "id": "34a91a11-5ac6-4372-a5bd-4417c3ce7baf",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "737fab9b-4043-4cbf-92bf-e55aa961ee71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39262d6-f4d1-48d3-8f37-7337f8166d1c",
        "cursor": {
          "ref": "bf3aa350-ca5c-4b27-a81a-f2de533897bc",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6c242d68-fb6a-467f-824d-c1c16a610b26"
        },
        "item": {
          "id": "b39262d6-f4d1-48d3-8f37-7337f8166d1c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "32206e94-a51e-4317-a2c2-8840d2cf9172",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6086b28-2dcd-49c5-943c-cbf9b6e7a760",
        "cursor": {
          "ref": "f3db2f61-ff64-49bb-b0c4-21c580aececc",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "72422b96-2dc4-44a9-8b07-635d8e0f2536"
        },
        "item": {
          "id": "f6086b28-2dcd-49c5-943c-cbf9b6e7a760",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "91d530f9-00e8-4d27-ad6f-8a518632cdfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c113564-8fc3-482d-852a-4aaedcdc929e",
        "cursor": {
          "ref": "8b242df1-9ae1-412c-9152-a24dbf36c831",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "305e2f2a-b180-4413-91e4-8ab8d428f66b"
        },
        "item": {
          "id": "3c113564-8fc3-482d-852a-4aaedcdc929e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ae0d93d1-9124-429f-bc62-a042f1039396",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdda619f-5653-45b4-8513-1abdd0ad5026",
        "cursor": {
          "ref": "c1f438d2-8c1f-46e7-b6e7-73849015e002",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0bab9b0b-9796-4390-af1d-4003f2231e31"
        },
        "item": {
          "id": "bdda619f-5653-45b4-8513-1abdd0ad5026",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fc697ed3-2e31-4d00-a9d4-54caa92fbfa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9483d2-f89f-48f6-8070-f3b1f92fab05",
        "cursor": {
          "ref": "ba1380ef-8ba5-4260-a0a7-644e3e2c9e42",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ba01fe19-73ba-4b8f-86ca-884af5eeeb78"
        },
        "item": {
          "id": "3c9483d2-f89f-48f6-8070-f3b1f92fab05",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bc0d38cb-1b55-41cc-a533-1f4a9cf90055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7443ca52-e8fa-42e7-94f2-fa908313d729",
        "cursor": {
          "ref": "b1a19172-4312-454b-987b-3717f21fa950",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e40d033b-476c-4822-a1ba-52704dd6aee5"
        },
        "item": {
          "id": "7443ca52-e8fa-42e7-94f2-fa908313d729",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5bc5a602-e5bc-453d-809b-c670e6487762",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1674eea-75db-4b6c-919a-f99b9ca89bb9",
        "cursor": {
          "ref": "6931a43e-1fa7-4e90-8430-3c74e972bf23",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "be62ce6d-7dbb-4161-be8a-16f91275b718"
        },
        "item": {
          "id": "c1674eea-75db-4b6c-919a-f99b9ca89bb9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "05cf3aa6-3839-4715-9f64-97509898fe16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6077518-e2a5-4eab-a2c4-d9dc79764227",
        "cursor": {
          "ref": "21d40c25-08ed-41f1-84f2-600cae6605b6",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a67d8a82-8f3e-4229-986c-d3c253b23976"
        },
        "item": {
          "id": "a6077518-e2a5-4eab-a2c4-d9dc79764227",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "411ed927-9038-4586-9efa-c67dc1bd457e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03509574-5113-4972-a859-5a3e55d6ebe2",
        "cursor": {
          "ref": "01b31a0d-38c6-4b62-82bf-7abbbddcdda4",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6d14e276-7ce8-48e2-89fc-124a23b38cd7"
        },
        "item": {
          "id": "03509574-5113-4972-a859-5a3e55d6ebe2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "87f5ce7e-fcb4-4fd0-bae8-aa170d424b32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b67424d-ab27-48e8-9318-699ba2ffc73e",
        "cursor": {
          "ref": "358ed968-2b48-4940-9fb6-be96034a8b1e",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9fe5f94b-2fe1-449b-a4f9-7b7645fbb8d2"
        },
        "item": {
          "id": "3b67424d-ab27-48e8-9318-699ba2ffc73e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7f5ae351-9b90-4caf-8b22-5de80407b402",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d333a54b-a0b0-4cd6-aacb-2b39a40bebba",
        "cursor": {
          "ref": "46f00b83-036e-40b9-aa5a-537b8ad6037a",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dc8885ab-a621-43a4-92c7-bd0b903a00f5"
        },
        "item": {
          "id": "d333a54b-a0b0-4cd6-aacb-2b39a40bebba",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "83ac2d92-426d-43cf-8c75-466e3706ab55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0169777-ff5e-4542-b0d6-fa32ed3c39a5",
        "cursor": {
          "ref": "7b4db809-e4c3-41db-a9e4-c9434b1aadc6",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2a4107ee-4e3a-48a8-85a9-9b5bde9ab47b"
        },
        "item": {
          "id": "d0169777-ff5e-4542-b0d6-fa32ed3c39a5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bd7c8d60-7e02-4e24-9410-dff6f339b7c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175fdbf5-88be-408e-9af1-70f0a47555d3",
        "cursor": {
          "ref": "1fc21126-c0bd-4e15-a333-75d9aada9662",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cea6589b-17ce-48a3-8764-ea5575729a7a"
        },
        "item": {
          "id": "175fdbf5-88be-408e-9af1-70f0a47555d3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b0fd7b17-7cb8-4dd7-a820-8ebd4064e706",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7c7ef7-295c-41d9-9ce7-b9fc376b2558",
        "cursor": {
          "ref": "1868e68f-189b-4074-a9fd-0c61d94216c4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bc0c4df2-5942-4676-8ec4-2dad32310b72"
        },
        "item": {
          "id": "db7c7ef7-295c-41d9-9ce7-b9fc376b2558",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3cd45a5d-b8e8-4fc7-8f4b-6147cd3041d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3743c5-1b5d-4216-976e-0776642cd130",
        "cursor": {
          "ref": "006e68cd-bdb1-4357-82ed-60eb18ff5770",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1f29bfd3-f715-4b47-9e8d-a33fbe6f03ba"
        },
        "item": {
          "id": "3f3743c5-1b5d-4216-976e-0776642cd130",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8e933c2f-5681-4dff-9682-1a29dac4f98d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063cb364-c90a-4859-99e3-456545d4989a",
        "cursor": {
          "ref": "9a458d36-07db-4aaa-8d3e-4aa809554e8c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dab34daf-34b3-48aa-ad82-0da7e1fcb197"
        },
        "item": {
          "id": "063cb364-c90a-4859-99e3-456545d4989a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7b0ff14a-1a95-4e13-be6e-12c1474de2c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac80a1a-07b5-4b64-9957-3b573ec8a487",
        "cursor": {
          "ref": "e707ddd8-2a7c-4eee-a098-864296254dba",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a9910ea5-88e1-4764-b201-152c44b640c0"
        },
        "item": {
          "id": "fac80a1a-07b5-4b64-9957-3b573ec8a487",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b000ed96-9bdd-4f88-9eef-0fe4a418e67d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c73c8c-d737-4f92-94ab-8ad6e85b4085",
        "cursor": {
          "ref": "36aa20ad-8f23-47ac-a490-1d0830aab0cb",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "90afe626-fdec-45ff-8eab-07cb59e532d8"
        },
        "item": {
          "id": "d7c73c8c-d737-4f92-94ab-8ad6e85b4085",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "af16e0b5-2c09-4966-9c4c-a1f11608cd72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e10b88-94ef-4228-a091-304b5d355d3c",
        "cursor": {
          "ref": "c8f04ca6-4312-4f8d-91f0-0e28084ba97f",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "884c35fe-d3bf-46ea-a0de-faa092218457"
        },
        "item": {
          "id": "b0e10b88-94ef-4228-a091-304b5d355d3c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6719d2d8-f417-478b-a8c4-826de92041d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699252d7-4ce6-4af3-a492-9a49db4fc238",
        "cursor": {
          "ref": "196bc43c-1998-4438-b217-d1cd96b6bc77",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "24fe4421-982c-4bd6-8e0f-339fcc2e0533"
        },
        "item": {
          "id": "699252d7-4ce6-4af3-a492-9a49db4fc238",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c57241a2-a54d-4e2d-b07b-32ba9c862148",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fde0a6-948c-4115-8631-f88d3f025844",
        "cursor": {
          "ref": "38476f55-78d6-46f8-a821-e4d196019a71",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c20af898-01cb-402d-b9c5-d76766e8f25a"
        },
        "item": {
          "id": "77fde0a6-948c-4115-8631-f88d3f025844",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "00038d3d-29e4-464b-a9fd-d9265254b7bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33964375-737e-4142-ac1a-2caf67465007",
        "cursor": {
          "ref": "6cd25482-2d24-490e-b10a-4f3bde3bcdec",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "27e38051-c6e0-498b-b831-3832b6851730"
        },
        "item": {
          "id": "33964375-737e-4142-ac1a-2caf67465007",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b5beac97-4ebf-42cd-981c-3b502964fb8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a180e00-686d-4443-993c-2abdccbfa8f4",
        "cursor": {
          "ref": "9beb2e95-ffd5-4c0d-b47e-8252f30de3b7",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b970a436-d9b2-449f-8681-c782af473d64"
        },
        "item": {
          "id": "0a180e00-686d-4443-993c-2abdccbfa8f4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7803d23e-55bb-4911-a2e1-cf5c8654e3d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58633a1f-5c0a-42bb-a293-edbfad3df085",
        "cursor": {
          "ref": "f826f149-a48a-4abc-9dde-b3b08a8b3b3f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4e777326-12fc-406f-8890-b86a352d1013"
        },
        "item": {
          "id": "58633a1f-5c0a-42bb-a293-edbfad3df085",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3da38d3e-f7fc-49d1-8ac2-df0e827fd683",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5451ac-1a6a-4769-925d-e299de073f4f",
        "cursor": {
          "ref": "68dd875f-f286-46f0-afcb-9c110ce4018b",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0fcf0396-5ba9-4387-8fa0-679dc985b0d9"
        },
        "item": {
          "id": "2f5451ac-1a6a-4769-925d-e299de073f4f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b5c349a6-6a32-481c-bd44-9513ea82fcd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec4d1db-ed82-4676-8fe7-647c41ed2d86",
        "cursor": {
          "ref": "a0453094-d985-4227-ab21-20110a5fab20",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f597a381-f510-4147-b406-483d0de15d11"
        },
        "item": {
          "id": "1ec4d1db-ed82-4676-8fe7-647c41ed2d86",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3c0c08f4-ce5a-425e-9081-4a9abfc449ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9872c9-0bc8-4d3a-8928-32db7ed4a749",
        "cursor": {
          "ref": "27393a46-d0f3-4265-a1b4-388d429d4515",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c30923f0-9dac-411d-a2a2-bfde66619bd4"
        },
        "item": {
          "id": "8e9872c9-0bc8-4d3a-8928-32db7ed4a749",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8f7121e9-87e5-4a47-8239-45576e51ff90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1028edb4-f7dd-4eea-8e22-e8676144755b",
        "cursor": {
          "ref": "d391c108-d985-48c7-8dd3-cbfb6808e46a",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "71633fff-a8e1-49a6-bb0d-e38e90cd1738"
        },
        "item": {
          "id": "1028edb4-f7dd-4eea-8e22-e8676144755b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ac0233f9-b8b1-4f76-a637-ccdcb90d4300",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5b9a0a-53a8-4a2f-b309-618b18b352f3",
        "cursor": {
          "ref": "56b7bbe6-9c13-4efe-95d2-8139bcc96f1a",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "efc34375-438f-4cda-8adc-4f8cf2de3812"
        },
        "item": {
          "id": "4f5b9a0a-53a8-4a2f-b309-618b18b352f3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f98b4c26-66bf-40fc-8281-a1372212f9e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 210,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b71e705-4505-4766-8f4c-740a732fccb8",
        "cursor": {
          "ref": "cb73972e-984b-49e6-a5c2-6dee90e4e1a9",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4c877aff-614d-4fc2-b725-e26884bfe640"
        },
        "item": {
          "id": "2b71e705-4505-4766-8f4c-740a732fccb8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cccf57a0-2975-4206-9449-ba8414268055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899db05a-5776-4fac-a60f-152f421ba1ac",
        "cursor": {
          "ref": "d595a5d5-75e9-4597-9242-9af8d6e57d9c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "35045ec0-a58a-42d4-b3d0-4e1062f44c32"
        },
        "item": {
          "id": "899db05a-5776-4fac-a60f-152f421ba1ac",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8b3768bd-918f-4408-a34b-c8152af3bbd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffec74b5-9343-440c-a5b6-718c5d2605e2",
        "cursor": {
          "ref": "7cae9bf1-447f-436f-bde5-f32ea55ff073",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d1828ca2-e974-40ba-a133-9094e15609c0"
        },
        "item": {
          "id": "ffec74b5-9343-440c-a5b6-718c5d2605e2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9cb32ff9-75b8-4ed6-bf77-945269b0616e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18dba285-dc92-4303-90ca-838a97345307",
        "cursor": {
          "ref": "6a8c7247-88da-4fbc-a478-f99b8e4c8e20",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "aea1f050-2693-4893-8dd0-0da2fe880cd2"
        },
        "item": {
          "id": "18dba285-dc92-4303-90ca-838a97345307",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3450d369-e413-4043-9ce2-c83118c15b9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9eab37b-6ca6-4aa0-9591-42c75741ddcc",
        "cursor": {
          "ref": "ad4ff8c4-debf-4779-920a-d1a1e0e1b9ae",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "875ae9be-dc6c-4d07-9a36-7601913d207c"
        },
        "item": {
          "id": "b9eab37b-6ca6-4aa0-9591-42c75741ddcc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a75fbe1e-edfb-4f3e-ab3c-fc698bad0101",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6e3f1e-371e-43a3-a0d6-cb4244bd3d63",
        "cursor": {
          "ref": "e49da5e2-84b7-4336-a380-39c548943864",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "29c2e465-bb08-4163-9e56-fa194524753a"
        },
        "item": {
          "id": "2b6e3f1e-371e-43a3-a0d6-cb4244bd3d63",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "59489fa9-25d9-4eee-a52d-13932e3e99a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c56178c-55f8-44df-a261-59f60ad315fb",
        "cursor": {
          "ref": "ad9ab8ca-9705-4547-bfbb-55e7826a7bbc",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "42ef2057-d1b9-46d1-a913-35b8298c1e56"
        },
        "item": {
          "id": "7c56178c-55f8-44df-a261-59f60ad315fb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2f708e1c-b932-4727-9194-f4278fa8a697",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e47d066-971c-466c-88e8-14513f97418d",
        "cursor": {
          "ref": "1f6ce1f9-a8f4-4bc6-bffb-1c5c7811d00e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d3c29d96-b497-4a94-aef3-b6bef92f3ed2"
        },
        "item": {
          "id": "2e47d066-971c-466c-88e8-14513f97418d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "50cc4d52-d0fb-459c-9c38-6ef026004526",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb71a9b-3e13-4320-b82f-1ae23ddf54d4",
        "cursor": {
          "ref": "2a5064cb-68c9-43b8-b601-b9e5201d0fd7",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6fd481bb-ab07-47d7-8d9b-42e75e7d68ee"
        },
        "item": {
          "id": "4cb71a9b-3e13-4320-b82f-1ae23ddf54d4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3dd25919-559e-4a28-b298-80d3d67e288d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2175e4c-1375-4f28-9085-f47d1fbed18f",
        "cursor": {
          "ref": "bdd72ef1-7bba-42bb-9b8a-235e5511000e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d2cddbfd-bf6e-488e-81f3-7493e8b57857"
        },
        "item": {
          "id": "b2175e4c-1375-4f28-9085-f47d1fbed18f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f54e1768-fae8-491d-917d-dd2ae05e3529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c200e18-ae14-4361-bca6-296497ab7c1c",
        "cursor": {
          "ref": "e2718df7-ed27-4a99-a585-066e9815bf33",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dbc0a432-8cc2-4eda-b035-4fdc348bcb5b"
        },
        "item": {
          "id": "8c200e18-ae14-4361-bca6-296497ab7c1c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1c2905a4-52cb-4694-893b-bd6bdab2a8b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53787e5e-bcaa-4279-aa50-e7f76b306d81",
        "cursor": {
          "ref": "cadc3e3b-3cc0-4b3a-b9de-9d94991318b4",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b3bdf2ae-1558-4518-bf5a-9d34f6245921"
        },
        "item": {
          "id": "53787e5e-bcaa-4279-aa50-e7f76b306d81",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "04175b64-880e-464b-8fa6-1ed76566a1f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb43caa4-729f-4775-985f-dbac17b207fb",
        "cursor": {
          "ref": "2979f0bd-ade9-40bd-95c1-d3e48aead497",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6d18400c-674b-4671-8f65-893457974c0b"
        },
        "item": {
          "id": "cb43caa4-729f-4775-985f-dbac17b207fb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "53ee0035-e207-4160-8f37-65b52507d1a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8edb83-6770-4fde-b440-67aa0e6b54bd",
        "cursor": {
          "ref": "7b93d17a-a9f3-4177-bf0b-9edae877d9fe",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "294f9b03-c5f2-4f24-9d65-b375a1e791b6"
        },
        "item": {
          "id": "ed8edb83-6770-4fde-b440-67aa0e6b54bd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4c72748a-0c74-439a-b715-38cd9324d020",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43f87a3-8805-45d5-8030-7ff072435afe",
        "cursor": {
          "ref": "f24359e5-5820-45d5-a5ec-d10ff692c02c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "83fa2b78-306f-4e7c-9f08-60bf026d35ff"
        },
        "item": {
          "id": "b43f87a3-8805-45d5-8030-7ff072435afe",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7756ac70-3f16-4685-8e61-b3b30f7bbcb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d856db4-b143-4816-88d7-7383fdaa4d5b",
        "cursor": {
          "ref": "f8b4a698-240b-41e6-ad87-3571670ecf3e",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f13e8819-0978-4e9b-860b-83cc0ab8471f"
        },
        "item": {
          "id": "6d856db4-b143-4816-88d7-7383fdaa4d5b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "077512fe-a388-4c9d-bbf5-b410eabffe05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc655c7-1095-4fee-8c71-052258f71be5",
        "cursor": {
          "ref": "27245a5e-d80a-4bb6-96a7-b00c8a7e8471",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3068adc3-2e52-4443-97ec-0c206ce6a0e3"
        },
        "item": {
          "id": "2dc655c7-1095-4fee-8c71-052258f71be5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d87bc7c6-eb93-47bd-b45c-3ae63d0e9c41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ffb5bc-43f5-44d7-b218-50167177472a",
        "cursor": {
          "ref": "f15e1b99-5ab3-4e1c-97b3-04f79f759bfd",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9eae85b8-b3df-457a-a73d-96c95ba7d623"
        },
        "item": {
          "id": "93ffb5bc-43f5-44d7-b218-50167177472a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7ff665cb-4360-4cdd-9100-5505839ade2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e87be56-6032-4a23-928e-338dbfcdcd69",
        "cursor": {
          "ref": "62d8a522-c441-44b0-8399-25a0f7c2fddd",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "92668016-6034-4773-818d-8a71679311af"
        },
        "item": {
          "id": "2e87be56-6032-4a23-928e-338dbfcdcd69",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ee35c70d-7533-4387-ab98-04441fee89c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d765a63-da5d-46b5-8a78-98fa9b430377",
        "cursor": {
          "ref": "206f2e7f-b93e-4d68-a8e2-62eae06e3a5c",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ac045557-5414-4590-aa47-97cb9e05a48d"
        },
        "item": {
          "id": "2d765a63-da5d-46b5-8a78-98fa9b430377",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6a808ed8-279a-41dd-a297-fbaf95f44f8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd362a6-ee2d-489d-ac27-0048452439d4",
        "cursor": {
          "ref": "168d4dc3-43cf-4bbe-b1b4-a99a000b7ca7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "76bbcbf9-e491-46ea-875f-2a6b74cf9f91"
        },
        "item": {
          "id": "abd362a6-ee2d-489d-ac27-0048452439d4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9c1b9eda-04ba-4747-91f6-cd6c31578b70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be73056-2e7f-4803-bc47-f6948808dfe1",
        "cursor": {
          "ref": "9f1c5595-aedb-4d1e-a01f-1b911847ba67",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "968563fb-a46f-4f07-ae3e-80624a0d3da8"
        },
        "item": {
          "id": "5be73056-2e7f-4803-bc47-f6948808dfe1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ae06e650-ebd8-4556-b54c-c0b99f2543b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad785067-4edf-4277-99b5-d8a40c4d36dc",
        "cursor": {
          "ref": "63e0258a-1c64-45da-bb5b-c7659d983a57",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ff99a02c-37c0-41c3-83d6-12fb85e40632"
        },
        "item": {
          "id": "ad785067-4edf-4277-99b5-d8a40c4d36dc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f5357fb2-0e79-4c16-b05d-9827ec52e86a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02df403d-ed8a-44fc-89de-20fa7fc4e00d",
        "cursor": {
          "ref": "619a7c5a-e7a0-4e68-af3c-df996f97f8e9",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b8ae056b-bef7-4693-9b18-aac40018509a"
        },
        "item": {
          "id": "02df403d-ed8a-44fc-89de-20fa7fc4e00d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "cf7af1f4-64b5-4cd9-b765-238ea9e20e95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8817f03-8c26-4dd8-b2bf-7cf4bc2c71cb",
        "cursor": {
          "ref": "dbe1ead3-6e51-47e7-9788-3b19f5a88087",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "02febd13-0772-4963-9030-c826359fba9b"
        },
        "item": {
          "id": "b8817f03-8c26-4dd8-b2bf-7cf4bc2c71cb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d22a52d5-c3ce-4a9a-ae26-6f475a6d69e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5353ffd-8962-4ddf-a530-c39e3df788fe",
        "cursor": {
          "ref": "557b58e3-b688-44fa-876b-ccf279a6db22",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7cdd3f66-a192-40c9-94c8-4d9b476de969"
        },
        "item": {
          "id": "a5353ffd-8962-4ddf-a530-c39e3df788fe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f5522f90-0df3-4129-b7c4-ea47e8b50f6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f88e53e-6ba0-43c2-bbaa-265e8901f73f",
        "cursor": {
          "ref": "008a6c82-418b-490f-b3d6-af4bb8912741",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ea4da9f6-ece3-4651-ba96-e48edc8bdd8d"
        },
        "item": {
          "id": "6f88e53e-6ba0-43c2-bbaa-265e8901f73f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "074d7b6a-acf7-47ae-8c61-540c18ac3767",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d85c46b-5f60-49e5-b8a3-a7a3e407dac2",
        "cursor": {
          "ref": "68163626-4c59-408e-9160-1bae4283c2de",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e691844e-00b0-4f51-a306-3518719dfb01"
        },
        "item": {
          "id": "0d85c46b-5f60-49e5-b8a3-a7a3e407dac2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "04896f5a-f152-43a9-8f8b-e8a85674506e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44c7523-a2cd-4aee-85fc-a6d172047ecc",
        "cursor": {
          "ref": "692b13c2-fc6a-40d0-b2c4-418359215bf1",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fc347588-51bb-4950-8c5b-8b44dd91eb9c"
        },
        "item": {
          "id": "a44c7523-a2cd-4aee-85fc-a6d172047ecc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8490918f-dd9f-4367-b122-39150cb102c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1448ad-788b-4762-8e92-9b2abbf0ef8f",
        "cursor": {
          "ref": "59fdcdd3-9b9d-402f-b841-4565d4624a01",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7ad86516-2ead-4a15-bc2b-ea0eb62b4715"
        },
        "item": {
          "id": "1b1448ad-788b-4762-8e92-9b2abbf0ef8f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5cf8d727-b74e-4ba6-98af-c30cebf6cc1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f37d5be-2964-47f3-a597-7517898d481a",
        "cursor": {
          "ref": "13ed220f-9f4e-4956-8478-c8d40edb59e2",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "af525be3-3766-4b55-8a7b-ea505fae252d"
        },
        "item": {
          "id": "5f37d5be-2964-47f3-a597-7517898d481a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dadda1f0-c2bf-4356-979a-0cf6d892175a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70184b64-3a84-4fc4-b64b-ea5ee8e3ca13",
        "cursor": {
          "ref": "671f2f0c-8f95-424b-90e5-d897af2c9e5a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e83bb8fa-260a-4418-af93-28f3d0daaf3c"
        },
        "item": {
          "id": "70184b64-3a84-4fc4-b64b-ea5ee8e3ca13",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "584c1c96-43a7-498d-a62f-e64712ba6c45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e277299b-9eae-4ea4-902f-3a428235a6c5",
        "cursor": {
          "ref": "0e682c9d-63e4-4915-b10c-80cbbe01cbc3",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f05fd601-6f15-4759-a762-bf943246d899"
        },
        "item": {
          "id": "e277299b-9eae-4ea4-902f-3a428235a6c5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d127e2a8-8cba-4e80-adc7-6fb3b283a83b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12461416-79e3-4504-9c02-a514dff8d1d2",
        "cursor": {
          "ref": "6ede4a93-ec68-4e29-90b8-729739f656b0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9c12d9b4-8f36-46e8-ba51-b440c3912b0d"
        },
        "item": {
          "id": "12461416-79e3-4504-9c02-a514dff8d1d2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0443d1ee-29fd-4254-8418-ad06afb57c9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cef2df-9c81-48da-8067-46b238770810",
        "cursor": {
          "ref": "ba5340ad-33b5-4fbd-b7e1-67c9b57df2b5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ad78ebd6-21ef-4c43-b35c-115b628a12e1"
        },
        "item": {
          "id": "c6cef2df-9c81-48da-8067-46b238770810",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bda1ca99-e0a9-46db-b4d8-41fa25df79f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295735a9-a245-49d0-9bf1-388878969334",
        "cursor": {
          "ref": "03eb41e0-31d1-471b-bca5-6b751feb9bc5",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "caff672a-98ac-4665-aa15-e87cd2dadf1e"
        },
        "item": {
          "id": "295735a9-a245-49d0-9bf1-388878969334",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "26de7931-d18b-400d-b663-a8a44ce5adbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956fdcf7-2b54-4896-86e6-83a9105d853c",
        "cursor": {
          "ref": "ce558f39-2c88-44a4-bdcb-50519d9c8b1d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "89494671-1a3b-4de5-93ed-91434202da4d"
        },
        "item": {
          "id": "956fdcf7-2b54-4896-86e6-83a9105d853c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0e3dc006-0884-4e5b-be24-34879fbf683a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd641c2-84af-4212-b880-cddbdd94959a",
        "cursor": {
          "ref": "3b82de7d-64d1-4f01-87d7-7e056167073d",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "496a4da0-0936-45ea-8ab3-16c72c5fcca6"
        },
        "item": {
          "id": "cbd641c2-84af-4212-b880-cddbdd94959a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8eef5d13-2282-4292-95c7-4018b83a3cab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20cfba5-3a9d-459b-a302-4d01a096fa20",
        "cursor": {
          "ref": "84f9969c-4646-4ffd-a2ba-8c277266c180",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7a22739c-a7be-4a63-80cb-2384cf965804"
        },
        "item": {
          "id": "a20cfba5-3a9d-459b-a302-4d01a096fa20",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "46a8da5a-842b-4b3b-aa6c-4c41252c67cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d8780a-cd6e-4067-a9e2-f79bf21bdc1e",
        "cursor": {
          "ref": "b145b58b-e690-4215-bd19-639effbaff32",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c1edda9a-6187-4a8d-b179-8b9ee3d230a0"
        },
        "item": {
          "id": "23d8780a-cd6e-4067-a9e2-f79bf21bdc1e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d538c99d-ce95-4398-95e7-16caa645cab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24975f2-6840-4b60-92a6-41dcf138a640",
        "cursor": {
          "ref": "317f63b7-121c-4789-a703-9812b718c96a",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "33c455e8-48ee-41ea-999b-62895572b4a0"
        },
        "item": {
          "id": "d24975f2-6840-4b60-92a6-41dcf138a640",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c7c9bc51-781b-4b38-baef-b305a253212f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4632769-11cd-4450-9535-f1860017efe0",
        "cursor": {
          "ref": "1213c4c4-bf15-4530-84c1-082a87d1ade1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5b831d9a-fd82-41da-9d9d-0c05f16dba8f"
        },
        "item": {
          "id": "a4632769-11cd-4450-9535-f1860017efe0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a91390b5-45ee-4f47-85a0-2bf552076b10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfc7bf3-53a6-4071-9fc0-4daef3489be3",
        "cursor": {
          "ref": "08294437-326b-43fe-a165-6ddbdb5ca2e2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "95536210-bf3e-4a5c-96fa-daff83584003"
        },
        "item": {
          "id": "8bfc7bf3-53a6-4071-9fc0-4daef3489be3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9d0cd4dd-925a-468e-b0f4-96d0ab0804b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96e1b9c-346c-42d3-a8f5-d006e09cf6d8",
        "cursor": {
          "ref": "78d38d4d-6b3e-442d-9812-5e407bee957e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d8061674-3a2a-4cc2-bc40-fea1ddcf6b17"
        },
        "item": {
          "id": "f96e1b9c-346c-42d3-a8f5-d006e09cf6d8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a2054155-0ca5-403e-91f1-d7f795e8ff4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14648255-4b5b-4b74-bca7-63e92a1fee41",
        "cursor": {
          "ref": "52bfa3ea-e487-4c4b-9ab0-9c626c491212",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "81189e5f-fee5-4940-9e8f-5a11bfb00a5a"
        },
        "item": {
          "id": "14648255-4b5b-4b74-bca7-63e92a1fee41",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8da7509b-53e4-446f-a815-1dede984525f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7657c2cd-a276-4ffb-9d37-f68c639d7c03",
        "cursor": {
          "ref": "920c22aa-9825-41bd-a608-c1dd46236c6d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6587c1ed-48bb-46f3-bafe-3d6cbd3ceb63"
        },
        "item": {
          "id": "7657c2cd-a276-4ffb-9d37-f68c639d7c03",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6e8ded52-492c-4157-ab22-0f35ef946403",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484677d1-a7d9-4a13-8bcc-3272c0771b12",
        "cursor": {
          "ref": "1aafe72b-0985-4566-b387-5d80f365ae09",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a5a0920b-0b65-40ba-a7de-75dcf582fc41"
        },
        "item": {
          "id": "484677d1-a7d9-4a13-8bcc-3272c0771b12",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e97c631b-e5f0-4a31-93fc-83a56d952c79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2ecea8-98f3-474e-9277-17b6f5d02091",
        "cursor": {
          "ref": "c14cfd34-ec9d-46e4-a261-05da6631b8e8",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a0a81d83-280d-4862-81b5-aae18842f7c6"
        },
        "item": {
          "id": "5c2ecea8-98f3-474e-9277-17b6f5d02091",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "65364415-8a33-41d2-bc94-c8b01f36e1db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110d4b5b-93fb-46bc-a184-be824b504562",
        "cursor": {
          "ref": "e12a61a9-601b-4112-9a2f-93ccf65b51d9",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7ee18f43-3755-4a29-81c8-eb0ba831315a"
        },
        "item": {
          "id": "110d4b5b-93fb-46bc-a184-be824b504562",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f52bfe00-2d59-4a0a-beac-8ff580141121",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a61f72-fa66-437d-9f44-c37a150a7204",
        "cursor": {
          "ref": "d01f23af-51fd-40e3-b430-e5c62d2c391c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1cd2c24b-77eb-490c-b66a-ebc9de36007e"
        },
        "item": {
          "id": "43a61f72-fa66-437d-9f44-c37a150a7204",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ded77efa-b710-447d-929b-3e745e3a883e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44418e7d-c76f-4724-8ab3-b5f5e6b9365a",
        "cursor": {
          "ref": "a4916219-d603-457b-8c56-be65379139a5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "89c6f87e-9140-4480-9943-d1668e0ee449"
        },
        "item": {
          "id": "44418e7d-c76f-4724-8ab3-b5f5e6b9365a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c1e804bb-eca3-4b31-a0bf-59a2345a0685",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eea5e62-9ede-4bf3-a923-4c6b470806c2",
        "cursor": {
          "ref": "cedfddf8-5cb3-49bd-9d63-97b422756366",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "cd44c9fd-820d-4325-887b-a9e3bd163080"
        },
        "item": {
          "id": "7eea5e62-9ede-4bf3-a923-4c6b470806c2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "89c21483-60dc-438f-970b-fbd04c3d2b66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d308221f-bf01-4fb0-8e7b-2eac02a2a1c7",
        "cursor": {
          "ref": "20049b64-1479-40bd-9493-a860ac2e6b4b",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "03ba6b72-f560-45c4-9999-1645cdcd74f1"
        },
        "item": {
          "id": "d308221f-bf01-4fb0-8e7b-2eac02a2a1c7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "26a513f6-9ff5-4df7-8b98-843e62a678c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0332b68d-4163-4530-8e5a-2f548feb9e7b",
        "cursor": {
          "ref": "660e2039-33ef-4d37-9876-d90606a29115",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e182d605-5c1e-4d1d-96fe-f191b7c60093"
        },
        "item": {
          "id": "0332b68d-4163-4530-8e5a-2f548feb9e7b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a9212b5a-5275-4679-9818-67d43598ad3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e914b5e4-d881-49b5-924d-bd4a16de3a3b",
        "cursor": {
          "ref": "cd8c4fd3-0147-4d40-8e02-201b20aa4740",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a02545b1-e35c-465e-9220-7238045e887d"
        },
        "item": {
          "id": "e914b5e4-d881-49b5-924d-bd4a16de3a3b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "804aa6f1-a383-4b0e-9219-26360106e787",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587f5c7b-46eb-443b-93e3-08c1d62c3617",
        "cursor": {
          "ref": "4f763ba8-16c3-4c8a-9006-2b13018ed3c5",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "325c1d26-f0be-4367-bbc1-50fb74b43186"
        },
        "item": {
          "id": "587f5c7b-46eb-443b-93e3-08c1d62c3617",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "88834f29-0aa0-4320-8084-17038ce1a99c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2375237-06a0-4c9f-bd9c-04ae907f4dfd",
        "cursor": {
          "ref": "b8ab3f61-f5b4-4c8b-afb4-58c1994d7276",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f2bb58b3-0954-4bc8-89cd-73b38ede0300"
        },
        "item": {
          "id": "c2375237-06a0-4c9f-bd9c-04ae907f4dfd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b11b82b3-5f0f-4fa6-9474-953f01050fae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0750586c-13c4-402f-84aa-4e0db449fdf1",
        "cursor": {
          "ref": "88b58829-cf6d-4b47-9173-4e490a37fb72",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9c78148c-4ad3-400e-bcaf-66a1a9792a00"
        },
        "item": {
          "id": "0750586c-13c4-402f-84aa-4e0db449fdf1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6e480198-12eb-4ef1-a162-1f8505290fbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c41c2a-aa07-4e94-92dd-aa2600888056",
        "cursor": {
          "ref": "fc98584a-f416-4ab1-b393-efe67f4e3143",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "cbef539b-c82a-4beb-950d-65e0e760dee7"
        },
        "item": {
          "id": "60c41c2a-aa07-4e94-92dd-aa2600888056",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "dd245cb3-fbbf-4e0c-a076-42bdc7dc3dbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcfb663-6df6-4833-b3ac-50d4cf39188f",
        "cursor": {
          "ref": "56be94c0-1ba9-4ac9-bdd2-fc3cfb130759",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d7f7b6e6-120c-4338-9136-73d25ff997e1"
        },
        "item": {
          "id": "2dcfb663-6df6-4833-b3ac-50d4cf39188f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ca2c3d60-c2b8-401f-a5f8-a0fa2981ad77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994d9b91-af93-4bfe-bc95-24c264fed1df",
        "cursor": {
          "ref": "d1e57ca0-d9d6-4730-afec-ab8e467e3200",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b771220d-2d86-48b8-8e75-689904bb1272"
        },
        "item": {
          "id": "994d9b91-af93-4bfe-bc95-24c264fed1df",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "245a1629-3dbb-4913-a82f-631780aa657d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8677c787-5df9-46bc-9569-990e1501fd78",
        "cursor": {
          "ref": "e280f72a-b03a-439b-bf35-d492b76c82b8",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "5bd48c0e-799c-4189-99ef-3d28496f977a"
        },
        "item": {
          "id": "8677c787-5df9-46bc-9569-990e1501fd78",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a751b355-782a-435c-a541-7b38e7689334",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bf0dc7-fc87-4b86-92ba-f48f7a60db57",
        "cursor": {
          "ref": "ae3331e2-ee33-4189-b0d5-ef0c04efca00",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7165edc7-73bd-473b-ac0f-2287b0488faa"
        },
        "item": {
          "id": "62bf0dc7-fc87-4b86-92ba-f48f7a60db57",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8307f509-33b9-4b8c-ba4d-3a5bcf165600",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1d70be-3ff7-4bd0-8611-13eddd725c48",
        "cursor": {
          "ref": "df14e9eb-7361-43b4-9aa6-617bd040761e",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "eba44736-7040-4319-989f-33ed07fa2e59"
        },
        "item": {
          "id": "ae1d70be-3ff7-4bd0-8611-13eddd725c48",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "090645a8-ef3d-41ed-b275-f2be7103f600",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4641b53-fe95-4430-b862-4959da970f75",
        "cursor": {
          "ref": "ec69e7e0-8085-4e33-8914-bec3b092de31",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d81889bb-716b-41b2-9c24-90fe2917f613"
        },
        "item": {
          "id": "c4641b53-fe95-4430-b862-4959da970f75",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "93a28144-7102-4308-a0e0-8afeb4fbea82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96c7788-8fc0-4194-90c5-fe33f20b2343",
        "cursor": {
          "ref": "1d34db09-1205-472b-8b3c-9701477cd08e",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "85707ef8-4a11-4064-a11b-c373a4ba8246"
        },
        "item": {
          "id": "a96c7788-8fc0-4194-90c5-fe33f20b2343",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ffe9a176-1ec1-4fe4-b6af-c22f18e32add",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec263f5-98e6-49d8-b8b3-8a9a41ff74d5",
        "cursor": {
          "ref": "242fda5d-d75e-4ec4-9180-ec469299f671",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "fec08342-4789-4cd5-8bd7-26e52db58981"
        },
        "item": {
          "id": "1ec263f5-98e6-49d8-b8b3-8a9a41ff74d5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "44a64567-9842-46fc-ab6c-13e6c4dd82c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36bdaeb-3765-4cbd-a4d8-079e3cc54bc9",
        "cursor": {
          "ref": "b1f27252-adeb-434c-aa47-408a04e3f1ab",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "814fdcf0-fc22-4c9e-af3c-0030341aeaa2"
        },
        "item": {
          "id": "a36bdaeb-3765-4cbd-a4d8-079e3cc54bc9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5d8dcd29-ba98-46d2-ba7b-8da2c71407ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1295a6-c3c5-4d1e-8607-0af12c50a868",
        "cursor": {
          "ref": "6f8a2d4e-338e-49cb-b151-d348c418250a",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8662392e-5fab-4869-bbf1-a73d05a77c33"
        },
        "item": {
          "id": "9e1295a6-c3c5-4d1e-8607-0af12c50a868",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b894d02d-171b-4f4c-b087-5f4cba7ab42f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c32a8f-6705-4bcf-8603-7342f41fa36b",
        "cursor": {
          "ref": "91c115b6-48f6-45d2-b446-084dde5d8084",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "34d5810f-313c-475c-8ab8-ab6f0186d29f"
        },
        "item": {
          "id": "b4c32a8f-6705-4bcf-8603-7342f41fa36b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5014c7a5-c796-4c52-9c7f-de0e98c08ff2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777846b0-de26-4efa-b393-41547c0c973e",
        "cursor": {
          "ref": "5429ebe9-c30f-4eea-99b1-8a8cce42fe5b",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "29c79433-292b-4d19-8436-720dc7c78e95"
        },
        "item": {
          "id": "777846b0-de26-4efa-b393-41547c0c973e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e1b7bdc5-1c8a-46f8-97cd-4dc525267024",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e132f788-e40d-40ca-bff1-cd3545dcc89d",
        "cursor": {
          "ref": "1e229c61-7dd9-4432-ba22-5b8f020682ee",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ba7b14c9-6287-4758-be2f-79ee380eae5e"
        },
        "item": {
          "id": "e132f788-e40d-40ca-bff1-cd3545dcc89d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dea30f46-4018-4f03-8348-9fddcf46f20c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0158fe3c-8931-4f91-8e67-880d05222dfa",
        "cursor": {
          "ref": "a18ac1dd-e242-4907-a61d-acc55d472cb2",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "60b60d27-8531-4317-848b-0f182d5ea565"
        },
        "item": {
          "id": "0158fe3c-8931-4f91-8e67-880d05222dfa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "abc35fcb-6116-48c9-bfbf-5e8b29a2529e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a614d19-1bf1-4b7a-9020-5f090cd67ba2",
        "cursor": {
          "ref": "a78a6cfe-2304-47b2-8d22-40d208c2f33a",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "48319153-5a41-4f71-8b66-67943207900c"
        },
        "item": {
          "id": "4a614d19-1bf1-4b7a-9020-5f090cd67ba2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7fdb1493-0fc5-4e26-a61e-10338452ad22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67265c2b-0dcf-4f52-8a1e-266696d1f16f",
        "cursor": {
          "ref": "178f0d6c-d205-4548-a7e4-4088e0f8fa8b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e86fedd5-1fb0-4156-a418-f6b626780856"
        },
        "item": {
          "id": "67265c2b-0dcf-4f52-8a1e-266696d1f16f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "44f15276-fe99-43cf-9447-3703babb239b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a9bfcc13-e280-420e-a16f-75f4c7dadc6c",
        "cursor": {
          "ref": "1cb8df82-0db8-4686-9fcf-0858b05b65d8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9b864719-38a3-470d-80e5-a64303ecb7d5"
        },
        "item": {
          "id": "a9bfcc13-e280-420e-a16f-75f4c7dadc6c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "24dbbea4-324d-4a49-ad65-10c6bcd599dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "825d9abe-de28-4838-a03c-3fbbbbd48e96",
        "cursor": {
          "ref": "6f8af4ac-50c5-4fba-b704-c97a34004f38",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "16a6a7be-c49f-45ee-9102-dedf8e00cce2"
        },
        "item": {
          "id": "825d9abe-de28-4838-a03c-3fbbbbd48e96",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9a8be424-458e-4f58-9d84-da6f684dadd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "d4feba08-5f4a-40f6-b5e9-da4b7f933a0e",
        "cursor": {
          "ref": "8f45de0e-2c7d-41f1-8273-fea30638b191",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6a59eabe-a3d7-46d2-b780-a066a644cf06"
        },
        "item": {
          "id": "d4feba08-5f4a-40f6-b5e9-da4b7f933a0e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b28b234-7f28-4fc9-8702-90456004f67a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4feba08-5f4a-40f6-b5e9-da4b7f933a0e",
        "cursor": {
          "ref": "8f45de0e-2c7d-41f1-8273-fea30638b191",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6a59eabe-a3d7-46d2-b780-a066a644cf06"
        },
        "item": {
          "id": "d4feba08-5f4a-40f6-b5e9-da4b7f933a0e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b28b234-7f28-4fc9-8702-90456004f67a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f956c5b-b777-4969-83a0-c5a67b3cb5c6",
        "cursor": {
          "ref": "b8bbad3a-0553-4dd3-a13d-168b917ee495",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "4823fbd4-5fbb-4413-950b-4154ec834ea4"
        },
        "item": {
          "id": "2f956c5b-b777-4969-83a0-c5a67b3cb5c6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f06a1923-50d3-400d-87a8-a424224b5e5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8119787-f4de-4e48-a268-498fc1ed59e5",
        "cursor": {
          "ref": "5bb0b1ad-f623-46f3-aa67-9cf4e00d9830",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "ef77f2ec-cdf5-4ca9-b396-3cc1a41d199f"
        },
        "item": {
          "id": "d8119787-f4de-4e48-a268-498fc1ed59e5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4c7fb9e4-53ef-4f39-9da9-679efb713a31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}