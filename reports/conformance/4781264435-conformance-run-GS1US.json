{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c25af1d5-a686-4495-8871-09cf77e1dd00",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ae671169-866a-4155-bfaf-036829e0ae02",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8351cd7-243f-4dce-b925-6db7024cdc38",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e4664a26-d6db-489b-a457-08751ac3158b"
                }
              }
            ]
          },
          {
            "id": "116a98ad-c2c5-4050-a70e-b7cbb1c1ff8d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9faa1ae1-8d38-4fe9-9242-f2c4773baf70",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b12bb85d-b0ba-4cf1-8305-30e4c3d327bc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1ecee013-ecaa-4136-9af1-9f73e20224d4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3019c7a3-9690-4c6f-839f-2d28872c4737",
            "name": "Positive Testing",
            "item": [
              {
                "id": "529ded68-a844-4a34-983e-a78bcca2deb5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74cab639-b433-4e53-8371-05091a05abb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6848c7c6-fe34-468e-bb5d-4d9648f8c298"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d3e77e2-f54c-4141-8add-95585546ab06",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "702c41f5-0aba-4a35-b344-b643968dc424"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "86fa883f-51b0-4911-9c67-1a264b1e0f76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2b2b573-613d-4a65-b020-7d2ef3c188b7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf9e14f7-3018-4a19-9890-192869b3ecef",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b809b3ca-9341-4848-b585-79073f37d17f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dce2e429-01b4-4641-ab0a-50364beeb81a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df77fbee-f86a-4b7d-a7bd-a880e02199da"
            }
          }
        ]
      },
      {
        "id": "fa2e7a48-36e7-416d-bcc5-d84837f06fb3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fe88e2ef-94b4-46c1-9c0b-a0426765b74c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "188fd764-3d09-4b48-8848-e920e5bb87ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9a7b8658-9320-42a0-8edb-5f947507ed66",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5f4c42-9314-47e6-89ca-1d7c9cb38177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd60b554-9309-43c0-b51a-3e2a7f9bf54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81f0972-c500-48c6-9032-d1d2e75e29ff",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0fe920-1f69-4edf-9a62-4c7613140f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8e2d134-e542-4f5a-ae84-9c9de60e2fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db1d822-063e-423d-ad2c-82e4bb659b33",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4d9490-a6d1-4e55-a903-1cd963c31d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df33215f-de9b-453f-a4e3-673fea602666"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "77cfc07b-471b-4036-8c43-662adfa2c7f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "109c0046-169b-478d-a4f0-8009a1c5e870",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ddbf6f-c608-470c-99d8-737d383c842c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da83497b-1c47-4b6a-98a1-078311a1fea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc78b75-22b8-4fda-94b8-09d3fdca3272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319b74ac-56d8-4142-96ae-37eb5d60b48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc844faa-bc05-4c13-8ccb-504d269fac6d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbcf998-427b-4aa3-a0bc-a45dca39dc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0057d9a-3a9f-4b8b-9301-43e4befd4323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72137c3-52ec-4fa2-818f-73b675cd6594",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "24779fc0-8af7-42f0-87b5-147d196d57d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ac144544-6bfe-4efe-b787-72514106b144",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff55ccb7-a4be-4553-84a0-7842367a58d1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "968ce815-46ac-4ed1-b8ba-cf6ca3e18069",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "77f6a5a8-eb7d-4da5-976c-10ac55ebc9c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54572450-c37a-40c7-8448-e2b189a09bd7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "27938e42-5fef-486f-96c3-cf647c1926e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4a8ff97-6ff7-4709-a085-6954d7392f1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6cc760b-57b2-4e0d-9f33-a556ffaaec90"
            }
          }
        ]
      },
      {
        "id": "c3247da0-a733-4800-abee-bbbf9f6f71dd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "89c2e0f3-2e7b-4c2b-9638-4aa2869b2da9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d08ed81-2e57-4d29-8cca-2ef8c07d4670",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "12dc1cf6-8390-4d9d-8569-dbc57acbc129",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b13e78-9e9d-4374-bc9d-7a2454c2f53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7087eea4-d617-47e1-bf34-073163a43218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a25ee4c-6c42-4d3f-8597-373de78e92d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e683542-4d06-4aee-ba63-c35a411653eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152d6c3d-f3e0-4f10-86c3-a8d010a45db2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efbe746-e60c-47b6-8b9f-2e0703398132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da981c07-507c-4d52-bb9e-df33ce40fa86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fce7a4-5477-46cc-a496-53d7c541955b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c76517c0-219e-4064-bdc8-561d2309571e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039fd676-5f9e-4ff3-ae6f-2fc742c202fe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d13ee87-3921-4d4d-b84a-2109835f69d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ee4159-d5f2-4e30-8733-c0203478b47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6369d70c-6d1b-487f-906b-0ce268e02a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12a3cddf-558e-456e-9a7b-2b4f5a6ed088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6561b2e5-6e5a-410c-9050-80c0f8a9a8b8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f4133b-4693-4a4c-831b-e7154c726e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01482af-38d4-486d-9ccd-17cab10b68ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbfe17e-6498-4de1-a096-6f58e1b2ea81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e969308d-fe44-4998-ac90-cca81068d67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4be7e93-de96-4412-bd6f-16fbb59bffde",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23282cc0-f756-46b9-88cf-c7c21334506d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb41390b-5b99-416d-bfc4-9bf37d4f3dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b70d0e-fc35-49b8-a4b4-5ac327afae36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9fdf935-599f-45c5-ae77-663df0596f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033ed2d5-2adf-45ed-9b0e-51c67c3788cf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707d4cbd-57ee-4817-8e80-ece66a71b8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81d7d3e-3dc4-4def-a4ae-7722a653d6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c5ac5-275b-42b9-9307-f779afcfb7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a00b1018-911a-4b0a-908e-9ee5a950974f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494ac2e9-4971-4114-88e6-18000d8a283e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6d038d-1c48-467f-8e07-5e8618dc6d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b595a375-1d9e-43aa-9c5c-f9d2698e6308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee4cb25-4ffd-48f5-8652-a9e2a32db8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ae6c062-a151-47e0-aef5-8d5a33a5d9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3792d477-fce8-41f2-b372-1bff78914dd8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f49531-622c-416d-8aad-f0b1271eec2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae785491-bdc4-4730-848a-a7177d783d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132b69ec-59ef-4ee9-9040-3941026f7bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "747320a3-4670-4b57-8b7b-363df900e14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde916a7-cfa3-4efb-b65b-98d294788b4f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f005608-9c27-4dd3-b2f2-459fdb03db1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375a3089-bc8f-482d-abf0-b96a10abb4b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5608a9-ea3b-4122-9f04-b1abe7ef70f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3407a9de-d83e-48f2-95bf-c816134de3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd323dc-e10b-4a66-a2f2-3bca5109b17b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7521ca9-2129-4f24-bca6-d1b1b1fc7e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d34d21-1a7b-45d4-a578-74335e380242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58597e39-f924-4106-9871-a28c530a273a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8178fb41-43af-4d89-8d50-c105d7a48556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b38b306-9029-411c-a2bf-eed03eaadfa8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a85a27f-27d6-4339-bcd8-0c4663e4cfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088eac0f-a81e-45ff-885c-21b010c71324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49db3f9d-3d47-4296-a724-6d606067b80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35cee2ed-5d98-4a13-9c40-4f4ad603046e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fd928e-1af2-4b71-9cab-b80ef25f7295",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079f1039-04e2-495b-8450-a075ee613c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efedac53-afee-4e26-8a49-ea5dee4246d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f449728d-e235-4ea8-804f-827d627735cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9daadcc2-5e49-4fcf-82d4-a593a6e552b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d9b435-521f-4ce3-808d-0b7253463797",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84c8e94-6baa-48b4-bcff-e32a5a98b830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b988e046-9eac-493c-a939-e43702cc290c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd04720-31f5-494a-9a3d-7f4ce38777d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42cb50c7-47b1-42bb-bfbe-5594330eba06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08492c4a-296d-406d-84d6-aa7cee797a20",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d817e784-7aa3-4eee-bf1e-720f4fd4fdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011e9640-7a2c-4985-9e9e-74011c7a42d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d6d36c-713c-434e-9502-796dc0a48c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cc040a6-a66f-4b19-9e23-dc497723ca55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8141fc61-b552-4bfd-bf1d-05a78142f3be",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cebfd6-d670-468a-b421-e34c8fd7cdaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4cddca-0825-45dc-aa21-bc12e4d20ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3b47ff-fdc8-4598-b45d-2d06963d0fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c10cda1d-6258-4fc6-964b-aad4524b13b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0b8f32-e3fa-4f19-b754-bcf2cd423fff",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f342b08f-2869-43e1-ad19-d3100b7f975c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f794b9a5-a396-46c0-9fa4-52f0d1147e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f0469a-e7fe-4429-8f0d-3cac556706e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bd5ebea-3ffb-4107-ba6e-bae9b6a22695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ebb5c1-90d6-422b-ae5c-c8a19fda8d2f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee29f5b-f7e4-4737-9c9e-e3af089b68de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195bcf3e-63a1-4a22-8e77-5dc22cca9779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b89b5dd-901d-4d63-8a85-cb79569eb23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39346176-0d37-489a-9891-15e10f1bd773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baff3276-7993-4919-bcc6-254f4537a9b2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37739e3a-deef-426f-8cdd-9ce8387c96be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3410213d-be79-4ebd-9d15-5658c41700bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bc9b95-90e8-4ed2-a0b8-d02c91faff59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "582fbe10-f690-4dc9-8f00-2c42411705b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e9149c-685e-4987-bd30-118e78764482",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9200aad-8c7e-4088-92d2-550623acec4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf99c73-7364-485b-bbd3-838e8d84c389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095cba82-c0f9-406d-9064-0d2dd2d01140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8073c6-f03b-44b2-b892-02d19d806fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbd5ec9-2ca9-4a21-9e8e-b06d4364314f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4318c9-2f69-4894-a867-42c090f96638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212c9025-2a45-41db-9ac9-958633412f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ab6289-f111-42b5-ae36-27432ec5b6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b45a0ea7-f57c-4441-8534-9cd360c94603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942e2e31-a4d1-4efa-b78f-ed6fedc853f1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7c91bd-aa65-4bb1-a29c-f593bb578235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15303ed7-9d56-4922-aa1e-719ef13fe2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428df065-cee0-4265-9c67-6e56301a6aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a19ba8a9-f1cc-4fb8-b79f-c51d702ce82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bbf2c0-5c03-4bbd-adce-8b30c658a308",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe783c8c-3d9b-4650-9f10-0b3c0c8adf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e745f90-4be1-4055-88e7-775a70763bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab712ee-043e-49f8-9c05-325fef721a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "638b243f-2aa8-403a-8575-4df58f19b377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc96dd89-2587-4304-b557-c28853196fd0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033d206c-ab5a-4795-a55b-b93c4d8562b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211a8f2c-650c-4359-a48e-25c66d4c0046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdacf0ed-cd82-41a1-ba2a-439f203495b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7b1ab1-fa74-4646-876d-d1c042f19a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a967ab1d-9166-49bc-ad2c-b9ba1875b83f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dd9a9e-4610-44ca-855f-c71a032d26b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad43d86-2691-4a5a-9bfe-c673a0b32c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd8818c-0b64-441b-bb09-f6d44bfc50b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1d5984-8e20-417a-9881-b2cafe45c77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306d1f0a-aa22-47b9-aba1-d0281a0d99bf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f920648-05e2-49e3-96e0-a2f1447ba8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ebee58-d479-4909-8619-2e396899584b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf89a99-1920-4cc2-9b3a-3360d0990e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9eb61dc-bbc4-4126-a414-036c08a962d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9747b4-fa2d-409f-8031-2aa532a09541",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b831a28d-c5a4-4087-97bd-0b6e49afd7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81aed0bb-f3e7-4fd3-ba7f-24244a23d26e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a89c59-189e-46d0-9904-94fd50aa2f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10d4c8ae-a316-4293-9df0-5d384c3e2ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540ea45d-ed35-4bfa-8995-409650b4ab27",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087401ce-cb2b-4ad6-a736-bf9a2cc57591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511be00e-2970-4403-8199-d73cf9eb7e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6753a323-9c47-4eac-8c3e-be4db7c63b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8208d670-fa94-4128-b9ab-68d55d56c22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072a5d1e-fffc-4f5f-96fa-f830143ede5e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57c568d-2c87-40af-a3c1-e6f28daa0257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e87e46a-2b9f-468d-8082-ff607522c26e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2311c178-bf09-47d7-9212-993200f0f2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "afa66048-1af5-4aac-a7ca-bfd05a7b064f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d239f88e-1861-4ce0-9667-079ff2bb0e44",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbcb22f-64f0-47ff-89dc-5df95e0e33d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4c2448-aaae-49c6-9984-f7e339f7d4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42058149-d599-40c8-9ddd-474e95c4aaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88292d13-d754-4e30-8681-bcb99185fc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e70ff4-e431-4f1f-9674-edcfd5772e23",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f88d0e0-a094-4c13-a143-5a18cc428998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef504bd0-a932-4d92-97ce-116a80bf71ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102e7a6f-b4da-4704-9672-44c96e2cee1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "54e51553-4965-4fe2-810e-6d0eecbccb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fe6f48-e0d2-4e52-ab47-161d712b970d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073e2de1-7218-4d63-807d-a7746e7e15b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac0dba6-3b54-4fce-bf9f-1d586085a6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f9a744-678b-4971-9741-277d6f6ffcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06acc75f-d716-474b-8ae6-a4ea1d1c8366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ab8794-a3b2-4d5d-9919-2453fe0fb600",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd6b99e-9a45-45ee-bfbb-f0aec3d0f830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db02db2c-c5a8-462c-b31c-6fec5cef0f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24eb62d-957c-4d5b-a24c-23ccc3cebe08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "154a4b04-bd9a-4272-8351-9c11042250df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd62457e-56c1-4f59-ac10-55f4e463ab06",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba922cf6-3c32-4f99-a19f-8f4e4b8ab484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7637690e-02a5-4ff0-98d7-b7d22568345e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bc7121-8b35-4866-8901-81be3e76aab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeeccd44-0aa9-4a43-83ec-9f6deeb4e0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f91df7-e4ea-4203-96ec-d9d52be7a85f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4465014b-28a6-42ee-a5ed-749ff6b5474f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385a9aa2-7741-4d60-8ff5-9f9ab6333d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a93389-a3ea-42db-9104-bbd0d099ae8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5631e1ed-7cfe-4d69-8eb5-cfe3fee68150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c23cfd-1c0b-475a-853b-c1a3b01b0e02",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80740123-5ae1-4a64-91bb-3de996341f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052b6703-0822-493b-8a1d-096f717c00b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2658fe74-9d03-4e6e-822b-d4848d8c43d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c3231b-ce21-46a1-a360-c007882487f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e763ed09-18d9-42de-b142-de33baf8f17a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81e9883-a1d3-4cb1-b03f-e1629ba1b301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c4b768c-859c-4a31-8286-5b40e5f1ee1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e8df82-f2b7-4ac3-b8b5-605b80e22400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed347b6-0a3b-43b6-989c-5fe5b6c56a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4787c0-103d-455e-abe5-777f94f09fc6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda80352-086c-4229-9674-50b813859ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c75b84-25c5-416e-83f9-8052da3563d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24a544a-2b31-4e6e-a808-785356d133d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0bb5a59-b34e-4b69-8014-a792358c2acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e3c057-32ca-4556-bb46-de6825340b84",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8d5388-fc08-466f-aa3f-f8d5622a39e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c71df4a-b807-461b-a908-ba5698133c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc793d3f-9d8d-47ac-824a-323b6d4f09f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5e7cab-6520-4b5d-ab80-8e410bbbebd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86aad98a-efad-440d-afd0-6d27b017ae7e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841b7cbc-bf56-4d77-917e-342c049c24f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc28d185-6b09-4428-8444-fcf70a9849e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23559ca1-2421-4e08-ac01-717250e68c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea0e1f8-acba-4945-9940-4c0510744a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c026254d-c6d1-4a32-8d53-e772c8f5daca",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6590963c-e778-4979-b3f0-46b7fd5b1b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85c488f-8690-4d96-a665-c57d575a1fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7ede4d-c105-417c-9131-5d0dc2798ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a92724a4-31a5-48a0-b721-554af45d6e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cbaa58-cf64-4f61-b6c2-6793c9f36c7c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49aafdab-f862-42db-bd8d-a1b099e27d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03111bfe-a7fd-4a84-b605-8023f4caf018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa822ee-a6ee-4188-95ed-e0c4f6518b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f994bfc-f9a7-4209-bd3e-f4d5476f9685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484550dc-555a-4bea-9b66-445700780f25",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb124c92-8a9d-45b1-8b85-7d743c636d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e2d73e-399c-451a-bb08-8484bbe311e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a752615-8a62-463a-8660-ad95fcba5350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "eacee0ba-61a9-4fd9-93ef-e6a5dd23b0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52af48ad-05b7-4801-af7b-998fd20db2d4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662521e4-fb9c-47d0-bbd3-4b1e5cb456b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfd166e-8b41-44f0-b97c-a78e2ad69c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09ecbad-87e2-43de-962c-3c2c2f594bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "91c5ab6a-2be8-458e-8aef-1b1ae3289697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865b2466-40fd-4aa6-9545-c0f938a8c175",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69df7ca-823c-4fe5-bb8a-430c9f8224e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36be84d2-86dd-41a2-9f23-7c551c46f6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a6a79f-4679-4247-984f-9d4c52a4e9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c05ec478-d1a2-4614-a6ee-766fe6311617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99201f0f-b9c2-4b70-b844-3a9ddecd03a1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c590d9fa-1d82-46a7-a542-d980a30d9157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5be2d7-bf80-474e-a86e-ecb512fd2291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ee741c-9299-44ae-9873-83cd37b9664b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b894bbd-d276-49c3-bf49-ea55a5ac45d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64df62f-b90b-41b5-a7fc-11fc56a5bdfb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3f061d-5698-440c-b99e-41753aaec3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f926349d-1b54-4ded-87df-66d97ea23548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e18b43-7d4b-4bfe-900e-a357fc3109f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c0b1c7-45f6-441b-af3f-da8efb67cb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422f731f-2a45-451a-bd3c-44e7033b5f12",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df9a85c-e4f6-486e-8370-1348f9fad9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42c61ca-f644-4925-8788-9f68d65ff2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1532f930-752d-43c2-af38-2dc08e521e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "322656ce-5b4e-456f-b79d-bd1cc1215a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b7d626-82ff-4350-a1ce-a99d24bc031d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79378174-4b7c-42cf-854e-0f79a351e207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15e33a7-65b6-415d-b64a-c838e390ba1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d74a2b-b8fe-4a3a-ba2b-8b996343cb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7828e27c-29bb-47f1-abc7-b26fe5d05446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dde7cf3-28a5-4190-b440-111ecdc4d299",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7caed3a8-3d42-4441-b86f-d33fe161d985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c259765-0b8e-4690-9d5c-8a4054aac8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacfcd0f-55b3-4ea5-a024-cf1e301c0e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a332a78-2cfc-4f54-808c-2d0b3498d1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b14b08-b642-46d8-9b20-924abd04e69a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453dc87b-e48a-46b3-869d-de41b27366b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8781d0-0402-478d-a0b9-38cd3de0cc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1637c5fc-dea1-482e-b1d8-7645b3a55087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89228a78-7f32-4bf6-93a7-035c916da21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30976138-5569-41af-a2bc-c47b6c2fb12f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8aa7d5c-0e6e-4c1f-8c49-17ba795fa18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb160a1-60e1-4772-9ca9-cfb759d52bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c8be78-7e93-4f4b-8f5b-e99a8adaf374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b22361e2-c649-4d68-9845-3bfef328a2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f94641-93cd-431a-9e1d-84ee429914af",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d01df6-a27f-441f-8443-692483e6ae16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85313adc-ebb6-4833-a450-06c66c34b837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8c8f14-2721-4ac7-a12f-3e8cd851e663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a413995-5383-48db-ae83-8040e52c7d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bd3ef6-c864-4a8e-94ea-f459da70f737",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8c3ab1-29b0-48ec-924c-ab4c16897053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003741c2-592b-4fab-9f23-4afd378aa54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5096589a-6fd8-4a0c-85fc-0592de4e53ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "693e5d6d-5845-4243-9f01-3b369670fe86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e9a3e1-837d-4e77-b338-c76f8a8a4f11",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af35656f-2727-4f85-b385-17b7ac4e3b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21dda1ad-1480-4d81-bbd8-5ef7da965996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fcb6dd-61c6-4de3-b288-63278aa8674f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab738106-8e97-4d1d-92db-3717fa6545a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24334767-bc79-47a6-84d5-10c729c42449",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ae988d-4a9c-4329-97cb-2ba7eecd886c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8988e243-12f5-4a46-b84d-bbf7a0ef8ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee865cb5-0e10-49e3-a539-1ce4c1ce8d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "220e0483-016f-48d2-b5ef-0ef617a46013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecce733-1406-4521-957c-83ed262cda6d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66214c27-1b53-45f8-9662-000b6a256b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5cc6da-848d-4040-860f-6ae3946d9b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fcc3d35-5f56-4b4b-85a6-cd873e44d887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d497f7-1412-4bf3-84ac-62f2cb3c9415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446f147e-8699-43df-93fd-2a71e74a2c75",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f921bb97-3c63-42cd-8c3f-aa393cfd3c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b778ea-915d-4f75-9911-416e9877d34e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ac7a49-880a-4891-8ad6-af21baa1082b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "edf17276-82b5-45d9-9aeb-ab0f064a3287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8a2a0a-51b2-4fef-abe8-a3980f61545b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e17873-1f3d-4d98-aa94-5a57e57d3ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ea599e-b361-4988-9aa4-f4922c4a4c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16eaac26-18e1-417a-8153-b11c66d85bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f91ed7-3822-4115-9028-90cc38b7fb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a421fbf-3697-4442-9bf6-992684874edd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96e7ef2-d052-4c22-9782-85d9eefb40b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21d390a-da5a-4be7-af85-47d871e6b0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc5cf3f-9cba-4e65-b40f-321df6b45a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "829a2d72-1b5d-4566-9e39-9e88ed1017ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa1b34d-82b3-4e0c-a399-d95aaafeb53c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6e0d83-d5f8-4cc0-9165-7ac8e358e460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf883b0-638d-477e-ab88-62ab8e0cb41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cb6c6a-315f-4580-852e-60ed3c642907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "289f08cf-2276-4e78-9e2d-9d5374bb241f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d2b103-33c6-4209-b92f-21d9e224afe0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f17b442-2e13-44bd-b040-d82fbdf8ce1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d25ef9-0b27-4fb7-b8c0-9a7822d9dc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8dc9e4-d9f7-46b4-92de-e9794c79f1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "11aff7ce-2c2c-4be5-b6f9-793a2ed8685d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b479c1-dde2-4670-9508-e2e0b0e8862a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76012063-93ea-451f-acb7-08cc018e2ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0629a3b8-cc9a-469e-a762-c8489a5dae86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bedca5-b33b-4daf-9f02-24bbb19115a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "076ec454-6bf5-459f-bad1-820b5dd1de6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263c9ec7-9603-49c4-bf72-7f94a5aedd84",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2da59c-6d36-451d-a17e-c1b0b433fa46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9604e937-0549-4d4e-9b8a-dac5132924e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095a52b1-c2a1-477f-aea8-99156c1a1716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c81273-d3f6-40e7-9866-74a7600c04ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974396db-0efa-4529-bc1e-66bfbd81bf79",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536fc03f-e951-48a6-84f7-d81ca2c8340c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aaaf65f-50bf-4d54-a0a8-5a38a92e2567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6afa3c88-4b56-40df-ac49-c868a395907e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e728911-1b3d-4aac-b5ef-10024f4fea06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd7f4c0-9a00-4ec2-addd-0ea98f600fae",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c545b86e-a13b-41ed-938b-9fc84659d18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69683b6-48e7-465f-b037-ac5d79fc5d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd3c8a2-60cd-4253-8f95-2417ebe6aa1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39eb3e0a-ce2f-4b75-84e8-479cc3a6eb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad4fdb0-d15d-4258-be69-6ba2ef6e9614",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc6798e-083b-4f69-8b0b-5f52dd87bcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11aa78ad-6342-4e4d-9e5c-7c469666a048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f94c220-b526-44a6-95db-08e24c6f25d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d38da865-7f6a-4c19-b0d4-3fec491030d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5514ac-b380-4522-897b-6622ad02b864",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b6b4b3-c6b5-4a62-a718-2593fe91d39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4b3035-b26d-41db-9b79-b983b0d08e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bda4b5-10aa-486c-8e00-8ba7ea1d9a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ceb4b8-4f30-44e7-99a5-b45cb239056c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d3291f-242b-4b4e-933a-423a25b2615f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbbe070-9f58-4d23-90d4-6e278af02d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23013f7d-0530-4355-bbd7-282f50ff9fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976921af-6a44-47d5-93e6-53e876af5ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "02db5e08-faaa-4b50-847e-7d60b1831405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd90e92-d7d2-43f2-9735-20add0b41d07",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5333fa5-fb96-4c38-9f1f-e63005c15409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e553d3ba-556f-4d46-835c-d323f3f8fd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f41f82-4536-42d7-969b-802c74264730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ea24fa-97d1-40a4-b299-116c47177fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8612c3-3bd0-4a60-950c-80b4769191f5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9641f4c1-a196-4599-9342-33a5eab311d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bde859c-af8a-4f1a-bf6a-5d54cf205e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d311a7-3279-4a27-9eb3-d74170b1e82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d722d5-f8bc-4df8-b0a5-33e6452dd4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c48a29-0fcb-4b87-9ad2-c703b60c448d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c8f6eb-6e53-468c-866b-2ad03c9fda46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5b86b3-54a7-48f8-93be-4845e9badc67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc67fef-b198-407b-ac4a-247c92d63ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a45b4b-4824-4123-a265-adef9b123213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ad0fed-9383-4c9b-b295-e9bed3a69c1f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8e6094-fb4b-4ab4-882b-01a114cad13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b4867d-002c-4b15-8e3a-85789215353f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a96c0f-1cb5-4102-96f1-fb32ab708b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf96208f-650a-4405-a7df-8ac51abf9193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41190e88-d181-405a-a476-11ed27e6481a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86fb9d9-7d02-4bff-90bd-9e39fea2b1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c634ac8c-87ca-4393-8eda-6459f86702ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527029eb-e41e-4738-a411-baed6534ccad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0779a9-d7b8-4d10-89fe-4e047fbc7cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0802c7-f42b-455a-bb86-ce9b2830a38b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d17c49-d92d-4510-a31c-139debb98af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1bd63f3-840c-4dfc-b673-c0ed883d2d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0ca238-6ba3-4dea-902e-3b392b917b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7fae636-5701-4508-8542-3df0ccb05a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2254016b-b0b4-4fc6-af64-f108ded2bab6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e659fd76-e387-4a2e-a996-aa6f90e66df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcfda28-f093-4110-b7f7-c626296bf111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4ac109-f4e6-40cc-89ce-936f5ed294f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "039e77e6-2290-4ce2-8a0c-c99c0b9de94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2257148c-fd86-439b-b58d-3692a94df7a0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8268e95-8457-46b0-8b28-c1e844520293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40bcf43-1e8e-4a27-bb56-b0908f915566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadc4449-03d1-48d5-a295-69f29e33e61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e94019a-1e67-468a-8d0b-70446c8d1b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e2d799-c202-41c3-928e-2b12a55bcc5f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69102389-79fe-47e1-b50e-d39384ab80a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a8cfd1f-7ec6-4fb1-a077-72987d8dcb17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac2fe02-d0e1-46b0-912d-003414796377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fad48693-1dff-490d-a0db-b01a45f66a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab3753b-0f1a-4246-af0d-77f738436829",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b415f09-b88f-434f-8a24-91d7c3e02b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7f8669-5a98-4eed-976b-db0a11ae1a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2921d28e-8e2e-48a5-9ec5-b19b537a192d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e582df-eed7-41de-b10a-b5051fe1416d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02876ae-b274-439b-9806-d9cf887eb66d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d8a995-cc89-4fc7-ac95-db24b987879a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5db3a1-ff80-49de-ab9e-e209e2c3ebfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794dc3c5-cba7-42a6-8a3c-81be474f4b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade437d9-c02b-493a-b50a-d02020df8ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ea98c9-4d08-41ff-a1fd-f72b732cfed4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc3785a-144e-46c0-9c38-7897b7202d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca79b2b-ba89-4cef-a045-1cb4a773b768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39b56ee-8722-4f95-9c23-571df097585e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3567a829-4661-404e-bd56-e104b5952472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe17600c-eedb-4733-a338-e939fdaf4f76",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804d70bf-dad5-4569-a8c5-0ca1a7acf042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e282261-6aa6-47bd-97ea-36dd46d7456b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5607459f-6af3-4e07-a5d7-40d38ef64b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c37ded0-cf34-4985-a74c-a1749f13e607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad25c1e-5bc4-461b-9ff0-3bbcae28e0a3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5529c3e8-22d2-48ed-b7d9-128cc32ea654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90017fbe-b23d-4482-b3a6-a1ebf3179d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086aab4a-40e9-47fb-be6e-66f89e635806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1ce74d-e843-45ce-bb94-3ace9ce73b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52adb3eb-ab86-4f51-8eb4-9b1bbee2b7bc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa6ff6e-73e2-458c-98f0-e56370f3b8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e7d951-2488-4ef8-a51e-81ce75957624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460c73e0-cad4-4fcd-9424-b958ae216b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b259d14-e230-491b-a2bc-b9be6226e787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694799df-ecaa-4499-9d21-83f4454f69fa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342670e3-255a-40f7-bea8-6569a18a296d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f377577-b008-42aa-923b-30acbd00adf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4cff4e-55fc-492e-8efa-f55179dd8c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "058f5522-7336-429f-bbba-3121f0158c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05d9b79-fe27-4910-8ab1-1bf874944946",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09549fd3-aa68-40f3-a47f-e560f88976ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08365337-df38-48cc-98a5-18d2c6b71506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c155c4c-4c0d-4cf2-8cf4-c4e6ea0278ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6602a912-70d8-4b07-8a6c-7001255738e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412cf1f6-d6e3-4097-8c6a-6f369e78a658",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55771d0c-d3d7-4f52-9f15-a0f9d89df091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92faac9e-b049-421e-817a-b777f27bd83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b69963c-ab23-4b53-bfbb-59fcb2f989b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c98dea-b2d4-4b61-a7db-f12f4b2559e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c9008f-440b-48c1-b22a-200f525406da",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7944dd05-4045-4a06-aafe-01d49c2af066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729147a5-e7ba-48ae-b080-4fd4c169948b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3558d593-76d7-403a-b9f6-182b696d3384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2331ff0e-eb92-4b1d-9555-ac023b1a75db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45679d34-2728-499f-a3d2-0427f0163116",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed553e4d-1bea-42df-849a-18d597ed075f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371647e7-e3fe-439f-b370-03f7d8f70540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7232f839-f3a3-476d-b7a3-aedd0740ce90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7773af2-24c3-471a-848e-6fd4ab7da178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9172586b-6b5b-4604-b955-706e0070fd85",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be04750-7885-4ff2-a0b2-222b8770e998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c1506f-f362-4397-9c0e-e355b0ba86eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d06c945-a23b-4baf-84b5-bd6bcb75b6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "40ddb862-f7f9-4503-8748-dcee48fc801c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a93d4f-09af-4665-b224-9b58a8ebf172",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ae2a79-dd6b-43c2-8bcc-da511bc926fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4e55d8-963a-49bb-98e0-bfc35210993b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960e2268-1a58-49b0-b1ba-d8df71e3d7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc98da06-bc85-412e-a097-99d09e6e7305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4ad9d7-3df1-44a6-b9b9-4c2843bf7a2d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68136d2e-109d-4629-af7e-727c246360ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2dd75fe-198f-4c58-926e-555f12b66b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b494fc-50cb-486e-88b6-8faa4ec262fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b33b7c-6014-4ffe-8dbd-bfa8e099d88f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578c652b-d7a5-4817-bd4a-bb7998911687",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7ceb5e-87c2-4089-96df-4777878458a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "20399769-595a-4752-b04d-025e81894c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be5af81-be75-4e93-9443-6b32e6ecb60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "035a2fc6-47e6-413e-a7ae-cf6ae73ab914"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "702fec30-218a-4f84-9804-1394c5c2448e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "048971d2-1d5e-413c-a359-d1e6c7f39af7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28a285d-e75b-4cea-9755-a5e1051668d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19d1bb60-dafc-4178-ad18-cbdfb4bdfceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacd5fe6-3f15-4c6a-92a7-167837a56ec8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ba9ff0b-22a7-4c7b-a30a-970dfbdf6ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f45220f-7d0f-4675-9e5a-675929235c7e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9c7c29-d87c-460f-a612-bcc390eda46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cfa00a0-87d7-4bc1-a340-8332db47c666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62f40ea-2b37-4c12-8d94-27b1864c1d34",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91436f25-0f54-450c-8e36-f7efab7df314"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b6885d2-e1e7-439e-914f-3516ce19db0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2330607-021c-410c-824e-a0c417d44211"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e2049c2-bdc3-41cb-a398-a6e64e61e926",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96eb3e3b-11fd-47ea-83c2-d6e601951d84"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "548ab23f-0db3-48ba-94c1-5875417f8cd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88b30c79-0bad-4630-a09e-54ca16238e1f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1a4a60c6-8c2f-4d16-b9ba-721f04802441",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0826ea68-df2e-45f4-85ba-422be80e0127"
                }
              }
            ]
          },
          {
            "id": "54453f50-974d-450b-b96d-15e7bfcf3bd5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a5e014d-9763-4d63-a255-e34e2abb3cce",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94a85a4f-82aa-4833-b18a-b2506390d347",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e398643a-cbba-4d0a-b135-7da264c0a808"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f25e8214-5368-4cb9-9e0f-b69f406c6e31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57b11a36-acdb-4c0d-9e17-da6e75bca2bc"
                    }
                  }
                ]
              },
              {
                "id": "ac0184bd-bec4-4352-8221-858319b21f32",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45d85658-2c1c-429e-8550-7785ec197972",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c88aaa88-df83-4d6d-9412-5e5ef512d199"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39ba0057-f702-4a21-8ff5-038cdfc73ef6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1c67ee28-7150-4072-9926-cd3406199129"
                    }
                  }
                ]
              },
              {
                "id": "2303b29d-0bb5-4c22-be6e-97d7e5b384c7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bb7a600-3a30-4681-a078-7bc468443e3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83c6cb24-0b3c-492a-980c-4faaa9548000"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c44a066-f61a-4340-97f9-7e1d8a5ab260",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "040a2508-b29a-4135-bc7d-8905d3176b21"
                    }
                  }
                ]
              },
              {
                "id": "b54acd77-547b-4faa-898d-6699e5ee15c3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43af9648-9dd5-48d9-b634-11eaa45d95b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18c57b59-5b2e-4276-9935-3b8d542cb08a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71956981-421a-4be9-be90-db181c3c78b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "10f95073-9b94-48ad-a39f-54cfbfcc42c2"
                    }
                  }
                ]
              },
              {
                "id": "baaf886a-e4fb-43d2-af91-f8fa70e7d5fc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1290987a-7644-4d4c-8cd3-be5164921910",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a01ca52-241f-4c22-a655-dbb62bc56184"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cce6592-9e43-450e-9388-be046479319e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6dcb3901-ffb6-414a-9e3d-969cbaa4b95b"
                    }
                  }
                ]
              },
              {
                "id": "5f589543-84db-47b8-b1c3-b34ea9571ff4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25e3149d-1b38-4657-b4db-fc76d9f5911c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c979f03c-59b6-407d-b880-70c417437434"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6759d962-aaae-42cf-aa4e-3230275ebef8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a839a3f-0109-469b-b906-dca1cd80e9b1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7c12e5a-4c84-4082-804e-834797b83918",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38182d74-fd3f-486f-945c-eab6cfbcb5f9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1296038d-4aab-4dc8-8145-26c2de48407c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "385e977b-dbf3-48ed-a8bb-fc1ffa76bb05"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a004f73-1f71-4607-bf1f-7accecac7b9a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1456631d-b85c-4218-8950-e814a49e37b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41b4bb69-864c-432e-a285-7119f52ccd06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c495be60-3ae1-46ad-b80d-cce44afe62a1"
            }
          }
        ]
      },
      {
        "id": "3adf4eee-4570-4118-aca6-7d91d4fe21fc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a273f6f2-ecc1-4e6e-985e-7dad65d3c26f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06900b28-68c5-45e1-83c9-ce96e54deecb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fda31177-8af9-41a8-b12e-bae6ccbf7965",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b03bcc-345a-44f6-9390-e9f0912ec544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652380f4-37f6-4cd8-9fbd-bf2edc68f06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5b1a5d-0a6c-41c4-8621-8bb1568731e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdefb589-5940-48d0-98db-11dfc1a3884d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7931b692-1a64-4149-b962-bcfca6d0a639",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa1f74e-4198-4305-a1b5-f72cef3105a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8f78d4-b853-4488-9f03-ddbe53e7d10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faaa3fb-1389-45b9-9388-8769b178f306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f433a0-0280-433d-b974-dc4aa9c16ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0eb6fcb-6656-4434-98d9-406bd491cca0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52c2df2-c973-4509-8312-40739ac715f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae044d7d-4ab3-4321-8d01-e20090f9759e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76132cf9-cc72-480f-98ef-2c9a67aa7411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2361723e-20df-40f5-97d8-cd8f5009a260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410286a2-a313-4ef7-ba64-1040330ee215",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f79226e-f7ab-4c3f-a1ad-bfc5f21c233f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba18afca-7e90-4681-9e56-6b03b0f140b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35406a2e-5d26-4179-8ea5-2ecad04824d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e742571-5a31-4acf-a3e3-b760409bced5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325ca703-cd6f-404b-bfc1-7a0ddc31a8ba",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b482a417-ac0b-4398-8381-e5dcbe182992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de1675a-381d-402b-9ae9-7abd98c446a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b65960-a84b-4662-b021-bc6def4dfa26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3706faa6-6206-441c-ad5d-8d4393364ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07dae31b-ee99-408c-bd69-5f844a2346c5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6101f7-ac56-4121-848e-5ee3db5834d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c4a42a-f39a-484c-aaf6-86bf6f39b11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52246165-08bc-420a-ad7d-f0a6e5fcf2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70b16079-77ec-44a8-98bd-bf0ab8381631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fbfe3b-d800-4355-a262-b7f6f5e539be",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f640f0-c7a6-48a9-8c97-d741af39e9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35dd66fb-d138-4bec-a5ec-0a8cf1b2d3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ef8091-9725-49fb-8187-0f17966ebce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f84e2aa8-0d7c-4f5e-b536-c96b91ba9fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d31308-17eb-4aa7-9860-a0f1d5e47aba",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3892595d-5b68-421e-9bb1-2850b5afa524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548fc8a4-1291-4ef4-b7ef-9cd5d84f5dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1708efa1-6bf6-4a0f-b448-c9b847dcf32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0c7195-4137-44d1-85d0-10ea4d33fc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fb47e0-1e46-42e5-a685-682deafd0287",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ba35e3-f625-4b3e-8cee-fb298d0db201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5295ca32-c696-46aa-90f3-94dc73ab1b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df57a35-2c35-4d55-aae2-412f608a9afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0255145-b1d6-4f49-a279-f8f00a6b6215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21cad25-0534-4b8e-aa32-ce95751a1e40",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5709d967-708c-48e5-9d6c-c2fdb7a71c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e68a02-51ab-4d7e-a720-a89251310984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc808383-a4b9-404b-aaa1-61be3532291c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c06352c3-1d18-4311-8bc5-7d8ec311c736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438e4fab-7429-4ad0-93b9-e105dafe7f8b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65605bcd-4d77-4dc6-8557-1c9218c258d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cccf88eb-a9a4-4b4a-95cb-7d8dd2dcbf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86b9168-5927-4d79-8c54-24d784d0e293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "46fad513-cb94-412e-8a72-1e76131e1476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42096d44-8608-478c-af25-c83eb4967784",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10b9a01-f1dc-408d-bc19-b655e1a0bd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efaf3375-2508-452d-8d81-4add434b1d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ffc41f-17e4-47b7-a8a9-f8d1de20d629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b34e28c0-6ee2-4ebe-89cf-c00833e72ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df14de67-b63e-42a6-a2f2-cee75d15be0a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea46a066-554b-4f47-9445-83063c247149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fe2a7a-8e24-4fd8-a414-14a0a5b4f93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439b95e0-2f9f-4725-a7ea-80829a064091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc14a931-f5d7-42d2-b30b-ff4c3ced71d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8d9868-229c-4223-b782-bd28c444029a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606564a2-a788-48e4-98fc-fd3eb2cadfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0a1fc7-a30b-4910-a058-894d659bbba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ee6cdd-2271-42a7-89a0-c2763722825b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bebfe0a-4552-41fe-9aec-068fc90468de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7272ff6b-ef68-44de-bba5-1ce4a6a5fa5f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "987345a0-e6ba-49ed-baaf-88f278f9ee6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09663a10-0490-4a7a-9610-9d92971a2faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ecb174-b29d-4bfe-ae89-9e949b34a63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2a9a42-e4d0-4eaa-9ddd-7b4faa136cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fe9804-4d27-419d-b1b5-67a68b24e46c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5372d56e-adb1-4d16-9108-74b498a1ed70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e511c5-723c-4617-accb-92f6fed571c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbb5e81-f9d6-45b0-a224-238fafb3b0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "328aa7e0-770a-4682-943c-ea9bd0ee25f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bfa751e-0535-4e5e-aa64-84a55ced1f9c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a0844f-aff2-4c7b-8a91-8e8a65e94ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa2e70d-51ad-42a9-8093-733275fe6be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff64b07-d995-4d2d-8838-0f5547586245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "99f97b36-3847-44ab-8ac0-50871ac1d09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbcf705-2cba-4b72-90f9-62487b05c73c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4649651c-a4d4-466e-ab70-58cf01c3b486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9397ee2e-a1a1-4ee8-a28b-17b10c0d6b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bea459f-9a9e-40e2-b5b8-4a5491e68e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "48893e9d-99b4-44e4-badf-4a6b0df45851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d58bfc4-1a5b-4575-ae99-f95b4a118b38",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd33e3d-52fb-41f0-b610-3e7bfd82825f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b7eb21-6266-4bbc-89ef-97a0ef36cae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713bd72e-5eb6-4c7b-8cbf-3597c545d148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b63ad809-5511-404e-806f-152e55b801f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b71cef-82c2-46d7-8a42-13a46ca84cb1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851bf5b5-99c5-4d99-b2db-3ba96f560435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9bc845-c5a7-4799-9c3b-ab46def464e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d744b7-3784-462a-807b-2bb55f0c986b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59489378-e450-42dc-ba99-92e64cf7e648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7095b6-b739-4529-80d8-4ca0016e4410",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fa1bef-fef9-4416-93ab-5c3f5ab2b96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f24a807-306c-4319-8456-49562c63070b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7852cd-28d9-4ce9-ad6d-214d0a9768bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "712cc60d-e28e-4b38-9ea1-33016ed54c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb646916-8763-4f0a-83c2-418e48c8ab0e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d4c63d-bf9d-469b-90c4-76994ac956a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786e8f81-0d20-441f-942b-1565c6acbe39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627eb67f-a303-4216-8833-eb5a5b8c10ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2537602f-da4a-4be3-a821-730346da4836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad5ff9b-fb1c-467f-b84e-8bc73b2d1e8e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509359e6-c783-4e52-a01a-ca0c840d7ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7573a6e2-a2ea-468d-9b12-d73de7b81d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b99be4-45df-48bd-a200-bdbff03eb7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51848d1c-1d19-4790-95b5-589c68fc38d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab47e47-681f-4fe9-89c8-89b6b77004ba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b48b3f8-6149-4a76-9e75-59fb693c382d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd2cfa3-882e-443c-9926-90fea0647d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a848869f-f3f1-413a-9ca6-d8fee905f925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5b9bb7-1a87-4c14-bf49-e61f216eefbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d848eab1-e88f-4a9e-9679-460be2f12dce",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917f534a-7aa3-494d-9723-396f2f803a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387f3ee4-b9a2-4d99-b7ed-5e32c50511f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7dd447-af95-48ed-ac33-b0909b2a7e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba896fd9-aca0-4aa0-9496-2adbc7e9ebb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616d578a-9608-4090-bc1d-f9f104274a9f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab84dd90-2e2c-4af4-bc83-cec1886db5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f412444-d05d-4d15-824f-119622bd2501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2562ddef-9cea-4fcb-a106-5a5266a92010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "411da4ae-0a8c-4494-bf80-ef0ba7b8d690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ee0ac2-e283-44ab-af73-070a7ee41a48",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3844c4-ed67-47c1-bbd9-af32b7541ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bfcca1a-a90a-496a-b192-b06062c14b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e8a02e-90c0-489b-bde3-046053b157a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "997f9c06-b256-401a-b9aa-146ae1942a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2522e459-383c-4d32-9147-1dd2849d341c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28009cb9-3e69-4a48-9597-fb23999e9346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ae1828-a7bd-4e48-b0be-23053b854574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2edb2a-d820-4c7c-a45f-5e74292fdfe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8297e0-2440-4634-986f-3aad687cf139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c499be22-b61f-4e72-9f50-c3e12ce30f1b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45343d81-abde-4d5d-81a5-4a23952a9d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a12766-2ffd-4d5a-ae35-4fbbeabcc3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cc34c6-c8fd-4d0c-ab03-fa56df612686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4819f320-12a4-40e8-aab8-90a83e01758b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bd185c-7cb4-48af-9240-0acb356cfa60",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50110b0b-365d-413c-97df-fa4e9d95208b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f42edcb-d899-4c73-806c-d499e29c999b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31949b02-ef10-44cf-a73b-55693cf7c7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e74949f-2343-47e0-9d1f-e98489560df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b001fea1-488f-4b07-b2fc-7ee7658c2a95",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83335850-7ec3-44d9-9fcf-fbef061b7459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd00af72-48f1-46d4-a328-269d5ea62582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66be2d9b-f9f4-4341-98eb-fc98ce8f3541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "219cd1a5-3d4d-4e88-abf5-6130e5a77d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9554a0d8-f596-4d6f-a2c9-3157dac51615",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280b3325-c482-4dd6-9620-dad7ccb465c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346d417e-1350-4e69-a28d-b7c4da6f8305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850aaf71-860a-460a-822f-4abe0e8e2a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d96ee3e-6065-4295-b292-17e9accdffaf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b464c5a3-eb6d-45c8-b3fb-c596698adf87",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c4c3a7a-596a-4b0a-b96b-fedb583900b1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1876420-f6df-4bde-9daa-e5df60b732d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c41f9eb4-3d05-4d63-8aaf-0e101c84922d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20600259-f844-4bbd-89d0-e5ef678f0fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e970cbcb-49fc-4178-b34e-155967616acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dce7afb-9991-4941-ab64-043b2ed52d8b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c61f7a-62c6-4a9f-b68b-5f959f0ce7e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bb177b1c-d2bc-49d7-a8e4-2bceb738cf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0e101d-2d4c-4cee-b6df-5ce22e259ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0172d271-0602-437f-9366-4fadba4f7a19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c1def9a-a04a-44bc-8ca3-7b579055ace6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37607660-1ff7-4fc9-8ac3-abfb312c1f57"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8f01369-d2e2-41d5-9a5e-608070b2fe5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c12acf6b-baa6-4101-98d2-a51f4aabb434"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee3b3fdd-4b00-4ae5-96fe-9bc35023899c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1229c61d-dc7a-4606-88b5-c8e776cf0013"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54eedcd1-b753-4814-86d9-e07a86c1c1cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7fe94e0a-24fa-4eb5-9fe0-5435aad924e0"
            }
          }
        ]
      },
      {
        "id": "9f56193e-8340-4bb7-96d8-41184834ccc7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0cd1a166-5be5-4013-9b65-989850b43078",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40db20e5-c050-488c-b310-738eee8854e6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c477312-be7a-44d5-814a-e357986fe212",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4da74b-a21f-4fcf-82f4-db31d7cdd920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69af65b7-b576-4ac3-852a-6b5e957b5d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1acc41d-cab8-4d05-a0c5-afefc9aac9bd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26990a76-4172-4fe8-9753-c5aaed013752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b4d8e5-3d68-46ba-a972-e7bdad198f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bb5db8-a854-4c4f-8d68-52de075be5f3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c95a8ac-6ec8-4947-b177-b0f75d0a202c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6a1dfe-5c0e-4025-9536-e0d5aa7a6d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3346eb27-0e6b-40c2-9752-aad9d2d4679a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5522c21a-37fe-4d02-b5ee-225a1af281fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "153b95cc-7230-4cc9-9814-79e3c85c35ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf3c655-e3e2-417d-b343-e7f58c15782b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae53c83-7e51-4224-97f6-ea2fea7cfac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933c0fae-ea1b-47c9-80d0-261b34d12c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6303606b-49f3-4c9b-8b32-4679b50354d8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5dc904e-52d1-4337-b3bb-f1d002797546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac885d29-b99c-4de3-91ec-b0dc35cc5318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66eede73-5fbc-4da4-b46f-fdf4e09bc746",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97cca6b8-1743-46e5-a4c2-8121ecf65ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1feab1d-6807-42d0-b38c-c14de42cd8df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078e4fd8-6a68-4b93-ae55-00bcdb1b27d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8747734f-7fbf-4127-8554-72434e355cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ce5802-9c4e-4254-86bd-ac08fafbc03c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057cb0d3-e011-46b9-91e2-ff3340fe87e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9a1a77e-04f7-4adc-960f-7d989764f6c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d9788a-8af4-43c1-80ef-c0054dba95bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115f513d-1784-4dbc-b15c-bc158b8df1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41e6b17-fac0-457c-9ce6-09e0d782a121",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15ab70d-6f82-4b6e-8c4d-597a7ceab61d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af3fbd13-ca81-419e-8947-c92ce1385465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b47958-7821-4416-a570-77c308da6998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ce5e08-ac4f-4795-905a-a26f8fbcbca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d63e4f-3ec2-4ab8-adf7-44aa873745f3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af4abc9-62e3-4179-8772-fe74501d8a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58b7bce3-68d5-4bfc-8420-b7015dbdcbcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de62b25-5fee-43f8-8472-d1117237fedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfa5b05-ea8a-4770-a2e0-c0b07554fe02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08831d51-9a53-4d4e-b43e-c74a8bd4d569",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435465e9-4c46-4cb0-8861-8c012ab16f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2864d52-55af-4e64-b223-6b6bf3bfe242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c703581a-b55a-4354-9910-867af60a57f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38090b19-a923-48e5-9150-79f753c2efc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb0a803-9f23-4e68-aec0-b0110a3a1b97",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f6d301-93f6-41e3-a94e-c11a67315786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df83ce37-d7ce-4cdc-926d-4ab1cf4d4248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e03ba8-0509-4361-9b4f-fcc123ce3f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75563a72-be68-49b8-a552-ba8678aea06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b20783-ef62-44ff-a9e8-e67c135cd070",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa40d537-6563-471c-a932-1066eaa826f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6d639af-471b-4f42-acb0-838a6c873ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2222110d-fbbb-4daa-a4b0-790317ff6cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7a93a8-9d6b-4c42-996a-863c378e099b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4904f83b-ebd7-4b4a-829a-94a47743ee28",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dc7186-576a-47d9-b4a5-278076242c6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6205fc5f-9e6b-47ee-9825-8d0c9e0e7c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d089f0-ac6d-4f47-953c-700cebeb7e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1ca993-1534-4e24-8d1b-6da906f07ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79f8215-473b-48ed-8142-f8866824e04f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446df378-4ad4-4539-8144-214991cb8173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c5fa8b3-16b8-44f5-a220-e2d562ceefb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fcadab-753d-45b9-9107-6a9b622439ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f5cb35-5373-408d-b058-8d0ae5ab3ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90eca8e5-e1ab-42c4-a627-efe42546130a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e287420-e21e-4cdc-9edb-f1a89bfa9cda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a83b4cf-50a4-489e-a635-82233b9a8536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29a81ce-3d4f-41e2-80f3-2d404f7d6b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1de873-e9bc-4f52-9ecc-d5d4d7106e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c26d5b-e671-4142-8021-1b783ee00a71",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af37a3d-0b92-4c36-a6a2-e21649df0e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b7e2bc-e763-4659-96b3-6c6fff3768b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f237a1b-16d9-4738-910b-1b22af160dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6244d0f0-8b4f-4812-8946-aa9d2e0fd673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c11415d-359a-4cee-b093-bcc223678bf9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c204665a-0c05-46cd-b52e-c219332832f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de5e9ba-39f2-4c48-bcaa-f9a1963e8978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97bff69-0564-4661-9199-a3c39dd78c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4985e268-16c0-4e00-8f28-bde749eba782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61071f88-0eb6-4622-b938-7d6627053aba",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f15d6a7-98fe-44ea-b7c7-563212891f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71bf7de-50df-4a4a-b91a-693fbf7fe799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796494d8-0ab6-4358-ac9a-75de0d037ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ccdb75-2f20-4981-8a19-b4dbd420bdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739fd8a3-ad3f-4b24-8a04-c6cf8752796d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb797cd0-0553-4a4a-97e4-4e7abce1fbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5e419c-8d7b-4c25-826a-ddc01d2a47d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc275afc-7b15-4189-bca9-87637e0d3902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63fd1e4a-1616-423d-9ccb-1a5447b4c876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3e3d1c-e13f-4067-a184-745e6bb18c0d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29319940-2b6c-43a4-b426-006b4bfb0799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab0229a-26a6-48f8-a813-9a16f23badb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c438724-e385-4a7d-b8f2-ab785d65ec42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b7c418-caa7-4d9d-a5b8-33fd9a067ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ad4e2c-3e47-438d-b7e0-ec0afee71403",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6f2268-f018-49ef-ba8a-9ae247d0322c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373fa337-3203-48f8-b015-6d3591db3fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45e156d-7457-4766-a95c-c8bd6f815612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c582352-f1a2-4d14-b5f3-d76b45728a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1211c52-9ceb-4d99-a61a-f4ecbfb4d7c3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd35927e-3ca2-49a2-bd7f-9c37b44c64a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a194b508-8a19-499f-9502-b21b45039c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d50510-8563-42b2-96f0-1916d1110503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ba586f-b529-489a-a0e9-b48c83799af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df27752a-28a6-40fe-b8b8-46645ffda4e2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad8731f-621c-4836-bd33-10538e7d4847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fdb60e2-ce26-4e34-9a39-38aba07e613f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc08cdbf-bfbe-48ce-a501-aa96ebd52d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b08dc8-08fc-4cef-b516-fbfaf5c0e1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edd10e0-11f0-4648-8bfa-d96dcc447f0d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd1dda8-d1c9-4cfe-add5-a3317f1b865e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8e65eb0-7220-4fb1-b1ed-632de5f416f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12034bc8-25b6-4ac1-92df-853afde94c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0759a5c-5487-4c80-bd04-b20daac28016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc299d0e-d8c8-4ff5-96e6-6fd76586d15f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecf4636-8177-4045-a55d-9875b1afe0ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76144cea-316d-41c6-9f10-17f11cebc08d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ace0b3f-9d50-4d02-89ed-a372d8d60f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d081aa-9fbb-485c-b155-bd9179f3aabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7928ba6d-f0d4-4bd2-83ff-b19ce437cf02",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e7398b-713d-4887-a273-f529a80a2d11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "722f1860-64e4-4c13-928b-85525758f624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59aa220f-4626-48c0-b968-82b0b2f94f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfada78-6b23-4006-a545-26fee8943dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae951ba-ab95-4e56-936b-b25001258ee5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1142951a-4f58-4fe9-b444-1582c7a2b27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0cc596-db56-42e7-9c3f-6b8062ff6405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "742cd281-7b98-494c-936a-3cd403d0d98c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa834832-e875-4c6c-9860-eec77e40414a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1bf774-1c70-40f2-ac21-d1b96f44c3e7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30282749-5dc2-4ad6-9baf-69d2d5ee5dc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea744266-db2e-4d15-9bcf-1c5a555719e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8950ff-aa4c-4987-8cb0-52d53bb4e978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21de8a83-4118-436e-ab19-18c30e7ae837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2e9d36-6c76-4ed0-bd4d-cbb7db85d82c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2434c290-b83d-434c-9e0d-ecec09f1ee76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d60aec69-8a39-4255-93f3-2a3056e8fbec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4618bdb6-75e3-4835-bfb5-cf0a2f76f5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650c99dd-5327-4d55-8b5a-91de77a72cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57240bd-d0a7-4e72-8557-de7f114fdecb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab90bc2b-efe5-4b6c-b86c-2a70db6716cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46cedaa2-b043-4eaf-a3e4-e303a99290ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00147a0a-3cf6-441e-b699-07bab40a1c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997aad64-fa5a-4ac5-97a1-a7ddabb521ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f61498-077d-481b-bc36-f9626416e1e4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236a4e88-4d5d-40b7-b19c-dadb80e84f95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fe9e517-861e-452a-a062-caa51fa7c14a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e0b93c-f66c-4f41-b242-f3c750bc259f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419fd9dc-3c0e-472e-9c30-3d2874767326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fb6924-dec8-4a87-9be3-2bc82a34d370",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a611880-5247-43ce-b40e-9e2196dcef9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2758353d-f20b-48fe-8776-dad31a893450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0454f850-896d-4854-8595-283f3561adff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf1aad3-cf02-4564-bf09-a252ea2dc168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894930f7-f40f-40bf-b691-76a882db24ea",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1261e915-f77a-42e4-8e34-e5e67ffedd3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64793d21-c5b2-4add-854c-d6b8a66ebd2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc622444-c3a7-48b0-b55c-f5bbf15743d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c689d63-6ad6-40d3-aedb-58e85ef957f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01ad584-3ecf-447c-9d04-4dc70dc1746d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18d58b7-6364-48b9-a160-54325f547e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03859501-9b7c-4ed8-9465-1c89b314954b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e000946c-542a-4cbb-935f-44458f6d696c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3735ddd5-3155-4cb6-83ed-a7670a278887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c0139b-a228-4d52-9ce2-b5c3542fc3ef",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3591c7bb-e2d6-4d01-9421-48ddd563496f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09cfcb13-bd99-4b87-86c6-ad8329a0756b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d942c7-115e-427a-af9e-3af060835850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a08e1ff-4105-4bde-a752-d0e0d55503c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444cb8a7-9cc8-4924-8458-bbb9f3400c95",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72dce53-c0fd-408a-ad12-4a63a973acb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2745e626-f011-4ae1-bdf7-150af0e77b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b656abe-4c5d-4398-b113-4b1595aa1f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9f7f05-1266-4951-a0c0-3cb7fb7f4f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b81ae65-80ad-4f4f-b672-b15fdae47582",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868a7bbb-9d97-40e4-9a9b-73e68e5805f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed23283-c4c4-4f1b-a481-437ea89aca85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1207b6b5-c21c-41cc-a969-32cb8e31ca21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6abd8be-669f-4f93-b1f7-f93650dda578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5763f82-e8fc-433d-be74-84d930b66e62",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77b946e-17a8-477d-a8ad-1d380c868e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa009cb-9335-44ad-b947-3775c394823c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1114c89d-f3de-4ca2-bddc-34942d4cfedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7def3505-90a2-4ebd-a587-720ce03cbd93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a2434d-061d-4dee-8542-a4fb6b3640a9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a75d0cc-4ef0-4c06-8b11-5f94fd3b4852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89601ca0-2c1d-42d6-94e6-9e6f0917f36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "872b8e40-a0a4-4fa8-a91e-594cac0751a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e606738-f39f-4325-9ee0-438175e87446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e8bfd2-ad5f-4818-bc42-9ebb2de1ce97",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba08c6bf-d73f-44bb-b115-917e1b0c091c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d61bb2c-78a7-4564-8a82-e546c2cc6ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c43cd92-8a9f-434e-abc4-5bb72ee49a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea655b98-06c1-48d3-843b-b7f751f98a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b238a83f-465f-46f3-9a4e-3bed0d6330a6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27f9945-c586-4301-87ff-02e99ff80ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89c0e71-8fd7-454a-8ed0-57457e1d9409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a217a2-6c21-4c17-a4e7-01a8b7345bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da21bbc0-5123-412a-84a8-b736a94a6507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5147533d-3a08-4fe4-b95c-1b89a0491fc6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2296579-71a2-4f74-8e5d-f0be03158431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9dd4c8-fa87-442e-94c9-f2a5f3863efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa060499-eb28-40e5-9b4b-17666bd835ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2101d47-8f36-4859-b5e0-6264bb092d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f915fa-865a-4193-b35f-c282f089528d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f932006-1544-450b-a215-b9bec6040111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c92f15-d4de-4948-8564-78ec580e8f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4980a56-cd2a-4a34-82f2-ce685c7ac946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0001ba-0385-47d8-b5d9-960e8d96f6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921eb1c0-d4b7-447b-b955-2a73a1aa0df4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3272ecaa-b2c7-44c2-8638-211f85ff48f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697270de-3e95-423a-8d6b-57371a5ad599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b946618-1f9d-49eb-921d-c2ca043f654b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b57b78-8ca8-455a-a21b-aa62f79bf195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118ded89-345f-4603-852d-18793fef65dc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5559f2df-b793-4613-8161-997c91469f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b965f70-53ef-48a5-bb9f-03ddaf21eef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a08e9da-ad3a-45c7-b58e-704de58a6ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fa295a-37db-4d44-a261-cc723e1b3b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5e40cb-363e-4b6f-981f-9d7274b418c4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd03a499-d7ef-4b98-89bd-2c78f614ba98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb82539a-1e68-4205-a594-41b332a38390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd569ac-ea2e-45f4-ae7e-492c6cddc860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45762655-13b1-4ca3-85aa-e3456357cae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910ae65f-bd0b-4ced-898c-79ae42864f4a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0906d6-d517-438b-b83f-5e1b8d3dbbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300f6190-9814-4f6f-9405-a92e8f45ad78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2f360a-49ea-4bbc-b3cc-064fa7f823a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db456fb-52f1-4ad9-bd55-09677309e572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b110e5-95f8-4d83-8f4c-3651279adbb3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737f3086-a198-44b5-95f2-b21a2aa94ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81254a8e-860f-4595-a326-b4b8627dfafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f846feef-9076-4ef1-b548-d87ae5d7d7a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b6f2a3-5e89-463e-99e5-870a805da656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36744cb0-3eab-4a93-8196-6ec497ba224c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9f4f1e-0ad7-4a11-b42c-226607a39244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bd2b56-35c2-48a0-b171-5be4048d4785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33195f08-30e1-4962-8e6f-310f1d982aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1925ba35-512e-4882-ae0a-0849d1b2ef40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da424764-be4f-4204-b153-bc1f7ea9975e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5329179-6df1-4d67-9f43-a5c843c59ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387d8f43-28db-4efc-9c5d-fb7de69de73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d15bf4-7c89-4841-b66e-bcc48ad6165f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb46f85-77cb-4ad7-ba26-f4958353a196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854a033f-a3d5-49fc-8948-75a36f1ea169",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b754e31-99fb-4c40-a6b0-6e82be5a9a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9068d2-9436-4ac6-9dd5-c3a4f5fc414c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deec26bb-4894-4870-8fdd-3717dedf5d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a96b5b-ec2e-4915-b1ba-18fef18db821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f84467b-528b-4a01-83e4-c346db08902c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de43cc3-2081-42b6-8a7c-fff15caf0e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b05a48-71c1-4ed9-86d8-81613bcb071d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4104d79e-55c1-49bb-ae56-a490c7f1831f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bad598-e99f-44b2-a031-211d38655acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027e686e-5a98-44bb-8217-014abcd66d62",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158307a5-f17a-4ccf-a804-c9a5a6c8f7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3943863d-7cb8-432b-9b33-100e66d21092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716cbc9a-260c-4dfa-830d-85dd03fb20b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db41c411-c9de-4f76-807c-ee014bbdbfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8637a388-63b6-4795-a039-05b6642352c3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436c9b91-4e64-4ade-ba1a-22d04456cf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b711d3f-3018-4c45-a6d2-db28363b4a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15f9509-d896-4883-adc2-6ef9e5dbca90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df25e15-279d-46fd-b02b-055b1fecd79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa11d94d-e6e2-41da-a9cd-d2ed0a84c233",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b810beca-a453-4d92-99bf-1851ce7102c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e3cc28e-9212-4e44-b229-8b87c04cb1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d314f5-b5c8-4184-90c8-97757a3dfdf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9242ffb6-e4eb-4ac0-97fb-93b5ffad36e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e167a8a-d65a-49a1-9632-a5fed015ff82",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0ae1b4-d977-4736-80c8-4f08a09f093c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d919a311-5494-4b8f-9ce0-9347a75a6114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037f5416-47cf-4b4a-82a2-d95d4baa3cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efacfb69-6b10-4fdd-b04a-25f0cc945c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe67a4b-99a1-468a-a372-3d701515e638",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8bda55-056f-4b52-8e29-0f1b28d577e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38663250-40d5-45fc-afbf-b778f649affa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2e08fa-9778-4afc-998c-eff10fcd30e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bd624e-4c7d-4655-9835-2d11bb81bdf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f59383-0250-4bb6-a51c-e78b5e996310",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8bc3aa-337d-4820-84cb-7a873cd08065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5bec92-d3ba-4d6b-9f39-5c40540277aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed93c1de-a81c-4ad8-881c-c9ffd68cc8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d6be88-332c-45aa-a6d2-dac56dddf36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771eef6e-ed6a-4c2e-9fa7-58689b9bef58",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1233302-e1ea-40e9-a966-5f14392dd9f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd7f1ff-1acc-42f3-b3c6-0369f08207f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be1c56f-fdfb-4ed4-b150-30a77ada016d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373d7484-91e7-4425-a6b6-3265716582d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a76323-1173-4449-a592-359d2a417cac",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df32bde-accb-4f91-ba9a-506647c72b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06e4ce5-1f71-4b3d-9ea3-319dc1c10313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576a2295-c125-4761-b043-e660807a345c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b79756-e3a2-4233-a2b7-127b61caa826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577e5425-aed3-4428-a7ad-03ff0e14ea49",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c17e35d-cb60-47a0-acfa-2092c857d97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41487c06-18a6-4eb3-b880-c235d741a83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bf53a2-9f41-4440-b24e-78fc021d8c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998271bc-6269-4d46-a705-021c289c3abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286a18c3-f821-4a30-ba3e-f661edb9c53a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624cacbb-db66-4dc5-ae51-645e84b500d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7057a3-97e3-403b-a434-009b6e0435aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0336d96-e35f-48e7-8c2d-e66c2cfd2482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfe09ec-903b-4cd0-b737-8226698dd270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7501f97d-83ac-4c33-bfb5-e5cc95171d2b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd31380-5cf0-419f-a0a2-9a6f60b1e892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47cb995e-605f-44c6-972d-aa7708e9eac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6baef915-3161-4d89-bb64-857fe59ef5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906faa45-31ee-428c-b891-ac8b98ba9fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4ff28d-598d-4d22-9689-cd312f6b24b2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269064f6-ba42-423d-9b81-c0d3063daaaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb34dd0d-eb28-4b26-a783-8ec6adae1ff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb7109f-4592-45b0-be5f-63db7b96122b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8a9e32-3d3a-43fb-91cb-18c78b011610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda964b8-b125-4a71-ade6-ee9d28ebea72",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3018fe7-ffcf-489c-9e14-5583a91ed4ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a76af68-f65f-441a-9f56-d96b2f4a7e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe41093-41d9-4331-ac71-e2d4399a1373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87789053-08e2-4abb-ac2b-823706fcbcd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733e4d66-950e-4453-aa21-1138d6aa0977",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c3ac04-42ed-46dd-8e01-46accb69f279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee57cdd7-f508-4829-bbd8-e56763514936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f691a8f-1c2e-4448-9f53-22fc88fe23ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6232ffd0-d72d-4783-b3f6-4e815a8b43f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207d912b-bc56-42a0-b24a-d05fd91a23a5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4df002-5c8e-4ab0-bc28-1bec810f1d70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc47261c-389d-4b1a-a9d4-6b6f58dd5d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a02fed0-e54c-4fca-bdc6-ee8626573734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a4dce4-c9a9-49fe-9c4a-87157c3e2a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d46c69-dd2d-408f-95be-fdda3d591022",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548c74e5-bf3d-48ee-b48d-3a2027458893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43af536d-4257-4f0c-a7ba-fa6c5e420ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6ea498-bcef-412f-aa0f-f6edd49dce4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822b1617-35be-49e3-ac40-b04ba677be94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de2b4f4-4207-46a3-864a-2f9493992a09",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb08da9-fd88-4c41-9e05-81105eb51a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a671f36-923f-49d2-93f7-2d947ea92814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42564464-fba3-4bc3-98cb-0a3fb8a83c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9011ede-66bb-4c35-b177-a535ca5ed942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8b4458-b25f-47f6-998f-d340a02cf1e9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054a6fed-9972-40bb-957f-070bbe79e7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c9aff51-4f76-4682-84c3-a4f501cd8795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd3ad75-6da5-453b-92e7-260c3270bf90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae162bce-7138-4aa9-a486-8a68edbb51cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84be5879-da01-4000-9a60-f9640a2afa88",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb385f0-97b7-4741-a4f6-6f9a87ee73ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a23d3157-4522-4a74-bb2d-d8214d718ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29645e99-ca1c-42aa-83b9-a0b48da586e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d26404a-0af1-4315-832f-cd591db2631c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa382ea-12b9-445d-871e-a8b94028299f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07443cc7-60aa-4991-8fac-c19f814cceb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0268b743-467a-42d4-89e8-b110156d6142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9965a71b-396b-4c1a-b3ce-d8bca741c742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3182a42-f16c-45a6-8a38-11e192891b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b39cbe8-316c-4a6b-a3ac-cc6a353fd1af",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b46f3f3-bce7-4727-ae38-846080f700df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c06888a-e688-405e-9f76-fcd8a7a44749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891f500c-df04-4cbe-9de1-f34b9c3a2625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcaab89e-c098-4c8a-8d57-d68d00e6f5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff454e0-68b6-4512-a907-b87da4f3f4fa",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b98ae25-4f65-4c05-8668-edf32599ff0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "587903e1-3f83-4bda-98d6-ef09544416dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73cdd23-0bf1-4122-acd2-54bb221f880b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc87d716-4cb4-431b-b814-4a9cee8e3758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2576ea2-fd93-4803-8a97-b68100070278",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f2d52f-a02d-4473-b520-40792710b81e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae18602a-ce9e-40ad-b380-749728f399fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94af394f-8cd7-4a36-a1c0-90fd7dd114e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9775181b-2196-41fc-9bb3-5f226ad6466a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9c10bb-6866-4807-9e12-ceef18a2282e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2febeafa-3304-4d78-93a0-b752e503829a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2587ca6-db28-4078-a8d2-68b28429f85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c5c538-026f-4137-a72b-0416a4ac3b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d5f06e-a94d-475c-8cc8-09fd3a5b22ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c9a274-c89f-49d9-a6ba-512863b0838c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0329cd21-3906-4006-a026-e53737f7957c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e0e7c19-3632-4065-b60b-ddd2ef35f3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02536b0-9130-4729-a55f-958c077ec3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5fcbb8-6acc-49f8-ab11-0ddf461a4d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676a1cc6-d880-46d9-a42c-8493e93b9fce",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba88023-a165-455d-9fce-a303a06fa0c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81872cc7-67bc-43fe-8a2e-ac544f9aaf03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1f829d-b8b0-4e12-b361-fd8a0feb5806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1af29e-4697-4ba4-b0c9-e50e3bddd402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590e32ca-a84f-46c3-8d35-4459a1c41d29",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdeb39d-0ad6-470c-a91f-18b1ee6895f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efc77025-509b-4572-8b09-1ca2bf5f26d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "909ce238-5b06-46fc-b1c0-14abddd1f2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ac2a7e-930e-4ed5-b017-82b906724410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35e9eae-c980-4489-a9b7-5374f390b6c2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bd591d-4c06-427e-a789-6202b3c8fd05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c35eba01-244b-4801-9ffa-f7db47103878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b538fd8-9518-4529-98bb-466d28e68e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48fe492-e9a4-4eb6-9113-763c46934170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd82243b-2298-445a-b7cb-69f4bfa737ab",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05c8f6c-ab6a-4ee7-aa64-04b2fec6ea26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ca1ce5d-42ef-48af-ad2c-14ecc4298045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70293e2-1b7d-4865-af16-70a125dc5c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f53ab5d-3f12-484b-8a63-bda377489732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993608aa-6db6-446b-a3d1-d2c64575f990",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3263a587-2b18-4d12-92de-d67df7d8a10f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad61efef-988c-4502-9498-7a341bff4275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f79aeca-2b51-4f90-a780-c7b6208de391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725a4ab1-24f0-40fa-9a26-ea9b668f960c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87459d93-5a7a-41cc-99f6-1c1cf57c2b63",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6b34ef-00ee-4e7b-8240-2361fd1a264f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e24c8f-7998-495c-8632-dd6aee735ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb808e78-6028-4e4f-b83e-e36f180514e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345d0e22-5980-4314-97b3-6d31b657e3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a8d28d-6b3e-4140-bcf5-6511df475c38",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb2749f-516f-470d-b57e-56bfa9652d3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89477554-b91a-4894-8dd2-2ec61d7be33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f1654c-84ca-4fae-bb36-6627786a9825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1ab609-4e96-4975-9456-0c3030e0952e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b065e53d-ec79-4f12-80fa-564acf6c90c2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4642fcf-c79c-4e25-961f-78ba493b671b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc7d8bfa-f0a0-4c76-a285-dd69cdc354a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17c86b0-bb85-489f-93d0-83e4ec7b6927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b1926f-ee9d-4dd0-b768-37286df5fbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973ce8fb-1480-4ba7-ae41-3630dbcfbfe0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28790ff-8a5a-46d2-be0b-9184af84dbb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abbb0dce-03e2-4513-923f-1fd972452c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7a5ffd-62fa-4b5b-81d2-b7e4a8b8309a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15194b3-b3c5-46d3-ae1f-0c7476e57d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78473a9-0052-4449-9c22-aab8b17d9443",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e0c5da-b1bd-4f1a-81d3-a835f571abb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d76143f7-235d-43d4-870b-f0635e041072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30bf737-2d86-44c9-9ab9-18866128b8ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e4d898-df11-4cf8-a2cc-054c9f791d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab57725-c27c-4740-ba85-b34f5abb090c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738c2f87-b520-4b56-a1f4-a0951539d6c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76129159-f82c-41a2-9a84-c98a621cde33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32dbed94-9205-4ccc-8d5d-cf7b200add6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480779ef-a369-432a-b970-65a343065bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480f2d87-6f63-4676-b15f-889688086d15",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c877185-866f-49ea-aed3-9e65b320c726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46ad649d-bfee-490c-9c82-99427aa63f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae6eff0-8296-42ca-9b7c-c92c209fcfd9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c272323-f6c8-428a-ac67-1fc193fab8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c966646e-384b-40e6-8c2e-6c52d51a6361",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d55123-6f53-459c-8b7a-81f87c64c488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3442c72c-3a3d-4461-9d26-b9db0be2aec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b87d3f-261c-4bef-9839-f51773f1c591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700eed94-261d-4d6a-957b-79dbf37964b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f02fcca-9012-4ce7-9bd6-e45881c69943",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7643b4-3f22-4a53-95d3-cb0d0fb74441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edf5c630-e76b-45cf-93e9-ae6dde1f23c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf141f9-6e85-40dc-a087-8126c9750631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd493c5-900e-4beb-b609-a13e8ff7e030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2f45f3-f854-4782-bb5a-fe091d8d1c73",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1155ffc5-199d-4310-a0e1-5f9d2fbc742e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9adb0e46-321e-4373-8975-cc479124b273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d570d279-3523-47c3-8da7-e28f41bdccc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66e358e-f1f3-4a7b-b692-aa3ca2e7cbb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8252bab8-8a34-47e2-a6e5-15fcf5e9e2fd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875b5eea-d941-4206-a712-3410c6d1f0b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "190e28ac-9e90-43cc-bd90-2d7a0d5b650f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ab91e-932e-41fc-9768-1c40fb67cbfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecb1dff-ccf2-4e5f-8b2d-e2ef9c84c962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be11ea13-2744-4eb7-83fd-ddf347a3cd57",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07fc73f-1e88-4e0a-8809-bf00e7cc8e08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab037b21-e166-4ca1-935b-7e6f28a48965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968f7c61-53cd-4bf5-9ee4-4b61a19efa5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee5bb19-6938-462c-aa06-fc07b7814c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8394360-a192-4668-8bbd-547c5fe80ad6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba19a7b-43b8-47be-88bc-c707932236ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "256c2e29-20d6-4f1d-9f18-76876202ac89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92072a8-1452-4a21-b7db-cdad56e19c37",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f367ca-d285-4cdc-a89b-d03cab4892c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc0702f-ccc6-466f-a36e-5313ee13f64b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86378ac4-4029-4c1d-9599-30cbce77a579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9b6bfb5-2089-4f5d-8ca0-64ec5c1f0f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a1e0dd-a751-427d-b9c5-bac30c41804e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42265caf-527d-4853-8e7f-713ed66761ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b433234e-294e-4471-9d8c-d9c33af6e2a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51511d16-02b2-493d-999f-37768ca319c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a640eb7-b658-4d61-8f80-efb39f6d8015",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "625f8642-27ef-4392-a510-aec2821ae889"
                    }
                  }
                ]
              },
              {
                "id": "35914c96-0479-4421-b4e8-7a283430f850",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec2d1155-928c-4b85-8063-ae735b1ffc1d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715da9ec-550d-462d-90ee-3e6a140c7473",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0bb3dd8c-b23a-4dee-8c4c-a8652f2690f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdbc878-ff37-44fc-8f3d-354b018f091a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91af4788-a0af-421e-8ba7-9cb1fd3ac2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94093db9-a161-446a-acc8-833f85340df0",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498f51c2-b953-411e-9f02-56add5c8f87c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "aa8d56a9-e06e-4b95-9593-000509c7a5d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa4daab-e9fe-483f-a24d-af72d2bdf7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eda8f02-4320-4598-9cfe-e2300ee09b51"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2a0184d-07fd-4621-b71d-2f09b30cb436",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4130c58-4211-4e4f-81f0-ec74d0acd12a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5aab5235-cc37-4df2-b9f9-b0ffba4ed4a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2c14b78-c915-4d52-a8f8-a6cbc85cf933"
                    }
                  }
                ]
              },
              {
                "id": "b7850b6a-3126-4439-bf4f-951003c0557c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ef97975b-585d-4f9c-a210-d664a6fd8db4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944d0b27-e23c-4c84-9345-0bedf4bd0421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4b8e819b-0269-41e4-965d-ac2a1d1251ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d96d4e0-e998-444f-b5d0-9370389f6b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343d4718-d4a4-4d37-b1fd-8d80b616d052"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2d48ecc1-1087-4a8a-bef1-43eb11c634f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "621cc210-b9a9-432f-a07e-561705084d0d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26b4ed54-c951-42df-b759-27e2800704ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "77d482b4-af59-47e9-a7b1-0d85c1dbe26d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "996652c3-a58d-4346-b6a0-3ae035293bd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cad0742-27b6-4daf-9c32-ab97e79be02f"
                    }
                  }
                ]
              },
              {
                "id": "8dfeec82-11da-475d-be1c-4d21ec9b3292",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "054615b9-7efc-4571-9f8e-82da794f4c35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "34a83220-873a-49ef-a67a-9b7643e3bc20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f5bf6a7-8f57-48b8-a140-3c5b6df27c02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d46095e-645e-4782-a057-23043fb8dec5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb33e551-b0be-48b9-b389-fc8ad0df748a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "86ef98dd-8115-4ea3-95d3-35c9e442aade"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3812202-4ff7-493c-b165-890c505e7733",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b0b00fe-ebeb-4d38-ba5a-efe856cb1a59"
            }
          }
        ]
      },
      {
        "id": "6a8950de-d3e8-4454-9e7a-c414f3745430",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "becc624d-260b-4c2f-9c4f-21153a9ade5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "298a3025-7ad6-48ea-923f-169e22929672",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6faec65f-58a3-4019-a3b3-b54f1fb47167",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b260aaae-015b-4f37-b37a-abec28ee2e77",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ec3733a9-6e63-4235-a681-5f20ea6318a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709bc27e-2aaf-4712-9dd0-57eb881ee9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daf3ba5c-9a9e-4928-8fc4-9d9e615fbbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dd1d5d-7536-4293-a357-f038cd8cef44",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4f3cbe-20f5-4573-ba48-b77f2d4d35cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "348724b5-07fc-42df-a30d-cb1e69ec6952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f030eca-ed32-4169-bed5-d81b1192769c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26277449-3d33-4c47-97a3-3c747df2b035"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bc0a7d0-18c3-49f6-99df-78a03fb64201",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30c0faa9-c70d-4124-9572-4768e5bf4722"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8693091-aab0-46a5-9b8a-adae082ae467",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47e8b532-c8b9-414f-a342-65b20cf09438"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "493fad1e-0ca3-4637-8d0a-ee797c85697b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "195e0bc7-8a83-4b98-97a2-6b66bd04ca10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63923ec8-5ff4-484c-b3e6-a3213507365e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7dfcc871-29e2-416d-8b7a-3ed4c69dfe0d"
            }
          }
        ]
      },
      {
        "id": "fef5c03f-32bf-46c4-818e-3a9b5f02a4d0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6702b747-5e1d-4945-9938-17aa9562e19e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f85adae-b5ac-4681-ab92-bdf13337ff4e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16144f99-15c6-4d74-9ae1-4c8898a28814",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5252bb-9888-4dd9-a2da-738af873eae5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "555be3a6-17c2-4aba-8848-2a4ddbf67cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba7e98b-bcf4-4eb8-8c4b-dd2693f9f8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc81fd10-f92e-424e-b256-5bfa4c8a8e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7807991-66f5-4532-bf3c-feaf75387a02",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2923dd96-b414-42b4-9a80-5615beeec425",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd62c0c-471d-4aea-9b1c-df512fad828c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf7c568-ca95-429c-bb80-216cb0627be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "820debd4-4a3e-487f-aae9-439ddac99409"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9372892-2fa9-4970-bf80-b61809a7dd23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7fc4990-21ba-4c2e-bf1b-dd711f35adc2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "114c02e2-4afe-4f4b-8a8c-4805379fc155",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b97e6516-7f9c-4a90-8dd9-d7eac11002f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f761b7c-2a2f-4fdc-b1f7-98812ea2ac49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e6d5f98b-33dc-4762-a72c-c96aafb3ad4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9142d7a3-823b-4eb7-8400-0b2c7336c0a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5bd5937-4496-4a2a-a77d-84d82cc9d2de"
            }
          }
        ]
      },
      {
        "id": "5f7f2b71-5729-4602-9d41-2a2184c61e5a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d907d872-809c-4242-bd1d-d6fef1f2a811",
            "name": "Negative Testing",
            "item": [
              {
                "id": "259b8bbc-78bb-4a2f-b349-76c69f6ca843",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fe5fd6b-81a5-4c22-b779-b536987dde00",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a9cd8b-5a62-466d-858a-06073359238c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b87e968-4105-47bb-abc7-2d1383234ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84d5281-075a-48e3-b4f6-bac25b28433f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c5f6ee8-1b3e-4036-95e0-845ea635512c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316c1b8b-0a11-4a3c-b8fe-5df5f32e1b59",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c038b180-2270-4d4f-b05b-f99b7a75c4f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe744a7-4ff7-454c-88bd-c0a7de73f5d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ca63c2-8f29-49bb-a88d-3af604248220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d4a16a0-d3df-4715-8337-1c8af8148335"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d016539-edf6-4933-891e-d7ec375c4785",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "122a84de-f6d5-414d-89ec-7fd709ce134f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95f1707f-2b4a-4771-b393-dd5966754bc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6560b2f0-8579-4121-b440-c36e3fd059b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3d31fec-46ae-4b33-ad95-f37b1bb30ae7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "741ed53b-e884-4ba9-bdad-d2d414e0d6e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e130151-e8a1-4085-9a3b-619d69ad1352",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d79ad86f-7385-4ed4-8e78-a94d68ec7c17"
            }
          }
        ]
      },
      {
        "id": "e73d024d-9d34-4ae9-9e08-59931ef9321a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2c31e6a-77a3-4424-a1b5-f1eeaff67c55",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "576f509e-95ce-416b-b0b4-9aa41e1cb9a4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5e4d72d6-c87c-4df8-9135-1dbe0e92f47e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8024a563-d665-4cec-a603-e935a054bbf3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e30f09c-693e-4ba7-82a8-a3133c2a6a63",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 341.676923076923,
      "responseMin": 29,
      "responseMax": 18236,
      "responseSd": 1333.9765377672907,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682296674137,
      "completed": 1682296777567
    },
    "executions": [
      {
        "id": "ae671169-866a-4155-bfaf-036829e0ae02",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0326b4fa-3b2c-4a40-a3c1-d99431bd7270",
          "httpRequestId": "188fa0ce-90e4-4960-bc65-9bea05aa9ba4"
        },
        "item": {
          "id": "ae671169-866a-4155-bfaf-036829e0ae02",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c8e5c9b9-f01d-48c5-b5e0-5d1391783769",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 0
        }
      },
      {
        "id": "116a98ad-c2c5-4050-a70e-b7cbb1c1ff8d",
        "cursor": {
          "ref": "7e670e09-6138-4490-a289-7b7cc4916262",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7173154b-e1f0-4d4d-ad41-47f74313f6d7"
        },
        "item": {
          "id": "116a98ad-c2c5-4050-a70e-b7cbb1c1ff8d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "041380f5-2c5e-4044-841d-443cda72df19",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 0
        }
      },
      {
        "id": "529ded68-a844-4a34-983e-a78bcca2deb5",
        "cursor": {
          "ref": "8659d0c8-b403-4ff7-ab53-fae88e8328c8",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "19ecec18-1502-4eed-885d-bd1151cc71f5"
        },
        "item": {
          "id": "529ded68-a844-4a34-983e-a78bcca2deb5",
          "name": "did_json"
        },
        "response": {
          "id": "08025642-0679-4959-8443-4be32bef4018",
          "status": "OK",
          "code": 200,
          "responseTime": 498,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7b8658-9320-42a0-8edb-5f947507ed66",
        "cursor": {
          "ref": "de4a9a83-40fe-49e2-8ae0-f9f4661b7bd3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a61de60f-ecf1-4582-8955-2e2d1596244d"
        },
        "item": {
          "id": "9a7b8658-9320-42a0-8edb-5f947507ed66",
          "name": "did:invalid"
        },
        "response": {
          "id": "6ed822ae-f055-4c52-a292-b4cf92e2b927",
          "status": "Not Found",
          "code": 404,
          "responseTime": 988,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9a7b8658-9320-42a0-8edb-5f947507ed66",
        "cursor": {
          "ref": "de4a9a83-40fe-49e2-8ae0-f9f4661b7bd3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a61de60f-ecf1-4582-8955-2e2d1596244d"
        },
        "item": {
          "id": "9a7b8658-9320-42a0-8edb-5f947507ed66",
          "name": "did:invalid"
        },
        "response": {
          "id": "6ed822ae-f055-4c52-a292-b4cf92e2b927",
          "status": "Not Found",
          "code": 404,
          "responseTime": 988,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c81f0972-c500-48c6-9032-d1d2e75e29ff",
        "cursor": {
          "ref": "60e691da-b26a-4f3b-95fe-3d4f2b5dcfe5",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0dcb265b-c5b1-42f0-b59c-569511962c3c"
        },
        "item": {
          "id": "c81f0972-c500-48c6-9032-d1d2e75e29ff",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "316eac3a-ad3e-4d0e-957a-2fb5975f7f0a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 69,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db1d822-063e-423d-ad2c-82e4bb659b33",
        "cursor": {
          "ref": "508bd96f-3b94-445f-bba3-138e78433a0b",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "66c23a5f-b476-4b4b-8965-4e90e210ce71"
        },
        "item": {
          "id": "5db1d822-063e-423d-ad2c-82e4bb659b33",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9cf9a90b-495d-4c41-a93b-61cbdfab909f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109c0046-169b-478d-a4f0-8009a1c5e870",
        "cursor": {
          "ref": "b82ab2c1-2a79-443b-98b1-7b222f9a6eb4",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "42071d14-828d-4dfc-ae79-38cad11c153c"
        },
        "item": {
          "id": "109c0046-169b-478d-a4f0-8009a1c5e870",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ecd3e93b-4e22-4d6e-9196-61c7e7c2e36b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "fc844faa-bc05-4c13-8ccb-504d269fac6d",
        "cursor": {
          "ref": "d034624a-2392-4ae6-a5f7-f037e715d921",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ce4aa803-9cdc-4338-a4f7-c049879eeccf"
        },
        "item": {
          "id": "fc844faa-bc05-4c13-8ccb-504d269fac6d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "353934b7-7fe2-4d3c-9741-5616adb92118",
          "status": "OK",
          "code": 200,
          "responseTime": 239,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fc844faa-bc05-4c13-8ccb-504d269fac6d",
        "cursor": {
          "ref": "d034624a-2392-4ae6-a5f7-f037e715d921",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ce4aa803-9cdc-4338-a4f7-c049879eeccf"
        },
        "item": {
          "id": "fc844faa-bc05-4c13-8ccb-504d269fac6d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "353934b7-7fe2-4d3c-9741-5616adb92118",
          "status": "OK",
          "code": 200,
          "responseTime": 239,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ff55ccb7-a4be-4553-84a0-7842367a58d1",
        "cursor": {
          "ref": "739fecd0-f2ba-4222-b965-edc0c4d062c5",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "15350b09-7072-4dd1-b09a-88a92d178676"
        },
        "item": {
          "id": "ff55ccb7-a4be-4553-84a0-7842367a58d1",
          "name": "identifiers"
        },
        "response": {
          "id": "05df8e9d-4004-490d-bcb6-15698a729b87",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12dc1cf6-8390-4d9d-8569-dbc57acbc129",
        "cursor": {
          "ref": "c018bff8-5b02-4990-b1c5-cb6e6e979173",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "64ba1095-1ab7-4b06-bfcf-80641d5c9b5a"
        },
        "item": {
          "id": "12dc1cf6-8390-4d9d-8569-dbc57acbc129",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f0b2bd2a-a97f-4762-a3af-7b074734a77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12dc1cf6-8390-4d9d-8569-dbc57acbc129",
        "cursor": {
          "ref": "c018bff8-5b02-4990-b1c5-cb6e6e979173",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "64ba1095-1ab7-4b06-bfcf-80641d5c9b5a"
        },
        "item": {
          "id": "12dc1cf6-8390-4d9d-8569-dbc57acbc129",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f0b2bd2a-a97f-4762-a3af-7b074734a77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152d6c3d-f3e0-4f10-86c3-a8d010a45db2",
        "cursor": {
          "ref": "7e3f9384-9fa3-4f3b-8afa-421abe813d4f",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8b53fdf1-e03f-469c-ba2e-7fe8ab211fbc"
        },
        "item": {
          "id": "152d6c3d-f3e0-4f10-86c3-a8d010a45db2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d3d62716-3840-4ab6-a064-c777a6a71d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039fd676-5f9e-4ff3-ae6f-2fc742c202fe",
        "cursor": {
          "ref": "8a168216-bd51-4ee6-a192-dd071647ef5f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1331a37b-9ba7-4232-a559-a0031d48fd2e"
        },
        "item": {
          "id": "039fd676-5f9e-4ff3-ae6f-2fc742c202fe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a3b67c71-3448-47cc-8513-43bfdfb59274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6561b2e5-6e5a-410c-9050-80c0f8a9a8b8",
        "cursor": {
          "ref": "1807609e-e8e4-4eae-b217-639983810872",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8b9db18a-a9fb-496c-b466-3f5a3093e9b2"
        },
        "item": {
          "id": "6561b2e5-6e5a-410c-9050-80c0f8a9a8b8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a60e031a-b033-4cbb-b201-9bf24d60649f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4be7e93-de96-4412-bd6f-16fbb59bffde",
        "cursor": {
          "ref": "d346711b-1d42-4985-a4de-3282b5c4ff5a",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "22776135-82e5-431b-8cde-43d355099e2a"
        },
        "item": {
          "id": "a4be7e93-de96-4412-bd6f-16fbb59bffde",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "746f39c0-f2bd-475f-829b-175ef0c24eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033ed2d5-2adf-45ed-9b0e-51c67c3788cf",
        "cursor": {
          "ref": "c5e6c5de-a6f1-4019-8b0d-e0cba5c7ae21",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "96544ac5-89a1-4abe-934e-3f112d77a1a4"
        },
        "item": {
          "id": "033ed2d5-2adf-45ed-9b0e-51c67c3788cf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "51258e97-50a9-43d4-a521-7444584253db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494ac2e9-4971-4114-88e6-18000d8a283e",
        "cursor": {
          "ref": "7fa4c732-820d-4bf3-b083-6326ab7a2730",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1b94fdbc-f436-44a0-8f7c-04ea642f00e3"
        },
        "item": {
          "id": "494ac2e9-4971-4114-88e6-18000d8a283e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ac034eba-0e4f-472b-8611-81d6b0abda1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3792d477-fce8-41f2-b372-1bff78914dd8",
        "cursor": {
          "ref": "b0f87280-b412-4a71-bcc7-2d0cc2145b11",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a9238bbd-bdba-4c4b-8703-3d3811ed693a"
        },
        "item": {
          "id": "3792d477-fce8-41f2-b372-1bff78914dd8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "90a36803-2ec0-4585-b971-fe1555cffd47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde916a7-cfa3-4efb-b65b-98d294788b4f",
        "cursor": {
          "ref": "1de5c38e-9555-466d-9eb7-5ac34a2b5227",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b9856efb-54f6-444e-936b-dcfd3c450d86"
        },
        "item": {
          "id": "cde916a7-cfa3-4efb-b65b-98d294788b4f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "eee5f92a-5d33-4acc-afde-c2aea67959e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd323dc-e10b-4a66-a2f2-3bca5109b17b",
        "cursor": {
          "ref": "b6277f09-911d-48b7-adb1-4f5c4e68a973",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2e9ed365-ea39-452a-a6c4-e8dc9214fa3a"
        },
        "item": {
          "id": "7dd323dc-e10b-4a66-a2f2-3bca5109b17b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a462ab17-11dc-4503-9fc9-7e7adea9b2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b38b306-9029-411c-a2bf-eed03eaadfa8",
        "cursor": {
          "ref": "cd69b389-e2d4-4c88-81c7-049c30343a62",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "90565065-0f59-4c7b-85b9-aca732d521e1"
        },
        "item": {
          "id": "2b38b306-9029-411c-a2bf-eed03eaadfa8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "98589918-8868-4bb9-aaef-3f0e860f2f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fd928e-1af2-4b71-9cab-b80ef25f7295",
        "cursor": {
          "ref": "be89bdf8-d8f0-4d7d-adc6-198fe4be44fb",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b8a0e73a-1ea2-4311-b2a6-e0d085fe2aa9"
        },
        "item": {
          "id": "c1fd928e-1af2-4b71-9cab-b80ef25f7295",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e4de74ff-c6e7-4616-934a-8487bdfdfca6",
          "status": "Created",
          "code": 201,
          "responseTime": 1684,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "77d9b435-521f-4ce3-808d-0b7253463797",
        "cursor": {
          "ref": "a1277bed-f0c0-4256-8f01-ca1fa48c3287",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ff8f835a-328e-480d-bbea-01a127dc1f82"
        },
        "item": {
          "id": "77d9b435-521f-4ce3-808d-0b7253463797",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c271c0d2-9c5c-42e7-a6f0-471c07c0e3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1161,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08492c4a-296d-406d-84d6-aa7cee797a20",
        "cursor": {
          "ref": "ba797eba-bfbf-4e1a-958f-3c149504c22d",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "94d91fdb-c367-4e31-a8a2-3281f58fbc40"
        },
        "item": {
          "id": "08492c4a-296d-406d-84d6-aa7cee797a20",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "23af22c0-2124-41f4-b73a-006ddf649b42",
          "status": "Created",
          "code": 201,
          "responseTime": 7338,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8141fc61-b552-4bfd-bf1d-05a78142f3be",
        "cursor": {
          "ref": "72c80f3f-3b02-4167-9173-1825ced3805d",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0a8a0e6f-7f67-4bd3-9409-4e857a61c042"
        },
        "item": {
          "id": "8141fc61-b552-4bfd-bf1d-05a78142f3be",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d398a086-ccce-422a-b34a-2789680d9bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0b8f32-e3fa-4f19-b754-bcf2cd423fff",
        "cursor": {
          "ref": "d04dd42a-39da-4321-9ed1-bffaa068d927",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "15855fc8-b9b0-4c94-87fb-f923af9b0b90"
        },
        "item": {
          "id": "4c0b8f32-e3fa-4f19-b754-bcf2cd423fff",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "13321eaf-6c7c-4bbd-b8fb-1df502690ce8",
          "status": "Created",
          "code": 201,
          "responseTime": 4481,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b4ebb5c1-90d6-422b-ae5c-c8a19fda8d2f",
        "cursor": {
          "ref": "01048a16-55ca-43e1-b9e7-26d8ad37f511",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "911207bf-4492-4079-800f-e2849949724c"
        },
        "item": {
          "id": "b4ebb5c1-90d6-422b-ae5c-c8a19fda8d2f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3b8abf35-41ba-4f03-8ed9-be45a60e8ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baff3276-7993-4919-bcc6-254f4537a9b2",
        "cursor": {
          "ref": "fce97eac-eb6b-4600-b7be-2b55abc2f879",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8570da0c-b8a7-4e22-b217-67293276aa7f"
        },
        "item": {
          "id": "baff3276-7993-4919-bcc6-254f4537a9b2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6b043453-2c33-46ed-b200-480e13e12071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e9149c-685e-4987-bd30-118e78764482",
        "cursor": {
          "ref": "9f323efd-c3dc-44c0-8ce7-cbff465e22fb",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a074c311-5e1d-48ae-a7c0-3e81e8d28e22"
        },
        "item": {
          "id": "97e9149c-685e-4987-bd30-118e78764482",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6d9462a1-77ec-415f-a405-9093b8e191be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbd5ec9-2ca9-4a21-9e8e-b06d4364314f",
        "cursor": {
          "ref": "8b9ca664-87d3-4590-85c9-5487ee0b784c",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "540df5c1-baf5-4d34-9d89-a5cd61ec164d"
        },
        "item": {
          "id": "2fbd5ec9-2ca9-4a21-9e8e-b06d4364314f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "60d98a76-eec3-477c-bbfc-2928859351ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942e2e31-a4d1-4efa-b78f-ed6fedc853f1",
        "cursor": {
          "ref": "9a66a8b7-7c4c-48f4-b483-70b355ddaf80",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e676d376-e612-4e24-a812-51e760946bc2"
        },
        "item": {
          "id": "942e2e31-a4d1-4efa-b78f-ed6fedc853f1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dab73c33-f445-4f06-9bb7-ae7adfba8093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bbf2c0-5c03-4bbd-adce-8b30c658a308",
        "cursor": {
          "ref": "a019acf8-bfd5-40be-b628-1611c3b3314d",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ec85c37c-6178-414e-9a3d-bc4157f7322f"
        },
        "item": {
          "id": "e5bbf2c0-5c03-4bbd-adce-8b30c658a308",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "57993a3c-4b2c-4633-b632-f0c1e76e25bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc96dd89-2587-4304-b557-c28853196fd0",
        "cursor": {
          "ref": "2a3cf2db-8f9f-42bd-8942-7dd1bc9f2a4e",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0f72eb76-f440-42fd-82bf-28ae9867893e"
        },
        "item": {
          "id": "fc96dd89-2587-4304-b557-c28853196fd0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c73740d5-60a8-421a-a89b-f18e5a276865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a967ab1d-9166-49bc-ad2c-b9ba1875b83f",
        "cursor": {
          "ref": "a0c319f3-3e76-413e-8537-2a0189469958",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bed1c17d-09c3-429b-b9bc-06f633c91af8"
        },
        "item": {
          "id": "a967ab1d-9166-49bc-ad2c-b9ba1875b83f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f5f1af3d-abb7-425e-8616-ee7c2b25b808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306d1f0a-aa22-47b9-aba1-d0281a0d99bf",
        "cursor": {
          "ref": "38fba3db-e18b-4e1a-9230-5da061021f74",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d11684a6-25c0-411c-a684-bc3b29f2a20c"
        },
        "item": {
          "id": "306d1f0a-aa22-47b9-aba1-d0281a0d99bf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4661a814-b342-4d14-8e68-8c9596115e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9747b4-fa2d-409f-8031-2aa532a09541",
        "cursor": {
          "ref": "2d1f6899-714a-416f-bce1-93091d3c914e",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "81beae5a-da97-4e2c-bb4c-b72b538a8e34"
        },
        "item": {
          "id": "ec9747b4-fa2d-409f-8031-2aa532a09541",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "00053538-2948-4956-a3da-3a115133b80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540ea45d-ed35-4bfa-8995-409650b4ab27",
        "cursor": {
          "ref": "66899c9a-9a1b-4cd1-bcd7-ffea09ca5e1f",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "90852305-7294-45fc-952d-70273d7d73e8"
        },
        "item": {
          "id": "540ea45d-ed35-4bfa-8995-409650b4ab27",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "74a48114-7f64-47fe-aef7-4765a3ad5818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072a5d1e-fffc-4f5f-96fa-f830143ede5e",
        "cursor": {
          "ref": "f980b40c-48fe-47b4-a53d-15650f5907f4",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ae121f38-3e2d-4b8b-9456-858d11bcbb48"
        },
        "item": {
          "id": "072a5d1e-fffc-4f5f-96fa-f830143ede5e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ee6428d0-8d3d-4637-83e4-b810a753a477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d239f88e-1861-4ce0-9667-079ff2bb0e44",
        "cursor": {
          "ref": "ef672796-ee32-4916-b9b7-139e3210d745",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "344f0475-5011-4268-b399-697fc188baf9"
        },
        "item": {
          "id": "d239f88e-1861-4ce0-9667-079ff2bb0e44",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c9ab6f25-de48-4b29-9eae-9c500d1c406e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e70ff4-e431-4f1f-9674-edcfd5772e23",
        "cursor": {
          "ref": "5f0024d8-154c-4188-aa29-be9403c037b7",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ee6d298d-c64b-4659-9350-0ee7cad916bc"
        },
        "item": {
          "id": "c5e70ff4-e431-4f1f-9674-edcfd5772e23",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "35236578-0bfd-49df-8411-6d3cf65f7ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fe6f48-e0d2-4e52-ab47-161d712b970d",
        "cursor": {
          "ref": "fe82fe42-6ecc-44eb-a047-25b715730275",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fd70a87c-9f54-4638-9ced-fbced4347c83"
        },
        "item": {
          "id": "b8fe6f48-e0d2-4e52-ab47-161d712b970d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0e1d7034-336c-4003-97e7-6d4c977ede2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ab8794-a3b2-4d5d-9919-2453fe0fb600",
        "cursor": {
          "ref": "7eb3075e-64b1-4b0c-9e41-d9d8422e56f8",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2b778417-b1de-4fa9-ae7c-9c2cd032384f"
        },
        "item": {
          "id": "42ab8794-a3b2-4d5d-9919-2453fe0fb600",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "241db668-bd46-4594-bc0c-805c7b4b65cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd62457e-56c1-4f59-ac10-55f4e463ab06",
        "cursor": {
          "ref": "4bd75740-8cbf-4ed7-a8d1-3fa60eb29d38",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "abe65d4a-8b47-4777-a1eb-010e24a37b4f"
        },
        "item": {
          "id": "fd62457e-56c1-4f59-ac10-55f4e463ab06",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "12ad0a18-8e9d-4e98-af52-8fc04aab5758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f91df7-e4ea-4203-96ec-d9d52be7a85f",
        "cursor": {
          "ref": "5f028642-520a-4f46-89c3-5b8220b35116",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cbedc7b7-4bca-47ad-90ca-b9e8c3065137"
        },
        "item": {
          "id": "34f91df7-e4ea-4203-96ec-d9d52be7a85f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "792f9f82-be0a-4ad0-8831-861448754a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c23cfd-1c0b-475a-853b-c1a3b01b0e02",
        "cursor": {
          "ref": "414e5152-cc9d-4330-8428-8b4328242882",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1fece231-91ce-4f15-a95b-98635903b2fa"
        },
        "item": {
          "id": "27c23cfd-1c0b-475a-853b-c1a3b01b0e02",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b566fce0-f000-48fd-863e-714d2e635b99",
          "status": "Created",
          "code": 201,
          "responseTime": 1814,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e763ed09-18d9-42de-b142-de33baf8f17a",
        "cursor": {
          "ref": "88b797d0-7ce8-407a-9f2e-b1f0b0035fdf",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "496a41ac-fd2d-4023-a90b-eb5de577efd4"
        },
        "item": {
          "id": "e763ed09-18d9-42de-b142-de33baf8f17a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "10fe71f2-e597-4bb6-a194-36afe8470c0b",
          "status": "Created",
          "code": 201,
          "responseTime": 2365,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9e4787c0-103d-455e-abe5-777f94f09fc6",
        "cursor": {
          "ref": "a4288d3d-17ca-4587-8624-7fb32403f46a",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5b665dc1-87a4-40d3-990c-c94797662d92"
        },
        "item": {
          "id": "9e4787c0-103d-455e-abe5-777f94f09fc6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "dafb0e4d-6322-4662-9764-5891438a18ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e3c057-32ca-4556-bb46-de6825340b84",
        "cursor": {
          "ref": "e66531c0-15a3-4e7f-989d-99c4be779630",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "aed6245e-6730-4230-a7e7-3e451a7dd124"
        },
        "item": {
          "id": "c2e3c057-32ca-4556-bb46-de6825340b84",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bc4713cc-bf77-42f7-9aaa-6f19ccfa7708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86aad98a-efad-440d-afd0-6d27b017ae7e",
        "cursor": {
          "ref": "dd9d29bb-bd1e-4eb8-857a-6247b6c564de",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1704a047-f260-4aff-b097-7620557ef0cc"
        },
        "item": {
          "id": "86aad98a-efad-440d-afd0-6d27b017ae7e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9d91a3bb-a884-4069-8fa0-0a2b5bced689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c026254d-c6d1-4a32-8d53-e772c8f5daca",
        "cursor": {
          "ref": "75ff9cf8-ab18-403c-ae0e-67b8cae68dfb",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "82145874-731d-4047-accd-7b64b8fdfee3"
        },
        "item": {
          "id": "c026254d-c6d1-4a32-8d53-e772c8f5daca",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a7f4bc9d-16a0-430f-8ac7-947dde10f60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cbaa58-cf64-4f61-b6c2-6793c9f36c7c",
        "cursor": {
          "ref": "f5aea504-e69e-49e8-81c7-a0a28fef2022",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "12ed85db-d8a1-40c6-af4c-92f072baa075"
        },
        "item": {
          "id": "f6cbaa58-cf64-4f61-b6c2-6793c9f36c7c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bbfe782e-2ebc-47b6-a0ec-bf4232b591f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484550dc-555a-4bea-9b66-445700780f25",
        "cursor": {
          "ref": "db2753f4-d299-4ddd-8a92-4676dd0519d9",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "38da90a7-80b0-453c-b880-a0aef7e0eebf"
        },
        "item": {
          "id": "484550dc-555a-4bea-9b66-445700780f25",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7642a4d8-8fac-43f3-8fc5-e075a35ff922",
          "status": "Created",
          "code": 201,
          "responseTime": 2297,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "52af48ad-05b7-4801-af7b-998fd20db2d4",
        "cursor": {
          "ref": "e45c5c7a-f591-445a-8df1-af0c1c5222ca",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8ac6947e-1942-40d8-ab9f-d24d288b0dd0"
        },
        "item": {
          "id": "52af48ad-05b7-4801-af7b-998fd20db2d4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "aef903b9-2547-437d-90c9-2963ea5d2bf3",
          "status": "Created",
          "code": 201,
          "responseTime": 2464,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "865b2466-40fd-4aa6-9545-c0f938a8c175",
        "cursor": {
          "ref": "b4fc885c-9674-4e16-a359-6e60c2468a65",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1ed02c2c-acab-47bd-9257-f7bdab9cc4ce"
        },
        "item": {
          "id": "865b2466-40fd-4aa6-9545-c0f938a8c175",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "16e7b23d-4b9c-4498-977d-3b6c31166b9e",
          "status": "Created",
          "code": 201,
          "responseTime": 2420,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "99201f0f-b9c2-4b70-b844-3a9ddecd03a1",
        "cursor": {
          "ref": "f82601c1-c058-436f-b919-b15315680de5",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b6cb3463-0cfa-4c10-b791-716c20462dc6"
        },
        "item": {
          "id": "99201f0f-b9c2-4b70-b844-3a9ddecd03a1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "cd356bb8-616d-405d-84ae-0b549bd5eb4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64df62f-b90b-41b5-a7fc-11fc56a5bdfb",
        "cursor": {
          "ref": "2835cd88-79d1-43b2-a0bc-d67c8b4827d0",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5a6b76c5-5b8d-4460-b4ad-cc6a560abb12"
        },
        "item": {
          "id": "b64df62f-b90b-41b5-a7fc-11fc56a5bdfb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "02146cbb-b6e7-45bf-8afe-f69538b9c30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422f731f-2a45-451a-bd3c-44e7033b5f12",
        "cursor": {
          "ref": "d0880fc2-b1df-4364-8570-42381f93d718",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e21aa2c6-fb14-4359-916c-f4019819ba67"
        },
        "item": {
          "id": "422f731f-2a45-451a-bd3c-44e7033b5f12",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "12c467b5-560f-481e-9e79-d49d45f051d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b7d626-82ff-4350-a1ce-a99d24bc031d",
        "cursor": {
          "ref": "984b4886-15f4-4c1f-b922-b96924c4309c",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ab977e05-877f-4662-8f8a-3089111e2b88"
        },
        "item": {
          "id": "75b7d626-82ff-4350-a1ce-a99d24bc031d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3d10f6a6-bb1d-4dbe-8291-e80239dfc599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dde7cf3-28a5-4190-b440-111ecdc4d299",
        "cursor": {
          "ref": "dba627fd-67ea-4c4d-ad58-4ef3c84d02b7",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e9530f2c-94c6-40c5-adde-57209b5ae2d2"
        },
        "item": {
          "id": "1dde7cf3-28a5-4190-b440-111ecdc4d299",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0f022407-074d-43bd-bc6a-afdf58c2d9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b14b08-b642-46d8-9b20-924abd04e69a",
        "cursor": {
          "ref": "e1e84211-fcd5-4c7f-b063-884d9158f34f",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e176eb58-4c23-46a7-b921-bc569157e953"
        },
        "item": {
          "id": "e2b14b08-b642-46d8-9b20-924abd04e69a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e21c97cf-8a17-4ffd-8fee-d44c81a0d25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30976138-5569-41af-a2bc-c47b6c2fb12f",
        "cursor": {
          "ref": "c1151ed5-3434-440e-a461-27a09d65819c",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "38a99e22-f830-4194-834d-b95549bd503d"
        },
        "item": {
          "id": "30976138-5569-41af-a2bc-c47b6c2fb12f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6877b42d-2657-4e47-a94b-9f117ae502e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f94641-93cd-431a-9e1d-84ee429914af",
        "cursor": {
          "ref": "a825b8af-07e3-4927-b2f2-c1b6e2a7e555",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "579a5f58-9702-4c32-aece-c7d64a22ee5d"
        },
        "item": {
          "id": "68f94641-93cd-431a-9e1d-84ee429914af",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "74433e2c-f061-49c3-a897-f764919d821e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bd3ef6-c864-4a8e-94ea-f459da70f737",
        "cursor": {
          "ref": "5e5de6fe-0ce5-4256-b0e6-ff79be62c158",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e26483c5-7501-4f81-936e-03984c126f71"
        },
        "item": {
          "id": "b8bd3ef6-c864-4a8e-94ea-f459da70f737",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0e955843-ca80-4c71-9d31-6c91e90abb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e9a3e1-837d-4e77-b338-c76f8a8a4f11",
        "cursor": {
          "ref": "bf64e803-c047-4354-9eab-f82f8c67e03e",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "86169080-2d6e-45f0-8998-15ec5a98272e"
        },
        "item": {
          "id": "c7e9a3e1-837d-4e77-b338-c76f8a8a4f11",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "76a84160-84ec-4640-a68d-f15bf34b3556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24334767-bc79-47a6-84d5-10c729c42449",
        "cursor": {
          "ref": "85c9f1dd-a421-4d62-9920-e5190202da20",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e671018a-90a1-4c6d-a00c-4064eae83a85"
        },
        "item": {
          "id": "24334767-bc79-47a6-84d5-10c729c42449",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "316ea721-c622-4d95-b3b5-4060d29b6a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ecce733-1406-4521-957c-83ed262cda6d",
        "cursor": {
          "ref": "7318a7f5-626e-4e6b-a08a-e5df97bbc15b",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b26e8d2d-bed0-4ffd-81d4-f2de94d0df8f"
        },
        "item": {
          "id": "9ecce733-1406-4521-957c-83ed262cda6d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a3a63346-0aee-41f3-96a8-2f7e6db945ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446f147e-8699-43df-93fd-2a71e74a2c75",
        "cursor": {
          "ref": "88c010b0-d3cf-4fce-a6bf-1456ca3424c7",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "007ce03e-23b8-4d69-bd71-36537231f6d3"
        },
        "item": {
          "id": "446f147e-8699-43df-93fd-2a71e74a2c75",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2fdfdc6e-2bb9-4899-a99b-6011f06a9537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8a2a0a-51b2-4fef-abe8-a3980f61545b",
        "cursor": {
          "ref": "b57e0fb3-0aad-4961-bd03-c36345d1ff7d",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7b1c5bd2-aa58-4b5c-abed-4205298b01b9"
        },
        "item": {
          "id": "bb8a2a0a-51b2-4fef-abe8-a3980f61545b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0f8fab42-4399-4f63-815c-dd1cc72e617d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a421fbf-3697-4442-9bf6-992684874edd",
        "cursor": {
          "ref": "f0d4e506-870c-49f8-a02d-9e859782c08c",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5dc10c8b-6964-457c-9115-a2e916c4512f"
        },
        "item": {
          "id": "1a421fbf-3697-4442-9bf6-992684874edd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "94a6d746-52d2-4373-bf5a-b8d281b8ac8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa1b34d-82b3-4e0c-a399-d95aaafeb53c",
        "cursor": {
          "ref": "f48f84b8-b956-44ae-b5c7-de19bd0ee83b",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5f85a788-4c9e-43a0-8734-119ac927cb7c"
        },
        "item": {
          "id": "2aa1b34d-82b3-4e0c-a399-d95aaafeb53c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d69a4e70-ba13-4a58-889f-28cd7a77538b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d2b103-33c6-4209-b92f-21d9e224afe0",
        "cursor": {
          "ref": "22eaa8ff-cc71-488d-8957-eca0a1e31778",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0556c123-dc2f-46f4-872b-2130837dd0c4"
        },
        "item": {
          "id": "66d2b103-33c6-4209-b92f-21d9e224afe0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "12308643-db21-4790-bf59-0bdccd238ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b479c1-dde2-4670-9508-e2e0b0e8862a",
        "cursor": {
          "ref": "be2684b2-3e81-4f7a-add5-0c1f8d7458db",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "806062eb-4418-4465-a29a-3d8d6eb9ac8e"
        },
        "item": {
          "id": "85b479c1-dde2-4670-9508-e2e0b0e8862a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c310a443-d146-433d-8167-c4ee99351831",
          "status": "Created",
          "code": 201,
          "responseTime": 2536,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "263c9ec7-9603-49c4-bf72-7f94a5aedd84",
        "cursor": {
          "ref": "02112c08-5fe6-4f19-928b-29eae024947a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "912c6729-66be-45bd-b86d-4d8619ccf956"
        },
        "item": {
          "id": "263c9ec7-9603-49c4-bf72-7f94a5aedd84",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "21ec1be9-181f-4186-8839-6f5d9e515ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974396db-0efa-4529-bc1e-66bfbd81bf79",
        "cursor": {
          "ref": "582e96f0-f56e-4f24-a1da-e785b76b6b27",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d7b34da7-1932-4c3e-8a38-0b47962b44f4"
        },
        "item": {
          "id": "974396db-0efa-4529-bc1e-66bfbd81bf79",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "63100361-7078-46e3-bf22-2bd38066b28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd7f4c0-9a00-4ec2-addd-0ea98f600fae",
        "cursor": {
          "ref": "abf1ebe9-0011-4ec0-96f3-63ecc0d56409",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "38383bd5-868f-4367-8740-244c16eba7f9"
        },
        "item": {
          "id": "9bd7f4c0-9a00-4ec2-addd-0ea98f600fae",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "010ba0ea-7dd9-42cb-85da-93e39ac4199b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad4fdb0-d15d-4258-be69-6ba2ef6e9614",
        "cursor": {
          "ref": "89676fc5-aeb5-4aae-869d-57390d915005",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a0a95100-39d7-4fcb-bca0-98a551982795"
        },
        "item": {
          "id": "aad4fdb0-d15d-4258-be69-6ba2ef6e9614",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ba088911-34a0-48a7-a61f-19702945dbc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5514ac-b380-4522-897b-6622ad02b864",
        "cursor": {
          "ref": "f3c970e4-f9f0-4e6b-ba99-fbc45f708257",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "57322803-4a23-418c-9d67-8297d9f42ad6"
        },
        "item": {
          "id": "eb5514ac-b380-4522-897b-6622ad02b864",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0ddd623f-af05-4690-8f44-0928bf0d9367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d3291f-242b-4b4e-933a-423a25b2615f",
        "cursor": {
          "ref": "2113fac7-2e1a-4197-bdb5-d6210133f501",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "51c1ecd7-dc0c-4877-a938-aae35a5f101f"
        },
        "item": {
          "id": "c4d3291f-242b-4b4e-933a-423a25b2615f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d466fc2f-eea9-4521-8b65-8aa4709118de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd90e92-d7d2-43f2-9735-20add0b41d07",
        "cursor": {
          "ref": "f4168b3c-1151-4c49-b5bc-46286fb61dc9",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ff64605f-4a88-4ac3-8328-b36671be4c8d"
        },
        "item": {
          "id": "0bd90e92-d7d2-43f2-9735-20add0b41d07",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bb289923-9971-416b-b1d8-b46a38a2103d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8612c3-3bd0-4a60-950c-80b4769191f5",
        "cursor": {
          "ref": "d97c9cb8-d25b-404b-aaa9-2480a394c87b",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "768245d4-26c4-42b1-a6d5-e2ebc3b4fe0d"
        },
        "item": {
          "id": "4d8612c3-3bd0-4a60-950c-80b4769191f5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4a132642-252a-4ed3-b777-037347ae2c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c48a29-0fcb-4b87-9ad2-c703b60c448d",
        "cursor": {
          "ref": "93272bb4-d46b-411a-875f-90b62120c5a9",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e129d814-4094-4fbb-b113-54a0e5a54127"
        },
        "item": {
          "id": "96c48a29-0fcb-4b87-9ad2-c703b60c448d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e38d8815-130d-4588-87fc-fb7a55c36978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ad0fed-9383-4c9b-b295-e9bed3a69c1f",
        "cursor": {
          "ref": "9a6fc0c1-b709-4325-8258-439142fcfaa4",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "34e01d49-d409-4383-a1ad-37c49c99e264"
        },
        "item": {
          "id": "b7ad0fed-9383-4c9b-b295-e9bed3a69c1f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3195eb77-7b54-41e1-9729-64ea33d37ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41190e88-d181-405a-a476-11ed27e6481a",
        "cursor": {
          "ref": "030a8856-5e79-4935-a83b-cdffbcdaecd4",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "374dba89-1eca-4c5b-a444-f4138077c4db"
        },
        "item": {
          "id": "41190e88-d181-405a-a476-11ed27e6481a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9154a98f-3e1e-47e2-ac56-437773a3706b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0802c7-f42b-455a-bb86-ce9b2830a38b",
        "cursor": {
          "ref": "c6e47b94-944a-4069-8ed2-1cc73abacf0c",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7bcabf27-4d1a-429a-9d93-912564907b6e"
        },
        "item": {
          "id": "ec0802c7-f42b-455a-bb86-ce9b2830a38b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "621c35bb-cba2-4a6a-b33a-ebfa86b9ab37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2254016b-b0b4-4fc6-af64-f108ded2bab6",
        "cursor": {
          "ref": "acf1cbbb-fd40-494a-95c8-818ab77f1484",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "794b1ed7-1714-4a2d-aff0-bcbb736c2b4c"
        },
        "item": {
          "id": "2254016b-b0b4-4fc6-af64-f108ded2bab6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c77e03de-342f-44db-9893-9a4ba50c6c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2257148c-fd86-439b-b58d-3692a94df7a0",
        "cursor": {
          "ref": "fea5a989-b7cc-4ffb-a9c2-23cf3ac88b9d",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1a7b6c52-f83a-43ca-883a-d727d18567f4"
        },
        "item": {
          "id": "2257148c-fd86-439b-b58d-3692a94df7a0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fc591d8a-cec1-4bff-b27e-92ca70cd2de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e2d799-c202-41c3-928e-2b12a55bcc5f",
        "cursor": {
          "ref": "3024b2ab-f173-4033-a8d1-5966f6799f61",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "75000199-ab73-4140-9bab-cd1d7d3664b7"
        },
        "item": {
          "id": "b0e2d799-c202-41c3-928e-2b12a55bcc5f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "69a053b7-030c-4497-9dd7-482d4bbdb8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab3753b-0f1a-4246-af0d-77f738436829",
        "cursor": {
          "ref": "085140c3-e756-43b0-9ac0-614ab724d25f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "04784634-f342-4d99-bbe4-ee598e2d4f57"
        },
        "item": {
          "id": "5ab3753b-0f1a-4246-af0d-77f738436829",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5afc645c-480d-4355-b295-515f3505d8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02876ae-b274-439b-9806-d9cf887eb66d",
        "cursor": {
          "ref": "5ba9e66f-a144-453a-8b79-3b56ce605aee",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c8c422a0-6ace-438b-a1d8-d60727a1ad21"
        },
        "item": {
          "id": "a02876ae-b274-439b-9806-d9cf887eb66d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8d9a7caf-a2de-422c-b524-4af3620e039e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ea98c9-4d08-41ff-a1fd-f72b732cfed4",
        "cursor": {
          "ref": "b8d59274-d1f8-4cae-900f-2d49db506d2b",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ff9c1823-e6b7-4804-8e3d-483e20a93ebd"
        },
        "item": {
          "id": "b6ea98c9-4d08-41ff-a1fd-f72b732cfed4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c41470b1-6d58-45d9-8a4b-800f632e946f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe17600c-eedb-4733-a338-e939fdaf4f76",
        "cursor": {
          "ref": "dc472f68-3075-4ede-8717-8e37063cfeeb",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "16ca961a-3ed4-4545-afc2-f2afedd37790"
        },
        "item": {
          "id": "fe17600c-eedb-4733-a338-e939fdaf4f76",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "605cb554-2279-48a6-89f9-76efbcfd9605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad25c1e-5bc4-461b-9ff0-3bbcae28e0a3",
        "cursor": {
          "ref": "76540a3e-47ce-4c42-906d-ffc752e38b1d",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ebe38543-1268-4070-ae56-5278e7fe2304"
        },
        "item": {
          "id": "dad25c1e-5bc4-461b-9ff0-3bbcae28e0a3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "eb50305c-437f-40f0-9b0e-c48b39be44ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52adb3eb-ab86-4f51-8eb4-9b1bbee2b7bc",
        "cursor": {
          "ref": "86e08023-1868-40fc-81f1-59785f67d19b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5531468c-a2af-41ad-957e-182b0289f2fa"
        },
        "item": {
          "id": "52adb3eb-ab86-4f51-8eb4-9b1bbee2b7bc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5a1fa9ff-1803-4442-a97c-6c0011dcb451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694799df-ecaa-4499-9d21-83f4454f69fa",
        "cursor": {
          "ref": "d30a0c92-37e8-4d09-a8f1-691048b08483",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e9808ed6-1f23-4013-819f-d0d00d28fff5"
        },
        "item": {
          "id": "694799df-ecaa-4499-9d21-83f4454f69fa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4e58b6cc-cae5-4205-950d-bfbf939dba06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05d9b79-fe27-4910-8ab1-1bf874944946",
        "cursor": {
          "ref": "43165623-f1d9-48ff-8cca-a69e1f91ff47",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0feafe0a-10c6-40fa-b14e-50e0ffc6bf27"
        },
        "item": {
          "id": "b05d9b79-fe27-4910-8ab1-1bf874944946",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e0e3b575-8c41-4e71-b634-3617f44a3460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412cf1f6-d6e3-4097-8c6a-6f369e78a658",
        "cursor": {
          "ref": "1f98ceec-59dc-4bdf-8223-0b52a794ef86",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "42eabf70-7aa5-4c45-b15d-7dd7be603167"
        },
        "item": {
          "id": "412cf1f6-d6e3-4097-8c6a-6f369e78a658",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "91878c26-6ad6-4ca9-b846-c298d30dd023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c9008f-440b-48c1-b22a-200f525406da",
        "cursor": {
          "ref": "e38db8e6-335f-4bb2-bfc5-8b62b6f3f0e1",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a9ae9c31-af1f-4098-85dd-1806decae634"
        },
        "item": {
          "id": "c3c9008f-440b-48c1-b22a-200f525406da",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "15d8b021-51cd-424d-bec7-cb5700791729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45679d34-2728-499f-a3d2-0427f0163116",
        "cursor": {
          "ref": "f2988398-755e-45a2-954c-11e99da10338",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "85fd4fd5-8541-4725-a148-148c534d19fb"
        },
        "item": {
          "id": "45679d34-2728-499f-a3d2-0427f0163116",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3477a1fe-3343-4a1c-af80-084e982b14ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9172586b-6b5b-4604-b955-706e0070fd85",
        "cursor": {
          "ref": "7c6978ae-195c-4b1b-9e4e-07df7fe04195",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a4b5f8c3-ef12-4021-aca8-f8ac8b075fb0"
        },
        "item": {
          "id": "9172586b-6b5b-4604-b955-706e0070fd85",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "21289bfb-6db2-4530-8a44-e6ace85cd6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a93d4f-09af-4665-b224-9b58a8ebf172",
        "cursor": {
          "ref": "f9f4c9a2-e987-4b4f-87e9-30efa8aa4b03",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e5953dcf-87c6-48da-8508-76390a11128a"
        },
        "item": {
          "id": "57a93d4f-09af-4665-b224-9b58a8ebf172",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3ce0735e-763d-447d-8f05-caaf24d8632a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4ad9d7-3df1-44a6-b9b9-4c2843bf7a2d",
        "cursor": {
          "ref": "6a9940bd-472d-4f59-ae5c-9eababbea3a9",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "02b0c416-a17c-46a0-9756-c2b4656dfe58"
        },
        "item": {
          "id": "3b4ad9d7-3df1-44a6-b9b9-4c2843bf7a2d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8a6452f9-b20a-4363-8ac5-3b9d070fc74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578c652b-d7a5-4817-bd4a-bb7998911687",
        "cursor": {
          "ref": "b104d881-30ba-4d2b-a153-cc862b063110",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "213ef141-a2ee-416f-b4db-b29f27528afd"
        },
        "item": {
          "id": "578c652b-d7a5-4817-bd4a-bb7998911687",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6349e01c-f7bf-497a-8e92-03a346d9f82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048971d2-1d5e-413c-a359-d1e6c7f39af7",
        "cursor": {
          "ref": "e7616a4d-8908-4024-9225-d29d64416b53",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "80012f3d-f0cd-4836-bef1-c272d72d0265"
        },
        "item": {
          "id": "048971d2-1d5e-413c-a359-d1e6c7f39af7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a8586ec7-97f2-45fd-90e5-f0c732754ef7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1f45220f-7d0f-4675-9e5a-675929235c7e",
        "cursor": {
          "ref": "dbb6f6fb-26da-43d2-8ef9-a5eeec37dc35",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5431d241-af27-4500-81d1-a81720164de3"
        },
        "item": {
          "id": "1f45220f-7d0f-4675-9e5a-675929235c7e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4ceafc51-5f08-4165-a59b-134a735b48a6",
          "status": "Created",
          "code": 201,
          "responseTime": 2098,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4a5e014d-9763-4d63-a255-e34e2abb3cce",
        "cursor": {
          "ref": "f25e8aca-6d7d-422d-876e-c9acbbafea6c",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b6c1002d-40f8-4815-87ad-39e6157c6737"
        },
        "item": {
          "id": "4a5e014d-9763-4d63-a255-e34e2abb3cce",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b03e5b3c-06ce-49dd-869e-85fc760145b3",
          "status": "Created",
          "code": 201,
          "responseTime": 2181,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0184bd-bec4-4352-8221-858319b21f32",
        "cursor": {
          "ref": "b6ed0a67-9059-479e-a202-0c4b76ec06f9",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "bbf7a3c5-11d7-47d8-95af-20fcf31d6cf4"
        },
        "item": {
          "id": "ac0184bd-bec4-4352-8221-858319b21f32",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "02058caf-2a81-45e8-bb2d-1f6a1eadf635",
          "status": "Created",
          "code": 201,
          "responseTime": 2805,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2303b29d-0bb5-4c22-be6e-97d7e5b384c7",
        "cursor": {
          "ref": "0358932a-a39c-4276-a781-4a3f959e1886",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3afc995f-eb58-46d0-aff7-9ec1e3924be5"
        },
        "item": {
          "id": "2303b29d-0bb5-4c22-be6e-97d7e5b384c7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "081e507c-7145-4a93-93f7-96a0dfd9f3a5",
          "status": "Created",
          "code": 201,
          "responseTime": 2196,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54acd77-547b-4faa-898d-6699e5ee15c3",
        "cursor": {
          "ref": "6f15f1b3-65d5-40f5-9450-1ea8cf5b3fdd",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e0cc39f5-9042-44f2-8a76-889cca12426a"
        },
        "item": {
          "id": "b54acd77-547b-4faa-898d-6699e5ee15c3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "25960a75-f96c-4a14-b761-53081dd37c90",
          "status": "Created",
          "code": 201,
          "responseTime": 2374,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "baaf886a-e4fb-43d2-af91-f8fa70e7d5fc",
        "cursor": {
          "ref": "b686a1d2-de85-4fcc-b4c1-75568395bdc6",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f0e11406-d54b-4e1f-9bdb-a79738ef327b"
        },
        "item": {
          "id": "baaf886a-e4fb-43d2-af91-f8fa70e7d5fc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "41d8259b-2db7-4f80-bceb-1cf0382b2bf5",
          "status": "Created",
          "code": 201,
          "responseTime": 2045,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-24T00:39:09Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-24T00:39:09Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "5f589543-84db-47b8-b1c3-b34ea9571ff4",
        "cursor": {
          "ref": "545fed61-55e9-4510-b5fe-c6a44292e852",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2832120c-6f94-4d36-8cf9-8e549df7b500"
        },
        "item": {
          "id": "5f589543-84db-47b8-b1c3-b34ea9571ff4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fd1e4f79-89a7-46b0-bbac-395bac6d6d85",
          "status": "Created",
          "code": 201,
          "responseTime": 2117,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda31177-8af9-41a8-b12e-bae6ccbf7965",
        "cursor": {
          "ref": "ade35590-5006-4442-915b-d07472213d97",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "432f5af6-6a84-4024-bcd3-57316cab594f"
        },
        "item": {
          "id": "fda31177-8af9-41a8-b12e-bae6ccbf7965",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b3a07340-07aa-4c45-b113-c9b54bdb486f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda31177-8af9-41a8-b12e-bae6ccbf7965",
        "cursor": {
          "ref": "ade35590-5006-4442-915b-d07472213d97",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "432f5af6-6a84-4024-bcd3-57316cab594f"
        },
        "item": {
          "id": "fda31177-8af9-41a8-b12e-bae6ccbf7965",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b3a07340-07aa-4c45-b113-c9b54bdb486f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7931b692-1a64-4149-b962-bcfca6d0a639",
        "cursor": {
          "ref": "aff4a37c-4932-43b0-b579-84f29eaa3726",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9d4a3ef3-4e33-4e22-9349-8005a8caf0c6"
        },
        "item": {
          "id": "7931b692-1a64-4149-b962-bcfca6d0a639",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6b7db4d2-e7f0-400e-b4cf-6e16351e1b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0eb6fcb-6656-4434-98d9-406bd491cca0",
        "cursor": {
          "ref": "2c7569a4-4865-4d54-94b3-1112cae97716",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3bcb1e15-079d-44af-b67f-396510cc61c2"
        },
        "item": {
          "id": "e0eb6fcb-6656-4434-98d9-406bd491cca0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "14356c07-0056-4d98-9f73-f822a751be10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410286a2-a313-4ef7-ba64-1040330ee215",
        "cursor": {
          "ref": "c5e007bd-e328-4a1f-96a5-2e407976bc10",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4174c3ab-20d0-4c8b-baed-be9650c0987c"
        },
        "item": {
          "id": "410286a2-a313-4ef7-ba64-1040330ee215",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9e7eacd9-1f82-49d0-8bb5-17f46304898e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325ca703-cd6f-404b-bfc1-7a0ddc31a8ba",
        "cursor": {
          "ref": "9954dafb-c244-4db2-ac22-bb97946ec396",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6e8cf336-c1f8-4d45-b60e-6ae12232c73c"
        },
        "item": {
          "id": "325ca703-cd6f-404b-bfc1-7a0ddc31a8ba",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3165f3c5-0265-4d7f-8c98-8e2970b28373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07dae31b-ee99-408c-bd69-5f844a2346c5",
        "cursor": {
          "ref": "6b1c7bac-aced-469b-8947-22af41170d1c",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "be920181-d632-424a-9731-5f3090e09a93"
        },
        "item": {
          "id": "07dae31b-ee99-408c-bd69-5f844a2346c5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "07293123-f4b3-40be-886d-0d530ccabb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fbfe3b-d800-4355-a262-b7f6f5e539be",
        "cursor": {
          "ref": "cccf1e51-1960-4dbd-8314-d2a3c6731113",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5013660f-2925-4afb-ba71-1e925301b390"
        },
        "item": {
          "id": "35fbfe3b-d800-4355-a262-b7f6f5e539be",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "86864af0-5176-4042-83a0-9b9d04225446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d31308-17eb-4aa7-9860-a0f1d5e47aba",
        "cursor": {
          "ref": "14a38446-9666-443f-8106-325e0318c2f6",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "80346449-4069-4e84-90e3-e41a9308ffc0"
        },
        "item": {
          "id": "c6d31308-17eb-4aa7-9860-a0f1d5e47aba",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "678c376f-ffcc-45a2-9b32-9d171e33447a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fb47e0-1e46-42e5-a685-682deafd0287",
        "cursor": {
          "ref": "a2204d27-ce38-45d0-84f7-aaec3223bfb8",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "07e9ade2-96f6-48c2-aafd-a0ec2388bbac"
        },
        "item": {
          "id": "10fb47e0-1e46-42e5-a685-682deafd0287",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "264b2ca4-3b98-438c-a792-9d730d6b21d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21cad25-0534-4b8e-aa32-ce95751a1e40",
        "cursor": {
          "ref": "5a0ba521-618c-40a7-9f9c-667255adaec5",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b1803d64-209f-4614-b860-dcf7a819eeb7"
        },
        "item": {
          "id": "c21cad25-0534-4b8e-aa32-ce95751a1e40",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8175c2f3-c09e-4584-8788-7e215c8c3edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438e4fab-7429-4ad0-93b9-e105dafe7f8b",
        "cursor": {
          "ref": "b26f5eb4-dccc-49cc-a599-4fb067fb4419",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "21716faa-431b-4fdb-b153-bb8df6688dc5"
        },
        "item": {
          "id": "438e4fab-7429-4ad0-93b9-e105dafe7f8b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dffcfb93-ec9a-4f8f-a061-3d8d550392f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42096d44-8608-478c-af25-c83eb4967784",
        "cursor": {
          "ref": "9db525f8-a96e-4c08-be37-dcca4839489f",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a857e330-bab3-4455-98b4-dbc6e967c149"
        },
        "item": {
          "id": "42096d44-8608-478c-af25-c83eb4967784",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6bde94a0-3ca7-4ac8-a631-2137ee8fa36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df14de67-b63e-42a6-a2f2-cee75d15be0a",
        "cursor": {
          "ref": "0bff74ca-3230-47e0-a3c5-1774d8db2d48",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f09ac7f8-5170-47cf-b519-a0aa4ec04852"
        },
        "item": {
          "id": "df14de67-b63e-42a6-a2f2-cee75d15be0a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5377361a-7530-4af3-91b1-31e09800ecc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8d9868-229c-4223-b782-bd28c444029a",
        "cursor": {
          "ref": "4908e5c8-7a0d-4337-ad10-7b31d866e26f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "365f04ea-e87d-458f-b103-28b3cfa7b121"
        },
        "item": {
          "id": "5e8d9868-229c-4223-b782-bd28c444029a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "744a788d-88dc-4206-b3b4-5dcb33362f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7272ff6b-ef68-44de-bba5-1ce4a6a5fa5f",
        "cursor": {
          "ref": "37ad7530-d587-402d-b2fe-cc609788e31b",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "23167e6d-2a70-4058-b88c-e29b67a9cf96"
        },
        "item": {
          "id": "7272ff6b-ef68-44de-bba5-1ce4a6a5fa5f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fe36df12-ab14-47e0-9671-ca3bd7f61fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fe9804-4d27-419d-b1b5-67a68b24e46c",
        "cursor": {
          "ref": "58038b83-2396-46ff-8486-09f70c6ebc25",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "98d4f931-688b-416e-88e6-b5e0ffd4dfa7"
        },
        "item": {
          "id": "b9fe9804-4d27-419d-b1b5-67a68b24e46c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2ea2ced9-1cdc-4fdf-99d2-b82791aca2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfa751e-0535-4e5e-aa64-84a55ced1f9c",
        "cursor": {
          "ref": "98f4953f-dfba-434d-b6ae-279ae28fe7b2",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6a8e75bc-d72b-488e-a7c0-34c52501d698"
        },
        "item": {
          "id": "5bfa751e-0535-4e5e-aa64-84a55ced1f9c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4a3e4b98-9b91-4a56-a99b-627470cd0795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbcf705-2cba-4b72-90f9-62487b05c73c",
        "cursor": {
          "ref": "c4ef3d8a-9a8e-48e9-8b22-5f620b986c13",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bafee288-448b-42a3-8275-1223e95f49d4"
        },
        "item": {
          "id": "afbcf705-2cba-4b72-90f9-62487b05c73c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c985643b-2ee3-41a7-a61f-0e9d9bd0210d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d58bfc4-1a5b-4575-ae99-f95b4a118b38",
        "cursor": {
          "ref": "6c950f29-5267-48f4-9289-32c419d98d35",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3dc1436a-4ef0-4d50-8dde-2f414627d589"
        },
        "item": {
          "id": "5d58bfc4-1a5b-4575-ae99-f95b4a118b38",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0c4b6adc-8135-43f6-a1e0-e7b62096c9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b71cef-82c2-46d7-8a42-13a46ca84cb1",
        "cursor": {
          "ref": "6899bf76-2380-41bc-ad23-fa07456021cc",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b68f73f6-669b-43f8-90e4-c578d6bd20d0"
        },
        "item": {
          "id": "26b71cef-82c2-46d7-8a42-13a46ca84cb1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a580c5ac-47e2-4ca2-8ee4-d5b0fb090ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7095b6-b739-4529-80d8-4ca0016e4410",
        "cursor": {
          "ref": "22f066f7-939a-4b15-a7df-ca462b0eaa8c",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e3697f88-3b72-4fd6-8ef6-015fee0d48be"
        },
        "item": {
          "id": "da7095b6-b739-4529-80d8-4ca0016e4410",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c0ec7b5c-461e-4053-a0dc-debd809440a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb646916-8763-4f0a-83c2-418e48c8ab0e",
        "cursor": {
          "ref": "6a1da8f0-4d52-494e-9de1-68f3d24dd6dc",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "099a2973-969b-44f5-b050-919df33d8a9a"
        },
        "item": {
          "id": "cb646916-8763-4f0a-83c2-418e48c8ab0e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3886b207-967a-4df6-a3c3-17b84f47e7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad5ff9b-fb1c-467f-b84e-8bc73b2d1e8e",
        "cursor": {
          "ref": "b86bf38b-1371-4e7a-b5d9-5ad137ad8df0",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7d8a9492-1dfc-4376-90d9-f280b45dde6e"
        },
        "item": {
          "id": "6ad5ff9b-fb1c-467f-b84e-8bc73b2d1e8e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "24ff11af-71d2-4265-aed3-c8e6df62e38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab47e47-681f-4fe9-89c8-89b6b77004ba",
        "cursor": {
          "ref": "d1460587-9855-4ecd-a3f4-b245327b2cc8",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d779618d-15b1-4080-8d5b-c1112570b5c1"
        },
        "item": {
          "id": "2ab47e47-681f-4fe9-89c8-89b6b77004ba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "886613b5-0922-41c8-b10d-d0dc24d35a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d848eab1-e88f-4a9e-9679-460be2f12dce",
        "cursor": {
          "ref": "1ea0bf6e-1cd8-4c01-a18c-55bba486b0b8",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3a337950-9ccf-4aab-98ab-a36a6e01267d"
        },
        "item": {
          "id": "d848eab1-e88f-4a9e-9679-460be2f12dce",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b7ed2b49-8410-404d-9d73-1b01db712378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616d578a-9608-4090-bc1d-f9f104274a9f",
        "cursor": {
          "ref": "eb5a5b7e-80e2-45b6-8cca-fed921485acb",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "76498fad-7e20-4ddf-941c-7623845221ec"
        },
        "item": {
          "id": "616d578a-9608-4090-bc1d-f9f104274a9f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1850eac6-bc1d-4450-857f-a027069ea0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ee0ac2-e283-44ab-af73-070a7ee41a48",
        "cursor": {
          "ref": "207c3945-161c-4704-8608-c7ebf376e26a",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b9ea8080-e53f-4842-b21e-0ab8b5c03e3d"
        },
        "item": {
          "id": "d6ee0ac2-e283-44ab-af73-070a7ee41a48",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5e1af825-bcf1-4703-acdf-5179f639c2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2522e459-383c-4d32-9147-1dd2849d341c",
        "cursor": {
          "ref": "91eb5afd-2e53-4039-afeb-7bf38dd84dff",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cb344f97-b30b-46fb-90b4-97d67a10edd1"
        },
        "item": {
          "id": "2522e459-383c-4d32-9147-1dd2849d341c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8ce1127e-6bd5-4ed7-902e-f580a752a384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c499be22-b61f-4e72-9f50-c3e12ce30f1b",
        "cursor": {
          "ref": "ca992ffd-0d9a-4f41-a4bd-47d5d818e4b2",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "28dfa056-3ad3-4bee-a438-487d91c0d575"
        },
        "item": {
          "id": "c499be22-b61f-4e72-9f50-c3e12ce30f1b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2f329aed-4c03-407c-9910-2d4189ecc4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37bd185c-7cb4-48af-9240-0acb356cfa60",
        "cursor": {
          "ref": "913e83df-5c81-4b57-89a1-74a3f8abd854",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "aa8b7be8-3764-4232-9a7a-1f5de4ea6006"
        },
        "item": {
          "id": "37bd185c-7cb4-48af-9240-0acb356cfa60",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0c46ca19-54d4-48db-bcda-6f457c717d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b001fea1-488f-4b07-b2fc-7ee7658c2a95",
        "cursor": {
          "ref": "766c22cc-f525-4f63-ad95-11205bd0357e",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2be5db13-cd23-4523-a2bd-424ae955391f"
        },
        "item": {
          "id": "b001fea1-488f-4b07-b2fc-7ee7658c2a95",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c2608df6-7692-4a60-aa60-8000a3888402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9554a0d8-f596-4d6f-a2c9-3157dac51615",
        "cursor": {
          "ref": "7c68f75a-a85e-4a86-bd5a-48623d16c227",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "12166eee-7467-4e52-b1ba-10769532e39f"
        },
        "item": {
          "id": "9554a0d8-f596-4d6f-a2c9-3157dac51615",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "30735bb3-d3ae-45c8-bd0b-b00e82550d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4c3a7a-596a-4b0a-b96b-fedb583900b1",
        "cursor": {
          "ref": "5444b91a-784a-4e0e-9141-6089f3a4fd43",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1b5708f7-d9a4-460f-96d4-be436af69614"
        },
        "item": {
          "id": "8c4c3a7a-596a-4b0a-b96b-fedb583900b1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f20bd49e-56b0-42ac-ba24-de6e90a69bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "9dce7afb-9991-4941-ab64-043b2ed52d8b",
        "cursor": {
          "ref": "ddad597a-edbd-4cc6-871c-cfb7fa417b82",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9a22a8ca-2d7e-4d66-98fa-8f8cefd744a6"
        },
        "item": {
          "id": "9dce7afb-9991-4941-ab64-043b2ed52d8b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "96803c9c-0871-4390-8265-2ebfc6557c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9c477312-be7a-44d5-814a-e357986fe212",
        "cursor": {
          "ref": "aa0c5060-0a21-42d2-9db2-5651b439882f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e0c6d5c6-38ac-410f-8a87-9791a0463ee0"
        },
        "item": {
          "id": "9c477312-be7a-44d5-814a-e357986fe212",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dfd94023-77d2-4dc7-a7f5-57db9439b352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c477312-be7a-44d5-814a-e357986fe212",
        "cursor": {
          "ref": "aa0c5060-0a21-42d2-9db2-5651b439882f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e0c6d5c6-38ac-410f-8a87-9791a0463ee0"
        },
        "item": {
          "id": "9c477312-be7a-44d5-814a-e357986fe212",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dfd94023-77d2-4dc7-a7f5-57db9439b352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1acc41d-cab8-4d05-a0c5-afefc9aac9bd",
        "cursor": {
          "ref": "0e65d942-c8e0-49fd-bc86-b64f2c9667c8",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a5f5ec0c-a53f-4832-9927-643109d1c6d7"
        },
        "item": {
          "id": "e1acc41d-cab8-4d05-a0c5-afefc9aac9bd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1e0174ec-cc6e-4954-8048-0f777319cb1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bb5db8-a854-4c4f-8d68-52de075be5f3",
        "cursor": {
          "ref": "e9b4063e-6b55-4ad1-b8a5-f8d86a7471c4",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3e8857b1-18cc-4ab3-b65c-0a085fec0ccf"
        },
        "item": {
          "id": "b4bb5db8-a854-4c4f-8d68-52de075be5f3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d4f2466b-2b81-4844-81fa-5c0224449207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3346eb27-0e6b-40c2-9752-aad9d2d4679a",
        "cursor": {
          "ref": "e336d88e-06d1-4c7e-924a-3598223947e4",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "587280a0-b7f9-4c90-a301-37196138ab7e"
        },
        "item": {
          "id": "3346eb27-0e6b-40c2-9752-aad9d2d4679a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ed6b850c-487a-409b-8bc3-a09002e2eeb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf3c655-e3e2-417d-b343-e7f58c15782b",
        "cursor": {
          "ref": "97987265-9eea-4c45-b4ff-dd27a7f23bd6",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c277607b-88d8-4040-be98-d8499bc35d84"
        },
        "item": {
          "id": "abf3c655-e3e2-417d-b343-e7f58c15782b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9f80c371-9f43-4df8-9590-d8eab78fa889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6303606b-49f3-4c9b-8b32-4679b50354d8",
        "cursor": {
          "ref": "2e3a6977-3e94-4bb0-8d03-6060307b6487",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b92c6014-3b47-4497-8aab-0d4e6c7127ae"
        },
        "item": {
          "id": "6303606b-49f3-4c9b-8b32-4679b50354d8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "95a195c6-d249-4f56-ad6f-1e5a8738a66c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66eede73-5fbc-4da4-b46f-fdf4e09bc746",
        "cursor": {
          "ref": "da36329a-6b63-4518-9bf5-a1b59a5fc2e9",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "15023bf5-792e-4805-8f57-1648dfbd2a7c"
        },
        "item": {
          "id": "66eede73-5fbc-4da4-b46f-fdf4e09bc746",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4a43701d-9ab3-432f-ac9c-a001371b3246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ce5802-9c4e-4254-86bd-ac08fafbc03c",
        "cursor": {
          "ref": "db4ccb73-6f9b-4afe-aa87-f17d3c01300b",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ab22e112-4621-4642-acef-e62327dae443"
        },
        "item": {
          "id": "40ce5802-9c4e-4254-86bd-ac08fafbc03c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "927eccf3-2a2d-4de7-b81c-7d8022b51973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41e6b17-fac0-457c-9ce6-09e0d782a121",
        "cursor": {
          "ref": "b7f102fa-4a79-44c7-8e72-ef4eab0b88d3",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0c9075f5-1557-46f7-a5df-37a1f11e5166"
        },
        "item": {
          "id": "e41e6b17-fac0-457c-9ce6-09e0d782a121",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5f1209b3-bb22-410c-8156-f06b8996c112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d63e4f-3ec2-4ab8-adf7-44aa873745f3",
        "cursor": {
          "ref": "51f675cb-be71-4a35-8d9d-1c2810637baa",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "29a02f1a-ed71-458a-be95-18d731d4ec16"
        },
        "item": {
          "id": "74d63e4f-3ec2-4ab8-adf7-44aa873745f3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "038e8d46-84d6-4991-aaee-89037dc39551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08831d51-9a53-4d4e-b43e-c74a8bd4d569",
        "cursor": {
          "ref": "704659b5-21f2-4b16-b5bb-71ecb8b30e4d",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7785e150-7473-49a2-811f-48e045e64a17"
        },
        "item": {
          "id": "08831d51-9a53-4d4e-b43e-c74a8bd4d569",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "63bbb0fd-2ac6-4257-a97b-63880040c61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb0a803-9f23-4e68-aec0-b0110a3a1b97",
        "cursor": {
          "ref": "afbcfeef-79c3-4a24-945f-3f7adb568ad4",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3dce1f97-0c26-4a33-aee1-4cd3732f3eb3"
        },
        "item": {
          "id": "9bb0a803-9f23-4e68-aec0-b0110a3a1b97",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "48c4ee71-0269-465e-aefd-e23baa165dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b20783-ef62-44ff-a9e8-e67c135cd070",
        "cursor": {
          "ref": "75fca8c2-6112-4e55-a461-3ab6e381e02b",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "735198a3-ce2e-4bff-93c7-63cf7cbe5fef"
        },
        "item": {
          "id": "83b20783-ef62-44ff-a9e8-e67c135cd070",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "27dd3665-038d-484b-babc-dd4c20f60731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4904f83b-ebd7-4b4a-829a-94a47743ee28",
        "cursor": {
          "ref": "efa53885-4d3a-47fb-97c9-73d6d93cbc37",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bffda333-fc4f-4297-90f5-c66037693724"
        },
        "item": {
          "id": "4904f83b-ebd7-4b4a-829a-94a47743ee28",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "111135a2-abab-481d-81a8-d801d43909e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79f8215-473b-48ed-8142-f8866824e04f",
        "cursor": {
          "ref": "ceb9f50a-349b-40e0-aec7-12125faf52f1",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "85242bd8-0d11-4ddb-b1f5-ba6404e97f2c"
        },
        "item": {
          "id": "e79f8215-473b-48ed-8142-f8866824e04f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f737dc1e-9375-424a-b4dd-352f1136ac7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90eca8e5-e1ab-42c4-a627-efe42546130a",
        "cursor": {
          "ref": "fee397cd-dbfb-48f0-8af1-7c5ab4b20417",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1d94b46c-187b-4f6e-8d1c-cca7a8c103a5"
        },
        "item": {
          "id": "90eca8e5-e1ab-42c4-a627-efe42546130a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "09c6cb2c-1df5-4c2b-a0a1-e1a0ed0e82cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c26d5b-e671-4142-8021-1b783ee00a71",
        "cursor": {
          "ref": "6d7480e0-69f0-42c0-b194-dcbce697dbdf",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f0c5b93c-2e68-4b0b-b073-dca06e4b747f"
        },
        "item": {
          "id": "11c26d5b-e671-4142-8021-1b783ee00a71",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a05128b6-24ab-4e9a-9d71-7ffc7c803fd1",
          "status": "OK",
          "code": 200,
          "responseTime": 399,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "9c11415d-359a-4cee-b093-bcc223678bf9",
        "cursor": {
          "ref": "fc1330a7-f436-4441-bd00-2fe1ae84321c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "00e57f68-8e41-48d3-afcf-f1c3c494f203"
        },
        "item": {
          "id": "9c11415d-359a-4cee-b093-bcc223678bf9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9bf19f40-38b0-44df-894e-8ced937115a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61071f88-0eb6-4622-b938-7d6627053aba",
        "cursor": {
          "ref": "2926b76d-20ad-44d5-aecd-fdb1edd24fb4",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "af1ddcad-ce6f-4ab8-99df-bc27f073ba91"
        },
        "item": {
          "id": "61071f88-0eb6-4622-b938-7d6627053aba",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "260ec6d4-e0fc-405f-9dd1-725f83b1f77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739fd8a3-ad3f-4b24-8a04-c6cf8752796d",
        "cursor": {
          "ref": "939d02e6-339b-4bdc-a2a1-24fccd9417a6",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "de368396-a4f5-4671-b043-0864326b2510"
        },
        "item": {
          "id": "739fd8a3-ad3f-4b24-8a04-c6cf8752796d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9fcf0bde-9c2d-458c-9ead-7a0b5811e100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3e3d1c-e13f-4067-a184-745e6bb18c0d",
        "cursor": {
          "ref": "b763d393-0f6e-44a5-a4f6-524eaa1722e2",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c4d7160a-c9d5-4045-9eb7-cfb07128e13d"
        },
        "item": {
          "id": "cb3e3d1c-e13f-4067-a184-745e6bb18c0d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c6d2fc07-6356-46d0-b93c-1091037332fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ad4e2c-3e47-438d-b7e0-ec0afee71403",
        "cursor": {
          "ref": "019737cf-d9a3-42a2-8285-8c7a4f38b430",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c9eb3345-d96b-4a77-8696-17a16e66d2b6"
        },
        "item": {
          "id": "a7ad4e2c-3e47-438d-b7e0-ec0afee71403",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b1004e0e-4adb-4d2e-bc4e-a75045e5fad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1211c52-9ceb-4d99-a61a-f4ecbfb4d7c3",
        "cursor": {
          "ref": "3c266504-c06b-474d-b121-7a73e5c27436",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "33855847-e3cc-4abe-b6ee-a53eccdc1e45"
        },
        "item": {
          "id": "c1211c52-9ceb-4d99-a61a-f4ecbfb4d7c3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "55070e17-69ba-4f66-8011-13913aac3aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df27752a-28a6-40fe-b8b8-46645ffda4e2",
        "cursor": {
          "ref": "c91745bf-e977-4e49-973f-a2278c970e72",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a6819686-232c-4cc4-b869-195eb6bac5e1"
        },
        "item": {
          "id": "df27752a-28a6-40fe-b8b8-46645ffda4e2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7722d0a4-3ce0-473e-8101-cd865ec49b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edd10e0-11f0-4648-8bfa-d96dcc447f0d",
        "cursor": {
          "ref": "f3ce4ed4-09ae-4235-b6a2-f336801d2b12",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "56c7fc86-d1c2-4406-b4f0-9a7aa0588bee"
        },
        "item": {
          "id": "3edd10e0-11f0-4648-8bfa-d96dcc447f0d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e171b0b6-751a-4b84-89f6-1320ba38dcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc299d0e-d8c8-4ff5-96e6-6fd76586d15f",
        "cursor": {
          "ref": "5aca947c-94b3-448f-9bee-61e509d6d28b",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c7b14f9c-36c7-4f98-a8cf-76ebb2022bb8"
        },
        "item": {
          "id": "fc299d0e-d8c8-4ff5-96e6-6fd76586d15f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "36fbece6-2c9c-4515-870a-d540f011636d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7928ba6d-f0d4-4bd2-83ff-b19ce437cf02",
        "cursor": {
          "ref": "d21cfcd6-28f3-46bb-8f14-d0f4a25b124d",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c55752fe-bee9-48e3-90ec-a00a45bf5dfb"
        },
        "item": {
          "id": "7928ba6d-f0d4-4bd2-83ff-b19ce437cf02",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9f86ac9b-c866-4bd1-aab6-f1846638b8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae951ba-ab95-4e56-936b-b25001258ee5",
        "cursor": {
          "ref": "483e04ee-885b-4eb4-8d2a-9737cad104f1",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "135a0e91-6730-4c0c-a30d-65c1ffa20e5f"
        },
        "item": {
          "id": "dae951ba-ab95-4e56-936b-b25001258ee5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f17b244b-ccc5-4642-bcf2-71d85ac3ec17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1bf774-1c70-40f2-ac21-d1b96f44c3e7",
        "cursor": {
          "ref": "944c43e9-071e-4b3b-9650-1072512e7f92",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "947dc406-ac1b-4df7-af8d-9a2b0256a162"
        },
        "item": {
          "id": "3d1bf774-1c70-40f2-ac21-d1b96f44c3e7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "73c1edeb-4940-4968-8b0c-5be1f039f2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2e9d36-6c76-4ed0-bd4d-cbb7db85d82c",
        "cursor": {
          "ref": "8a1deeff-e93e-4e66-9257-fd7ccca2e46d",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "df7ce725-f181-497e-a689-5396ffff6231"
        },
        "item": {
          "id": "dc2e9d36-6c76-4ed0-bd4d-cbb7db85d82c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4a5ce5c0-a82c-4ff2-b42b-8e757b283be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57240bd-d0a7-4e72-8557-de7f114fdecb",
        "cursor": {
          "ref": "9b3e17a4-9a6b-4268-a3e4-96c685dcff5f",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9d8ef7e4-fe9c-4b70-8bf7-5b0faf0a41db"
        },
        "item": {
          "id": "c57240bd-d0a7-4e72-8557-de7f114fdecb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a64f559a-50c1-47b7-aa20-bd5be1bf415b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f61498-077d-481b-bc36-f9626416e1e4",
        "cursor": {
          "ref": "43835dbc-6a78-432a-8899-913227f75ddc",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9b017cb7-004f-47aa-94e4-a648f4263140"
        },
        "item": {
          "id": "b3f61498-077d-481b-bc36-f9626416e1e4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cafab803-d4ab-46e8-9f01-66effd39d821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fb6924-dec8-4a87-9be3-2bc82a34d370",
        "cursor": {
          "ref": "8020a0bd-6863-4458-b86b-4d359fa08a89",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "70a4bdc0-23cc-496d-b3cf-6b28b38a3c63"
        },
        "item": {
          "id": "f2fb6924-dec8-4a87-9be3-2bc82a34d370",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "458fe623-6025-4de6-9cdc-1fc43299b6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894930f7-f40f-40bf-b691-76a882db24ea",
        "cursor": {
          "ref": "05bf9f02-2af4-4474-bce6-ad46ea0b17cf",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fd7d230a-34a7-4345-b487-ca5024049b47"
        },
        "item": {
          "id": "894930f7-f40f-40bf-b691-76a882db24ea",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aa526da6-4b6f-44f3-b01b-d24e80630195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01ad584-3ecf-447c-9d04-4dc70dc1746d",
        "cursor": {
          "ref": "9ede9e05-d366-4897-946b-3b4350031745",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ebd541bd-3089-4e26-ac90-2ee94fa5b679"
        },
        "item": {
          "id": "f01ad584-3ecf-447c-9d04-4dc70dc1746d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "03077ee5-2f47-46d8-b6de-d78d7aeb4eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c0139b-a228-4d52-9ce2-b5c3542fc3ef",
        "cursor": {
          "ref": "45bcbc1c-15bc-4782-aa8c-437fbb28cec4",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e1e0dc52-d7da-4b91-8ef0-e941f405b893"
        },
        "item": {
          "id": "51c0139b-a228-4d52-9ce2-b5c3542fc3ef",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ac8cbce7-f35e-4b21-bfdc-d3223de42e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444cb8a7-9cc8-4924-8458-bbb9f3400c95",
        "cursor": {
          "ref": "569fd94d-f924-4c2e-8e99-316b42fe215e",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a0883c95-8592-4cc8-9949-9e7cb3f73881"
        },
        "item": {
          "id": "444cb8a7-9cc8-4924-8458-bbb9f3400c95",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "67060bed-09e1-4837-a9d2-445a1f294e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b81ae65-80ad-4f4f-b672-b15fdae47582",
        "cursor": {
          "ref": "20cab4dc-75c4-4e12-9bd9-0d42b68b8fd7",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "501cb626-2de3-4030-af2d-574440ac400f"
        },
        "item": {
          "id": "5b81ae65-80ad-4f4f-b672-b15fdae47582",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cd02c2b1-faa2-4f73-80a0-636c56067a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5763f82-e8fc-433d-be74-84d930b66e62",
        "cursor": {
          "ref": "43cacebb-bf05-4d98-b208-d097a3414334",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e94ba75f-cc3f-41b5-97c2-ede27c7ae0c1"
        },
        "item": {
          "id": "f5763f82-e8fc-433d-be74-84d930b66e62",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fd5425ed-aad6-4aac-8afd-9a54d4bd8bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a2434d-061d-4dee-8542-a4fb6b3640a9",
        "cursor": {
          "ref": "2cbcbe2f-e3c9-4d7b-bfe6-da1f3569c811",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d8e0cbac-6edc-4de1-b7a1-d5ed977fb5e8"
        },
        "item": {
          "id": "b6a2434d-061d-4dee-8542-a4fb6b3640a9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "01728f5a-6f6a-43fd-b6b4-c5547091994f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e8bfd2-ad5f-4818-bc42-9ebb2de1ce97",
        "cursor": {
          "ref": "173dc3a8-d5dd-4f89-874a-55dcd84be53d",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "af33d0a1-eca3-4937-b93b-c519c90c0af1"
        },
        "item": {
          "id": "94e8bfd2-ad5f-4818-bc42-9ebb2de1ce97",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0d1c56aa-e5fa-47cb-ad3b-ca9755c49b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b238a83f-465f-46f3-9a4e-3bed0d6330a6",
        "cursor": {
          "ref": "beca5d97-289c-4951-9027-a01a0ba06ccd",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "943b2eb8-611d-4928-a94f-8ac2c22da75e"
        },
        "item": {
          "id": "b238a83f-465f-46f3-9a4e-3bed0d6330a6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d563363e-6c0d-431c-9abd-68d0e2da645e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5147533d-3a08-4fe4-b95c-1b89a0491fc6",
        "cursor": {
          "ref": "eee499e4-869b-4032-aae5-2808da5b7d97",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e1d2df2d-8aa2-4773-abea-dd06f67987c9"
        },
        "item": {
          "id": "5147533d-3a08-4fe4-b95c-1b89a0491fc6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "75626a70-d137-4030-8658-3804e09d0574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f915fa-865a-4193-b35f-c282f089528d",
        "cursor": {
          "ref": "c8ac1784-99fd-4e68-aeaa-3f8c6a386d05",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "35aae29b-f96b-413c-89b4-02f7d1c84429"
        },
        "item": {
          "id": "f8f915fa-865a-4193-b35f-c282f089528d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b8b18e85-76f1-4c3d-adbf-f6eb3f1fe32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921eb1c0-d4b7-447b-b955-2a73a1aa0df4",
        "cursor": {
          "ref": "ba781b41-bbe5-4902-93b2-caba1825ecf2",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "39442040-b6c2-4196-a07e-36cb007824e1"
        },
        "item": {
          "id": "921eb1c0-d4b7-447b-b955-2a73a1aa0df4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0bda9f4d-90e0-4492-8c03-c0dea4543879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118ded89-345f-4603-852d-18793fef65dc",
        "cursor": {
          "ref": "77fe0673-904a-4b66-a7f2-7bd01ba964fc",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "84af7380-3d34-482f-b69c-a7be82d83c8a"
        },
        "item": {
          "id": "118ded89-345f-4603-852d-18793fef65dc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "344ba01b-2f40-486a-9467-2f89516f17ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5e40cb-363e-4b6f-981f-9d7274b418c4",
        "cursor": {
          "ref": "2024c7cf-43fe-4e33-bc58-83b4ed646eec",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "05def2f0-9b89-48af-913d-c81602cbdc47"
        },
        "item": {
          "id": "3f5e40cb-363e-4b6f-981f-9d7274b418c4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6a9f65c9-cd8c-434c-8dde-a748486dd6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910ae65f-bd0b-4ced-898c-79ae42864f4a",
        "cursor": {
          "ref": "603b20df-eca2-4ac2-bf65-529c7a1f85d6",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "39367b35-5a51-4516-a649-41bb81db41b9"
        },
        "item": {
          "id": "910ae65f-bd0b-4ced-898c-79ae42864f4a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "64bc6334-cd39-4e97-a91b-5c3853a30fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b110e5-95f8-4d83-8f4c-3651279adbb3",
        "cursor": {
          "ref": "24931e0d-e437-4f7b-9585-b5de5862e9f2",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6d234842-f5f1-4e83-8b8a-a2cc2ed4999b"
        },
        "item": {
          "id": "b5b110e5-95f8-4d83-8f4c-3651279adbb3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a4a025b5-7c74-4996-bcd9-5c98ed3a5a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36744cb0-3eab-4a93-8196-6ec497ba224c",
        "cursor": {
          "ref": "04921934-00b9-4ebb-8b22-66165bcd39f5",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cc583d86-2030-43b2-8482-b4a8e530d583"
        },
        "item": {
          "id": "36744cb0-3eab-4a93-8196-6ec497ba224c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ddc408a2-7c8c-4478-975d-2a7aeaab471c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da424764-be4f-4204-b153-bc1f7ea9975e",
        "cursor": {
          "ref": "c6451fef-6174-4994-a500-000d8fee81e7",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "770bb496-b233-4bbc-96f8-437c27cd5cf2"
        },
        "item": {
          "id": "da424764-be4f-4204-b153-bc1f7ea9975e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5f846127-4a08-43bf-8ba2-46ed58ae708c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854a033f-a3d5-49fc-8948-75a36f1ea169",
        "cursor": {
          "ref": "5caf92ae-5794-48ab-9c63-f55e0e61c322",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "57a32539-508d-4c65-8dd2-71548897ecf7"
        },
        "item": {
          "id": "854a033f-a3d5-49fc-8948-75a36f1ea169",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ec8bb55e-afbb-43d1-a857-67767c8c9c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f84467b-528b-4a01-83e4-c346db08902c",
        "cursor": {
          "ref": "0f321f55-1a38-491a-b627-5ba133243f6f",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f2a16f61-9c57-413d-b08a-c14028963927"
        },
        "item": {
          "id": "4f84467b-528b-4a01-83e4-c346db08902c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "29af5400-b1ad-450f-9903-f1b8e9bd4fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027e686e-5a98-44bb-8217-014abcd66d62",
        "cursor": {
          "ref": "feaa54a1-968c-48d1-bee2-39fcd4415d19",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c79114f7-4d04-488c-a7c4-522f7892da1a"
        },
        "item": {
          "id": "027e686e-5a98-44bb-8217-014abcd66d62",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8211dc56-f0ca-4393-87f8-e0f86c6a706e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8637a388-63b6-4795-a039-05b6642352c3",
        "cursor": {
          "ref": "5f663c8b-edf3-4923-a084-040483d63a61",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3bc7bef9-3222-4108-a432-7d2ec1c2436b"
        },
        "item": {
          "id": "8637a388-63b6-4795-a039-05b6642352c3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2193ae75-51cb-4ff0-84ed-2f60fac0c30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa11d94d-e6e2-41da-a9cd-d2ed0a84c233",
        "cursor": {
          "ref": "85998393-38f8-4005-85d3-9a934aa1135f",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2a7e034d-db66-46ac-953e-14412692819e"
        },
        "item": {
          "id": "aa11d94d-e6e2-41da-a9cd-d2ed0a84c233",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "22289641-8cdd-4108-9109-24b87568bb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e167a8a-d65a-49a1-9632-a5fed015ff82",
        "cursor": {
          "ref": "4529ae78-9287-4758-88f8-21b63c45684c",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e5483f3f-6a61-4e98-8ef9-162ec7cf723c"
        },
        "item": {
          "id": "5e167a8a-d65a-49a1-9632-a5fed015ff82",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5b6a6537-ff22-4481-a8b6-8fd2e58b226d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe67a4b-99a1-468a-a372-3d701515e638",
        "cursor": {
          "ref": "60aca18a-c306-424c-8196-391c72aae09a",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5aac0fd4-28f0-4f0a-8b64-45eadee6d1b6"
        },
        "item": {
          "id": "dbe67a4b-99a1-468a-a372-3d701515e638",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b0ebacef-98ba-4415-adad-b727d0881135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f59383-0250-4bb6-a51c-e78b5e996310",
        "cursor": {
          "ref": "1d318448-a4b8-42ee-8c23-83ce3f1e4c27",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9745c467-48c7-4f11-90ad-eed0ba9d4a43"
        },
        "item": {
          "id": "37f59383-0250-4bb6-a51c-e78b5e996310",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ff46cf43-26db-43a8-b063-c883efb87d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771eef6e-ed6a-4c2e-9fa7-58689b9bef58",
        "cursor": {
          "ref": "c94835c4-f2cb-429f-b7a5-0b94e4f644e9",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "afb35b66-7cc8-4ce2-88ca-f35e5de679a6"
        },
        "item": {
          "id": "771eef6e-ed6a-4c2e-9fa7-58689b9bef58",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0b608b10-21aa-46d7-ab82-f3030ed9eb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a76323-1173-4449-a592-359d2a417cac",
        "cursor": {
          "ref": "42021e61-8885-410a-87c3-43dd2bc03375",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cf2a2487-5663-41c1-81e7-397b626b76a9"
        },
        "item": {
          "id": "97a76323-1173-4449-a592-359d2a417cac",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6bb91da0-4e59-4335-a81a-73c1b9adfcbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577e5425-aed3-4428-a7ad-03ff0e14ea49",
        "cursor": {
          "ref": "b4eea6f4-a1c5-45c9-b4a5-09c67e592ffa",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "83535b79-04d0-4d91-a232-b719873bd4c9"
        },
        "item": {
          "id": "577e5425-aed3-4428-a7ad-03ff0e14ea49",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f0049548-9ce3-40ae-8aaa-f2729879ab73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286a18c3-f821-4a30-ba3e-f661edb9c53a",
        "cursor": {
          "ref": "c0157d54-63c0-4614-bf75-afe4538a7476",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "01fde66a-9d86-4bff-a00f-b5ef3eaf31ea"
        },
        "item": {
          "id": "286a18c3-f821-4a30-ba3e-f661edb9c53a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1c3867f9-3876-42aa-9e48-d052a808f18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7501f97d-83ac-4c33-bfb5-e5cc95171d2b",
        "cursor": {
          "ref": "5ac42c6c-2f1c-4fb3-b375-04a848da2cc9",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "45cb9360-34c7-4750-a9ef-495cc2a3b436"
        },
        "item": {
          "id": "7501f97d-83ac-4c33-bfb5-e5cc95171d2b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5febcc75-1bef-4b3e-910a-af0f0342f596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4ff28d-598d-4d22-9689-cd312f6b24b2",
        "cursor": {
          "ref": "45786f69-0936-45df-8c96-d84b6419944b",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "24f7a5dd-6185-4232-ab86-8ffd8c196e19"
        },
        "item": {
          "id": "fb4ff28d-598d-4d22-9689-cd312f6b24b2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d6fdaf89-1f67-41bb-a8cd-1ca55ab59d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda964b8-b125-4a71-ade6-ee9d28ebea72",
        "cursor": {
          "ref": "38b4e444-4b8b-4afb-96a2-79917de35208",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "527e34f3-c017-45b1-b399-7be9f2f75392"
        },
        "item": {
          "id": "dda964b8-b125-4a71-ade6-ee9d28ebea72",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "12c00230-7217-41b6-8a6c-3dcb6cbe453f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733e4d66-950e-4453-aa21-1138d6aa0977",
        "cursor": {
          "ref": "10e1feb7-6af8-45c8-837c-fab33ff7e98d",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "13bf0ec4-e898-4741-a1ad-5a729daf1f50"
        },
        "item": {
          "id": "733e4d66-950e-4453-aa21-1138d6aa0977",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d5fed29e-40af-4333-ae0d-537cc36f78b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207d912b-bc56-42a0-b24a-d05fd91a23a5",
        "cursor": {
          "ref": "3100c74b-e23e-41e9-aa6e-895e8fd9bb17",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f77827a4-4a7a-4b6a-b59f-410779d55847"
        },
        "item": {
          "id": "207d912b-bc56-42a0-b24a-d05fd91a23a5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7810312b-ff4c-4cc6-bd62-cd14f969c6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d46c69-dd2d-408f-95be-fdda3d591022",
        "cursor": {
          "ref": "e91bcc7c-2ff3-4bb8-ab88-e1cc1f62f2ec",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a6edd881-4d21-4d0a-a8d1-2ee80248685b"
        },
        "item": {
          "id": "64d46c69-dd2d-408f-95be-fdda3d591022",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7bd4c626-111c-4dff-a60b-5def33ec50ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de2b4f4-4207-46a3-864a-2f9493992a09",
        "cursor": {
          "ref": "580b216f-db25-4b18-a151-e119873313cb",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e1bd61e9-fc02-4ee8-b10d-e21abe93f6fb"
        },
        "item": {
          "id": "6de2b4f4-4207-46a3-864a-2f9493992a09",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "31cabe0f-9084-4efe-a942-31de2b9fbfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8b4458-b25f-47f6-998f-d340a02cf1e9",
        "cursor": {
          "ref": "fead7630-bfee-4f3d-b9b6-d3bcc75f60ac",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6a5e71a7-4ad9-430c-b822-d98cf66b72e5"
        },
        "item": {
          "id": "0c8b4458-b25f-47f6-998f-d340a02cf1e9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bf29e5c2-1497-4b34-9138-77ab51d59850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84be5879-da01-4000-9a60-f9640a2afa88",
        "cursor": {
          "ref": "1f92b983-f195-4290-b40d-b2d755b66ed2",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "31432fff-a5f7-492b-9324-cc3b2922ef2b"
        },
        "item": {
          "id": "84be5879-da01-4000-9a60-f9640a2afa88",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "28c8c640-2583-4138-b8d7-80c69b4368d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa382ea-12b9-445d-871e-a8b94028299f",
        "cursor": {
          "ref": "ae42e185-de34-4139-914f-c759116de44c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0292deb6-085a-481e-ba59-39906169cddd"
        },
        "item": {
          "id": "9fa382ea-12b9-445d-871e-a8b94028299f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bc339057-372e-4b49-b3bd-2d2dbd789e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b39cbe8-316c-4a6b-a3ac-cc6a353fd1af",
        "cursor": {
          "ref": "115c94f8-9a22-45cf-ad1f-c546582f8333",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "731c4b3e-82e0-4038-9267-70484bf28bd9"
        },
        "item": {
          "id": "5b39cbe8-316c-4a6b-a3ac-cc6a353fd1af",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6907ae87-54dd-4246-9c35-d8c794aec066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff454e0-68b6-4512-a907-b87da4f3f4fa",
        "cursor": {
          "ref": "3089bb21-0310-4e26-a325-c3d344534a7f",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "19692708-e72c-482c-ad78-b173711676b4"
        },
        "item": {
          "id": "4ff454e0-68b6-4512-a907-b87da4f3f4fa",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ee193e0f-f9fe-4123-a1e3-ce4a6ea8534b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2576ea2-fd93-4803-8a97-b68100070278",
        "cursor": {
          "ref": "a5485b14-42d9-4928-9190-b4e1dc78d3e1",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "eefc5b6b-4296-4541-9197-3782312aa186"
        },
        "item": {
          "id": "d2576ea2-fd93-4803-8a97-b68100070278",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "096ae763-55a5-4b40-942e-fe7eb98d5f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9c10bb-6866-4807-9e12-ceef18a2282e",
        "cursor": {
          "ref": "bcdfd2bc-afaa-471e-98be-4bbefd2224da",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "942af7b9-472d-469f-ac42-e78cc3c6dffa"
        },
        "item": {
          "id": "3f9c10bb-6866-4807-9e12-ceef18a2282e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "44549f64-9e73-4afc-a365-40ccd1e06c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c9a274-c89f-49d9-a6ba-512863b0838c",
        "cursor": {
          "ref": "c2e2e7d8-9c60-42ad-8915-d40e29e80ce7",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e1c40e3d-2ca3-4a5a-9e0a-6d3fc4e3c0b3"
        },
        "item": {
          "id": "00c9a274-c89f-49d9-a6ba-512863b0838c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "84fe1e3d-7f54-440f-ba97-6b32c3af2fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676a1cc6-d880-46d9-a42c-8493e93b9fce",
        "cursor": {
          "ref": "b64e2b06-f096-46f1-87e9-52019fbda192",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7ae736ec-ffdf-4d4f-9c2c-d125a616cc9b"
        },
        "item": {
          "id": "676a1cc6-d880-46d9-a42c-8493e93b9fce",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b9d2b698-3c91-4e23-bf52-620014e45110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590e32ca-a84f-46c3-8d35-4459a1c41d29",
        "cursor": {
          "ref": "17e5ffd8-9800-40e2-9243-a85115845f9f",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f030bbd5-3f6f-4252-b944-58e6ba574471"
        },
        "item": {
          "id": "590e32ca-a84f-46c3-8d35-4459a1c41d29",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9b9de061-109d-4593-8b4a-8536d3a38ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35e9eae-c980-4489-a9b7-5374f390b6c2",
        "cursor": {
          "ref": "4ba6394c-d0be-4e97-b4a1-253bfc8bb43b",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6e3e647e-21cf-471a-956e-1173349d0777"
        },
        "item": {
          "id": "d35e9eae-c980-4489-a9b7-5374f390b6c2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d9010f7f-e4fb-40b8-95f3-b085a17dff50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd82243b-2298-445a-b7cb-69f4bfa737ab",
        "cursor": {
          "ref": "4360de8e-f364-4c68-84db-ed6e8aed5fd3",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "15337290-572f-42fc-a1a6-8c1f57914ee1"
        },
        "item": {
          "id": "fd82243b-2298-445a-b7cb-69f4bfa737ab",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9cff9ea1-a02b-479b-9a63-125ac81ae269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993608aa-6db6-446b-a3d1-d2c64575f990",
        "cursor": {
          "ref": "1920c992-2eae-445a-b8f8-45074260af19",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ac942e5b-518e-47c6-a173-76428bf5d56c"
        },
        "item": {
          "id": "993608aa-6db6-446b-a3d1-d2c64575f990",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4d2cd1ce-6e12-4cba-a9ea-e22cd033f98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87459d93-5a7a-41cc-99f6-1c1cf57c2b63",
        "cursor": {
          "ref": "ef7fe52c-7566-4dda-b5b1-63af5cc2f3ee",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4c1dbfe5-8164-4e19-92e1-438f4b640083"
        },
        "item": {
          "id": "87459d93-5a7a-41cc-99f6-1c1cf57c2b63",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "622759bc-4920-4205-962a-b6a5384c18ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a8d28d-6b3e-4140-bcf5-6511df475c38",
        "cursor": {
          "ref": "02dbef0e-176a-4085-af21-cc733df267a6",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c395a15e-b66d-4cdf-8dc9-68b892f821e7"
        },
        "item": {
          "id": "c0a8d28d-6b3e-4140-bcf5-6511df475c38",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f6c1e7b0-75b3-450f-8f5f-c180d463a8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b065e53d-ec79-4f12-80fa-564acf6c90c2",
        "cursor": {
          "ref": "353e5250-3c28-4a12-a045-03841963394c",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8bf5f908-3ed3-43f9-8e8b-8fec90d1fcc9"
        },
        "item": {
          "id": "b065e53d-ec79-4f12-80fa-564acf6c90c2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6e3ba2e0-9ce8-48ba-af74-9c44a21f82f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973ce8fb-1480-4ba7-ae41-3630dbcfbfe0",
        "cursor": {
          "ref": "6c524deb-d98f-4112-bdfe-b07a29559d8e",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8b776de8-f736-474e-bb36-a5abf5b2556f"
        },
        "item": {
          "id": "973ce8fb-1480-4ba7-ae41-3630dbcfbfe0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "875b1ea1-0877-4a54-bfbc-2205daf26431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78473a9-0052-4449-9c22-aab8b17d9443",
        "cursor": {
          "ref": "2482f891-a645-43bb-bca8-4825130b4cbe",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c965eb09-bc7e-4376-9adf-e459a98b8e32"
        },
        "item": {
          "id": "c78473a9-0052-4449-9c22-aab8b17d9443",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0ccefc6e-05fd-4715-b36d-fcc5f4637eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab57725-c27c-4740-ba85-b34f5abb090c",
        "cursor": {
          "ref": "efb6f3ae-2ce8-4bb9-88a2-4fb685640e34",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "feb6b139-d29f-48d2-931d-4f9a4f0182a5"
        },
        "item": {
          "id": "0ab57725-c27c-4740-ba85-b34f5abb090c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "022d7255-833b-4a23-bcd1-c0fceee7711b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480f2d87-6f63-4676-b15f-889688086d15",
        "cursor": {
          "ref": "4d262cfb-a1fa-480e-9908-776f57f247c0",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0bebc8cb-c229-4af2-88b8-5fa23a5c6b54"
        },
        "item": {
          "id": "480f2d87-6f63-4676-b15f-889688086d15",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "be013cf5-7a40-46ff-b811-237990fad46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c966646e-384b-40e6-8c2e-6c52d51a6361",
        "cursor": {
          "ref": "6c9f442f-3f3e-4106-9bc7-6ee177ef8f85",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d5646de5-745e-48c9-81de-f10de7390c62"
        },
        "item": {
          "id": "c966646e-384b-40e6-8c2e-6c52d51a6361",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a264777c-c6d2-4ed1-a9cf-f8d7d64c4e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f02fcca-9012-4ce7-9bd6-e45881c69943",
        "cursor": {
          "ref": "54e98494-c594-40d7-86fc-8ceff6058a5d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5d36934c-62a8-4bcd-bf5d-f7e5c6638581"
        },
        "item": {
          "id": "0f02fcca-9012-4ce7-9bd6-e45881c69943",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8c715719-5ac2-43a9-84d8-2e041f1ed0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2f45f3-f854-4782-bb5a-fe091d8d1c73",
        "cursor": {
          "ref": "a0fd8639-ee03-448a-910a-4c468b0e8cb4",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "44157f38-b328-403f-acc6-64b6b82572a0"
        },
        "item": {
          "id": "ec2f45f3-f854-4782-bb5a-fe091d8d1c73",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "64acbe30-c0d2-4a1d-9888-c3efa311b014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8252bab8-8a34-47e2-a6e5-15fcf5e9e2fd",
        "cursor": {
          "ref": "d2a09c55-c167-4b94-92ed-25b32ec82b82",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "99f84fc4-2b4e-4968-a57e-ff3b44133e92"
        },
        "item": {
          "id": "8252bab8-8a34-47e2-a6e5-15fcf5e9e2fd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ea0722a4-15fd-44b2-ab35-ffa948bb1087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be11ea13-2744-4eb7-83fd-ddf347a3cd57",
        "cursor": {
          "ref": "f4124616-d662-4afd-b0db-461c1bc88d02",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4a40302f-f150-491a-a58e-558f598e2803"
        },
        "item": {
          "id": "be11ea13-2744-4eb7-83fd-ddf347a3cd57",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "dbdbb22c-0ff1-40a6-9d87-027e07786ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8394360-a192-4668-8bbd-547c5fe80ad6",
        "cursor": {
          "ref": "518d733b-9d11-4bbe-9aed-f7958593b7be",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c992f311-8517-4116-b87f-70f93bb42962"
        },
        "item": {
          "id": "b8394360-a192-4668-8bbd-547c5fe80ad6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "57ba182b-4380-4701-8959-871bccdd8fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc0702f-ccc6-466f-a36e-5313ee13f64b",
        "cursor": {
          "ref": "52d6d21f-56c0-4f6a-af9b-36877164b385",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "faef296b-9f13-4f5f-82a4-d65e876b5136"
        },
        "item": {
          "id": "5dc0702f-ccc6-466f-a36e-5313ee13f64b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "de7b1de3-1bb1-418f-a37c-d3ce6ad46434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2d1155-928c-4b85-8063-ae735b1ffc1d",
        "cursor": {
          "ref": "64e4bcf8-16e5-418d-bc92-176eced4847e",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "73ca7d96-9ee4-4dc9-85f4-a7ef7dddc026"
        },
        "item": {
          "id": "ec2d1155-928c-4b85-8063-ae735b1ffc1d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22fb8901-8a46-4eea-8b96-2cf28241b811",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "94093db9-a161-446a-acc8-833f85340df0",
        "cursor": {
          "ref": "03400019-12fd-42b5-b243-1f80cd8d3cc6",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "72cb197e-1365-4493-89b5-5b6a9b8f253a"
        },
        "item": {
          "id": "94093db9-a161-446a-acc8-833f85340df0",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d3cf94c4-e4aa-4052-a138-880ae9403fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ef97975b-585d-4f9c-a210-d664a6fd8db4",
        "cursor": {
          "ref": "e420f5d6-6fe7-42d7-8094-143d2756b354",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "15f72dbc-d260-45ca-a5d9-913ca2d8ffcf"
        },
        "item": {
          "id": "ef97975b-585d-4f9c-a210-d664a6fd8db4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ec65013e-e238-42a8-893c-e527410f0b8b",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "621cc210-b9a9-432f-a07e-561705084d0d",
        "cursor": {
          "ref": "075216cb-553c-48c3-bf86-db6e512a4e76",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "63e00768-b03e-4afe-b8e2-1aed52c947ac"
        },
        "item": {
          "id": "621cc210-b9a9-432f-a07e-561705084d0d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "845814df-4c68-4a8f-bd8e-79c5c9827303",
          "status": "OK",
          "code": 200,
          "responseTime": 2192,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfeec82-11da-475d-be1c-4d21ec9b3292",
        "cursor": {
          "ref": "d1225354-8608-4157-83e9-cb68cbdc184a",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5aa66787-ddb6-4282-b772-cfe7167deba0"
        },
        "item": {
          "id": "8dfeec82-11da-475d-be1c-4d21ec9b3292",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1a3a05d8-7014-4975-9e82-938fc9ae9629",
          "status": "OK",
          "code": 200,
          "responseTime": 2277,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faec65f-58a3-4019-a3b3-b54f1fb47167",
        "cursor": {
          "ref": "dbd3c95e-0411-4857-bd3f-8e23d2d919b6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "130c7567-6472-42b7-99e7-006ae1c9ee33"
        },
        "item": {
          "id": "6faec65f-58a3-4019-a3b3-b54f1fb47167",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "85e6795f-a5a7-44fa-ae90-2f4e45077de0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6faec65f-58a3-4019-a3b3-b54f1fb47167",
        "cursor": {
          "ref": "dbd3c95e-0411-4857-bd3f-8e23d2d919b6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "130c7567-6472-42b7-99e7-006ae1c9ee33"
        },
        "item": {
          "id": "6faec65f-58a3-4019-a3b3-b54f1fb47167",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "85e6795f-a5a7-44fa-ae90-2f4e45077de0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6faec65f-58a3-4019-a3b3-b54f1fb47167",
        "cursor": {
          "ref": "dbd3c95e-0411-4857-bd3f-8e23d2d919b6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "130c7567-6472-42b7-99e7-006ae1c9ee33"
        },
        "item": {
          "id": "6faec65f-58a3-4019-a3b3-b54f1fb47167",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "85e6795f-a5a7-44fa-ae90-2f4e45077de0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "77dd1d5d-7536-4293-a357-f038cd8cef44",
        "cursor": {
          "ref": "d4d426e3-f203-4279-9e33-87adaf9e1063",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6fdef3a2-4849-4258-bc56-8cde14e469e2"
        },
        "item": {
          "id": "77dd1d5d-7536-4293-a357-f038cd8cef44",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "20e2aa34-2f81-472b-b549-07f70b3988c5",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "16144f99-15c6-4d74-9ae1-4c8898a28814",
        "cursor": {
          "ref": "8da3c8a8-09d4-498c-94ec-d8c684c6c6c6",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b8db4505-ba74-4459-9e2a-fae9612dcb1e"
        },
        "item": {
          "id": "16144f99-15c6-4d74-9ae1-4c8898a28814",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "82e33c25-1bfa-4fe6-bb88-abf3b6849837",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "16144f99-15c6-4d74-9ae1-4c8898a28814",
        "cursor": {
          "ref": "8da3c8a8-09d4-498c-94ec-d8c684c6c6c6",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b8db4505-ba74-4459-9e2a-fae9612dcb1e"
        },
        "item": {
          "id": "16144f99-15c6-4d74-9ae1-4c8898a28814",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "82e33c25-1bfa-4fe6-bb88-abf3b6849837",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c7807991-66f5-4532-bf3c-feaf75387a02",
        "cursor": {
          "ref": "91e86369-ffa6-4017-b2ab-f9caae62bf2c",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8bfc0f6d-48d6-4b50-ae69-79500681662f"
        },
        "item": {
          "id": "c7807991-66f5-4532-bf3c-feaf75387a02",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a7e3045e-4d46-470c-8ff2-31af9a078009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2fe5fd6b-81a5-4c22-b779-b536987dde00",
        "cursor": {
          "ref": "fc521a18-dcb3-415f-be5e-2631542170f7",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ff2f0e19-08fa-4b91-b6de-34a2455972bf"
        },
        "item": {
          "id": "2fe5fd6b-81a5-4c22-b779-b536987dde00",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d079d8dd-3fa8-4ddb-ad8c-d0dcc5165024",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2fe5fd6b-81a5-4c22-b779-b536987dde00",
        "cursor": {
          "ref": "fc521a18-dcb3-415f-be5e-2631542170f7",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ff2f0e19-08fa-4b91-b6de-34a2455972bf"
        },
        "item": {
          "id": "2fe5fd6b-81a5-4c22-b779-b536987dde00",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d079d8dd-3fa8-4ddb-ad8c-d0dcc5165024",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "316c1b8b-0a11-4a3c-b8fe-5df5f32e1b59",
        "cursor": {
          "ref": "a6326f91-65c2-4a30-88bd-196f876afa29",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d63d048a-ee12-4207-9480-1c8c30afcf7e"
        },
        "item": {
          "id": "316c1b8b-0a11-4a3c-b8fe-5df5f32e1b59",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a45f8274-0ce2-4fee-9183-9f549acc6676",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}