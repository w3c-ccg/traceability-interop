{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3f5d22eb-744d-4777-9b1a-2d0e0f500034",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6a3cad1e-dce8-491b-9a56-da9917fb5c0a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc5fb71e-7962-48da-b873-139f0bf825fa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5912a1ae-7e90-4381-a355-2159cf0321ad"
                }
              }
            ]
          },
          {
            "id": "b91a5d42-de8d-49cf-9a89-f326ee6d9e6f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f40ded53-0eed-484f-894d-806d90ec8f02",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0c1e2294-7aed-4517-b80b-036829298629"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "302b1982-99c9-4e91-86c0-74ecd1187846",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d024ed31-da18-4cdf-9ff8-16342fe49450",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a20509df-877b-40d4-a675-61676bf1aee5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6159498b-6b6b-4e9a-ae18-a0d2cdf61e91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb126b79-593f-4ae6-a198-11fa52ec0f08"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4fe9a7dc-be72-456d-af19-26ba3d95f2c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9321ed01-86df-459a-87b7-603595b7e033"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1ef7c1c1-72a8-49db-bfeb-e31ca345d8ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b8cf9e0-eeb2-4e1f-bfb7-7fd0529ead88"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5d7266e-8879-4439-a51f-7c1fa55eee60",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d70b5668-6785-4c52-a1b9-2ac710ba1ec3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86aabbf0-ab8d-4985-9d2f-c5306af039e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f94e99c-9255-44b0-b58c-f0888faa6a88"
            }
          }
        ]
      },
      {
        "id": "90fd7c40-807f-4650-895b-3f1faa96607c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4ed39797-12c0-44e6-92aa-35eaae3b8d27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7b0df59-e72e-47e7-89f0-e334b1d44b83",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9938db50-c57a-4eb0-94a6-3d17e208fb01",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be19c611-b64c-4c6c-acbe-c288023ed3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56edc84f-c4fc-4af1-b466-d8ec8dadb591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ace1b3-e07a-4ea3-8f11-388f6eb4a104",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09a4d48-15f7-43f8-b586-3e4af9a3b03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d42a0d9-97f9-4f98-a534-e7c802fa1f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1296a368-a12a-41ba-a731-ad5d4e278634",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8372d75-d170-47f9-9fe7-a1f944d73c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36c2b4db-1c3e-473b-986d-40e1b9f5ea9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3fcb70c9-1083-43ff-a1b6-33783d38b591",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47a4a1c1-44f1-451e-8398-6076f0f212ea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc731d61-e2af-4d67-88f5-edd64c027901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c74fa8c-1540-43e5-a84c-0d3989d243eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccb8119-591d-46d2-ae0d-b3cc6f5652f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b6e809-b004-43a1-a4b6-aede0859b9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ce0a27-d086-4468-a698-5e3f1fb049a1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd6787b-4789-4540-919b-2536e13600ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6dc83e0-a7a2-488b-8aea-2ecf9c6b8f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188ac515-4801-48eb-b12b-2e4a2eed987f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9f1cdb16-aee2-4306-8c03-e05ddbf17023"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eaab1008-0863-4d8e-aeac-a83c77f49cd0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2445c87a-b3c0-429e-8667-4e4a4282bc58",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b3a02b0-0ea6-499a-8cb0-64be368c1914",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9aafc9bd-5a71-40d5-a5ab-edea864d0f75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c933d29e-f533-4efd-84af-041d5a5ecbfc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "67850e76-0cb4-484d-814e-620f904f2ea6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b42caca-5589-44db-be50-3efb7a2933dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53c2e468-903d-4201-b4f0-2c59b7abbca7"
            }
          }
        ]
      },
      {
        "id": "9c48e7ed-7da1-4dd6-bd0c-e188f7bd68dd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "61c78708-0eb1-4a41-88fe-7ab56357c1b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7846a4cf-d352-4d8c-ad14-5eef28d2f7f9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "08a517a4-972d-4e3f-b2d0-3c6912405635",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cd28a5-ecc9-490e-8f06-8b18431a161e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8e5eea-4554-49df-ae26-177fb4aa5fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc96b329-25ba-4e49-99a1-d91cc851bde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d0e8e5d-84e3-4efb-b149-dcfcf70abe07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7eeb8c-c081-42c8-a006-31352a146576",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1672fb6e-42db-444b-9c3c-a433039a93ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8272386-b265-4877-a025-d5b721ec3955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb53b833-ec97-4cb4-a650-4800217b42fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fa93d03-2ebf-4ba9-b62f-b97a14c2496a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1798b8-a212-43f7-8187-582c27ce5238",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e877083-5eb8-44e8-8571-f6c1a7675d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7467427a-aed4-4d7a-96c6-580558406fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2352e581-2c1a-4796-9e26-da06637a1f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ee11fb8-0b2f-4908-83aa-3dd00735586c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ba0fd8-6549-4141-bedd-bcaeed8e497d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5c6292-4feb-40e4-8fdf-7e8665b02538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c4fa9fc-20b6-4c10-a35e-20f94f1b6b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573548e6-abaf-4c2c-85dc-ba624eebc63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e898ecc2-ed6d-45c6-9079-cfc485074ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3ecc94-be88-4ef2-9a0a-ae5012800825",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de3c80b-7108-4058-807e-990681db1d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f0d6fb-b932-48c0-80a4-11a85bd39d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0628d905-2e2a-435e-a3b4-77873b9c0185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54fe5f8c-62ac-4af1-93b0-c1615c720f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c61350-0a34-44a8-a16c-1f6e6a405cb4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67272e95-d40e-41c4-953a-f3765d49d3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94190cb-c845-42e6-9b6c-53dc7cd34b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb31ec4-1c8f-4f6c-a69f-aa0e5a9a15ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "842f75fc-8aa1-498f-b50c-b8f90f616f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231c6b0f-6427-4694-85de-856c3d02cc2e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513ff7fb-88a6-4fa5-986e-e54d3b18c240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a12d706-aec6-4ac5-9fd9-4d930e9d48e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2137f645-1209-46a4-9f0a-c3f7b0a29d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "672e44c5-850b-4c38-bb92-f324f40bf92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88ec578-59c9-4291-baff-1d2c3d91e158",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd790dd4-e69f-4e93-b37a-5da1f74f040f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5440df21-3fec-43a6-b03a-ad67be2aa27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8840b205-8a6f-4b4a-94d3-aee582fc8151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dec8cc3-1697-4f8d-b925-7402d84809d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552aa8a0-6c3c-4952-a815-385ec5b9a2b1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d374cdc2-5bc5-4cbd-a583-486e06d97b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64b29c9-4315-4cdc-8cc9-152b64c2ce94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4384f6bf-3ace-40b9-8f6c-4332c188b0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c7e5371-b67a-4704-ab10-2b68a8f19c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ee6c5d-755a-43a4-adea-a9f02dbcc5ae",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af43bd85-4f72-4082-ad06-914c41cea180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59acd2e7-706d-447b-8076-92c34eb6a9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c7c10a-5631-42f0-aec2-cf725920dfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14ee8c01-45e3-4a93-901d-5dd6fcbaeb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01de8f40-b616-4961-99e7-26ab91ac2988",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c484fe-4be7-4ccf-a147-ac4a8eacc16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd85b18-a77b-4cff-855b-7883f21b9b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760f60e5-df40-40b3-8d2d-325826850824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6940c72-3993-4a67-adbc-79692315a2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5acdc38-eedd-4d24-9f45-48dbce5b9d14",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e14815b-b90b-4e98-bd8a-3707f1ff5a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d047c3-b423-4056-aa45-895d1fdaf553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f90bf34-befa-4275-8dbd-a53e7e0241b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51169d0c-cd3a-4d88-8ded-a78b9fc4d60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e801e8-a22e-4eb9-b389-51e3df5927b5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bf0c9b-945b-4440-aeca-bfb992a92a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc312242-2022-4fe3-86d3-acf3e12e8b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21582eec-c118-4fed-b26b-07587196c741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f35fcf16-14bd-4000-8cce-ecb4ac445743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb944942-df18-42b3-88b9-fb9b5f74933a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81107182-326a-4d75-ab8b-0da53d2785bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c0fade-75a1-4dcb-a39c-528943fe1799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d36eaf-992b-42d3-9608-9d7e40a1731b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edffbe73-7085-47f1-8b64-6e0a294f4710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f8d46f-1bc6-4151-93ed-4d3d42552cb0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2292ac-b15a-41d9-89a6-09dee4aeea70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95c2d9b-7100-4bf9-afd1-42d649da7899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa536725-1ac4-4d40-8cc9-1a5359ee0ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e6406df-4fd3-487e-8617-5dc2dfd8ca38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d76ac6-8d59-49b7-b6c0-a626a6f8fb8a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f594d7d7-d9cb-4827-98c6-2b5405ef84d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2811fe5b-e9f4-470f-bf76-42448bb72840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59723617-d569-48a0-9f5d-6af207fc4d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e8f29cb-a380-473f-9a00-dbe3be840e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb633257-5f11-4b49-b854-588f14a29629",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0614810b-9acd-4336-96f7-dd8c764cf230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff26990c-780a-4558-9928-596238dbbc0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248503f4-eb51-4d0e-b71e-6f652391251a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ce5fd01-219d-45c4-8d31-7dc04d28a3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117fa12b-ab29-4bda-b8eb-749c09121122",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2526325-77b9-4e20-95c1-46bfe7d91304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d9f99d-9a5c-4efa-82f1-b1d29b96ecb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43932d70-5c30-47a7-82f9-b11bc6842085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d643188e-502d-4652-9866-cee421b8e5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3407001-e30b-4594-82ec-dbe33541fab5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39a99a3-e923-43c8-8dfd-7d15ed364c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a630cff-96c2-4254-b5ba-6cadfb0da794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e124a98f-175b-4e6d-85da-c5ba600424bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "341595c5-c138-4e64-b34e-7f9c478bf6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84187244-1b6c-4397-92e5-370e041c705d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a171c8b-1f75-48b6-ade9-d6afec6ee408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b55867c-45f3-4b49-b03c-be399986932f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc2b036-895c-4603-ba60-e24bd7d3b550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "395ac2cf-f42f-4ef2-89ea-2d3740a4ed6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0d93f2-0fd8-4456-98f1-1da530e3ea06",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f65b5a-175c-4f80-911b-6f8035aab911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b68a74-94f8-43b8-8826-855d91eb8632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adba71d2-f5f6-4f0d-b5a2-441392d1646b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03d7a25e-482f-4eaf-a9fc-18841b0dbc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347b8487-140a-4c48-9bc8-cc1616997172",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f4fca4-1792-4f99-8ea3-3f965a2bf17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c648b2-1b21-42c0-8824-068f6fbc1892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60bea70-dcf3-43e2-961a-50c1af3f152e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24927aec-b820-424b-a6c3-b88379d94591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce020bc-fcf1-462a-bc32-5ba11d1368bb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ef19d0-c23c-4234-a681-c9fe10c4c6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809212da-9cfd-47ce-b4c9-9a33bdc73539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce22cf5-d207-4966-a12b-717aac022d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "840bcd59-fd5d-4a47-8342-38d4007ae834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0ef2a8-0de6-4f9f-a39c-9f76a47b3f58",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e66c06-fcc7-42bc-8845-ed076a5bdc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa71aad-eed1-4bf5-96dd-a15e503ef404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac175a8b-da0d-4ffa-9158-d46bc9f18e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "28092a51-a0f2-4022-951e-5afdb12a527b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61caa51a-6626-45e2-a729-e17412355add",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06ef3d3-1a03-46c7-a7e2-0324cb1f2d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36130e14-37ee-4126-ad63-101057d8c65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7701f4b5-2dda-4368-8576-f167fe66d396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84fd8a5d-c904-4333-9fab-1506dc2a87be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4f23f5-2fd3-40fc-af59-fb1479b783ee",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3300a25-c908-4cfb-9126-2f8950cb7a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2cf588-f9fa-40cb-a86e-4baae9a68a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912a466e-f6dd-4a4c-8c4e-2a48de3a64f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb311ca-7c16-4241-be2d-726733d8b04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12f89c9-7742-4fc2-adce-4c1046b5175a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f665875d-85c8-406a-a160-9d4ce7901c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e74748-9dd5-419f-a27c-12406dd6e7f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb905c0-df51-41ee-831e-33333f43cab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e3e2e4f-f0f8-43d7-8b54-c61c20198498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7ab391-715f-4cb9-a8d9-4560353842d5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a12fc6-fb77-43ca-9a07-4ba0ee865180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "491f385e-9fdf-45f8-8924-36c1c47893ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4968c2-0b6b-4cff-a974-489051b05ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e4ba4f-faef-4bd4-a3cc-2f8283f5198e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095d52bf-d8ff-4ed8-9807-2fcdeb759f8a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dac3795-4f2d-4dcb-85f0-ba741437b1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc9b70d-122a-4f80-a536-c4dae8476b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efaa6db2-35ea-4b5c-ad48-9366a7d39d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd85c2cc-2992-4624-955e-8976ada0592d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ea33b6-d201-4beb-aa1f-6992d12d2a40",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30c3efd-f0d7-4273-b162-280416201722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b1c18f-bb6c-4fed-83c4-6f92e577f6fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759e27c5-2c88-4235-abac-46ff8c8ce1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca821bb-9308-482c-bf31-6ebea1449159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10343cf2-89bb-40d4-baee-3ef6278f7c23",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a8525f-fb30-4ce7-a626-ec06c4ad8290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0087b6e9-aa1c-46f6-95a8-90e47c01d703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e193a26f-b7ed-4d26-ac0c-b36528491410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29e9b373-0c63-4c17-9f3b-8f200da5f8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c089c5c7-c5ab-4b8d-a612-3fe04f1b04ef",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a73956-a45d-4054-97da-207b9950ae00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a3658c-fa5f-485e-ba72-55a61ab10db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea28cf3-728e-4ac8-b020-d12014a7733d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "438e705c-7836-4ed7-97e0-22c44344ada1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc36aa82-0942-4a28-9577-3b8325a50385",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c922431b-25fa-4383-bbd5-c5f19d93dec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d641f35-8f20-4ad6-8192-445791806bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410557dc-fc86-497f-bb44-531de076482e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "642b6c1d-3a3c-4755-93b9-fc9003bb2d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fa3427-8cf0-48ae-bab0-e51233179685",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3ec98c-b71e-42df-9706-8e41c932fce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad16389e-42ad-4d7a-bbe8-779a0a806485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f434db7-426d-4f0f-a8c9-b189905a5833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b97d58f3-7e35-4024-a323-9bf833954ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8c6b8d-1a34-4775-886d-209de7140f15",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da294071-449e-4d77-b1b7-51af6a159e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfcb648e-7ec1-4db5-9dd7-7185c918756b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b95b52e-d3c9-4395-a9bc-19816535f5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f0daf0-79ff-4e38-9ca7-e9251899266a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc959c8-537a-4457-84a6-8c28aaa4a9da",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70335d19-1bed-4df6-b9da-fa9bb6dc26c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bd27874-76e0-4604-abba-ac06f3c20a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f44159f-4a8e-4448-b466-901402b228d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68711357-97fc-4937-9b5d-ec0a08e2a6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6372be51-1af6-4de5-9dbf-ccce35f46f25",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d128bebb-5297-49f5-9a82-be4a7513da3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df39a4f9-abf7-4f90-82d2-51c799be1314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db652e6e-8986-4f98-afe4-dee2f28836c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2222b3ef-3880-46be-8d27-a6a3fff152cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9846c4ae-0c60-4d59-8cae-49140cdda949",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39240073-1607-4936-846d-c372329d5f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a81138-9029-4b55-9041-0b6b20066c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce2230a-7b22-4d92-a33c-3762938725aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5672a833-cf33-4d9c-82bf-2e9ab9348b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946b6cab-68f8-4664-bb61-bf979518593c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51511fc-badf-420d-90c3-26a8f17c426f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7758e399-3036-479e-b787-51fd584292b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4d44b7-3feb-4f6b-8323-37ac262fb20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1def9b02-9226-4f9a-b281-51e0c09d59ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a843a0f3-7676-4d80-a46f-8b83a798bf87",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7529bd3-1901-414e-8331-feeab6182507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1e90e0-afe4-4c01-91ac-a4434f33ed02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b7e489-746f-4fc9-8c3e-2e0383365e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3997870-da63-430f-a2a0-94f7883f1cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e478c3-c8f4-4c0e-a976-233faa35d4a9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2224da3-8c38-415d-8d60-c0671b24d83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa7bd75-5e77-4c53-8dc6-b42b89aebb94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9166a0d-e319-43bb-ad93-f319308395ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8afc0143-9fdd-4664-9683-28fe574bdea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d81455e-1cc4-4de7-bf3e-3df4c21a759a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e263eea7-e4c6-42e8-ba85-7c362233faba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ea2049-3a0b-4f65-8778-5fb9674668bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd03036c-9690-408b-9df0-e369dabd5ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9a742ba9-4111-49dc-91a3-6f64fab9685b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f756cbb0-e551-4b10-966e-125c4df2c978",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0c7d41-8962-409d-9176-8b2de4c31e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd98aa79-7589-4d8f-8918-87634ce7f7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90893240-cdb6-428d-9d27-5dcb34309d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51a17ad6-4c9d-4ac3-bca5-8fd25b3c7ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53af8f60-a472-41f4-b01a-1947c1533cc9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9844ae-59d5-46df-a2fd-0937cac2d879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26f00a1-64d5-49b7-bab0-05bc7bd1df94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5105643e-6c6e-44cf-83df-95dd20f0c049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1948590c-9793-41a2-8f25-b8a3b96256a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e20837-94c0-4b30-823a-4c893c0b5b00",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2197fe1-dce2-4a2e-9bbe-8ad4de2a880e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972ea427-be76-47ef-bdc0-9bf5e9f91ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ab1369-c25b-49c0-8835-afddf27a94a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61ed29b3-6e11-4dc0-a766-6fed2d362da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c41fb94-6a48-4559-8c7a-978679b6373f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174b198d-739a-4a92-98fe-c594ffe41cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91388802-9c7d-47bb-88a2-c81a8d31a4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53187f0f-01cc-4a6d-8670-d289e739f607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0936453-ad20-403d-9a5d-2922eaa6ba8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c366304-745a-4b0d-8e48-b10e6b8b3dc5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350d846e-cae1-478d-90a5-99004f7df3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c054553e-fdb9-4b52-bebd-6c9d6f215710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996777c6-20d8-4cf9-9d0a-85d72a125eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce74012-5a6c-4ab8-9268-01dd5bfb3595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16498559-080c-4058-82d7-3cd8ac6d8058",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7373a0a-908c-402d-a666-7839bf31c4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b51f94-54f8-46f8-a0f1-f08c1426af7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0374248-a3a6-4bdc-a69f-1a33af33660d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "054b2900-2560-4678-92d8-3922a24f2d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5daf5a63-9ad3-42b4-9dca-85e744b41675",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e623d5ca-ce1e-4ddd-b30d-8c0bfb289660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bba8da-a14a-4f09-8188-0a1ae1f9ca7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1596293d-8b89-4a46-8f1e-41abb9b04b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57f6ad8e-88d8-4bc0-be3f-68def046272b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c74022c-aa14-43a2-b66c-6298d76ad112",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbe369c-a6a3-40a7-83bb-560e2602bdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22591292-5b69-42a6-8bc2-27f84ceafe88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91364974-4f3a-4dc0-9c3c-9cd498e73e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab9de85-e8d4-4317-b361-f564b4b756fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b458a0c5-21c4-439e-afc8-0c707a019c15",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ff11dc-4ab7-422d-9ae1-82b653aaeddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c7c5bf-052c-4528-ad8e-a855547d549c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ff6e9c-506e-49cb-b481-3bdc107b5df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a803a368-2264-408f-8161-bcd04127c1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a486fb94-f5e0-4bdd-a484-3036cc89a366",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688c34a1-cf69-4844-b055-312486623d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ff47bb-7781-4cdf-8404-1389df307e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adde593-0a42-49b9-8708-44526b6c63ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdca29a-6849-4a10-998a-786e6f84f304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065a979f-ebf6-474d-ad4d-336407f79a18",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4daafc9-4c25-4bdc-85a0-27bad1d3d005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6fb6f66-7b3b-4981-a24a-04468230700e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7e6e66-df72-4d4c-9a30-f023481b8672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1634905a-a48b-4aff-b945-e1a4318a7e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6e0328-5345-4387-b187-c57167b72765",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fd9e11-fa81-4079-8c89-fb0aa3b53f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a3b4a8-c7ee-49d1-b5d9-431c4dfb669e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d2511a-3240-457f-8812-41a3cfa28606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5930fed2-dde4-4480-8aad-6d2b9a49f330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0efa24-d16d-40ae-8314-23609742b525",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67711b46-143e-4ead-83bd-a47a287c2532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa3a277-75ae-4323-8077-927b634f362b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b58ef17-e0b8-4330-8734-aafa5e96e70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53b28a95-ac2c-4dca-a103-4d186c369935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945d1bf3-da8c-4d14-9bf4-38bdb6636332",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba78609-2e92-4e4a-84ea-c09cbea6eab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef3464e-0278-4139-abac-b74d9f2437da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb70443-6f29-412b-8529-20781f106a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e13722c6-1338-4b2e-b50f-4cfdac0ac017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00294062-68a8-4004-8341-1069cf99d67a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2664a50-c377-44c0-b5bd-0c82de3b4191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3b4adf-7389-4610-850b-d831bd43ee80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f5dedb-968e-4fba-8c37-e877bdf6a017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d44e66a6-829a-409b-9698-b4853454e4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139c00a0-3e2d-4ce2-9238-c77ee5947eb4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d70cbcc-9b55-4c2a-b106-ccb751d6aff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80716bec-0c15-4bad-af30-30e37a87f4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3871720d-18c4-4dfa-8b1e-1ce416595a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed509d43-2a89-4121-9860-857c2bd6239f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ebdda2-ec1e-4d50-8a65-87f4d9959cb2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d140bc16-c67c-4b99-b309-c91b3b29fc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2313ef48-8084-4b9c-83b7-adbfcebca2d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5ca8d6-62a3-4cc2-9268-f36615958c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3ac2f6-9f11-48c8-b1dc-ca2ee4f9a4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de030b4b-accd-489c-b9d0-f025616048aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131146fc-e74b-428c-b3ff-b4e2b6b1e7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88ec9f1-4fb8-4f50-89ed-47ce8410fdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455df3f8-149a-4dd5-9e99-de821009f4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc048fb-64a7-4a19-a82f-ca80da6f604f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3b5b54-2899-48dc-9fa3-72110d8410cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d11a2a1-9a3f-4f72-93b1-0385c815b2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9852ac13-f0e2-419a-b44e-5ac4e02258e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92acf3e4-63e4-447d-bf49-d6e78ee08c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b815560f-ef59-4606-9f4b-616245ab8983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0f4949-d76a-413f-87c9-dffab54e310c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cc7f61-d3f0-41d8-ac4a-5789addefcf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7ebde9-0a07-48df-b27e-2b06b4b8f2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56af1d95-b083-4bfb-b8ac-305bb4530d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae59e2e7-0783-4184-b15e-c33a3a4fd126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de99951e-a76d-4496-8b88-651c67870d97",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d6d0be-7f41-4312-850f-20b72e84d4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5049b8-41a3-488c-8795-7007492f2a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d758bea-3170-4c1f-a386-742ae0b2849d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce25d640-b781-49d9-b08b-341326e077f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfc21c3-e765-44b2-9176-94c2af0970a8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99b4efc-9906-496d-9e8c-3c0f9f0f6193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a072c3-5d55-4b9f-ab7c-673f156a5a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d56d199-2794-4bff-9c43-2aeb764eeb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25c1a48e-8196-4cbd-aee4-a8cc7f2f2591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd1687f-9808-48a7-9b81-1d7e31a34fb4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2537f14-c61b-499e-b417-58ce02f6f8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850aaf6a-ccfa-4010-8557-c4aa34e5dd1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3ebfd8-f72b-4108-8573-6bf3ce12f187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7becaf8d-ab89-4421-8910-64bd7a10d619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708490a8-f19a-46e4-942a-b0f875327191",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2afb26b-ba1d-4a06-be16-1d69f36890bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6ec778-1f7c-49eb-86f2-32b418c57890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea5ed7c-5f90-49b5-8a96-8754a8287c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af146749-e63d-4069-a1aa-33ac8a7b0037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595af7af-af14-41cd-861c-2aaea4db07ce",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc29e92-2bfd-4e76-b3dd-3380b4024bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b662a388-1680-46a6-8dd0-158518ad3639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b001d526-3919-41e9-94fa-c644010a668f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf6b445-9c35-4a00-bbbb-5cd838cd3abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b8f1f0-28af-4f2b-9bb5-ff6e5a7d1ce8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbaf92f-8efd-4c74-a7f1-25669a9f4db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf182d1-855a-4347-baa4-7b0bb5f62e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e72894-f6ce-4470-96c4-960b4dad4419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7127bd9-30a1-43e5-9723-df1b741847f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a9d51f-f278-4f0f-8383-bf75c75074b5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f51b865-2add-4c8c-be83-03de8c867e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c14b82-ef38-4891-8203-8a25c11a3c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44e4484-0637-4233-85d7-8fbf2fbb1c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a8e186-d501-40cd-a3d4-abc4d65d5cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85444f46-7794-420d-b7cd-5ad7f9e376ac",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e86860-b638-4073-bf67-62931a9b281f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094d7a66-f35c-405d-8aee-04f4a8c61ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bc2711-2bbd-46c0-ae53-356998b7111b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b76c2a6-6bd4-424b-aa7a-94319591434c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbe041a-5062-4411-8f6f-85f6db229874",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faaaf8cc-7a9c-411c-a5ca-85eb1648daae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918b47ec-a9c9-4635-8761-8855be0a39e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bf27d2-482f-43d7-ad66-a27a5529c5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce4db44-bbe1-4023-b1bd-4b70190043c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5080dd-7dc8-4f64-a7f9-b675c6ccd72d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7b2ae6-6487-421e-9c1e-15329e669671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c6074a-5004-4ace-b271-0b30bf9f0e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02bbeea-f2ed-4e89-93ca-1c5902f54613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5940a704-61ce-4ed4-8702-98dd54dc4866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dce1b4-376d-4eb9-9b14-96d13f2b39b6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ab9a1c-e379-4ebe-8dde-cd62b9473bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c473f721-cf82-4263-941b-979ac9976481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55840e79-fb02-4ddc-b865-225e9cad1cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e26e5f43-9e9e-4dfd-9513-71f5f994cbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0677a3-f9fd-4b12-89e8-1435d0374eb8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b3a249-45bb-4d94-b748-08a614f567f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a91f32-f7d8-41c4-b227-89ffaa559a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d5648b-192c-464c-b4c7-e7a938d363dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fda19ca-8db6-4dac-ba68-4bba891df2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19491e3-1c2a-46ec-add5-b2660e3aba05",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d972cf3-c9e5-477a-99d3-d467406cca3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2902584e-0230-42a0-9340-eee5e1e22d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898b1cc2-aea1-4560-b384-66f6aa226131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b317db9e-8c0d-4eb1-98e2-1ec32f00086f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a65a3a-9a75-44a8-98ed-a31eeac9c55b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af21352-56e3-4f95-8fe4-b4547d954bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8779060-ade3-498a-a7d4-eb677cc6f532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda7e469-93c7-4a8e-a25e-5d6a97c89945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4f61e8-20f4-49c7-a108-6d52269c284a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac99cb8c-3074-4605-add4-a385df0170b7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f745528-319d-497b-a922-9b5b95910a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f22304-1b81-4dad-bccd-f6d1fa7dc647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2a1b38-cef5-442d-a548-4782f444a012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a19f6f10-7aa5-41a9-81c8-91764473a839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f75fe07-f32b-4604-a760-fcd9c6652180",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2707e42b-fc35-4c9f-86cd-75d82faece53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79408a3c-2322-49e3-a6d3-d93fa92d245c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7458103-a40b-42d6-9137-96b04073b3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e66c6de-6b1e-415c-80dc-0e79b3893cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28591f65-1cbe-4f24-a554-966ae2b5cfb4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb0e4d7-44f2-4642-b3c4-3a8d80cd073d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57924429-3225-4d30-8692-8b2535be1508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ff2352-2279-498b-83f2-1f67e80a5186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0daa71-a892-414c-b6f7-a47ad396b31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1333cb92-15f2-4324-9ab9-7b7859a6b34e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e213ed7a-07de-4186-b466-193159aacda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71abdc64-799a-4d93-a579-56e15a1e5237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc33dcf9-e365-49eb-9643-6d23548636aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b653de5-f662-4de9-8d29-f547f873c5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db116551-91f4-4d74-854e-a45f7028f7b4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0666d3f-3a42-4d6e-a8c1-4d3935a35b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac275511-8e6b-489d-b6f1-bbe081aa2495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105ba142-535d-48e0-a61e-c1a0d28d1a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "294a6fb0-aec4-47ea-a896-c89c8199b42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14a7fb6-37a5-4f46-82ce-e47934c84326",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbb70b6-4ae2-4083-9aa5-4b5a5eb4effc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49815f4-1b61-4132-9e54-79f56551213c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c424f71-1e79-43fb-b352-3bae7dc0d91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b0ff4d-926f-4969-9fbe-c594d3d334d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6418b9c4-889b-495e-97dc-7cb6c6e52a22",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932dfc72-0f5b-49ab-9712-73c8cd285385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f100ce-e4d4-4a7a-ad12-11fd83f0c5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519add00-a89b-4d81-b48f-6953ad46b38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "979477b9-4b8a-4d02-80f5-4a6ac563b38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9e9e19-9911-4f33-905a-76e6b01732ad",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f48d73a-577f-49cd-ad5c-00ca55634f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab921b5-0c2c-4823-b8aa-d378a7b7a6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679b0618-013e-4f12-b2f5-b222aa67f15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0c950b-9ab3-469b-bb63-5780eb31d47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6b07ea-5189-4496-a57b-c0b3bf2da6b5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ada1354-2514-4769-817e-f2bcad5c36d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a61736-aa1d-4299-87d2-d338ff914540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536bdaf0-2174-4fbd-810e-26301a1dc456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30a5697a-d1e7-4ef0-a242-563c9c6bdf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe61f90-3400-4456-a832-35cc4893ea8d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d717d73-a10e-4c2c-94ed-aa1116892412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdbde8f2-0b91-47de-b5b4-d0823e8b52fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6b9673-60cc-439b-894b-282718c6a3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e21450bd-f803-4e9c-8550-48a17c87e447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fae27d-43cf-4257-a051-f6112c9bf00b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9e465c-49eb-4fc7-aebe-8701f9197331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dde865a-0e4e-4e06-9709-1e56a62417fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2337a6-9ec4-4796-b53a-2ffc493f9280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5329398b-4b33-402e-be61-1efaf0808b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23750b24-28ce-4d54-b25e-ee4b0d3c7676",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e09a72-d90f-4514-807b-1f5157b71da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d105064b-8eeb-4ec4-9d02-20d161caeeb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a31152e-c7b4-454e-b3eb-6de02cb2b6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec558d6-ee07-4418-bbe2-1f8c4970f5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ac13f1-5461-49d4-8bd2-369f54f7428f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a144580-cc9b-4d82-b747-2acb5fbe3c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207a85b5-7100-47b4-ab9a-c5b3396a717c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bf6049-7a8c-41ea-9fab-cfcbad21b482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b455b35-0eac-45f3-a8c6-39058e0073a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41c4047-49e6-4b0c-a5cc-ec7a40543dda",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df518c5b-e1ac-457a-a6c9-412eaa1c34da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0639cf98-e67f-4232-a33c-928d355296c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d032f7-d6f1-4891-a4e2-d380ebbf94d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "17b4e4a0-6724-4a8d-aa48-319f4b80f4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec816089-a31e-4f17-9f01-30b22207e362",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cd7ca8-e383-44e7-a083-4eedecb574cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f7908e-5c4b-444d-866c-7f63ff0d9d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11706b24-d88a-4985-90f5-7b2b5ffca433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "80e588db-353f-43ef-8a09-be69a7a60256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebcd63e-97a0-4a8b-a554-2d8b43905bae",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598f77aa-d664-49d6-ad7a-4151891d8615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ab2886d9-8953-448a-8446-a2671a142630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da88f57c-7f41-431a-804d-91fdf78b8ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e90b4660-710b-4160-82f0-1a4dfdd15bbe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f01958d0-df78-40af-9f4b-9c08f71e87e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "deb6f717-d98a-44fd-9aab-38d1599c2398",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d285c1e5-175f-4ad3-bc63-0b192daac989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "513fd4ff-bcde-4f49-ad4a-53feaf44ce6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4a20b3-fa42-4dd5-803d-6c1dfab3a018",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e34ef41-9e9a-49da-a403-0799ab4986de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15e7976-6fd7-44d9-b2da-f750518282ad",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeff7c38-da36-40c9-8a22-051fe74ccc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47090b21-1ff8-4225-a9ae-6398ec1b4ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b32bfd8-0d87-48d5-a54d-cf2a3e701652",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "502fd366-b077-4313-8cbb-08921ea01413"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "580168ef-db48-499e-a2eb-f54302be56f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b35c6973-0d85-4cec-842b-18c9ad3a7591"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c02797c9-29d6-482f-b389-629b948b7a2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95f4b661-57af-4bbd-ab80-31bea57f5108"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a103ae82-478c-4e4a-91b8-b7a6fce07f85",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1042057c-cc6e-4494-b90e-b3f0546674e5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33eea418-6e95-4784-b45e-43b3df243b52",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c024a050-80e9-4ac1-8eb6-b7bcf1b9f199"
                }
              }
            ]
          },
          {
            "id": "da5252c7-63b4-428a-b1fd-131d92b28fcd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2af7c92a-311c-4039-9956-755f1a156090",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7fc7697-588b-48e6-ac04-ee8505dbbfb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f7e82a7-4a07-4011-8901-a860f5f4078a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7e256aa-b3d8-4678-9ad9-52625c2c6812",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "79e04a47-828d-4ac4-a896-314e0440c29c"
                    }
                  }
                ]
              },
              {
                "id": "57dcca83-e1a2-49f4-a1b5-55ec61494f62",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18d2b896-e6a7-4463-ae63-fe74e260d40d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2a54078-10d8-4705-ad0f-f823fbe1d867"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c19dd3b-bfdb-4a25-ac2e-291d9b4887c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a809b81c-6524-475d-a866-d981c4489e2f"
                    }
                  }
                ]
              },
              {
                "id": "cfdb649a-607d-4953-b3bf-1f48d76e6839",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3aef2d27-fc05-41c4-a22c-54acb7c9c608",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04fd1458-98d9-4883-9c92-b29ec509ceb5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ea03743-19aa-49b8-8a4d-141edcf668a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2953e7dd-df41-4312-a015-d993da4a3dd3"
                    }
                  }
                ]
              },
              {
                "id": "eae92732-82ee-448e-87f0-9cbfc0707f91",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "426e216b-40eb-4b2b-aae4-257f904c916b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7d931d0-427b-451a-aa13-151f283d766d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "462a7734-f6ff-428b-8755-a380de9647a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3d3c607d-1a5f-49ae-971c-4cfb3226ea12"
                    }
                  }
                ]
              },
              {
                "id": "13c002b0-8bd6-4e1e-b65e-d4d5b7901b1d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1a7b737-45df-45f6-984a-aef6bc588705",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21c50d82-c845-47d7-b8c5-18029bdeac37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e47710e-30bc-4d4b-82b2-811e3f24071b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c7963c1b-6754-4000-9a27-0f456ed2d7b9"
                    }
                  }
                ]
              },
              {
                "id": "cb32d734-37e8-47c8-96db-7bbc042f2450",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fee3ad2-6e43-4fbb-a9b7-f59cf6755e98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82ca1785-5d0b-491e-9693-8a78f39ffae2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7109b4c1-ad22-4161-9fb2-9054fa1efa2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b8a58899-2db3-4b79-bf58-432554c80ca4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1782c8cd-886b-4e9a-a7b7-c459962ee549",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4051bc1-bc3e-4df7-b2e2-0a936e72b7d5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8067580b-183d-43c8-8a37-3e5919f84be4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7a8ad50-9eca-427f-807a-41907ba9af6a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f588635-3b32-41f7-888a-57027330e001",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "38bf96c3-d6cc-4c1c-a8ab-dc7ca47196a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "261f70fd-0ce3-4dd1-867a-e4c8f3f8098f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69856bd6-aae5-4d39-a898-1caf36de272b"
            }
          }
        ]
      },
      {
        "id": "da4e26f6-3838-475d-a2cd-28bb267eed25",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1848ea3a-e7c4-40db-9170-b67dc52ebfac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9acac215-06c8-4bd2-8983-794c385bb9c6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4ec66d8-e99f-4d85-ba39-204572b3f58b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75f400c-6066-4b68-81c2-562bc445b195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0901f608-c465-41ed-b138-c18c1cf9dbca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0e0573-8153-41e1-b46e-58ba2971e342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c681288-5269-4cd8-8f8d-c9cbc7db04ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc095b7-b45d-48fc-b741-01faf3b168cb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa97f64-6b30-4a34-935e-2b672e606f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a6c5a2-7082-469a-a4cc-4caf660423ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9879fcb6-fd31-4cf6-90d5-28f109879786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69c90499-17c5-4400-aef4-1b9fcec4751d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981e5c25-7a25-410c-9cf8-0cc389c5cd22",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06876b66-564e-4bea-8395-da75334b2d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a07bbd3-e24c-4c85-9326-5cf0658bea32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454563da-7fc7-4854-89c0-81a03a66d4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4103ad88-5133-48ad-8030-80ed696b6658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb65f584-5779-442b-a457-9a6de63c78fe",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dcc3d2-ed3e-453b-a6db-5f7530ec02ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8bb372-4570-49dc-a69d-3ee967f87711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc354c2-565d-472b-89bd-fb6f3becffaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72613569-efa0-4413-8faf-525d5d6ff5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6598d22-5ee5-4710-b0be-486fcc7a2664",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf55dbbd-2424-4e5d-84fa-adabda837683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edcd1d6-3d34-408c-ad4e-8d09f358df0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f08fa8-bd9c-49ec-9385-ec54c7896114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fde39cfb-ed52-40ed-8f4a-e3206193bfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80cc4f1-081c-4fbc-a605-831906c7cece",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b0fe5e-bfbd-4ab9-997a-956df6ff4826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98327eaa-f1a8-4213-a220-73f234d36f45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c032c5-531d-4ff9-b673-4ac1fa84de56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "713b6b65-3e7f-4ef7-a1ee-d48a7fb87272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519561bf-f6f5-42f2-aecd-0fa8301da380",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51911b3c-23b2-4a8e-be71-dbb1de805297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f930bae5-1c30-45e8-ad3a-0e6193e70617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb40727-1c44-4be6-8970-346233b619b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "636afcf5-4c99-4993-91f3-e11e26581516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a3a435-3acc-44aa-ba2c-7ad4f356ac3a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e17428-ad8f-493a-b466-4480ffd6a823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5257217d-55b1-4abb-a91e-456a3d620112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5eae97-6584-4d77-a999-68bb5b0b4420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa8d050-c008-4781-b3d7-a04c3379c168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ba64ab-f0ef-47b8-837a-bc628868b8ba",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fc6b99-ba12-4cbb-8aee-1a41cb9fbb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64325d11-647a-46ca-a531-5c3c252646e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22bb93b-c5fc-419f-82b3-4edf828af813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0022e904-e91a-4887-ab5b-3cc8777badbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c78c25a-b463-4dc0-b234-530174243b0c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2558307-08f5-4b09-9874-8f46346fa6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b759f5-8747-40c5-bac0-6aaa07d421a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708472ad-ee4f-4db7-a8eb-5ec8c2d1839a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3db83cbb-452e-459b-a94f-85ce7d5cc5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a74d59-ae39-4374-8450-7729d48f4c33",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd08e72f-db16-45a4-a45b-faaf785230dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecfbd83-1fb1-4a7a-891a-43d74be495c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c901e5-14bd-4298-a589-f5ee728fae5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3f734f-1426-4942-80be-a203f6df8ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5aaec1-1cdd-4706-a315-d9c539af762d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52ba95c-860a-4884-8c87-f468a6a46576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07249fe-1e73-4c26-9c9e-c58bab38093b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ff84ac-3ff6-4721-bb02-fad57ba1de74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "882ec795-fb22-4f90-bf04-f7dbcb439aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80901bda-f408-46fd-b539-45fdd46fd883",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8df6623-1508-40b5-af31-c19c3730e8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15877189-02fa-482a-80dc-52694a73b7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3329aff-6727-4f7f-98e5-9c413bce7d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c13fa11f-ded6-486a-85e7-607d106382e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2121a90c-8f24-4460-8b95-9111d1eec6a0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df3b7ee-9352-425e-8d06-197d9eb7108d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c786df-6e32-4920-8031-3677fa6a4fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62466b80-2e79-44ce-b046-7cfa009770d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "57523802-62f4-47ff-b078-f9eaa9177485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328cf69a-4ab2-4432-afff-11f95b075f4d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fce93e9-15c0-4f51-a76a-895ed329067a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58bb3d0-47d8-4832-b87c-03bf57ed444b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a4687a-36f9-40e5-b280-f14c527fef01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3247d2-df73-4ce5-b916-38429b3fd7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb16536-f621-4426-af8e-876b1c89350c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfcd4a3-7fa2-4df1-a256-7638faf7b085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d90d41b-9eb3-4392-832d-6229493f6154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92037bfb-d06b-4c98-827a-57af9a307b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fca78dd-9a41-415a-8f84-9b045aaca2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d8dbc-8361-43c8-a9a0-c56de9a0008f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad80de3-2988-420c-ad9f-a1490c577cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e8f415-5274-4f40-b6ae-f4c6cca8101a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301fbee5-6459-4427-8978-3b6e1617af11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "824b483f-3be6-4189-872e-4efa04e1ace9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de71718-1bde-4b28-a5bd-fe07621294e9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7431a00-252b-4a8a-953f-9f2d1246dda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99f2c1f-dd90-4435-9974-7ae15769a830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888e7b2d-3cd0-4a74-a1b4-cac150cf52e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "84c99e7f-9816-4689-a2f9-3e1d84a65d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5673b6-4dab-41be-84f1-a72bd74c386e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2905df-78e9-476f-95eb-24d8e83a919d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b0c27c-1d2d-4d2e-b5d2-5051239e79ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9764e0-c1ee-478a-bdd9-f5f84a2d7673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab70b8f-ba84-4530-98a7-8bdcb2d12fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c076af52-bf88-4790-89e6-825421f5e4e9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e09eb57-5bd2-45d5-b894-3ddb36c236c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ec1793-75a9-41b2-a123-8e3ce249c930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f26065-004d-4b0f-b6f9-cd405910ed8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2948aeff-38c9-4557-9c05-6d668cb91f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55e978f-7bbc-40d7-96f2-ca96af301842",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b322219-da4d-464f-9b99-c09e83ae287e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e1afc3-cec2-4bce-a8e7-326a26170e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba5e268-1f6d-4abd-bf95-08de9698c7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23ef989c-32c2-4195-8dfd-489682b45199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbef9236-79ca-4e86-85a6-7007cdeb4e55",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f82f66-3996-4c87-a4e3-ac3f3832257f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef3b126-674e-4435-8f0a-023bf7e75b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7389b6b2-1dec-4768-810b-f0eb0e36bb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef0eaf6-18d8-4996-93a3-10ff9fba2bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0548646a-4a34-4512-97f6-c09f2c58a571",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e079b12d-155b-4a64-933c-48373c25c534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c956e38-cec0-47cd-822b-8e4cecc4947b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71c39ab-63e4-4337-9da6-554d0aca4272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14453cb8-f012-4ba0-a71a-0038e309eec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3eaa72-acc0-4205-beb1-90d88694e2b1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30e9d23-adda-4f25-8f37-9ea9c35f0615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f633f7d-48e7-43e9-a0e8-372f71f71db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdf26da-65ff-4bce-942d-0dc9a68c4b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4b0692-b7a2-4136-b484-24f211dac649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a265fe6c-582d-40da-9954-e6bce5d98e95",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9fcc41-82bf-42b0-9042-75e8132bff37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1bc6ecd-2f81-4598-ae52-80fd807c8ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc22ca22-e60a-4683-88fb-28a71be1c83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f12c89f9-8e40-4b66-a756-c876befbc779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d8e758-c110-4a9b-bdd0-b2ed5f2016fd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbbc34f1-6ec8-4a87-932e-c4cade62b2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6091119-80c9-40e2-8399-f59626ba4dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d210413c-dab4-41d6-bb83-85e76e706575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27bb8301-5ee4-4bb8-b174-a274bf0dc67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35b3156-ec7d-4cc3-bad6-94e927c4f018",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da0a531-44dc-4d4a-af5a-18dce2411f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d21c1c-df50-425f-82d0-b66f400169e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35077887-4a41-460b-9f52-010b3519cae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c492d0-0a25-494e-a4bf-1e86b8f26cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28a2844-f1be-4332-8b43-32cad630d6d9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e6a35d-dd88-4c2f-b6bd-ff4499fac950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4ad157-9d87-432c-b1ad-555d0243cca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc041f4-8b4d-4f90-9b9c-f6b3492e578a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "003ba9da-8e41-4048-8101-6c6ab294647d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa19f4e-4fbc-498d-9403-1af4aa9b5ad0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d090d631-d40a-4fff-91c4-192ec8e9b7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd6d994-2386-49ce-be54-ef769d2c8a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ddd1c3-0e34-45e3-95ab-ad5e757db531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af732308-4647-4176-85b2-86f23e13adef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7410b8cc-8176-43e9-870b-667a9933158b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d33321-9dff-4b1b-842b-71e1ff9e977f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6d7ec5-554c-4c26-8e65-e04fdcf993d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae37383-4bbb-482c-8eea-b8c3ddda4579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c47f0493-9a4e-4d65-8053-90a6d48cf96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc51ad0-14a5-4575-a780-b14518bfa96c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaa42f9-8ca0-4575-9e73-fef6b5d5ac76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4687307-fee2-4e6c-8bb0-afd92a8c4fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddea2cab-31c5-4cd4-a1f1-b4dfbdd5f572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55364747-0044-403c-b602-a011509c0b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4376490-52f9-4849-9bda-9b675acd846f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0670e399-5a0d-4132-b3c8-4ba83a587796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe1217d-4af5-45e0-9687-46afcf92e15c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e965ae1d-d3af-4974-8998-7ceafbd17754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c05d5e5b-581b-48c8-82c7-3a5db4158108"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d336fb61-cd4f-4bbf-a09d-91dbaa13ebcd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dddd1ed6-d4cf-4830-a2eb-e30cd7bdcf81",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6634786-c39b-41e6-b33a-bdcddd3f8928",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "800f1d5d-cd7e-4915-b7a8-a25d8864e3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6816b4-a2cc-4834-a9de-c110023660a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d72d758-8832-408b-a0b0-9c5c552e4719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2620d7eb-a4d5-4ecb-a46e-cc5b90ab5257",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb2edc7-a7fb-44e7-b9fc-ee651a8d4f50",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8938d65e-3f67-4c77-bc83-73efc75aa43f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4af82c-8e9d-4f4f-8170-1e6715e264f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af413a89-ccd0-4f71-b7fd-5fe568f3b23f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ec695cf-99d7-48c2-9e49-13260d1d7aa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "853e6428-705b-476c-abba-c570eeb2ef9b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5218dce-728c-4ca4-89c2-120e75813a83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42361513-ea25-4cf2-b51f-b969d5a2910d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5941e0cf-a497-49d5-9998-88f4a617f981",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c567c4ed-ad94-47cb-a576-1d62ac404288"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b065ad25-7435-4fda-945b-7b7ad38ca625",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d449462-6310-4d42-acd6-f646b1ca5624"
            }
          }
        ]
      },
      {
        "id": "6d5896bb-a5b8-4372-99f0-2c42d6ce51af",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bb923d63-e647-4fc7-8a29-3b8c681b8f26",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd1d24bc-1854-4095-b118-7b3e3617371f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b057c7d-6f18-4aa4-a278-67178996f0d3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc046716-4a33-4a01-a813-e2307722038f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d3ac77-7d0f-40ed-933f-df347f27e438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d50d1e4-af28-4c6c-b3c1-7c267b08af67",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51be63e-ea00-4e71-86e2-df362e071d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4271a550-0bb4-40a0-b0ad-59b9b771944f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf993c6-e17d-4693-90be-144568597b97",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33375b1-caec-4d7b-847b-675f79ea3bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691b79f2-87fc-450c-ae79-e1e7257c20bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59734e4a-b89e-4d9c-858b-a693d16000cd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1bd6e7-666a-484d-be6b-554521bd4578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71b122d-d023-45f6-b647-746585ec9b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01d730f-e6cb-4852-bc2e-5ebfe7a26e27",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4ec102-ee4a-4f11-86eb-b98850633055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d432b9-b65f-4eb7-8199-3f7189546e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92ab8cd-726e-4af7-918b-c941fe4394bd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f822baf6-59af-4181-86fb-c420a5fd7cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05888203-1b6e-41d7-8eb4-acc3a719a9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0fa380-d254-44d6-b87c-239c624784c1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6021a2fb-441e-43f7-8ee4-19308af7e3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3630f7b-59a3-4fe7-a6b4-cc709e93c123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593b3bd9-1f04-4e65-9470-e5b898406a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37da3496-d629-4217-aff0-d3671fe982a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63834ca7-239c-45d3-bd5c-9ca85acdf81a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186af485-7ddf-4f3b-a32f-74d0d14ae13d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8796f26a-73c6-4ae5-8d91-835652e16be0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f616865f-6fe9-4d74-9f8d-3293a418d045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1610c56-f5c8-44bf-b850-29ed60d7b3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c46e3f-5d29-44d7-a47d-65446e7841df",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13053938-ec2f-4361-a14e-833d8dd572d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "355a8837-7820-42d1-977d-4883d9bd8754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f7fd05-6a09-490f-9e44-0210c06c6ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f43c04-e143-4b17-b885-b59abe618dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3d02bd-76d7-492a-aabd-48ab02242144",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c67ac1-d720-4f5a-93c6-bc6c0f85254d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def1cd2d-cb49-41f0-b143-bf9080f7482a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d77ab2a-02f4-4fb3-9efd-e63b88da7138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8b29be-eb1c-455e-b4ee-4f75cd4e1411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9c637b-bcf7-4d47-bdb2-c2275e32ed96",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9329b23-c54e-4ba9-8cfe-0b29792f8fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d1bd3d-e3f6-4599-a00b-5214d315b239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a805ea5b-dae8-48d3-bfa9-2fba7fea01d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e077f0a6-a4a4-475f-864d-63e932dbae92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15337d1c-77e1-4850-95ee-8c3a5364e1cd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b175c1ad-9221-4e74-9f16-a4a225e18e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60ce5be-13d1-4fe8-b8cf-3a636bb1f3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99891edc-d583-4962-b3ec-54e8b21205ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fb0b0b-790a-4bc8-8380-c0c3ef4dc6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1318ecb7-f363-45d9-90ae-fa9521f92344",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5dd490-991e-4676-9750-e4050f342874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e1a94c2-567f-446e-bc64-69bac2bbec51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b463ac-4c58-402c-ba54-5b918505a9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22abf35e-ef12-4de1-8a94-68529d288950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac526126-7430-46c0-91b5-19cce798bd4f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34954138-5f99-40ae-b393-57d320382cdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60a4498e-d35b-4c94-be95-977624d5e800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2305d6c2-698a-4466-9fb6-566a2a28600e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cbd044-215d-450d-bf91-270eab815ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf26cfbe-143f-4e6e-afc2-970686b501db",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e762d3e-81e0-4a0f-a8aa-43eb55c126bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e4b690d-c806-4243-8da6-21ef2178fd6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69758c22-6b5b-4459-b5b7-18b0ec7edde6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dd5fb4-7677-459f-a19f-aa9d6b18188e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32315474-6838-4568-8a58-2087d40ebc6f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196c385c-31b0-4c77-8ff0-272d051a353a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32ea6454-ddf1-4611-9484-faee727891f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26f2f0a-eb29-47ba-b3fe-a74d54952efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d36c719-ae90-4f87-bc63-65053fcadcaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db58bd58-ad58-44e1-8fdc-f93479a09fab",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5b1bce-3ada-4785-8813-7c79dc6b50d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65b9c115-a985-4534-9b02-5ed11b6fb800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4dc77d-107c-4a79-8921-65544689e210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32dc4da1-bf9b-4c80-ae84-f1fb2607748a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7342b4d2-8e94-4b14-a6fb-9808c3a6f13c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95fddc2-cc5d-4960-b284-6822b3677193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30037aeb-714c-4d30-afca-59b921ba7403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5059caa-e6c5-4994-8ec9-654cb04c799b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e989e043-c455-4ba5-b24c-65d59c420748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e0ee1b-9b05-40ac-af6a-6dbb4b06e6ec",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c14f16-1a03-423a-b1e7-aa07dfcff18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d383c1-8272-40ae-a020-55d1a010f573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5cc30a-3df2-429b-8538-2070d8defb2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07cdc1e5-3a98-4fcb-9579-1135b4893573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4845cef1-c7ad-4d75-ba5b-b572cba8d22d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d948e1ed-86a2-4c95-ae3f-2c8c563073de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7b23ca-5c2a-403f-b96a-dd447b023fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7ebdd2-f023-49b3-883e-156cc2b3bf9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f1f02b-3819-4c91-8059-14b01bad61a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9d8df0-0226-4923-b12a-b231bc6924b6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15eaf53c-f7fe-441d-a0fb-e9fcf06b8c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc6bf4a-9df2-4761-be0b-1a099372717e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57595396-07d1-40c4-9e08-415a07c43d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5afcd67-df68-49ac-b501-7789d99baf56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ad8c69-1d8e-4026-bd06-5948e140929e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b844a3-17b9-4fd7-85ac-fe9d0285d1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e274bd-11c3-46e2-9429-0f2c75c49b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f615bf-875d-4de9-92d6-ba8234319572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab487a4-921d-4f77-b913-7023ee48bc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252190c1-1c1b-45ea-8479-52df945d1f63",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac019ab-2239-446e-97c0-6669072e0ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f4922a-5f7e-4ac3-95f4-1f8ae613da04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a26dd9a-2ddf-47a9-90d4-41d4565e1731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1378a68e-8885-4745-91ca-8ae483abc0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8463aa2b-5b92-4765-8e2a-8c4562743797",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b704e1ce-9c4d-44c3-bbbd-6ba54adc75cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83a1d00b-b5d2-4b1c-9f82-55a59cedf257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4215893-5e9e-4b48-8b55-02aa1a8d4faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d91f397-6aac-4431-8663-d88d818bb133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98187464-1595-4f8a-bc0a-544555114e1e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29a16a9-f753-4559-9263-cf15c786e24f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38ecaee-a806-4b20-ae3b-0ff9b0fa7b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed73365a-08f1-4acf-982f-7d947d8987a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e4a46d-f834-45e8-89a4-5d6bdf6558fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080160fe-d8af-493a-90d7-b08acb7f6308",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372fb277-dc68-4079-a9f2-b65f604ca93e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db116452-56ef-43f0-89a5-6296a4988a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22311772-5de1-42c3-ade8-5ce478b4baf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95592e0-ceb2-402c-be80-4cdf3551d51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9ea308-76cf-4aef-a405-a6e99b56758b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c5e602-d4b8-489c-ad2f-956bfeb5f906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2104ee59-bdcf-4c15-88ae-255cb3646389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbefe18a-01c5-44e3-a92b-c65253669892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6496de1c-af03-4fd0-8283-363100f85b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493b8888-b04a-450e-9588-3957b23cee97",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcf0337-2c7a-41f7-aced-61adbcc58b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b4f181-260a-4466-88f2-5dd38692bef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65823ecf-5ef8-4481-b050-adbf8664364d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d550731b-990b-4ff5-9034-0814c72a15c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab428a7-bdff-419c-ae87-72236e60828d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b81295-8ef6-4575-8f1a-c175e6a87747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a270171d-2ef7-4c4a-93b4-5c99f80888eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b865f76-37dc-4d1d-9764-6c3854cffc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4015764c-e71a-4661-ab91-7161a292ec80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca16275-55bd-4f17-b571-67d030737f1f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00214a71-27ab-48c4-8046-294e046117f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "542ce316-7b9e-436f-b49f-1bced6561c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc54696-27ce-4b76-998d-77d8c3565915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afef813-91c5-459e-97f3-07e83c43fc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd49342b-e84f-4825-aaf5-62137217e7ff",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abb5aed-8a75-427a-a7c0-7d6d62155530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93354934-2fc7-4d42-8347-e1b2a5e71857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cafe264-8dae-4183-8355-b6046270dc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39be491-f6c1-4561-9984-7be088a5daaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd715f3-9b09-4f6f-b33d-dbf7cc455837",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41c5952-2518-488a-b123-26504251cdde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad35156c-97a8-4d38-b3c0-3a9462787a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8077395d-f0b6-4e24-9d77-86a5cd469340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d84039-e8cf-41fa-aecb-68feb281dd50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3a4865-938c-4c02-90d5-74f67cebbb91",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16390171-b405-4830-8b7e-8a9cf34e6cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "566c8717-557a-4f47-8990-68be76247146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d104d0-367e-433a-9d27-a1e16acf7d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebc3d4a-5eea-46f6-b36e-817abfa13af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14f6a28-6b26-478d-98eb-bf917941b289",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6149ba9-b186-4f9e-89b2-fcd3eeb83034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "367c3d72-f9f4-4ad5-b5b5-803582d6dae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13671188-9f00-4b95-82c7-052445fd6ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d1d933-a99b-4d71-aaff-51a365a6f4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b313ebcb-23bd-4b72-bd2f-0294f70f36d2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38f4406-660d-4cbf-bb75-6caec5127f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18efe02-e868-4dfe-bfaa-2ac4fed84542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d99b621-c3ab-4660-bbd5-6cb46940fe44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9506eab-9412-4153-9eeb-22475948387e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6df0cba-b2a4-4dba-873c-c8b180ebd686",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b322b78-ef89-4897-8986-81b8911a514d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9944bbf3-53c5-496b-9bf7-6b11d4e53987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b110f9ed-6cd5-48b7-9a02-0ba6d3aded6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2db26c0a-d159-456c-b32f-1ebca9677b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c81367e-2cc7-4727-ac8b-bb1b54717000",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff11d310-1cd4-49a2-a3e7-a09227029a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbd9b94-7f90-4bce-9793-089cb1a78e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee8510e-57e2-43fd-8c4f-855947c4f63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca24dc7-e30d-4b40-9393-a634ad879b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b0511d-c69c-454b-9a3d-4948e940a90e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b8f785-a30d-4ece-a791-ba495ec34cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a20fe60-55e5-46c7-ad33-cf37280c9191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cfc47e-654b-490d-9f2d-d09887989beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a451532-70e5-425b-a26f-cf942f1cc535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d60a72f-b04d-457f-9d24-cd6829c4b067",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfe1619-06c3-4acc-bdc4-d83ee78b6d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120c5240-1b75-40c5-b3dc-c5f1dcc75192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c79a260-6d4e-4b54-b402-6e28a8f3f904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f869dadc-bcbb-4704-b290-6f8f3915be82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d098019a-5b9b-40a8-85df-3cbcd253cdba",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a21d4ad-c4ed-45dc-a4ab-4bd58dc175d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07f3de9-c09b-413e-b1ef-7c16c9d37ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0936a560-e8fd-4a47-bad0-528a7ed8c677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b65259-5e1a-4b1d-bb48-63103408a0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ee891f-d6f1-4da6-bc2a-0cd87dc061e9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8b567b-3a00-41ca-ad24-fc6f2157eddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3172f330-0e0b-4e1d-8bdf-cba8d8ee92c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc14863-8512-4431-980a-4c6e77d95714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcb6ca8-77b2-4c6e-a98c-798816b9903b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576cd049-6ba4-4257-b265-ab4ab82e7530",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3917254-061b-4a4b-92e7-51177adc7f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4c3509-6c2b-47d1-a67d-4f97a0295a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "992e7d89-1a69-469b-a8f1-c091f9f6d2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f33229e7-33be-4385-abd1-64e7a4d6178f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca58917-617d-45e8-a89f-75c0d9466acc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9432774d-5f74-4037-9260-bba0ce929848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2afcc4c-fda2-492f-bd3d-db831b675eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b361b7d-a08d-493c-bbc5-4a7212e35501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07096905-552e-4ee9-a61e-3b3ec91457d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0168fcf-2852-40cd-bd61-a269dd739ea9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b6abb2-a9a5-4182-88c9-f08b58cfd8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8dcef12-2394-4f81-99c0-bf596b9cd05e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2abe655-17fa-416b-87ab-41dbba63a127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b4efab-899a-47ed-ada7-27183ad23310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367b1a62-2cfe-4903-90bb-6508da480ad0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5728db08-b8c4-4c97-a7ec-be9d2fd5204a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65b6797e-151a-41d8-8fc5-28a7260c87d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db424fc9-5aae-4850-a2bf-001800d8516c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e48256b-6830-4ea1-a37c-87c6d2c11fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313f4c0e-2eeb-4295-8f8c-35d0b7fdbdb4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f09d7a0-e82d-48da-b276-999f46bf6480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13772315-862d-4bf0-b213-d5c4036d11be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "608b0185-f86e-472a-9121-b2cbaf0023ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63b6472-ffbb-4564-bcc2-6e708e2f4b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7013a99c-17db-418e-acba-2a01fc0da76d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c207d241-be2f-4778-901a-74260c7337f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a449f326-1fa9-4b3c-be93-5f548491472c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c910e8-171d-42a0-9563-27a84176852f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9405740-d261-4873-bb81-06a7622df48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17540b70-1474-465d-a7eb-99e1a9aa55d8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba04308-4f43-46a5-a8e5-6becbeb6d372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d0048e4-a6a5-430c-959f-7f24352ca3b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51fd867-6126-41f7-8458-273b14ec52f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f51995e-d132-4537-bad3-e2aea378525a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2034e9-263b-4ae6-95fc-a60a68a239e1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129d60ac-97ca-4c63-8ba9-b6d362e565ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35db7930-5ebc-4a19-893e-4a21108e2297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb807ea0-720a-464b-812e-416c7e4501ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef76f1a-3291-404a-afc7-1a49e5d55089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3d5b6e-5526-469e-ab85-a30f4455c345",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0206ebc4-4a82-42a5-a285-a4f7e6660063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb7f5cd-7043-4028-87eb-28927d90b802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ea0ba0-f493-4c75-bd48-df8df8960fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe04f7c-0980-4595-a71e-9e42fe527da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb199138-3ac8-4a2a-86b4-b7235b49512b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e0ffb4-3a4e-4dff-b059-2f8a90342164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cce5ebb-08b5-41dd-bd04-5062459b534c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b0e7cf-d425-4d3f-b41f-bc900fbfe6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aea1c54-3f4e-49d5-90a6-cdc653a8b1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f5149e-797f-4a31-99d1-b3c1e689d5c3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66205d99-8e78-4434-999f-cdba96545011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70cbecfe-6666-4bce-9ee3-38538d04c57d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb4be4e-1694-4928-b7e5-4eaf84fa493a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b96aba-919b-4a09-bb24-c2ec3a82a0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe92dc9-043d-4fc9-bd99-4d54e282c948",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87e432d-86d9-428c-af8d-00efab840415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba378fa-fe86-432b-9b62-956cbbe20780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ccc9f8-25da-45b1-aa7c-fa39ef7548c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3215d751-0f30-450f-adbc-56d86947b2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3dbabb-ec9c-47ef-b83e-de58dfe8d445",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0dcea7-5767-4ea4-af1a-405ea2f184d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1701f196-8d9b-414a-af4c-8731c4f0feb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323600de-746f-4616-86f5-6fe68e4e4275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa172d8-10e5-4561-b22d-156a1748ea7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914c942b-48a5-4c6c-b0a6-28f494d84cb8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f51e75a-53d4-4a5f-b718-3ef9c81416cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea67e9a-b5b8-48f0-b277-0aeb1f3f9022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5de3449-4941-40fd-8ba8-1ce8ea299ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03af6649-b04d-49d1-9c2e-9c8abba2a295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff99503-137f-4b7a-8448-c033023c1a68",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fe511c-d593-44ea-8295-a22f4cf91007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccffc3da-36b4-4618-a874-71e1c04485d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87def998-fa4a-4544-94fa-3b1f04694709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d160f1a-c260-4740-bb28-5b8affe715e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc8deda-8d50-492b-bd16-f74e6d53a907",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdea75f4-b268-4acf-b4e6-d3c5461352f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bc7864-9ee4-4340-be68-741d0e1cc2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cdee44-8767-4fc4-b959-0e4b8b088e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6843a7a4-52a1-4bca-bff6-84e7ea630f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa53dab3-3cda-4d73-bd55-971546040a8a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77124286-67c9-40e8-827d-1728b8e7e769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c167339-0672-43a6-84f9-30483e79b690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f57d128-b2b3-478a-b2e0-911684671ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f90ae6-e646-44a0-8035-77ba80a56fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc43d4a-0cdd-4455-9ce3-35ad4928b01f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc28334-cf0e-48ce-bd49-fa521ff303b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf5d7b25-d2c1-410a-ae08-6031d61832ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc6caa0-4e3e-4ba6-8bd5-08478adf8c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c662901-e25a-413b-92b6-5b965d1bae48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7dd575-06e8-4c5e-8f0c-e668f9109902",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac088d8-9b50-40a9-8a84-c9601aa786a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376d73a8-78f7-4cb7-9fe8-db437d26d1c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57deaba-a6c8-4f12-b86d-3debbd075b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b631959f-dbd6-4b01-8cb1-5e8801ab2deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6e746a-46bc-42a8-ad55-c924bc49ad95",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7950969-b8d1-4028-9dfb-73b4720ab67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c864f040-fe21-4287-999b-532646d5b455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51577082-f909-4680-8e97-a734ac016bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6a89f2-423f-43ec-9bda-5b0c522d9603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d42803-8e8c-475f-ba82-3e42d0ecd457",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee303ac-ef20-4ab2-999f-891ef76a3a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08fa2484-a885-4015-a5ad-b676bf4a6c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec49de31-fda5-424a-b015-738bbfe2b865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6727f22e-e534-4250-9dac-a84d91dbdf97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955a763f-c391-4ea6-9d58-b242f880268d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841de496-2423-49ba-8c57-7d46a1a7d734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31994ba5-f536-45fb-8867-5b57bce58ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99319d35-61ef-4124-bce8-f21e76324d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa315c07-a808-4548-a57f-50d12d07c328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521c5067-b3a1-4cc9-979d-e0077ba7e546",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c1d05d-8877-4e32-af4f-c47a8507631b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a74d5b35-3f98-4df4-bd85-611871eb9efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e4bf0b-2c93-4dd3-b086-745f85f50576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d34842-b878-4307-a228-bebf0049e726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d98437d-5c76-454f-abb9-8f80d55d333a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df6727f-6e04-41e1-a90a-2b1ea6c35386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ffa151e-c994-4406-bd78-29c86ca93a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6fb929-acac-43d9-9ac5-69f4fb3de0e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25d1e3c-1e05-430d-b72e-6346eeeecf95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0a3787-783f-4d7e-a7c7-76dd82a802b1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b2e7dd-f6f5-403b-ad36-391a0bc39e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae8e34b-8110-4ff2-93d9-699e107393a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9997fb-e85d-4e92-8301-f5d433dab67f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf7b4c1-5f58-4583-b3da-d2d93ecec9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4067c45d-3137-474d-b093-1977c4ad5889",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d877b8-99be-4e7e-9703-e2e302cd26e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fd1c0ae-8f31-4cd4-a856-ad7ad7c6aa01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1e553c-a107-4d82-92d8-a4432627c6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c4fe67-cd26-4fbf-982b-a6630b99321c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33414cf4-6907-4eb4-99ee-c29ce858e3c1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b23b3f-6ac1-4faf-81a0-19d38c975417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b5c0180-a331-4c39-b9f8-6a6f117eb3b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05554ea2-dadb-4d75-9756-c94d244f1de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71f3e8b-cb43-4eb3-ba19-19d8ade5bc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db330d97-657e-4cb8-9d5c-0127bc5a4fb7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc877a7-2b2a-43b8-9c49-893884c300c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2caa1a81-ba93-4980-b57e-ee0f82a3fd8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fc0e00-76aa-4bea-9603-81539f8d9f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4240cab-94d1-45e2-a3d3-ba4c85b989c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49eaa00f-9b5f-41f7-820a-a51759227f5d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052cb107-e1da-4b40-8fd2-57e466541f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aee86aac-3c62-42f5-abc9-41137aa6cb19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1fabdf-8976-4bed-a844-3492e8ded044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f2e1e8-b47a-4428-a861-9c12fb07ca3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38a1e9c-0961-4a7d-849e-d390b2e0e993",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e3df76-c656-460e-ad53-53d0de145d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e957fb6-bf84-4b9b-8ad9-ff769248f487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9464b5bc-13a6-48dd-b522-4e88f6e35a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49e5bf2-14b2-40fe-bf62-be6c6fcff825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd49112-13b6-450a-9001-de447d510385",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2596e5b-544a-4642-8f19-fc1515e26b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3542a84f-d769-4167-98c1-f24171695bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d54079-7fda-4f74-9b17-1cd9d2368796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6f55fa-deba-4171-a474-afa886a00df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8dac1e-1e42-488a-867f-a2d38d9ca6b7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b4ff5a-4d3a-4272-b42c-d63304c35038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc1d6858-6b8e-41ff-a64b-62e75486331d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e700b826-3355-486d-aba0-5251e40cba2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26aa32ef-674b-4eb9-852f-94f492a82222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbdc881-7d19-4207-8d03-69eca4bb12c8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407bd77a-d59a-464c-8799-ff6a83d1eefc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a8e3a01-30c5-48b9-b259-912800919ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf62de0-5a05-40a4-947a-93969c4c5d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82231042-6d91-4ece-a19e-ef09b5cba12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aab25bf-e5de-45fc-9e7d-4e9c43ee87e8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574a3c13-6ae0-4baf-88c5-fd88bcc2f067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eae3115-28de-4285-8b47-b0a623b481d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8667d8a-fad6-4dca-ade1-977ee31ff8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea4c4f0-f962-4e4c-93e5-2c865838ac57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a4988c-316a-4db8-aac1-470917fd1e1c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2658f8-6adb-4b78-bc6c-105868507781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec2a75c2-566c-410f-b113-4f5fda0e9fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fd112b-3838-421f-b50c-8a27cd2e62bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357d7bc0-44fd-4913-8c30-b25e0ed75cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d8c57d-e9c4-48c9-9ed4-a04524ff71e0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f65d13-daac-4ff2-9e7f-bacdde3f0838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088cb253-07fe-4d84-bfa0-d5fae4e164b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b78d76-1c73-45ff-9895-bd43cd31e58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3859bf6a-a82d-4f71-91e7-70317890c516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5989c9e-aaf6-40cd-8065-5d149e88773f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137ebcd1-673b-4592-b2c3-d69fc2538786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6177a7b-a674-456c-a717-351373f1d680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5d6b96-f748-41ed-8b65-925f58c0e0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f942bde5-3da3-4409-88e2-c0e5c7af7c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eba58de-1cbd-4340-9962-6edacf13c331",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bacf88-2e49-4dbe-bd48-18440be4d969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7b70e0-6fe4-4f72-a4a7-d2b06f3d83f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566b0dff-eccc-4281-ba53-17c56a4ded43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4794759-05ad-4ae9-b290-e974ef6f2f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d04ef5-297b-42d2-bcf7-daf1d1dcac83",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ce75f9-2490-439e-a749-df8316ac4c17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e806b352-554a-46f9-ae76-e3ac8e2ea229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c2eda6-0272-40d6-96fd-a8c8272cc2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "817477d1-7832-4039-91c2-f87384848182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65576b8-8325-4ddd-a6c2-cb5b7ceae0bc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b584c62-d9c8-45cb-b3a5-1876df7deca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f0425f0-ef17-4333-b325-a43b472dbe16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f355e9-13e1-4080-ac62-ab0090ca6473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12bfd7cc-eefb-4097-8dd7-32c26ce4bd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45d3a86-0f4d-4d1e-8f47-fb1e57b58464",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c372c35a-cbf2-4b23-b887-81ce6690ca62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5678da09-93cf-484a-a7c5-f681782a9869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0264cc-ce1c-4a7d-8a74-32947b0706ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04519a3-10a2-4b54-901a-d14961c4a6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad7a806-665f-49bd-9eab-384c204fb62e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c513a7-a2eb-4d71-b497-5398448956f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb91b8fa-68d6-47c4-be07-3de0a99775fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87d7d9c-cda8-4a1d-8dd1-6d9a9777fdd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ad5b18-aae9-4539-a73e-a72bd92bf53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdcc79d-ca0e-4d30-9b08-ca5c3e8efbee",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea95bca-2c4a-434c-b833-d85a0491446b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07750715-35e6-40d0-a1e1-96481a2abc14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8936c98d-42d5-4bd2-a4e7-7444ab63978e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c0d00d-6d8b-4021-a0b6-507df6905353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c726eae2-fce3-4afc-8573-9d33650df4a5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b676188-3573-442a-b89d-33180879711c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b282917-8c70-43cf-8a5a-a15525f767b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996f48ad-9e06-4b96-b7d1-eb7f90fbd231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6791c3f-ad20-4b60-9a8a-4135b1116441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e92bda-1764-4048-bee6-34c7e6e44790",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea3dfed-c71b-49b4-9e89-1f6470685b72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4dec258-359e-4b82-a5f3-7e1568229399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa40ad4b-85a2-4f3d-8934-e6ce3d893eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d04be4-a9b6-4d7b-98bb-59cfc5fd5b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac1bddf-7f7b-43e3-a15c-d825eceed109",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec592d3-3a2f-43bc-a1e7-6b450ebab013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "554f3338-98f6-4234-a5d2-f8b79d11cff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3841f1-2d11-4ebf-b143-3baf8253eb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae08ae5b-da7b-4683-bff9-f921676dd09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8c7ccc-ac0b-44a5-9cc0-6693c39c28cc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf893aac-a216-42ca-82f1-86ff6a39a33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c302af5-e5e7-4d1c-8a24-34f4158cf9da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c582f652-aa54-460f-8801-f88e77687db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2492fb-fc47-4864-adad-927acab17570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fc0ec2-bb98-4d7d-9eac-fb2ee1215c03",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cc50af-372b-4d20-b573-ab6f2d0ede38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f11cbae4-32f5-4e6b-870c-1a77b28dc541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ec1ccb-93ac-4e7e-972e-6ff8c6eeaa26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7971161c-9fa2-416a-9ef8-86bb84bcb734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8030f9cf-65cd-4b8e-9fa3-ea717460e697",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9620a5b-0d12-4e78-8264-ad3937bbbfff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0276aa7-26f2-4967-8e09-2f47cf21a248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b4b5f6-24cd-4ddd-8e7d-95cf81b7b459",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774a2f3c-2bf4-4c81-b0c3-227f621ae4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74251c13-ead8-4e41-bfa2-8829af13d32c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366eec05-9367-4aee-8ba0-922fd040a9c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cda92841-7f5a-49e4-8e75-cca4f83aa3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fde677-42e6-4311-bde9-37f272434659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc478a33-89fd-49a1-804a-be0ae79a2cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad3651c-ca0a-4e94-8f3e-7efb17011ce9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b5cc4c-0fde-44a2-8d22-985b054739b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e22ab39e-beb5-42bc-9e06-0be8337d4f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab44f700-9c28-449b-9aa6-7ad99155f7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931a395f-bc7a-4dbd-9273-403f71508413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fb6a4c-e51f-4454-b51f-308343418ce1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1620627-f793-4024-a706-909a68316f30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "796026ce-4768-4a3f-baa9-f5cabc0b8565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f049490-02a4-4bf7-824f-324d4d2e4b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb96c560-3292-4cef-a484-b28d5871a174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef95173-88be-4039-8a0c-c4cbfc1399a9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0629038d-8edc-46cd-8dcf-5b91e7e3c46e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f6cdef-cd96-480a-b4f4-72047ef20f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900720a5-0c82-40b6-add6-60fb127c9658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1893122-b29e-4cd6-8e1f-4b1adc81dab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ec6eef-a5dc-491c-85ff-ec73d654bf19",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb21188a-56cf-4e2d-833a-d221c1a0e481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd8e8fee-b83c-4409-b5b4-ab1616dd4e32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c000b2-9bcf-47bd-b750-7f6d551a1e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26476ff6-ee4e-4b20-8a40-9fd83a5ba577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3da9ef5-b3f8-4eec-b6f3-97eb6e06fbf3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e025523-f0a5-47bc-9b40-d035d30ae8ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa23ca7d-0062-4de9-8003-0cd8f87d4f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ef4a53-6cbb-48db-9628-7d579dc458cd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01310ec8-ecc3-4f3c-985a-66a45e1d3c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e03b448-0285-4fba-89f4-9dccc6791298",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0fda29-4ea9-4e4d-a670-6da1cf826eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9bfaa77-bcf5-4425-9353-c23ed9ac963c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de068562-1804-4f04-8777-9e85572eb129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092ace8f-181a-4cbb-b6a3-1bbd0861ea12"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe750fa6-99c8-413b-94c5-267587624a18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60e5de6f-3858-4130-bd4f-de0b26b0ccd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb943a66-1d58-40a2-a6cb-4e3263639888",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01c3991e-fc85-450a-901e-076a21e13cc3"
                    }
                  }
                ]
              },
              {
                "id": "8db0f8cf-de54-4443-9aa7-782638880adc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9371c0c1-a785-4780-b68c-7f5e53737a39",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072d4c74-f236-4e12-b459-695a270c53fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "821e4b00-1e40-40a8-9ca3-27259d199da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1351a2-c2cf-48a9-b368-0a7350184763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45faca3c-cdc0-4eeb-a32e-5c431380ebb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa58aa89-7028-440d-af44-8c99c58b4a7c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62149eff-1228-45e9-8790-feb6c7793e9b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dc96acd5-edc4-44c4-9569-a08198594825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e0a4bc-5fbe-49b1-821d-372b55d59540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18404711-2cf7-4347-8059-eabd26e5538c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67f9052e-2114-47ee-822e-41e019683bb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a9930b8-2dcd-498c-b671-ae9b35d8f1d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5018b732-3d0f-4a9e-ab10-bdfe507e71c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fbe0db1-ec17-4678-b135-c590138cf604"
                    }
                  }
                ]
              },
              {
                "id": "7dfb1395-f530-4a76-938e-f98be5af2ce0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1fc365bd-1e47-40b9-aec3-7bf26548ef70",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965bd594-e936-492a-bb27-e105d9dab95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "281ebfc2-a810-4cd0-a324-ecddb762b2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a0cce4-f428-4687-bcb6-8bb76057a22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1625022-69ec-40c0-8a5f-1e79066d1663"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "655b4713-c24b-41b1-946b-85f984f554df",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c4a4e50a-1d71-40ce-bc2b-95b42a81cb2f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04554233-4368-4df7-af71-4dfd9714cfa7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "de34510f-d800-4ac7-97ae-a4b70d821460"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ada9c4ab-0d43-4ebb-89bd-9084d3d15d22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da889895-4ad7-4fb6-8c6f-59fe15fc0843"
                    }
                  }
                ]
              },
              {
                "id": "a5091aa4-d2b7-4637-992a-8375ad7cf15d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "368ed7f7-bea1-4002-a44b-7dac1521705e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "efb8994e-9d05-4f93-8a60-cbe15cc868d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39a909f5-4816-49c7-80d0-ff0b6ff96b9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2314dca-0df9-4d26-a7dc-cc0f8ed28e6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b37dbbb4-c9ee-4965-9803-bcb797ed3656",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2ce4b9fe-fc7c-4dfb-9c87-5358db6e7e69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e5433fc-d596-46f2-b842-ba7b3f458752",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b31633f6-5fc5-4114-af53-d85940cd4bba"
            }
          }
        ]
      },
      {
        "id": "b0e39ed7-97b8-43b0-a201-655d2a175804",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "20709a4d-4975-46ce-8582-32e0027f8e35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef40f521-989b-4313-98cb-221133c6b5b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a1c516b-bb0f-4e93-b724-365a3cf5e529",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99f4833-c66e-4b39-9359-829f8fd9aad9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "92e70632-6d6c-44ec-a7c8-7d8d1ad3ab1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c12d04-6d0d-4174-9258-d10a02ff2a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6c07472-6bfb-4d0d-b777-48977956343d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80fe950-def6-401c-b6a9-d82943071b33",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad6284a-8e16-49ca-b457-292506bcd3f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "94082217-4038-477d-86b8-2b7518df4db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40df67d0-9411-495b-ba5a-ec2fd3e224f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47230835-0b92-466a-94d6-7ec225039172"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f556506e-60e9-4b3c-b684-13b576b6a39c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0af8505-888d-4781-a9d0-487829c5617c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e08b0d0a-589a-4e97-b026-92289f08a4ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7de52947-eec6-459a-a950-63d3c537b12b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8a54e0d-cfe2-44bf-a8f9-038178e07af3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6ab8391f-47d0-428c-841a-1183f26a97fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4299af27-0382-4fc0-add2-4a43a19c2567",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16eb708c-fe8b-4b9f-b189-cc0a51ca3a1a"
            }
          }
        ]
      },
      {
        "id": "87687753-56c4-4897-aedb-973ea5bc1d6e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cc91b7cc-af68-47b4-8f29-e2a57a6079be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d325e06f-9f20-440c-9bf4-851e83148a82",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b93ff6a-2189-44e1-a862-12d8d69f4d0b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1b71b6-873e-4b24-a953-ea9971382935",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95be645b-4540-4fc2-aa67-493546e36847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0723a248-3855-47e6-a87a-9407a79343ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae31f1da-1c87-4182-9ff9-5e2467a3324f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b338891-dbeb-49a4-9067-68dfbc1f0622",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4702d92a-7c63-4119-94b6-3e0730d1f00b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "91eb207a-7ea1-499d-a7b1-e25d971501a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86a200c-0588-4dca-9614-adffb61d5b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4bd091a-86da-4594-a115-976e5ebf669e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c55e8fad-a4e3-4025-8bcd-614da08272c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92df1d82-6d8c-4d0f-8728-15b6ddd58d88"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6cad4ac-0d03-40de-8cef-532a3bcb8006",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f918efc9-db7a-496a-833d-c2483b9d905d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3287a97c-0142-489e-81d6-ebfa1838b9e5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "54462250-50da-4d79-9d09-38261abc045a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55cc70c5-4220-44b6-83a5-86f1e258fbe8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "45de2042-e591-434b-98ed-b52fb300987c"
            }
          }
        ]
      },
      {
        "id": "42bf8c35-039a-4566-9787-39ee43d1ac60",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3e6f66b9-fcef-46c7-8f26-3a6bf43247fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2b55768-052f-46e4-8a2d-2aaf4fa3a6af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b671164b-39ca-4392-9d42-541b5d0a6b09",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e9c2aa-b134-4e1d-9f41-a9e1a04913ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d898b85d-6f86-495a-9685-fd70bb1524d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ba493d-771a-4723-ae35-5b7d60a2f4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b03b4af0-7394-4bac-b42c-b2082b3a3d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65600e1d-3858-435e-98b4-ca48fa393525",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb33e05-78a8-40ad-b596-50447c9a76a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bcab2e-a18c-418c-a03a-cc4594f45d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10017198-10cb-4d24-bc90-19cd05c4cac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a442acc5-bee7-4b85-b5d6-4cc99f7b3b6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15ab529b-5513-41df-b2fa-5a277fad79f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3b3eb64-3998-4c72-951d-1381606f775f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32008e9a-0789-4425-8fd7-fd6181b2aaab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6975757e-50c3-4cea-aa7d-ce47155c742a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bd593c5-bcd9-4fbe-95bf-e34b8351a0b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f678da20-e0fd-407d-ac3b-4968fbceda64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "358a5e11-58b0-42bd-a880-7ab589dfd1de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71318aa5-0e17-4f53-9b9b-75af50a3d070"
            }
          }
        ]
      },
      {
        "id": "c9ba5a45-e7a4-4679-89bb-550562f2aee2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd063b27-6caf-48c9-a546-e332d4275e33",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe1139b7-7263-4815-92ce-53f959170d7a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "98c471a6-2009-4d15-a7e5-e3a02c5234c6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aed903f5-04b1-4a40-abb0-a8c620d36582",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9e4ab07-565c-43f7-a9f5-551d9a8e96cc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 339.9076923076923,
      "responseMin": 21,
      "responseMax": 7739,
      "responseSd": 997.5210115092141,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682123783058,
      "completed": 1682123882316
    },
    "executions": [
      {
        "id": "6a3cad1e-dce8-491b-9a56-da9917fb5c0a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "92fb3eac-d194-45ee-8768-edbccb825b11",
          "httpRequestId": "17e15465-7cf1-4707-8212-7c68afb0022c"
        },
        "item": {
          "id": "6a3cad1e-dce8-491b-9a56-da9917fb5c0a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dce5bce2-bc33-408e-9436-69308fad9ec3",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 0
        }
      },
      {
        "id": "b91a5d42-de8d-49cf-9a89-f326ee6d9e6f",
        "cursor": {
          "ref": "d34f2fcf-dd22-43b4-a915-1f9d55367b0b",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "769f55fe-3cb0-4b39-a58b-5507cf067083"
        },
        "item": {
          "id": "b91a5d42-de8d-49cf-9a89-f326ee6d9e6f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d0338d86-3aad-482b-9fe7-b4d2c9c44418",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "a20509df-877b-40d4-a675-61676bf1aee5",
        "cursor": {
          "ref": "b6da9157-108b-4c7b-b3d1-d6f3a7804281",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "220f1186-046b-4130-b0d7-688167978b1c"
        },
        "item": {
          "id": "a20509df-877b-40d4-a675-61676bf1aee5",
          "name": "did_json"
        },
        "response": {
          "id": "da02a61c-f11f-4160-89a5-5c01114e981c",
          "status": "OK",
          "code": 200,
          "responseTime": 744,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9938db50-c57a-4eb0-94a6-3d17e208fb01",
        "cursor": {
          "ref": "3b4ee8f9-575c-4fea-848e-d6232e6fb63b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "baae2a73-e12e-40b4-b6c9-9fc47c223b04"
        },
        "item": {
          "id": "9938db50-c57a-4eb0-94a6-3d17e208fb01",
          "name": "did:invalid"
        },
        "response": {
          "id": "f355b0b8-6f7b-4617-8178-e5eff0478397",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1260,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9938db50-c57a-4eb0-94a6-3d17e208fb01",
        "cursor": {
          "ref": "3b4ee8f9-575c-4fea-848e-d6232e6fb63b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "baae2a73-e12e-40b4-b6c9-9fc47c223b04"
        },
        "item": {
          "id": "9938db50-c57a-4eb0-94a6-3d17e208fb01",
          "name": "did:invalid"
        },
        "response": {
          "id": "f355b0b8-6f7b-4617-8178-e5eff0478397",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1260,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b9ace1b3-e07a-4ea3-8f11-388f6eb4a104",
        "cursor": {
          "ref": "b467c43c-e6f4-4054-97bd-f2b991f0a807",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f9db70a1-3c88-46c5-b772-6370bf82288b"
        },
        "item": {
          "id": "b9ace1b3-e07a-4ea3-8f11-388f6eb4a104",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c3176d42-2f29-4cc6-9d8b-ac9a85e2492d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1296a368-a12a-41ba-a731-ad5d4e278634",
        "cursor": {
          "ref": "dd9d1de3-39c7-4e8c-a915-660ab90d821d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c962a326-4800-4382-8be0-02f14b30f054"
        },
        "item": {
          "id": "1296a368-a12a-41ba-a731-ad5d4e278634",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "589cf71e-0cf4-47de-a6df-0efb3d789780",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a4a1c1-44f1-451e-8398-6076f0f212ea",
        "cursor": {
          "ref": "9be3967c-6075-4c33-848b-141feb779f16",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e6b7092c-c84d-4e31-9fd4-85797299a0f5"
        },
        "item": {
          "id": "47a4a1c1-44f1-451e-8398-6076f0f212ea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "264b1db7-4ea2-4f40-936c-51e9e0b0ea92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 92,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "54ce0a27-d086-4468-a698-5e3f1fb049a1",
        "cursor": {
          "ref": "9057c199-795d-485d-af9f-2a7e4952ddb0",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "90e06c66-5c0c-4b93-9ac0-e03490756d59"
        },
        "item": {
          "id": "54ce0a27-d086-4468-a698-5e3f1fb049a1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "61f19056-d2e2-4860-be4f-f187052ded76",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "54ce0a27-d086-4468-a698-5e3f1fb049a1",
        "cursor": {
          "ref": "9057c199-795d-485d-af9f-2a7e4952ddb0",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "90e06c66-5c0c-4b93-9ac0-e03490756d59"
        },
        "item": {
          "id": "54ce0a27-d086-4468-a698-5e3f1fb049a1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "61f19056-d2e2-4860-be4f-f187052ded76",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2445c87a-b3c0-429e-8667-4e4a4282bc58",
        "cursor": {
          "ref": "5b1aebf3-c6f9-43a3-b224-363a04da9c39",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2852c133-359c-4eec-b7a4-e51a94e55a0c"
        },
        "item": {
          "id": "2445c87a-b3c0-429e-8667-4e4a4282bc58",
          "name": "identifiers"
        },
        "response": {
          "id": "3b4bf171-d4c3-412f-92f1-9fe5c325f497",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a517a4-972d-4e3f-b2d0-3c6912405635",
        "cursor": {
          "ref": "8a7b9c6c-45f6-4e74-a212-60c56f109942",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ee238eb-47d8-4109-8f51-0c8032586aa1"
        },
        "item": {
          "id": "08a517a4-972d-4e3f-b2d0-3c6912405635",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "696a323c-9c11-4173-b4e8-5bbecb5a1c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a517a4-972d-4e3f-b2d0-3c6912405635",
        "cursor": {
          "ref": "8a7b9c6c-45f6-4e74-a212-60c56f109942",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ee238eb-47d8-4109-8f51-0c8032586aa1"
        },
        "item": {
          "id": "08a517a4-972d-4e3f-b2d0-3c6912405635",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "696a323c-9c11-4173-b4e8-5bbecb5a1c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7eeb8c-c081-42c8-a006-31352a146576",
        "cursor": {
          "ref": "39f81da1-30e3-4185-ba1a-be06fd39afa1",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9ba164f4-6775-4ac3-aa5b-4bd555eec426"
        },
        "item": {
          "id": "6a7eeb8c-c081-42c8-a006-31352a146576",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "74702ce7-1bf7-48c7-96ed-027678d0ff51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1798b8-a212-43f7-8187-582c27ce5238",
        "cursor": {
          "ref": "ea76b30b-e2d2-4b28-88a1-8f8c343af004",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "940e62df-0db0-4859-b1ee-02ba129d6e65"
        },
        "item": {
          "id": "ec1798b8-a212-43f7-8187-582c27ce5238",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6ce2de30-f342-4fec-927d-a74e8f02da2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ba0fd8-6549-4141-bedd-bcaeed8e497d",
        "cursor": {
          "ref": "344cc2da-6445-4777-a5ca-270810ebfc74",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c3fe8d90-b58b-4060-a6ab-d68f7db15d17"
        },
        "item": {
          "id": "05ba0fd8-6549-4141-bedd-bcaeed8e497d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a6ff0f23-f588-4283-bc85-1f27bf093c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3ecc94-be88-4ef2-9a0a-ae5012800825",
        "cursor": {
          "ref": "a44137e3-60e5-4a6e-adaf-01869789d4b8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dd840c77-ece7-41e5-901e-328429f95f07"
        },
        "item": {
          "id": "3b3ecc94-be88-4ef2-9a0a-ae5012800825",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "eb33a006-0b18-4113-aaca-5807fa81c643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c61350-0a34-44a8-a16c-1f6e6a405cb4",
        "cursor": {
          "ref": "2aaf6f68-be27-4576-bb55-5d77770970de",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "134ca25d-0736-42df-8906-c93867a00e0d"
        },
        "item": {
          "id": "71c61350-0a34-44a8-a16c-1f6e6a405cb4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d1c4ea68-3f9b-4ad6-b1f1-920d8841f223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231c6b0f-6427-4694-85de-856c3d02cc2e",
        "cursor": {
          "ref": "32133618-3e3c-4824-9dac-523e1e513225",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ded003fb-6adc-41f8-bc9f-fcb24f21c844"
        },
        "item": {
          "id": "231c6b0f-6427-4694-85de-856c3d02cc2e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2963d003-5a02-49f2-93a1-90959b1492b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88ec578-59c9-4291-baff-1d2c3d91e158",
        "cursor": {
          "ref": "f712b590-02cd-4e55-a7c6-e2559d8b6bcb",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1078d5cd-43b2-4660-bf6e-79e1225a28dc"
        },
        "item": {
          "id": "c88ec578-59c9-4291-baff-1d2c3d91e158",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f80f5153-69dd-466f-88e2-11f2fb19443e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552aa8a0-6c3c-4952-a815-385ec5b9a2b1",
        "cursor": {
          "ref": "af64bc37-fd4d-4be2-ae92-57b2b48226b8",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ce669f48-4a52-4447-a750-5ee8faed8b8f"
        },
        "item": {
          "id": "552aa8a0-6c3c-4952-a815-385ec5b9a2b1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "419698e1-5021-40c1-9d9a-6e7e3b1a7200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ee6c5d-755a-43a4-adea-a9f02dbcc5ae",
        "cursor": {
          "ref": "bff9c1b8-05f3-4098-8c1c-9c45b1add0da",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a8fbc6e5-2725-49f1-89f2-eac19645ec8f"
        },
        "item": {
          "id": "b6ee6c5d-755a-43a4-adea-a9f02dbcc5ae",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f80a4e60-0851-4777-8df0-9dabe7c875aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01de8f40-b616-4961-99e7-26ab91ac2988",
        "cursor": {
          "ref": "531d08d5-40d1-4daa-9f7e-61e3fc0c0fa0",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "915d9133-5c8a-49e7-a2aa-c7ba04f56868"
        },
        "item": {
          "id": "01de8f40-b616-4961-99e7-26ab91ac2988",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e439bd0c-de8e-4e55-ba41-6c6d58a8ae5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5acdc38-eedd-4d24-9f45-48dbce5b9d14",
        "cursor": {
          "ref": "44eb9c72-1b50-4bbf-abae-80de313c3fd6",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3681270a-2554-476b-9bf9-c15791c21e0d"
        },
        "item": {
          "id": "a5acdc38-eedd-4d24-9f45-48dbce5b9d14",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "33c5af34-7985-45af-ad5a-a0ed91a6b745",
          "status": "Created",
          "code": 201,
          "responseTime": 751,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f6e801e8-a22e-4eb9-b389-51e3df5927b5",
        "cursor": {
          "ref": "f3d52b74-8baf-4883-a9f2-83aea50f20cd",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "36b0e637-f3b3-426f-a08a-c69aafb2bb0f"
        },
        "item": {
          "id": "f6e801e8-a22e-4eb9-b389-51e3df5927b5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a415b1b7-ff06-4b59-9d39-aeb128606e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb944942-df18-42b3-88b9-fb9b5f74933a",
        "cursor": {
          "ref": "34a68485-1332-4b10-9970-deb96c90bdcf",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b02acfaa-b659-43c9-bf43-a891996b93fc"
        },
        "item": {
          "id": "fb944942-df18-42b3-88b9-fb9b5f74933a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c2559669-9f74-4e39-9160-4c2cfc903fd0",
          "status": "Created",
          "code": 201,
          "responseTime": 4910,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "21f8d46f-1bc6-4151-93ed-4d3d42552cb0",
        "cursor": {
          "ref": "e367c050-a10f-413a-bed0-135609b6cec9",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4981d926-164d-4c9d-ae46-6ca8b0de9298"
        },
        "item": {
          "id": "21f8d46f-1bc6-4151-93ed-4d3d42552cb0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3ab87288-2986-48c6-9ba3-b2f84de0ebcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3332,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d76ac6-8d59-49b7-b6c0-a626a6f8fb8a",
        "cursor": {
          "ref": "ae95b014-8696-423e-be3a-843a8d5df797",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e13e0515-622a-46ea-994d-e0b27b8fbac7"
        },
        "item": {
          "id": "07d76ac6-8d59-49b7-b6c0-a626a6f8fb8a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "bce506e5-1edf-45c0-b189-ec4118036d45",
          "status": "Created",
          "code": 201,
          "responseTime": 7739,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "fb633257-5f11-4b49-b854-588f14a29629",
        "cursor": {
          "ref": "45197b75-617c-42ae-9290-3d2711b04ab7",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b976b6ac-89b8-4ce5-b79e-b3ff6c026995"
        },
        "item": {
          "id": "fb633257-5f11-4b49-b854-588f14a29629",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4fd82464-60ee-43f5-b9d3-98d543c9c9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117fa12b-ab29-4bda-b8eb-749c09121122",
        "cursor": {
          "ref": "d5ba1501-fdff-4507-9224-253c813e79ce",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b32233cd-2e89-4573-af8a-1b365f059f5f"
        },
        "item": {
          "id": "117fa12b-ab29-4bda-b8eb-749c09121122",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8e22f5d7-c6c1-4898-ab64-b7c4711f2beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3407001-e30b-4594-82ec-dbe33541fab5",
        "cursor": {
          "ref": "5c1fc259-2ea2-4680-9043-fa6208e3ee3b",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c4148ef6-36e1-4ef6-8a3b-0ffe557de254"
        },
        "item": {
          "id": "a3407001-e30b-4594-82ec-dbe33541fab5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f9fe0679-e98a-42b9-bab3-6b23a2aa4e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84187244-1b6c-4397-92e5-370e041c705d",
        "cursor": {
          "ref": "13a10339-57c7-452b-822c-104fb121ee1e",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5525ef54-8ea7-4cb3-94f7-8068087d82c5"
        },
        "item": {
          "id": "84187244-1b6c-4397-92e5-370e041c705d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a7334279-5c3c-4168-8789-cb7f823619b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0d93f2-0fd8-4456-98f1-1da530e3ea06",
        "cursor": {
          "ref": "33889fcb-1b06-40ea-a85e-64c92315ce4b",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f922b0db-864c-4f34-b248-a790f55e3269"
        },
        "item": {
          "id": "2a0d93f2-0fd8-4456-98f1-1da530e3ea06",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dbe1f02f-58bb-4dfd-bda4-ff95ee11cef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347b8487-140a-4c48-9bc8-cc1616997172",
        "cursor": {
          "ref": "04277240-d55d-493c-861e-db2e3df0bfd8",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b23de96b-f05a-4995-8f63-1461fe1df456"
        },
        "item": {
          "id": "347b8487-140a-4c48-9bc8-cc1616997172",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ecca50b5-bd96-41e3-a9ca-e22dc3a4e386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce020bc-fcf1-462a-bc32-5ba11d1368bb",
        "cursor": {
          "ref": "97c8d817-8104-4950-8914-383bca395e63",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "515fdda5-2f70-49a8-8311-f5a751001045"
        },
        "item": {
          "id": "cce020bc-fcf1-462a-bc32-5ba11d1368bb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6e095548-bfd4-471b-956d-c4f8b9ac878e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0ef2a8-0de6-4f9f-a39c-9f76a47b3f58",
        "cursor": {
          "ref": "63a7ccb9-d00e-41f9-9291-3339917df64b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "819b6d60-7cf0-4e29-a6a4-cc712a6980bf"
        },
        "item": {
          "id": "8f0ef2a8-0de6-4f9f-a39c-9f76a47b3f58",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "94be514d-ca95-4ceb-bf86-572c94e7c63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61caa51a-6626-45e2-a729-e17412355add",
        "cursor": {
          "ref": "af2bb016-0652-4072-9d4b-4db8c00c1a26",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0c2345d9-02c8-45e5-be5a-8310001b7619"
        },
        "item": {
          "id": "61caa51a-6626-45e2-a729-e17412355add",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "80c53bfa-909f-4c5a-b951-5c87e225bdca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4f23f5-2fd3-40fc-af59-fb1479b783ee",
        "cursor": {
          "ref": "0f5cb35c-9d75-4d51-b710-644cf2b18200",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "107b4699-15b4-4ac5-8572-268bfc18391d"
        },
        "item": {
          "id": "7d4f23f5-2fd3-40fc-af59-fb1479b783ee",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c78acdbf-91d9-4cca-ae73-aeef020d9076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12f89c9-7742-4fc2-adce-4c1046b5175a",
        "cursor": {
          "ref": "55e0f2d0-f1fd-4f72-880f-567d6741319c",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e22ee6f2-06bc-43fc-a1a5-59f9ff2350ae"
        },
        "item": {
          "id": "b12f89c9-7742-4fc2-adce-4c1046b5175a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cc54cca6-3a9b-43f6-894f-ebcc35aaa92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7ab391-715f-4cb9-a8d9-4560353842d5",
        "cursor": {
          "ref": "a1e23bc3-5167-4dc9-95b4-8e9f36dc9e92",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8c96afa0-af68-47f8-aa94-22a91e5771d6"
        },
        "item": {
          "id": "5c7ab391-715f-4cb9-a8d9-4560353842d5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2cc09c35-c225-4e0b-b734-c3db9e21b399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095d52bf-d8ff-4ed8-9807-2fcdeb759f8a",
        "cursor": {
          "ref": "c5589164-4d36-40ef-ada8-069db65b689b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fe91d018-c5e8-4cec-92be-93c70667e80f"
        },
        "item": {
          "id": "095d52bf-d8ff-4ed8-9807-2fcdeb759f8a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e70dd28d-837a-4973-8a62-163781f5edb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ea33b6-d201-4beb-aa1f-6992d12d2a40",
        "cursor": {
          "ref": "5fa5fe60-22c0-4f43-87b7-8034e28a6de3",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6179cecb-7f2f-4e7d-a1b4-004ae7b2d48b"
        },
        "item": {
          "id": "59ea33b6-d201-4beb-aa1f-6992d12d2a40",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "196674b0-c1bb-4903-98b3-cea53d79bcb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10343cf2-89bb-40d4-baee-3ef6278f7c23",
        "cursor": {
          "ref": "a80be2b7-29e8-4132-a022-234610fa79ad",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c14e2830-c5f0-4379-9879-e31b9de95eea"
        },
        "item": {
          "id": "10343cf2-89bb-40d4-baee-3ef6278f7c23",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "de5a0be2-3118-4925-ae18-0e4e2ad215c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c089c5c7-c5ab-4b8d-a612-3fe04f1b04ef",
        "cursor": {
          "ref": "62876f93-1486-416a-9964-61ee80ec615f",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "83e7f5c9-1f65-4f89-b839-af60b888a9e7"
        },
        "item": {
          "id": "c089c5c7-c5ab-4b8d-a612-3fe04f1b04ef",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "58d95d6c-d426-47df-9cff-43a49653b64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc36aa82-0942-4a28-9577-3b8325a50385",
        "cursor": {
          "ref": "a616c16e-9f05-42dd-b1f3-e66e87dc44a2",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6a28b1cb-f724-40dd-a2f0-7e116514490f"
        },
        "item": {
          "id": "dc36aa82-0942-4a28-9577-3b8325a50385",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5b8fadf3-c2bc-4620-8c11-961d68668c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fa3427-8cf0-48ae-bab0-e51233179685",
        "cursor": {
          "ref": "8e95ca2e-d2b1-43a4-91d1-8b0fe961a6f1",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8fcd4638-6cd9-46ac-82d4-a450a4be1432"
        },
        "item": {
          "id": "97fa3427-8cf0-48ae-bab0-e51233179685",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0e26e099-9da3-4553-8895-6b91d0285d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8c6b8d-1a34-4775-886d-209de7140f15",
        "cursor": {
          "ref": "714a8154-07c9-43ac-8f23-cc098b20a9ed",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7df39772-9101-40ed-96ac-e6da6ce56f70"
        },
        "item": {
          "id": "bd8c6b8d-1a34-4775-886d-209de7140f15",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "14ff1c1b-ec91-4fa6-86cf-136082baa2db",
          "status": "Created",
          "code": 201,
          "responseTime": 2388,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ddc959c8-537a-4457-84a6-8c28aaa4a9da",
        "cursor": {
          "ref": "352bffe4-1155-4b69-a3c6-bd14542c9892",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "579aec44-366b-4f8a-9818-597465a218de"
        },
        "item": {
          "id": "ddc959c8-537a-4457-84a6-8c28aaa4a9da",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "aabd96f5-4790-4ecc-9dea-c99b85ce461e",
          "status": "Created",
          "code": 201,
          "responseTime": 2610,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6372be51-1af6-4de5-9dbf-ccce35f46f25",
        "cursor": {
          "ref": "cf4af07f-ad3a-47e8-a192-f9a357862ed7",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d4017287-7504-4a1b-ad19-5b873143bc21"
        },
        "item": {
          "id": "6372be51-1af6-4de5-9dbf-ccce35f46f25",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "428a63d9-a386-4afc-b55c-8a0742b73bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9846c4ae-0c60-4d59-8cae-49140cdda949",
        "cursor": {
          "ref": "f3a33307-3fbe-4e52-ac13-03f0bd37cb75",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "77d3dd7f-056a-4112-a956-b2113ca80ed7"
        },
        "item": {
          "id": "9846c4ae-0c60-4d59-8cae-49140cdda949",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7abdeb93-dcf2-4aff-8b62-0e8a3c61bcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946b6cab-68f8-4664-bb61-bf979518593c",
        "cursor": {
          "ref": "f0e53020-9ed9-4691-9895-5821cf31e234",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "eac50c95-3eac-4c3c-bfb9-01d859513f55"
        },
        "item": {
          "id": "946b6cab-68f8-4664-bb61-bf979518593c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6cc291e0-f24c-4bed-ba8c-8ac6bde01766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a843a0f3-7676-4d80-a46f-8b83a798bf87",
        "cursor": {
          "ref": "e67e4aea-ca1e-42cb-bb27-8634376c0d21",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0056002b-94cb-4afd-9e6e-9c95d67a78dc"
        },
        "item": {
          "id": "a843a0f3-7676-4d80-a46f-8b83a798bf87",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "99155731-08fb-48c0-9078-23353708ad45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e478c3-c8f4-4c0e-a976-233faa35d4a9",
        "cursor": {
          "ref": "e473ebed-c7e7-43f6-9080-014080830255",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "57695a5d-cf32-45ae-b30e-30f710a46884"
        },
        "item": {
          "id": "f1e478c3-c8f4-4c0e-a976-233faa35d4a9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "57d22b9a-2cba-4a69-afee-2bf6bbe77680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d81455e-1cc4-4de7-bf3e-3df4c21a759a",
        "cursor": {
          "ref": "462b7fec-839c-4ed5-b8d9-8cd3983937f5",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8896110c-7d45-45fb-bf74-ce6ab14afd59"
        },
        "item": {
          "id": "3d81455e-1cc4-4de7-bf3e-3df4c21a759a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4850d697-c039-414a-9998-506fe93c0728",
          "status": "Created",
          "code": 201,
          "responseTime": 2760,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f756cbb0-e551-4b10-966e-125c4df2c978",
        "cursor": {
          "ref": "7ccecd9b-153e-4a85-9f20-82f892314cba",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3d42256b-b8a7-46f3-88b4-dfa413083d8a"
        },
        "item": {
          "id": "f756cbb0-e551-4b10-966e-125c4df2c978",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0bda7ca9-c63c-4d87-a76f-91c81632b463",
          "status": "Created",
          "code": 201,
          "responseTime": 2477,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "53af8f60-a472-41f4-b01a-1947c1533cc9",
        "cursor": {
          "ref": "0aac0fcc-4587-44db-b3c2-25c0a85a44f1",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dfdb6c9e-fdd8-4ca6-a7bb-8001d450111b"
        },
        "item": {
          "id": "53af8f60-a472-41f4-b01a-1947c1533cc9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "51b0fc6e-e35f-4822-a77b-98acd1eb82a1",
          "status": "Created",
          "code": 201,
          "responseTime": 2667,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b7e20837-94c0-4b30-823a-4c893c0b5b00",
        "cursor": {
          "ref": "ad73c46a-3439-4e4c-b52d-03fb67daca6a",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4bf8cf6e-4aaf-4a47-b722-81f6850fd460"
        },
        "item": {
          "id": "b7e20837-94c0-4b30-823a-4c893c0b5b00",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3f48d793-998a-4df9-8a99-2fd02c0f4441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c41fb94-6a48-4559-8c7a-978679b6373f",
        "cursor": {
          "ref": "9f3c99aa-a30f-442b-b081-f7c43d17877d",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ca480912-b9b6-424a-9f85-a026800881be"
        },
        "item": {
          "id": "3c41fb94-6a48-4559-8c7a-978679b6373f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1d83d1c8-c2dd-401b-939d-a56761db406a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c366304-745a-4b0d-8e48-b10e6b8b3dc5",
        "cursor": {
          "ref": "1178b458-bce4-4b8f-8029-29f35ff173b1",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "33bd3728-44cb-448c-a2ce-c2aa3b08d351"
        },
        "item": {
          "id": "0c366304-745a-4b0d-8e48-b10e6b8b3dc5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e3865149-cd09-4ae1-ae94-5fadac562b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16498559-080c-4058-82d7-3cd8ac6d8058",
        "cursor": {
          "ref": "1cffa3d6-acf3-4008-a205-5bc0b3b036e1",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a9eda097-dd36-48ca-95a4-5d7cd9f9ce32"
        },
        "item": {
          "id": "16498559-080c-4058-82d7-3cd8ac6d8058",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b042cf7f-13e4-4e31-8585-34302431d8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5daf5a63-9ad3-42b4-9dca-85e744b41675",
        "cursor": {
          "ref": "06a898e3-0a6e-4e72-8f8b-2fb5de6a9261",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "35d76103-afe8-4305-84b3-de5aa54a429c"
        },
        "item": {
          "id": "5daf5a63-9ad3-42b4-9dca-85e744b41675",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fc5098c3-157c-4e92-9e7b-50538742d5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c74022c-aa14-43a2-b66c-6298d76ad112",
        "cursor": {
          "ref": "cb2be772-cced-49ff-8d30-9783ad99f8a2",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "14481579-9369-4e38-940a-4714a3160bee"
        },
        "item": {
          "id": "5c74022c-aa14-43a2-b66c-6298d76ad112",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a7274bf1-7e92-427b-9d85-6554e87f157d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b458a0c5-21c4-439e-afc8-0c707a019c15",
        "cursor": {
          "ref": "f33823c2-6d1d-453f-b6ec-cc84cee27aaf",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3a5f2a43-5bfa-42f6-940d-284aee2653c2"
        },
        "item": {
          "id": "b458a0c5-21c4-439e-afc8-0c707a019c15",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c1658ac0-9740-4ba8-aafe-63edacac502d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a486fb94-f5e0-4bdd-a484-3036cc89a366",
        "cursor": {
          "ref": "33ad7294-a9f6-47d2-870e-5792838c45b1",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "78d43cc9-b187-4726-9bcd-2029f80ae040"
        },
        "item": {
          "id": "a486fb94-f5e0-4bdd-a484-3036cc89a366",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "965cba10-eb86-4af8-8f60-a45b62c59ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065a979f-ebf6-474d-ad4d-336407f79a18",
        "cursor": {
          "ref": "526e8e4f-e2b3-4320-be3f-8ff37bfebc87",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "957e2c39-1c55-48aa-8d8a-e5d8a952f78e"
        },
        "item": {
          "id": "065a979f-ebf6-474d-ad4d-336407f79a18",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eebb1607-9f52-4cb9-a9bb-b599bd5b2dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6e0328-5345-4387-b187-c57167b72765",
        "cursor": {
          "ref": "e252283a-d3a3-44d4-9fda-a4498f34c16d",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "91550ca6-7398-42d5-b27b-1cf8f8191427"
        },
        "item": {
          "id": "ab6e0328-5345-4387-b187-c57167b72765",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bc73b4eb-a26b-428a-a816-aec2aeee374d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0efa24-d16d-40ae-8314-23609742b525",
        "cursor": {
          "ref": "a6710606-6ab6-4129-b59c-04750157cb0b",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "41687b46-5bfc-4e63-8cc8-1779577c69ce"
        },
        "item": {
          "id": "4b0efa24-d16d-40ae-8314-23609742b525",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4e06637b-0f82-434d-a439-8b4590a6102e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945d1bf3-da8c-4d14-9bf4-38bdb6636332",
        "cursor": {
          "ref": "ebddf992-5533-4bc9-af04-4cf790c6f2a1",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e323e8eb-2c0e-425f-a3a3-f84b3cea56f5"
        },
        "item": {
          "id": "945d1bf3-da8c-4d14-9bf4-38bdb6636332",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8005a89b-0a0d-4504-996b-b0681c7080d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00294062-68a8-4004-8341-1069cf99d67a",
        "cursor": {
          "ref": "38c23be4-be0a-4daa-a13b-01f2359ac43e",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f7b1bf40-0a8c-4366-ba22-ba858521bfbf"
        },
        "item": {
          "id": "00294062-68a8-4004-8341-1069cf99d67a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5bf6466d-4036-4f29-bb64-0d9ed4e64204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139c00a0-3e2d-4ce2-9238-c77ee5947eb4",
        "cursor": {
          "ref": "3a0f8827-8c36-4c53-abc3-5694f95af4b6",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "07f032cd-3522-4faa-9963-7f04982f03e3"
        },
        "item": {
          "id": "139c00a0-3e2d-4ce2-9238-c77ee5947eb4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4494280e-1f02-46d3-ad89-c0a01289d1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ebdda2-ec1e-4d50-8a65-87f4d9959cb2",
        "cursor": {
          "ref": "eb18b7af-3455-45c3-8666-7bd4e37ea46f",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d56da6a7-7176-4a01-bde5-500232aa15d0"
        },
        "item": {
          "id": "48ebdda2-ec1e-4d50-8a65-87f4d9959cb2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4f3b8b54-41fe-4b42-b76a-0e09d7d53790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de030b4b-accd-489c-b9d0-f025616048aa",
        "cursor": {
          "ref": "d9fe9a55-506e-40e2-b32e-c483b81b007a",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "02efb4f7-564d-4cbb-9a38-9e1a30694f58"
        },
        "item": {
          "id": "de030b4b-accd-489c-b9d0-f025616048aa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6c361e0b-1df5-4094-9aca-d3aecfa76d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3b5b54-2899-48dc-9fa3-72110d8410cd",
        "cursor": {
          "ref": "4d3cf481-52fb-42ef-9309-aafe02b2ac13",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "20e49e83-fa54-42ea-befa-c48eb0c2aa85"
        },
        "item": {
          "id": "af3b5b54-2899-48dc-9fa3-72110d8410cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "94a0d491-6188-4333-84ab-dd5744ed818b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0f4949-d76a-413f-87c9-dffab54e310c",
        "cursor": {
          "ref": "d807088c-903f-4815-8c38-1c116b50a6c7",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d7f8e0ba-a79b-476c-8fb6-f16b896d7fb9"
        },
        "item": {
          "id": "da0f4949-d76a-413f-87c9-dffab54e310c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f5aa999d-8ae1-4b81-bbd1-4cd4b5af29ce",
          "status": "Created",
          "code": 201,
          "responseTime": 3384,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "de99951e-a76d-4496-8b88-651c67870d97",
        "cursor": {
          "ref": "f1c50a71-3bda-42e4-b158-71d9ffa23241",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "01f93fb8-2ff4-4d14-accb-1cc1a2185784"
        },
        "item": {
          "id": "de99951e-a76d-4496-8b88-651c67870d97",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5c9c49a7-f050-4ed7-b023-597b801777f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfc21c3-e765-44b2-9176-94c2af0970a8",
        "cursor": {
          "ref": "5a0a6a3d-389c-4794-9b85-08a17591e00b",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a503296c-6370-4413-949c-28cb68dbfff2"
        },
        "item": {
          "id": "4cfc21c3-e765-44b2-9176-94c2af0970a8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cbc063e0-7d9f-4775-b405-d1b968158ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd1687f-9808-48a7-9b81-1d7e31a34fb4",
        "cursor": {
          "ref": "ea4a4c21-2152-4b3e-a229-72d63136ddc9",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a1e99135-7397-4b19-8e99-751ca38d40d7"
        },
        "item": {
          "id": "ecd1687f-9808-48a7-9b81-1d7e31a34fb4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e7824905-66f8-4b20-95c7-4c9d5ddb213e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708490a8-f19a-46e4-942a-b0f875327191",
        "cursor": {
          "ref": "5b563e1e-faea-4472-83fe-561e6efa39de",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "11611662-a8c8-475f-a58d-0241cbb0f831"
        },
        "item": {
          "id": "708490a8-f19a-46e4-942a-b0f875327191",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "408f5b12-7b76-4644-bdef-681d0d94621a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595af7af-af14-41cd-861c-2aaea4db07ce",
        "cursor": {
          "ref": "4998b56c-bc42-4a0c-b9e9-710432187bf0",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "377c7d9a-ac74-477f-9ce2-4155e13fb5d2"
        },
        "item": {
          "id": "595af7af-af14-41cd-861c-2aaea4db07ce",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c027f956-8cbd-4699-886c-967f027fb7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b8f1f0-28af-4f2b-9bb5-ff6e5a7d1ce8",
        "cursor": {
          "ref": "6593232d-55db-4893-8c93-e44c7b79bf80",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9cfd4c39-3034-4f46-86c2-43912ce814a9"
        },
        "item": {
          "id": "24b8f1f0-28af-4f2b-9bb5-ff6e5a7d1ce8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e7657ade-0e6b-4264-a222-80e04e911dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a9d51f-f278-4f0f-8383-bf75c75074b5",
        "cursor": {
          "ref": "c6a448ac-7e03-411d-b48e-cc0901c09c2e",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4134bf9a-fb4a-4a62-a772-bb8b84a38a89"
        },
        "item": {
          "id": "38a9d51f-f278-4f0f-8383-bf75c75074b5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a3d800c6-a0e7-41a6-856d-6128e32ebb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85444f46-7794-420d-b7cd-5ad7f9e376ac",
        "cursor": {
          "ref": "a5743a5b-a412-4d0f-99cc-4d11107126ba",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "68d92e69-d854-429c-892c-39f8da1bbfef"
        },
        "item": {
          "id": "85444f46-7794-420d-b7cd-5ad7f9e376ac",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5ab359ef-6f1c-4b49-bf32-8bd799a91d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbe041a-5062-4411-8f6f-85f6db229874",
        "cursor": {
          "ref": "8b42e3e0-b8bb-47fc-b7bc-0e308b2cd20c",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a9870e30-47c9-4a3b-bc80-debedf8db448"
        },
        "item": {
          "id": "5bbe041a-5062-4411-8f6f-85f6db229874",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "95cd02db-73d0-4250-aa12-3a5b99f3c721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5080dd-7dc8-4f64-a7f9-b675c6ccd72d",
        "cursor": {
          "ref": "04f4cce0-51e3-4e3a-a640-f30501845b77",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "89508ecc-acb0-4349-a3d0-1c5356baa36f"
        },
        "item": {
          "id": "9b5080dd-7dc8-4f64-a7f9-b675c6ccd72d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c8b4f576-211f-440d-b2e4-4a3d84883df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25dce1b4-376d-4eb9-9b14-96d13f2b39b6",
        "cursor": {
          "ref": "516acc82-6499-4dd0-b91a-be94c78d5d38",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b62aa730-692b-49b1-9202-5ac95f86a36a"
        },
        "item": {
          "id": "25dce1b4-376d-4eb9-9b14-96d13f2b39b6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "81ce0545-c4f8-4bc5-843d-092b0a3a92e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0677a3-f9fd-4b12-89e8-1435d0374eb8",
        "cursor": {
          "ref": "ab65c4f9-61a1-4ccc-948c-1023d38d6e82",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6057dfc2-bb32-486b-a005-65515be63f44"
        },
        "item": {
          "id": "da0677a3-f9fd-4b12-89e8-1435d0374eb8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "75808d1f-5d26-4c3a-a309-92e8ba8841ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19491e3-1c2a-46ec-add5-b2660e3aba05",
        "cursor": {
          "ref": "5f67e790-3ead-4001-b6c9-a5cf6e8c4e49",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c4899d6d-6289-4b8f-8718-a38dfc5916f0"
        },
        "item": {
          "id": "e19491e3-1c2a-46ec-add5-b2660e3aba05",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c7ab0a96-a9fd-4174-8af4-4d1a0d836ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a65a3a-9a75-44a8-98ed-a31eeac9c55b",
        "cursor": {
          "ref": "66a5cdd4-1892-471e-8d1a-d845bf43c563",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "be835b00-c593-4d8b-9174-8f80797145ca"
        },
        "item": {
          "id": "d2a65a3a-9a75-44a8-98ed-a31eeac9c55b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "052d6012-b21a-41f9-9c3c-322ffc8cf241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac99cb8c-3074-4605-add4-a385df0170b7",
        "cursor": {
          "ref": "53b8a57d-86c5-44da-9767-1dfc09a6bc00",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a21b41be-b7de-4775-9157-2e3e77bb92c4"
        },
        "item": {
          "id": "ac99cb8c-3074-4605-add4-a385df0170b7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f52859c9-13e8-4fcc-8360-0803c9800cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f75fe07-f32b-4604-a760-fcd9c6652180",
        "cursor": {
          "ref": "d9297fc6-eb5c-4139-81fb-dc4a257ae90b",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "63215c66-fb70-440b-8b65-2ef87e352db1"
        },
        "item": {
          "id": "2f75fe07-f32b-4604-a760-fcd9c6652180",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "608e5e1e-5814-48eb-9a43-2fc449b149ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28591f65-1cbe-4f24-a554-966ae2b5cfb4",
        "cursor": {
          "ref": "9d11017b-800e-4993-a04e-bd7225d3ea7b",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "73575ec5-dbf5-4f25-9fa3-e7852269afcb"
        },
        "item": {
          "id": "28591f65-1cbe-4f24-a554-966ae2b5cfb4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "db26f31b-b870-47a3-8573-ad1af1064d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1333cb92-15f2-4324-9ab9-7b7859a6b34e",
        "cursor": {
          "ref": "ad6ede08-17ba-414f-8161-659d0533be03",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8ff65739-0522-4375-9237-401fa31d579a"
        },
        "item": {
          "id": "1333cb92-15f2-4324-9ab9-7b7859a6b34e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "891bd76c-a490-40fd-9ed9-cd8db70acd18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db116551-91f4-4d74-854e-a45f7028f7b4",
        "cursor": {
          "ref": "4e4f82fd-55c4-4c01-b985-37e76cc1ce0a",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7ae8fc97-fb1f-4604-9eb7-02b39b1979d5"
        },
        "item": {
          "id": "db116551-91f4-4d74-854e-a45f7028f7b4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5eca1dc1-4b23-4964-80a6-547ff068432d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14a7fb6-37a5-4f46-82ce-e47934c84326",
        "cursor": {
          "ref": "e524c758-a921-4e61-adc3-0b71c7d07797",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9bf4a133-c105-4d6c-93e4-c688ad40ad61"
        },
        "item": {
          "id": "f14a7fb6-37a5-4f46-82ce-e47934c84326",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1d085d41-a9bc-4698-82df-57a16dc47d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6418b9c4-889b-495e-97dc-7cb6c6e52a22",
        "cursor": {
          "ref": "854f0cf5-79a8-4ba9-b76a-bd2e8ec2688d",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "29205e5a-62f6-4df8-9eca-02c73dfb7f28"
        },
        "item": {
          "id": "6418b9c4-889b-495e-97dc-7cb6c6e52a22",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b2cb9f8d-babb-409e-b802-70fb1bac2f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9e9e19-9911-4f33-905a-76e6b01732ad",
        "cursor": {
          "ref": "618c75aa-6e35-4c95-b0b9-8cf35c38ae54",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8c0cbf7f-797c-49c3-b94f-221d52422b09"
        },
        "item": {
          "id": "ab9e9e19-9911-4f33-905a-76e6b01732ad",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "77e4e513-7974-4b70-9e74-e92ee01edc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6b07ea-5189-4496-a57b-c0b3bf2da6b5",
        "cursor": {
          "ref": "6a54a950-0647-44ff-8cec-d67dd2d1f8b2",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "10525928-050e-433e-bd19-18bd922a30ba"
        },
        "item": {
          "id": "4e6b07ea-5189-4496-a57b-c0b3bf2da6b5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "394abac8-d466-4447-97fb-bbe0e99d58f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe61f90-3400-4456-a832-35cc4893ea8d",
        "cursor": {
          "ref": "b115a0e2-d574-4ffd-98c6-f301dd4eee67",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "493d7f58-79e9-4204-80eb-1a3cbfb363e4"
        },
        "item": {
          "id": "0fe61f90-3400-4456-a832-35cc4893ea8d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "450cfcc3-440f-4dde-ac19-a757f2cf9b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fae27d-43cf-4257-a051-f6112c9bf00b",
        "cursor": {
          "ref": "12e738b8-77c6-4b4c-b845-cdb8c2ab375a",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e98313ef-a3dc-478b-acda-da6ffb796481"
        },
        "item": {
          "id": "30fae27d-43cf-4257-a051-f6112c9bf00b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ee2b8f16-6add-42a3-9db3-80695f70b083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23750b24-28ce-4d54-b25e-ee4b0d3c7676",
        "cursor": {
          "ref": "faafb182-27fb-4ef5-bd66-9d04675c2d92",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5a7abda0-f48c-4518-ad65-057d40eb6df1"
        },
        "item": {
          "id": "23750b24-28ce-4d54-b25e-ee4b0d3c7676",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "49073bc9-261c-4dcf-a310-54b886366a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ac13f1-5461-49d4-8bd2-369f54f7428f",
        "cursor": {
          "ref": "2c6d3841-09b3-4e8e-8566-e5d11af22246",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fd9c15a7-1cec-42b9-84f1-a4faf995516c"
        },
        "item": {
          "id": "88ac13f1-5461-49d4-8bd2-369f54f7428f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9a8f7a23-d66e-46a2-9233-6b15e0bf4ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41c4047-49e6-4b0c-a5cc-ec7a40543dda",
        "cursor": {
          "ref": "8cdbea2c-4223-4e1a-8207-ce2e27ee601b",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4d117bed-1f2f-447f-92f2-016727cc5b95"
        },
        "item": {
          "id": "f41c4047-49e6-4b0c-a5cc-ec7a40543dda",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "37af2179-9dc9-48b8-a33b-adaa1c7edb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec816089-a31e-4f17-9f01-30b22207e362",
        "cursor": {
          "ref": "4778b6bf-cf97-4069-8017-be764754b577",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e4fccd37-6092-4fa2-b741-eed3514370d8"
        },
        "item": {
          "id": "ec816089-a31e-4f17-9f01-30b22207e362",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f3abf8ca-c92a-487d-b28b-22acbdd6bd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebcd63e-97a0-4a8b-a554-2d8b43905bae",
        "cursor": {
          "ref": "790c3b36-500c-445b-a944-f137de70f1d1",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bf0f343b-4de0-48e7-81fd-8873b256fa3c"
        },
        "item": {
          "id": "5ebcd63e-97a0-4a8b-a554-2d8b43905bae",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d5ae767f-001f-43aa-a36a-5e033e69c6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb6f717-d98a-44fd-9aab-38d1599c2398",
        "cursor": {
          "ref": "1559eba0-0eec-4b55-942b-8834e18a3678",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "05638ca0-8009-4b63-9435-d50e0e6abe90"
        },
        "item": {
          "id": "deb6f717-d98a-44fd-9aab-38d1599c2398",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "84d14c75-e3d8-487c-9bd7-ab412f83b4b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b15e7976-6fd7-44d9-b2da-f750518282ad",
        "cursor": {
          "ref": "561152ef-e5c5-4bd7-b73c-040c6cfce630",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0ade65e1-47a6-4ca6-a913-b5ba78cad4da"
        },
        "item": {
          "id": "b15e7976-6fd7-44d9-b2da-f750518282ad",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7f09ad4b-6961-42a7-b244-77f58f8c5c88",
          "status": "Created",
          "code": 201,
          "responseTime": 6350,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "2af7c92a-311c-4039-9956-755f1a156090",
        "cursor": {
          "ref": "72bc3717-d7ed-4fb4-b5df-54cc2037cc26",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1c4afe9f-6e6b-482e-a797-7d4b3956a6cf"
        },
        "item": {
          "id": "2af7c92a-311c-4039-9956-755f1a156090",
          "name": "credentials_issue"
        },
        "response": {
          "id": "29877224-971d-4bd1-b8eb-f2616159596f",
          "status": "Created",
          "code": 201,
          "responseTime": 6258,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dcca83-e1a2-49f4-a1b5-55ec61494f62",
        "cursor": {
          "ref": "fd9cfb35-b3b2-4e65-bd39-493f7b6e85ff",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "403d3a71-8a3f-434f-b5d3-b7acd275dab8"
        },
        "item": {
          "id": "57dcca83-e1a2-49f4-a1b5-55ec61494f62",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f9556e4b-6841-4a6a-8503-7b52d9c8aafb",
          "status": "Created",
          "code": 201,
          "responseTime": 4811,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdb649a-607d-4953-b3bf-1f48d76e6839",
        "cursor": {
          "ref": "23fe5529-fda4-466e-9d18-3b20681c29cb",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "482c8e57-3a22-4560-97f8-b2885a672baf"
        },
        "item": {
          "id": "cfdb649a-607d-4953-b3bf-1f48d76e6839",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5c53307a-455f-4c3c-80d2-824a1a89817f",
          "status": "Created",
          "code": 201,
          "responseTime": 2254,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae92732-82ee-448e-87f0-9cbfc0707f91",
        "cursor": {
          "ref": "b1da812b-b01c-4bc8-9f0e-b6f19a2c7ac3",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "de5c6b1b-8bf7-48bc-b840-9270640a86e2"
        },
        "item": {
          "id": "eae92732-82ee-448e-87f0-9cbfc0707f91",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e05d7d18-cfc1-420e-8eff-20c9049719da",
          "status": "Created",
          "code": 201,
          "responseTime": 2765,
          "responseSize": 994
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c002b0-8bd6-4e1e-b65e-d4d5b7901b1d",
        "cursor": {
          "ref": "dca4d23b-dad2-48bf-8aed-d49c4fe00d5b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "32c450cf-24ea-43fc-9fd2-b6a2a5d7a3af"
        },
        "item": {
          "id": "13c002b0-8bd6-4e1e-b65e-d4d5b7901b1d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "112ab484-744d-4637-a269-d245d091f075",
          "status": "Created",
          "code": 201,
          "responseTime": 2251,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-22T00:37:36Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-22T00:37:36Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "cb32d734-37e8-47c8-96db-7bbc042f2450",
        "cursor": {
          "ref": "860c71b3-389f-4947-9091-4d4802da7a55",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d85f47d1-4efb-484f-b2fc-ece3f18eed02"
        },
        "item": {
          "id": "cb32d734-37e8-47c8-96db-7bbc042f2450",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c469e2b4-6707-4f9d-9fe2-a20b0390971f",
          "status": "Created",
          "code": 201,
          "responseTime": 2334,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ec66d8-e99f-4d85-ba39-204572b3f58b",
        "cursor": {
          "ref": "5fb28834-67ee-4858-94f4-1f7a16409c04",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b8114b17-af8c-47fa-b025-23cd27778f6c"
        },
        "item": {
          "id": "c4ec66d8-e99f-4d85-ba39-204572b3f58b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c6b86691-3db0-42fa-8ff7-65122aa79023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ec66d8-e99f-4d85-ba39-204572b3f58b",
        "cursor": {
          "ref": "5fb28834-67ee-4858-94f4-1f7a16409c04",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b8114b17-af8c-47fa-b025-23cd27778f6c"
        },
        "item": {
          "id": "c4ec66d8-e99f-4d85-ba39-204572b3f58b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c6b86691-3db0-42fa-8ff7-65122aa79023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc095b7-b45d-48fc-b741-01faf3b168cb",
        "cursor": {
          "ref": "dcbf8c44-3997-4e2b-a00d-615c32cdb49f",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "74903bd6-9b7a-4372-adbe-594935d3891e"
        },
        "item": {
          "id": "7bc095b7-b45d-48fc-b741-01faf3b168cb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b178222f-17a0-4705-ae75-5761a6ac225f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981e5c25-7a25-410c-9cf8-0cc389c5cd22",
        "cursor": {
          "ref": "fb948fba-f221-489f-9550-4dd5d63bd2b2",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3d790f61-76eb-435a-8d57-08be60cfeb06"
        },
        "item": {
          "id": "981e5c25-7a25-410c-9cf8-0cc389c5cd22",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "24cbcf2f-04fa-4c18-b972-9453084321ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb65f584-5779-442b-a457-9a6de63c78fe",
        "cursor": {
          "ref": "400d3668-bb1f-43bd-9c21-2e373273bcd5",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cac9793b-644c-45a3-8ea2-d6086679734c"
        },
        "item": {
          "id": "eb65f584-5779-442b-a457-9a6de63c78fe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "15a10bc4-658d-4d36-9b02-73ec7343ee0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6598d22-5ee5-4710-b0be-486fcc7a2664",
        "cursor": {
          "ref": "3b0c330e-8a02-40ec-a8c1-07007fa76af1",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "555de721-0329-4269-9f76-11e22e746062"
        },
        "item": {
          "id": "e6598d22-5ee5-4710-b0be-486fcc7a2664",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "20fc5d19-06c8-4aaa-8e0c-cf47c8e2f8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80cc4f1-081c-4fbc-a605-831906c7cece",
        "cursor": {
          "ref": "78714487-ec03-4d3a-a3b0-351fc5d9da2d",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d2f6fc87-6ee2-4dff-b57a-e467cdd49981"
        },
        "item": {
          "id": "f80cc4f1-081c-4fbc-a605-831906c7cece",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dafac5c0-fa06-4807-b955-e97e0aa0ad15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519561bf-f6f5-42f2-aecd-0fa8301da380",
        "cursor": {
          "ref": "6040f330-a372-4ff1-983c-41d453c3245a",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c2754e5e-1406-4c85-af57-93a765f0b3a8"
        },
        "item": {
          "id": "519561bf-f6f5-42f2-aecd-0fa8301da380",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c3191d69-5df3-4a4e-81bb-d0599de98e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a3a435-3acc-44aa-ba2c-7ad4f356ac3a",
        "cursor": {
          "ref": "5540a6ae-7e25-4992-bd20-d5e7b7f5d3c0",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7fa89289-3e33-4770-8362-4ea3cb19cc70"
        },
        "item": {
          "id": "b3a3a435-3acc-44aa-ba2c-7ad4f356ac3a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f1b27141-91ba-4b42-a32d-3b6243f628c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ba64ab-f0ef-47b8-837a-bc628868b8ba",
        "cursor": {
          "ref": "31126934-bad5-4f7f-82ec-5f1f64449922",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7827b9a1-b840-4d1c-acd4-6650a4fbd51e"
        },
        "item": {
          "id": "f9ba64ab-f0ef-47b8-837a-bc628868b8ba",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1a0f57d2-0ea3-46b3-9306-8b9993fde4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c78c25a-b463-4dc0-b234-530174243b0c",
        "cursor": {
          "ref": "e7511fb3-8e1d-4361-848f-1a93c5568479",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ad54c444-7634-4d71-8102-94f9b66d976b"
        },
        "item": {
          "id": "9c78c25a-b463-4dc0-b234-530174243b0c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "358f4b88-c031-4627-8823-c798e7afa96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a74d59-ae39-4374-8450-7729d48f4c33",
        "cursor": {
          "ref": "a69eee50-4d57-4af9-913e-b78df443bfc8",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d9eefcac-54b2-427b-9000-8988126f53be"
        },
        "item": {
          "id": "77a74d59-ae39-4374-8450-7729d48f4c33",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a826f4ba-4825-4267-ba49-a32ab0937780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5aaec1-1cdd-4706-a315-d9c539af762d",
        "cursor": {
          "ref": "889d52b8-122b-430c-b03f-b98436adeeba",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "28ba2890-692a-4cd3-92d2-d8d3cee912ed"
        },
        "item": {
          "id": "fa5aaec1-1cdd-4706-a315-d9c539af762d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b2999b2c-531e-48c5-931e-bb1e40843e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80901bda-f408-46fd-b539-45fdd46fd883",
        "cursor": {
          "ref": "651edeb1-be65-42c5-9e64-5fac9eb7c420",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fa5d0a0b-b1db-4736-bfbc-775bea88d5df"
        },
        "item": {
          "id": "80901bda-f408-46fd-b539-45fdd46fd883",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5952b938-730f-4067-83f5-6d0ccfc2d81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2121a90c-8f24-4460-8b95-9111d1eec6a0",
        "cursor": {
          "ref": "44148c92-e842-463c-9657-7a6998e121ff",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6922b7ff-0f1f-4fb2-bd0c-1320974d4ea2"
        },
        "item": {
          "id": "2121a90c-8f24-4460-8b95-9111d1eec6a0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2bf97b92-c891-4d2e-b666-dc0ae2f92619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328cf69a-4ab2-4432-afff-11f95b075f4d",
        "cursor": {
          "ref": "206b00ed-a58d-4adf-b0e0-b98b51f8b2e0",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d656a780-01dc-40ce-b79b-79d3a2cdaec1"
        },
        "item": {
          "id": "328cf69a-4ab2-4432-afff-11f95b075f4d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "38efe402-5025-4ad7-920e-bab565ad57d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb16536-f621-4426-af8e-876b1c89350c",
        "cursor": {
          "ref": "1b85fd7a-e9bd-4a01-8fa1-64197b19bf66",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2e4c04bc-dd9e-40d5-94a7-6743107a49c3"
        },
        "item": {
          "id": "cbb16536-f621-4426-af8e-876b1c89350c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9ce618e4-a3ba-48f7-85ad-b41a3c7f60da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d8dbc-8361-43c8-a9a0-c56de9a0008f",
        "cursor": {
          "ref": "765d0cbe-db97-41f4-8fa5-4a66238ef322",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9aebe6f1-042b-46ea-a799-c7fc477caa10"
        },
        "item": {
          "id": "cc0d8dbc-8361-43c8-a9a0-c56de9a0008f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6ace290b-ad82-4c09-a8e6-5f729dc80f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de71718-1bde-4b28-a5bd-fe07621294e9",
        "cursor": {
          "ref": "b52726bf-1982-4db0-9f8a-43c749a7c190",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a0e2baef-06b3-464d-832e-2ce0f408e565"
        },
        "item": {
          "id": "6de71718-1bde-4b28-a5bd-fe07621294e9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dc1b2821-41dd-4055-8e27-cef1f9029019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5673b6-4dab-41be-84f1-a72bd74c386e",
        "cursor": {
          "ref": "450b263d-53a6-49e8-9dee-980811f528d1",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1dfbcf77-a2bb-42b8-aa40-c8fddb836694"
        },
        "item": {
          "id": "0c5673b6-4dab-41be-84f1-a72bd74c386e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f2f096ac-6a1d-4289-804b-b9b1d8194e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c076af52-bf88-4790-89e6-825421f5e4e9",
        "cursor": {
          "ref": "f848b509-a398-4d86-a787-c060b2844dfb",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a04b6d08-203d-4588-915b-9272e677231c"
        },
        "item": {
          "id": "c076af52-bf88-4790-89e6-825421f5e4e9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a77e9a28-62b6-4a3b-b2a8-5f21a5aa073c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55e978f-7bbc-40d7-96f2-ca96af301842",
        "cursor": {
          "ref": "6cc62244-d402-487e-924b-1ec111b88985",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "49b66d3f-c199-4d9d-9c1e-c3047807df89"
        },
        "item": {
          "id": "a55e978f-7bbc-40d7-96f2-ca96af301842",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0064c08a-dd7a-40f4-b116-bc7be819b74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbef9236-79ca-4e86-85a6-7007cdeb4e55",
        "cursor": {
          "ref": "36fd702c-fa6c-4d71-be73-37e13bc31108",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "730af99c-5210-49f6-8bae-2ef138b8de2b"
        },
        "item": {
          "id": "fbef9236-79ca-4e86-85a6-7007cdeb4e55",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "75728867-cc17-4f8a-a7e6-1cb32741b0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0548646a-4a34-4512-97f6-c09f2c58a571",
        "cursor": {
          "ref": "395b5672-8bb5-4768-9efb-a3e5eed28f01",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0db1b651-d709-4368-bdb1-c6b44a7c32d5"
        },
        "item": {
          "id": "0548646a-4a34-4512-97f6-c09f2c58a571",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7fdfdd29-2b74-43ca-8908-0a4e0da3e6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3eaa72-acc0-4205-beb1-90d88694e2b1",
        "cursor": {
          "ref": "983c269a-dd84-468b-bd0d-891ec955fe67",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "30cb65d0-c1d3-458f-9721-6370b9fcd991"
        },
        "item": {
          "id": "8d3eaa72-acc0-4205-beb1-90d88694e2b1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1480a299-127b-4cc2-83f7-eb39eb1429ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a265fe6c-582d-40da-9954-e6bce5d98e95",
        "cursor": {
          "ref": "a14c89f9-0e48-476e-8073-66e6fda0b6ca",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b6c0b6f4-01f0-4c80-9689-7eb8bc6f2dd1"
        },
        "item": {
          "id": "a265fe6c-582d-40da-9954-e6bce5d98e95",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4a1f5dc9-5cc8-4e75-895b-0f61fd1c4c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d8e758-c110-4a9b-bdd0-b2ed5f2016fd",
        "cursor": {
          "ref": "f6eeaf05-521b-4fe9-afbf-2eaa7fa0b8c5",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "204e90ed-729d-441f-8040-3a8d712de712"
        },
        "item": {
          "id": "70d8e758-c110-4a9b-bdd0-b2ed5f2016fd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3c4c9600-332c-4c12-ab27-50cd4047dc8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35b3156-ec7d-4cc3-bad6-94e927c4f018",
        "cursor": {
          "ref": "c56dafd3-28d8-4fbf-af7c-0267716741ae",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a23841fe-6225-4005-8203-108c24ba6a18"
        },
        "item": {
          "id": "e35b3156-ec7d-4cc3-bad6-94e927c4f018",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "31088a8b-4781-4806-b163-bd09f19e5a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28a2844-f1be-4332-8b43-32cad630d6d9",
        "cursor": {
          "ref": "20ca3665-5b16-451f-ae0c-088deb6c7d16",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6f4261f5-f09d-4867-b51d-b5a3b8ec112c"
        },
        "item": {
          "id": "f28a2844-f1be-4332-8b43-32cad630d6d9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7faddcde-0cb6-4527-925f-34d11baa57c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa19f4e-4fbc-498d-9403-1af4aa9b5ad0",
        "cursor": {
          "ref": "d65778d9-a7e2-4dd4-9d9e-0b148619cac6",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "09693f31-a95f-4010-9c1f-917b24d4e85a"
        },
        "item": {
          "id": "faa19f4e-4fbc-498d-9403-1af4aa9b5ad0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e887d302-cac7-4d2f-a9c8-d5c85f28d5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410b8cc-8176-43e9-870b-667a9933158b",
        "cursor": {
          "ref": "6d321117-53a3-4508-8da3-0569f02ca40b",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0d637a5b-1391-459c-8c07-3b1cb929c46a"
        },
        "item": {
          "id": "7410b8cc-8176-43e9-870b-667a9933158b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c80361f5-c2d7-41db-87ea-fe284ff828fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc51ad0-14a5-4575-a780-b14518bfa96c",
        "cursor": {
          "ref": "81a2130b-5580-485e-bf81-ed283654b3a3",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3ec38f57-8de4-4472-b342-2ba9f2c3a1b1"
        },
        "item": {
          "id": "5bc51ad0-14a5-4575-a780-b14518bfa96c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cf5b3e5f-064a-463d-9539-e715d630dc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4376490-52f9-4849-9bda-9b675acd846f",
        "cursor": {
          "ref": "46830113-7206-4c3f-a382-2cb15464995a",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d674ffe7-fe7f-46d2-b5fa-57b68e74a790"
        },
        "item": {
          "id": "d4376490-52f9-4849-9bda-9b675acd846f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "84931ecf-408d-4bc5-b2d4-9fd9cbfb6c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dddd1ed6-d4cf-4830-a2eb-e30cd7bdcf81",
        "cursor": {
          "ref": "f86b4003-8a2d-4185-9f3f-6d8f73619611",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "06b81c4a-bf1e-4c52-ac29-4425e3e8be57"
        },
        "item": {
          "id": "dddd1ed6-d4cf-4830-a2eb-e30cd7bdcf81",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "73129107-ee4a-4ab9-ba79-b2df2658eda2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2620d7eb-a4d5-4ecb-a46e-cc5b90ab5257",
        "cursor": {
          "ref": "b1958bad-94f6-411b-a580-6eb3dc49fa8e",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c0707d32-c409-411e-95bb-dddad3244f04"
        },
        "item": {
          "id": "2620d7eb-a4d5-4ecb-a46e-cc5b90ab5257",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "87b4b0ec-e8ae-4bfe-a432-b5453142d3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "4b057c7d-6f18-4aa4-a278-67178996f0d3",
        "cursor": {
          "ref": "465ffa62-520e-474a-9cd8-7476831b2d4d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8fd12d33-e5e0-432a-b36f-f321570da8d5"
        },
        "item": {
          "id": "4b057c7d-6f18-4aa4-a278-67178996f0d3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad8e386b-2e76-4aa6-9097-c45e105388cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b057c7d-6f18-4aa4-a278-67178996f0d3",
        "cursor": {
          "ref": "465ffa62-520e-474a-9cd8-7476831b2d4d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8fd12d33-e5e0-432a-b36f-f321570da8d5"
        },
        "item": {
          "id": "4b057c7d-6f18-4aa4-a278-67178996f0d3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad8e386b-2e76-4aa6-9097-c45e105388cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d50d1e4-af28-4c6c-b3c1-7c267b08af67",
        "cursor": {
          "ref": "a07276a8-10f6-4764-aba3-7aafa62fd36c",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "81bdd840-6a62-4e82-999f-14476791aed0"
        },
        "item": {
          "id": "6d50d1e4-af28-4c6c-b3c1-7c267b08af67",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cce0c1b6-61f6-465f-ba2c-722d0afab09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf993c6-e17d-4693-90be-144568597b97",
        "cursor": {
          "ref": "3f400cc2-46ee-4898-a14e-3181ad9bebea",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "782cb9a4-dea0-49a9-9638-ca09e48d0e7d"
        },
        "item": {
          "id": "7bf993c6-e17d-4693-90be-144568597b97",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "022b03d8-efaa-459e-89c8-491638d7117f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59734e4a-b89e-4d9c-858b-a693d16000cd",
        "cursor": {
          "ref": "ad5576db-eab6-44d2-b003-8cff6ac0ed09",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0efbbe88-cf3e-4b4b-86e4-75f7a9dcae48"
        },
        "item": {
          "id": "59734e4a-b89e-4d9c-858b-a693d16000cd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "20bd0609-a9c5-47d7-bd98-a2c5c90ad2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01d730f-e6cb-4852-bc2e-5ebfe7a26e27",
        "cursor": {
          "ref": "0df78348-d112-4b54-9f70-492afa101eb8",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "295f1472-dcaa-48bb-ad4e-d733994f8e54"
        },
        "item": {
          "id": "c01d730f-e6cb-4852-bc2e-5ebfe7a26e27",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "29c9eb05-11bc-4865-a6fc-935cdb9762be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92ab8cd-726e-4af7-918b-c941fe4394bd",
        "cursor": {
          "ref": "43b7f55e-04b8-4411-ab5c-daa6de5e527f",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bd91864f-1815-4290-8192-6664116f7cb9"
        },
        "item": {
          "id": "f92ab8cd-726e-4af7-918b-c941fe4394bd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "20efb978-7f85-4756-a1e9-18f187578b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0fa380-d254-44d6-b87c-239c624784c1",
        "cursor": {
          "ref": "0cbd5a5c-ab9c-47ac-b090-123f3432823b",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2c2d94b1-1ec0-4010-b693-c49aba2838de"
        },
        "item": {
          "id": "1f0fa380-d254-44d6-b87c-239c624784c1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4d983e66-a915-4c5f-aff7-c561f691ecf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63834ca7-239c-45d3-bd5c-9ca85acdf81a",
        "cursor": {
          "ref": "4ed677e4-8294-4ea6-bed9-84e694ad3632",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0cac97d6-4708-47e4-9c4a-8503b1ceda2a"
        },
        "item": {
          "id": "63834ca7-239c-45d3-bd5c-9ca85acdf81a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1318d95c-f330-4b46-8061-5b77370e8361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c46e3f-5d29-44d7-a47d-65446e7841df",
        "cursor": {
          "ref": "e83fb233-39c3-46d4-b160-8f4dd725c862",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2b59d334-c7e4-46c3-bcee-fa926b2d1996"
        },
        "item": {
          "id": "c7c46e3f-5d29-44d7-a47d-65446e7841df",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d9a4ff7a-1313-4896-8f3d-a2bc45f2af81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3d02bd-76d7-492a-aabd-48ab02242144",
        "cursor": {
          "ref": "91bff26c-bfbf-4eee-be53-69d800c58d24",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e6638073-9aff-4ff5-b672-cb969479c35a"
        },
        "item": {
          "id": "1d3d02bd-76d7-492a-aabd-48ab02242144",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d070aa34-dcf9-49b9-b68e-217b57a4711d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9c637b-bcf7-4d47-bdb2-c2275e32ed96",
        "cursor": {
          "ref": "40506fac-c08e-4b48-b607-90a5e8289568",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f8dcb025-a399-4610-8336-ed1bccd90216"
        },
        "item": {
          "id": "db9c637b-bcf7-4d47-bdb2-c2275e32ed96",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a8653eea-e9d8-48b1-9295-400a809d9b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15337d1c-77e1-4850-95ee-8c3a5364e1cd",
        "cursor": {
          "ref": "4eeac9d4-7ecb-4458-b781-fde8b8645780",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b23b2130-24f0-4eef-b2ee-420ad51e39d7"
        },
        "item": {
          "id": "15337d1c-77e1-4850-95ee-8c3a5364e1cd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "37f321fc-1bad-4d9b-b35c-09526045baae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1318ecb7-f363-45d9-90ae-fa9521f92344",
        "cursor": {
          "ref": "9d0b7076-72a7-4f7e-9cd1-804693a39c35",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6b80859a-153f-4249-8433-a67a71b64319"
        },
        "item": {
          "id": "1318ecb7-f363-45d9-90ae-fa9521f92344",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d5288f74-9910-4be9-a3a6-50a3e5629565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac526126-7430-46c0-91b5-19cce798bd4f",
        "cursor": {
          "ref": "d03f3219-ed01-48f4-a2c9-d4f2ef60d8c1",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "db4ff448-1f5f-43a4-80e7-34be5ac707cb"
        },
        "item": {
          "id": "ac526126-7430-46c0-91b5-19cce798bd4f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bf1d2362-348e-4f72-b2c7-a7faf77de557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf26cfbe-143f-4e6e-afc2-970686b501db",
        "cursor": {
          "ref": "16be2f4e-d389-4531-9013-ebb3ec2f99dc",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "63d32510-4e01-4e77-96b1-b36d5df6b626"
        },
        "item": {
          "id": "bf26cfbe-143f-4e6e-afc2-970686b501db",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e45a0244-be70-4261-a885-79132ec6528d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32315474-6838-4568-8a58-2087d40ebc6f",
        "cursor": {
          "ref": "2c167e11-5643-4f8c-913f-e9a69b6142b7",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "76e0ab1b-5a69-4a9c-a6f8-cf59a9cfa2bc"
        },
        "item": {
          "id": "32315474-6838-4568-8a58-2087d40ebc6f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "31539b8b-9d3c-4c02-8792-c3dcfa6e666e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db58bd58-ad58-44e1-8fdc-f93479a09fab",
        "cursor": {
          "ref": "23962cf3-e5b1-4aae-a3fc-8d89078de095",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a0a07be8-a938-492e-a8da-75bbbaac507c"
        },
        "item": {
          "id": "db58bd58-ad58-44e1-8fdc-f93479a09fab",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "38a8190b-e859-4a1d-9b2b-a2dc4bb2406f",
          "status": "OK",
          "code": 200,
          "responseTime": 420,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "7342b4d2-8e94-4b14-a6fb-9808c3a6f13c",
        "cursor": {
          "ref": "0d24f6f8-3c7d-40e1-a8a1-e3dc1fb671dd",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b4a51b8a-7865-48cd-8e50-c56e270ab6ae"
        },
        "item": {
          "id": "7342b4d2-8e94-4b14-a6fb-9808c3a6f13c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1be68056-012a-48f9-8e80-98a0db15ceed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e0ee1b-9b05-40ac-af6a-6dbb4b06e6ec",
        "cursor": {
          "ref": "d9443450-df07-4146-8a40-2221f7611909",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2abc15b2-8ae9-4614-9336-2e0afeb38a9b"
        },
        "item": {
          "id": "c3e0ee1b-9b05-40ac-af6a-6dbb4b06e6ec",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fd2b00c1-28b2-4c43-a84f-15d4c29d069f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4845cef1-c7ad-4d75-ba5b-b572cba8d22d",
        "cursor": {
          "ref": "3d9f4f66-5fdc-4ba7-bec3-f8ec8d42a6e1",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "96b23f48-c7e6-4fe0-9a63-c8ff51e603aa"
        },
        "item": {
          "id": "4845cef1-c7ad-4d75-ba5b-b572cba8d22d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2b5ae04a-e356-4a3f-8014-c0ea6c996fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9d8df0-0226-4923-b12a-b231bc6924b6",
        "cursor": {
          "ref": "025eaff5-0416-4002-856f-73159063b28c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "dff3ced3-c180-4287-b9ce-bcd61b2da5e7"
        },
        "item": {
          "id": "8f9d8df0-0226-4923-b12a-b231bc6924b6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d3ef4ebf-9e20-4765-abf4-8aebcf661613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ad8c69-1d8e-4026-bd06-5948e140929e",
        "cursor": {
          "ref": "fc258b13-d517-441a-871c-82c48f360a26",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47de8867-12b2-4c78-baf1-429382e6c010"
        },
        "item": {
          "id": "b6ad8c69-1d8e-4026-bd06-5948e140929e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fd0837d8-8dc9-4b9d-a1d9-052cdcc72f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252190c1-1c1b-45ea-8479-52df945d1f63",
        "cursor": {
          "ref": "ac06a63f-2d0b-47c9-9a42-e50a5a57cd41",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f9a467e7-154d-4941-8585-b1d87f630454"
        },
        "item": {
          "id": "252190c1-1c1b-45ea-8479-52df945d1f63",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5b6b001d-1d40-48dd-9df0-e13a513fd811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8463aa2b-5b92-4765-8e2a-8c4562743797",
        "cursor": {
          "ref": "cfc2a4dc-b4de-48a5-bf17-ac43f2508018",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d1715d01-958f-495d-a5c5-e908c27a707a"
        },
        "item": {
          "id": "8463aa2b-5b92-4765-8e2a-8c4562743797",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8642d19c-d4fd-4b25-a9ea-6c8a0f2b4966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98187464-1595-4f8a-bc0a-544555114e1e",
        "cursor": {
          "ref": "9e9d9edc-6f00-496f-b974-9aaf02016fed",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d3c18f6a-920b-46ad-9991-9f29462027cc"
        },
        "item": {
          "id": "98187464-1595-4f8a-bc0a-544555114e1e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f05bb3a0-51bc-4060-a1bc-d09a23e1db8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080160fe-d8af-493a-90d7-b08acb7f6308",
        "cursor": {
          "ref": "1b2441ca-9278-40d6-a06d-69c056b70a70",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f94a1bfb-9873-47af-834d-4ea8b11ec8dc"
        },
        "item": {
          "id": "080160fe-d8af-493a-90d7-b08acb7f6308",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "658f09df-d3ac-41da-91ad-234886abbec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9ea308-76cf-4aef-a405-a6e99b56758b",
        "cursor": {
          "ref": "f137b267-3cda-4b89-82a3-8483e01e58fb",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "85df37bb-db49-41e9-ba49-d307f11cc511"
        },
        "item": {
          "id": "bc9ea308-76cf-4aef-a405-a6e99b56758b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6003e179-23aa-49b5-8772-40fda4b9520b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493b8888-b04a-450e-9588-3957b23cee97",
        "cursor": {
          "ref": "11d64f72-dee5-419e-9bdc-5a6d7e3e7eb5",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fbc43bbd-bb95-4e79-9137-80ac39f0932e"
        },
        "item": {
          "id": "493b8888-b04a-450e-9588-3957b23cee97",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3daad71c-566f-4617-844f-50983f89e776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab428a7-bdff-419c-ae87-72236e60828d",
        "cursor": {
          "ref": "52b0b312-f8e7-4892-9c70-f4749b629e89",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "11ac3bf3-6998-48d1-8ce7-dedc7534624c"
        },
        "item": {
          "id": "9ab428a7-bdff-419c-ae87-72236e60828d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "38e56440-802e-439b-80e9-6c2262a7e227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca16275-55bd-4f17-b571-67d030737f1f",
        "cursor": {
          "ref": "4c7420c3-85eb-4a92-ba2d-6c32f0e6bd3b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ed1405df-d48a-4f35-a7b5-8e47a4e116d3"
        },
        "item": {
          "id": "2ca16275-55bd-4f17-b571-67d030737f1f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "13dccb74-2abd-47a9-81e9-1e52ee244131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd49342b-e84f-4825-aaf5-62137217e7ff",
        "cursor": {
          "ref": "4428524f-ec7a-4bf7-a3e5-4fbbd432eb8c",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c258b50e-1873-4b60-883d-860143e9b6c5"
        },
        "item": {
          "id": "fd49342b-e84f-4825-aaf5-62137217e7ff",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c8579da6-deac-47a1-9faa-97906283e68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd715f3-9b09-4f6f-b33d-dbf7cc455837",
        "cursor": {
          "ref": "c8b05130-b675-4359-b0f6-9bff3c159ee4",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "946eeed3-b81e-48b6-83f3-f36bed7e82a9"
        },
        "item": {
          "id": "5fd715f3-9b09-4f6f-b33d-dbf7cc455837",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6aed93d6-2971-4eff-b0ec-708265a13267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3a4865-938c-4c02-90d5-74f67cebbb91",
        "cursor": {
          "ref": "f8bca013-4d82-44f1-8a54-b18f1af613ba",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "681a53dc-c474-4715-aee4-ccd2df92e03d"
        },
        "item": {
          "id": "ac3a4865-938c-4c02-90d5-74f67cebbb91",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7e93c0cb-40da-4f52-b591-3af94b5d2fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14f6a28-6b26-478d-98eb-bf917941b289",
        "cursor": {
          "ref": "052e7d5d-101b-49e3-b73a-29992c0289f7",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "716aaf58-30fb-4f53-afb0-b42df9f7b1cc"
        },
        "item": {
          "id": "c14f6a28-6b26-478d-98eb-bf917941b289",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6cf39043-64fe-4f44-8ab8-a3544b51fcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b313ebcb-23bd-4b72-bd2f-0294f70f36d2",
        "cursor": {
          "ref": "6915bdf3-8e99-4475-8576-40756f2818d3",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "94ed6370-f0c6-4a5c-ad25-4428ef66927a"
        },
        "item": {
          "id": "b313ebcb-23bd-4b72-bd2f-0294f70f36d2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b0c4b519-fc60-4742-8cc9-3f96c6aa06ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6df0cba-b2a4-4dba-873c-c8b180ebd686",
        "cursor": {
          "ref": "c04fc446-2dbb-4884-ba6a-afc410bd3be1",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "58fa7cbf-2bf3-4aab-abaf-2a0e5f9c1f97"
        },
        "item": {
          "id": "f6df0cba-b2a4-4dba-873c-c8b180ebd686",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "eba7b5a3-2c3e-4240-9e9b-fa9dc53bcbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c81367e-2cc7-4727-ac8b-bb1b54717000",
        "cursor": {
          "ref": "d317221d-2655-4213-9e46-b9fc445ab908",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "696d781d-6c03-4e40-986f-3dc9008f30df"
        },
        "item": {
          "id": "0c81367e-2cc7-4727-ac8b-bb1b54717000",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7b5eddc8-5d6c-419d-8534-6313147497db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b0511d-c69c-454b-9a3d-4948e940a90e",
        "cursor": {
          "ref": "03a7d228-3c14-4f68-8771-0667c10ff60c",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "53973a03-6804-4dcb-884b-a0889c45c4fe"
        },
        "item": {
          "id": "a2b0511d-c69c-454b-9a3d-4948e940a90e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "667b8445-4881-417f-9c59-d5287549b8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d60a72f-b04d-457f-9d24-cd6829c4b067",
        "cursor": {
          "ref": "6bed0cbb-7302-485b-9158-c4d70bb2470f",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "93c8ea80-493b-429e-a92d-0c73bba2ae0d"
        },
        "item": {
          "id": "1d60a72f-b04d-457f-9d24-cd6829c4b067",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a916e112-262d-46e1-8519-afb56acf5c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d098019a-5b9b-40a8-85df-3cbcd253cdba",
        "cursor": {
          "ref": "55a7a009-04fa-45dd-b9e0-a62c5425d444",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "77ff5e87-51d4-45c4-8925-38e4f9767c3a"
        },
        "item": {
          "id": "d098019a-5b9b-40a8-85df-3cbcd253cdba",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8bbbcfb1-3c13-4e82-a7a3-ea76e3847777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ee891f-d6f1-4da6-bc2a-0cd87dc061e9",
        "cursor": {
          "ref": "2b384b90-3795-433c-aad5-af3fe3fd5628",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7a268efc-940b-41f5-9db6-4d0db279c275"
        },
        "item": {
          "id": "b4ee891f-d6f1-4da6-bc2a-0cd87dc061e9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5ba730db-40ae-4f52-944d-78ccc33fbd3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576cd049-6ba4-4257-b265-ab4ab82e7530",
        "cursor": {
          "ref": "f3594a50-dbbb-4880-8c1e-b7b2358a64d3",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dd10c68e-0498-4051-a59f-87cc6d850281"
        },
        "item": {
          "id": "576cd049-6ba4-4257-b265-ab4ab82e7530",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "11f55072-e75a-479a-9151-9b5e80e8068f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca58917-617d-45e8-a89f-75c0d9466acc",
        "cursor": {
          "ref": "654b2a0d-2542-4f6b-987f-0602f0966beb",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "61d0e2ec-c3a0-4376-9eb5-88e08134cb1f"
        },
        "item": {
          "id": "6ca58917-617d-45e8-a89f-75c0d9466acc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1cda7d1b-fc1c-41c6-9516-b99df7405436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0168fcf-2852-40cd-bd61-a269dd739ea9",
        "cursor": {
          "ref": "a8460e9d-22dd-4edf-87d5-9ce67dc62da8",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e183c71a-b6f9-43dc-9136-230fbc95fe91"
        },
        "item": {
          "id": "b0168fcf-2852-40cd-bd61-a269dd739ea9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b666937f-6396-49b2-a5b7-2c3ac858c189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367b1a62-2cfe-4903-90bb-6508da480ad0",
        "cursor": {
          "ref": "3bffeb1f-964f-4d21-bb61-7e887cfea909",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e0eaf175-f1c0-4142-9141-33c32b4c107d"
        },
        "item": {
          "id": "367b1a62-2cfe-4903-90bb-6508da480ad0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ab439f60-bd1d-4c84-beb0-cff9d908f6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313f4c0e-2eeb-4295-8f8c-35d0b7fdbdb4",
        "cursor": {
          "ref": "4b2b8501-582f-4a63-add2-05d0d96e0395",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "70e6263c-84d4-400c-948a-adab055e7ffc"
        },
        "item": {
          "id": "313f4c0e-2eeb-4295-8f8c-35d0b7fdbdb4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "da3932b6-fac7-4b8a-9711-d4c8f9c4d572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7013a99c-17db-418e-acba-2a01fc0da76d",
        "cursor": {
          "ref": "00f97b54-4208-4020-944a-6ee6f7ccd51c",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "97d21d1c-fc86-4dfc-93cd-724438368542"
        },
        "item": {
          "id": "7013a99c-17db-418e-acba-2a01fc0da76d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1c5e4474-09a1-428c-bdf8-4c820a1d86c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17540b70-1474-465d-a7eb-99e1a9aa55d8",
        "cursor": {
          "ref": "8f506c83-957c-4e8b-8dfe-b527df4ca15d",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3aaef3b4-3d5d-4bec-987a-83e0e59d447e"
        },
        "item": {
          "id": "17540b70-1474-465d-a7eb-99e1a9aa55d8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "986e067e-4c90-4977-8fbe-7218d028d5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2034e9-263b-4ae6-95fc-a60a68a239e1",
        "cursor": {
          "ref": "024de732-85cc-4c5a-a908-37183dd89ebf",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "81904f62-26d3-4acf-b535-be6d29d0b1f9"
        },
        "item": {
          "id": "2f2034e9-263b-4ae6-95fc-a60a68a239e1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5ad95ae7-272c-40d8-8654-e017bcb8bb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3d5b6e-5526-469e-ab85-a30f4455c345",
        "cursor": {
          "ref": "c6489cd6-9b6f-4612-a3d6-94d00f9cfe2f",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fd52f3cd-2b6e-43f9-8652-aa30b49dad03"
        },
        "item": {
          "id": "bf3d5b6e-5526-469e-ab85-a30f4455c345",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "77d30d72-f53a-4bcf-9072-2253647dd4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb199138-3ac8-4a2a-86b4-b7235b49512b",
        "cursor": {
          "ref": "05af973c-0dd4-4c93-92ba-cd17c071831b",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "446f252b-3feb-4eaf-aa08-49eb8867c95d"
        },
        "item": {
          "id": "eb199138-3ac8-4a2a-86b4-b7235b49512b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6683a8d5-fc6f-483e-bb40-6d5599475aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f5149e-797f-4a31-99d1-b3c1e689d5c3",
        "cursor": {
          "ref": "c860985b-24ee-4fca-8bba-b870fd13219d",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cbbbf90d-8ebc-4188-b3c2-8cedc648e6f3"
        },
        "item": {
          "id": "14f5149e-797f-4a31-99d1-b3c1e689d5c3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0da6a7d8-ef79-41a0-8562-4ea3ccf3a7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe92dc9-043d-4fc9-bd99-4d54e282c948",
        "cursor": {
          "ref": "66dbbf4e-7424-4091-a799-1efbafddc392",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1540a7e0-b7a4-4fd9-87ce-73f74ddd0434"
        },
        "item": {
          "id": "cbe92dc9-043d-4fc9-bd99-4d54e282c948",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "50e2777c-f19e-4404-8947-45be1f5f3fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3dbabb-ec9c-47ef-b83e-de58dfe8d445",
        "cursor": {
          "ref": "b5c2706c-aeda-4048-8b68-d143143a9f69",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "af155ccb-4271-4a31-a5a7-057168bcc764"
        },
        "item": {
          "id": "aa3dbabb-ec9c-47ef-b83e-de58dfe8d445",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7621a053-20ff-4a9a-804f-916f20bb2189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914c942b-48a5-4c6c-b0a6-28f494d84cb8",
        "cursor": {
          "ref": "0557dfe7-b3d6-42da-aa0a-610689d47219",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8cbd52f4-ef7f-4f7c-8dce-48c09156f206"
        },
        "item": {
          "id": "914c942b-48a5-4c6c-b0a6-28f494d84cb8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "83333cd6-f00c-488d-bd18-7d0c1562f069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff99503-137f-4b7a-8448-c033023c1a68",
        "cursor": {
          "ref": "393aa068-8578-410d-9430-cc5be0e98a75",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b8d737c4-c85b-4444-86cc-9fce5a02a780"
        },
        "item": {
          "id": "8ff99503-137f-4b7a-8448-c033023c1a68",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a5565a45-056d-4c4f-b1e5-efac298a4f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc8deda-8d50-492b-bd16-f74e6d53a907",
        "cursor": {
          "ref": "a2fac530-0b03-47a2-a446-918c43ae576a",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cbc55986-54be-4a50-80b6-86b8d1ea1822"
        },
        "item": {
          "id": "bfc8deda-8d50-492b-bd16-f74e6d53a907",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ee2f2083-2a67-43bf-8ff1-a313c158191c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa53dab3-3cda-4d73-bd55-971546040a8a",
        "cursor": {
          "ref": "6436834e-4369-42c0-b5f4-cd146298e50b",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bc74c0b7-1b66-46b9-865b-1d176236c943"
        },
        "item": {
          "id": "fa53dab3-3cda-4d73-bd55-971546040a8a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "539a6004-1098-4f78-bf20-e3f3f5f46455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc43d4a-0cdd-4455-9ce3-35ad4928b01f",
        "cursor": {
          "ref": "2447a926-26fe-4e30-b444-b549850138af",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "21b1b7a5-0e55-4395-9e36-acc38522de9e"
        },
        "item": {
          "id": "efc43d4a-0cdd-4455-9ce3-35ad4928b01f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a66b5c8b-ef34-475c-9293-05752b6746ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7dd575-06e8-4c5e-8f0c-e668f9109902",
        "cursor": {
          "ref": "d359c7bc-871d-4bc6-98a6-3f6c89607aff",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b009f6d8-7e2d-4feb-a317-99003ae3e3f4"
        },
        "item": {
          "id": "af7dd575-06e8-4c5e-8f0c-e668f9109902",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "72bd0a05-aa74-4bce-8203-951d31e24d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6e746a-46bc-42a8-ad55-c924bc49ad95",
        "cursor": {
          "ref": "785cc417-5cc6-4306-983e-645315fe7208",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6096847a-124e-4ba8-991e-2e18829407be"
        },
        "item": {
          "id": "ae6e746a-46bc-42a8-ad55-c924bc49ad95",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0f3e5639-af9b-4f4d-b1df-f2d0c78320be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d42803-8e8c-475f-ba82-3e42d0ecd457",
        "cursor": {
          "ref": "03d1a392-e299-48a3-b6d4-f3ab91c6a71c",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "42e14005-bb7f-4924-a189-b3ccb97c64ff"
        },
        "item": {
          "id": "b8d42803-8e8c-475f-ba82-3e42d0ecd457",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "79c65d5f-1823-49ae-9148-c8b9f3060705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955a763f-c391-4ea6-9d58-b242f880268d",
        "cursor": {
          "ref": "03083158-f573-40d2-866b-7b82abec4368",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0751b1a1-7bf1-40ba-962d-d725c8afffe9"
        },
        "item": {
          "id": "955a763f-c391-4ea6-9d58-b242f880268d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "253046af-8fdd-4572-b850-aca9af450525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521c5067-b3a1-4cc9-979d-e0077ba7e546",
        "cursor": {
          "ref": "3db71063-9feb-43d8-9821-48e76c9cef3d",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "67baba4c-b2cb-4c81-8c7c-e7471aa4fb44"
        },
        "item": {
          "id": "521c5067-b3a1-4cc9-979d-e0077ba7e546",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "135bf338-37f9-4250-8eef-558ba66b6a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d98437d-5c76-454f-abb9-8f80d55d333a",
        "cursor": {
          "ref": "ab902c54-99cd-4891-b306-b55a0b2e35a2",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ac651619-6085-4613-96ec-20b89cedd83a"
        },
        "item": {
          "id": "1d98437d-5c76-454f-abb9-8f80d55d333a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d189a62b-c94c-463a-837e-a9cd3750f6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0a3787-783f-4d7e-a7c7-76dd82a802b1",
        "cursor": {
          "ref": "4037d32e-c332-4ffd-8392-8a530ccb4ad2",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8064e730-4792-49e6-8fe2-6cb671cfa249"
        },
        "item": {
          "id": "fc0a3787-783f-4d7e-a7c7-76dd82a802b1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "40f156c7-3cf5-417e-9c9a-6b29de195ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4067c45d-3137-474d-b093-1977c4ad5889",
        "cursor": {
          "ref": "ce084eee-5038-40fb-9ffe-1f49f9f321fe",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c06e2b63-6948-4b98-89f8-9cca52099fd2"
        },
        "item": {
          "id": "4067c45d-3137-474d-b093-1977c4ad5889",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4f7398b6-74d0-4f79-a44f-2c654d17d631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33414cf4-6907-4eb4-99ee-c29ce858e3c1",
        "cursor": {
          "ref": "aa7ea744-e4bc-4960-9aac-fe949d717d3c",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e1298de6-38cf-43c4-8d2b-d81d325ec1f4"
        },
        "item": {
          "id": "33414cf4-6907-4eb4-99ee-c29ce858e3c1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f8ca6eb5-97f7-40db-8445-525547e38ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db330d97-657e-4cb8-9d5c-0127bc5a4fb7",
        "cursor": {
          "ref": "3ed6758e-ceae-4490-a8bb-8908b2ee0361",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "659b20ce-2699-4fc9-97e5-819e7aaaeb94"
        },
        "item": {
          "id": "db330d97-657e-4cb8-9d5c-0127bc5a4fb7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "010a0153-0383-4115-8562-dde21edc3f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49eaa00f-9b5f-41f7-820a-a51759227f5d",
        "cursor": {
          "ref": "1e5eff7f-cd57-4d5b-bbe3-de02806ecf55",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d27a9194-1e36-4568-bb6f-c5c126caf64e"
        },
        "item": {
          "id": "49eaa00f-9b5f-41f7-820a-a51759227f5d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6ca015f6-a493-409b-aedb-406c51879193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38a1e9c-0961-4a7d-849e-d390b2e0e993",
        "cursor": {
          "ref": "c24f9b9e-8e35-40d0-8ad1-08c5ce341cc2",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7f46af85-a622-4121-95e9-17f4f53ae74e"
        },
        "item": {
          "id": "f38a1e9c-0961-4a7d-849e-d390b2e0e993",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "171c9a27-41be-4f18-90ba-a0b7f52687f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd49112-13b6-450a-9001-de447d510385",
        "cursor": {
          "ref": "ade3ee6a-8b66-4f9a-bee9-4701df654b69",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5f3b9d9b-1947-4fd3-afd1-f8bfe9cc5852"
        },
        "item": {
          "id": "dfd49112-13b6-450a-9001-de447d510385",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9ba9a780-3ce4-4d61-b68a-7a068651d3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8dac1e-1e42-488a-867f-a2d38d9ca6b7",
        "cursor": {
          "ref": "dd068a27-4859-41c3-883d-70c128b6a283",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b28e4158-bfa8-4e1b-978e-6290341cfba8"
        },
        "item": {
          "id": "bb8dac1e-1e42-488a-867f-a2d38d9ca6b7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "de424743-9b56-4092-8bf0-f2a5f93f6c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbdc881-7d19-4207-8d03-69eca4bb12c8",
        "cursor": {
          "ref": "9064f93d-99f2-4e24-b861-831d8e0bd657",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f886ec3b-bb82-4c2b-bf7a-b316f8fe88fd"
        },
        "item": {
          "id": "8cbdc881-7d19-4207-8d03-69eca4bb12c8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "66ed7ffc-3424-4d61-bffc-d4afacc936e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aab25bf-e5de-45fc-9e7d-4e9c43ee87e8",
        "cursor": {
          "ref": "24451c4e-b56f-4a75-9f0d-ade797c2dcc3",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "03f4c615-a921-4325-aaa2-84c72b592346"
        },
        "item": {
          "id": "7aab25bf-e5de-45fc-9e7d-4e9c43ee87e8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f9ea5f5a-fcd7-4d8b-ba1e-fd95c09d11d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a4988c-316a-4db8-aac1-470917fd1e1c",
        "cursor": {
          "ref": "90ab0505-7597-46fb-be23-140eccf39188",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3920cc21-731f-40f6-8330-1d99f917d8b8"
        },
        "item": {
          "id": "64a4988c-316a-4db8-aac1-470917fd1e1c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e865345b-72e8-47b0-9f0d-2c33d70fb7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d8c57d-e9c4-48c9-9ed4-a04524ff71e0",
        "cursor": {
          "ref": "aa976c25-6d90-4302-b6a9-6dad7a34b0f2",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2d44f2a6-b870-4b5b-81cc-799f23ecee27"
        },
        "item": {
          "id": "82d8c57d-e9c4-48c9-9ed4-a04524ff71e0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e97fd5e6-5cf8-43cc-a703-0c45c5574832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5989c9e-aaf6-40cd-8065-5d149e88773f",
        "cursor": {
          "ref": "92ac1594-a48e-4a89-807a-49f0d25187a3",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f014b746-7e28-438d-86ab-c92c63496e8b"
        },
        "item": {
          "id": "b5989c9e-aaf6-40cd-8065-5d149e88773f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "97f9431a-fba9-460d-8c24-7c2937b9c1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eba58de-1cbd-4340-9962-6edacf13c331",
        "cursor": {
          "ref": "7f3bddd8-de08-4d2a-a358-789f9bfef69c",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "72a9f921-1367-44e5-9104-47aadf73e049"
        },
        "item": {
          "id": "3eba58de-1cbd-4340-9962-6edacf13c331",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "71011801-ef3a-4f87-8c50-764027636c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d04ef5-297b-42d2-bcf7-daf1d1dcac83",
        "cursor": {
          "ref": "d0a8826e-abb6-4991-9156-4c6f0987b5fd",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2a1cca7f-d9b2-4b11-8503-3341220e7c39"
        },
        "item": {
          "id": "03d04ef5-297b-42d2-bcf7-daf1d1dcac83",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cb2f8b57-33d4-43c1-8115-b5bf291870e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65576b8-8325-4ddd-a6c2-cb5b7ceae0bc",
        "cursor": {
          "ref": "d659726e-d6b1-4b05-bc71-1a2b56b32430",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a5bf3ad7-32c0-4153-bb24-6a3404e86e94"
        },
        "item": {
          "id": "f65576b8-8325-4ddd-a6c2-cb5b7ceae0bc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "90b93c99-c037-463b-9650-8a8662bf77ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45d3a86-0f4d-4d1e-8f47-fb1e57b58464",
        "cursor": {
          "ref": "fcc447e7-3825-498b-bc3c-472bc16d81a0",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d7dc6c08-62c1-402e-9e0f-fe1ba21f716f"
        },
        "item": {
          "id": "e45d3a86-0f4d-4d1e-8f47-fb1e57b58464",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c696963b-b32e-46ac-9fcf-b4b25b480539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad7a806-665f-49bd-9eab-384c204fb62e",
        "cursor": {
          "ref": "691636ad-9c48-4d62-afae-648404519f1c",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c2859399-5d57-4fa8-82c6-7c7a93c78218"
        },
        "item": {
          "id": "0ad7a806-665f-49bd-9eab-384c204fb62e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c590d92e-8ffd-4607-ba95-9bf4cf7d07c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdcc79d-ca0e-4d30-9b08-ca5c3e8efbee",
        "cursor": {
          "ref": "5c92ad80-c628-437f-9cfa-0d099b15828d",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9e27bc6d-5f20-4a27-a3c4-85902119afc0"
        },
        "item": {
          "id": "bbdcc79d-ca0e-4d30-9b08-ca5c3e8efbee",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "361de3c5-c29d-4dbd-ac89-7f66b7b1bd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c726eae2-fce3-4afc-8573-9d33650df4a5",
        "cursor": {
          "ref": "ab969a4d-87e3-450c-b8e0-86cfe61c4486",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bf78ae9d-bbd6-4552-92c7-a67a03633be6"
        },
        "item": {
          "id": "c726eae2-fce3-4afc-8573-9d33650df4a5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ca879fa5-660a-43f9-bc62-74d31a857c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e92bda-1764-4048-bee6-34c7e6e44790",
        "cursor": {
          "ref": "a6eb699a-9411-4217-b7f4-09ace58f86dd",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d88707a2-fb9f-4b94-8549-8a8d98108485"
        },
        "item": {
          "id": "c4e92bda-1764-4048-bee6-34c7e6e44790",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d0ef7adb-f4c4-4618-871c-f7654fde4efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac1bddf-7f7b-43e3-a15c-d825eceed109",
        "cursor": {
          "ref": "0a151b04-22b0-47bb-a8b2-5fd7004c0d96",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fa474a94-dcea-4777-9733-3b1b925640c5"
        },
        "item": {
          "id": "aac1bddf-7f7b-43e3-a15c-d825eceed109",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "12d518d5-1e28-485c-899d-c3676e258ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8c7ccc-ac0b-44a5-9cc0-6693c39c28cc",
        "cursor": {
          "ref": "0612b390-6a15-42d4-9c15-ae18c8ce36f0",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5a9c3e0a-de73-4ac3-b377-5f57109360ce"
        },
        "item": {
          "id": "4a8c7ccc-ac0b-44a5-9cc0-6693c39c28cc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c4a22b25-e12c-48dc-8cb7-6d95d88ac924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fc0ec2-bb98-4d7d-9eac-fb2ee1215c03",
        "cursor": {
          "ref": "3676f72c-81c2-49a6-b812-a8b31c9698f6",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f956ad10-4f16-4e8d-9e79-10262de5d7c7"
        },
        "item": {
          "id": "79fc0ec2-bb98-4d7d-9eac-fb2ee1215c03",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "85e8c8e2-f959-445e-a2f0-246f95cde0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8030f9cf-65cd-4b8e-9fa3-ea717460e697",
        "cursor": {
          "ref": "fb2a4f1b-3c54-405a-a256-be0259f74218",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7db6630a-27c5-4191-b7f8-ba1b299f35e1"
        },
        "item": {
          "id": "8030f9cf-65cd-4b8e-9fa3-ea717460e697",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1b0787d6-5270-435c-b5ac-4908ef8776b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74251c13-ead8-4e41-bfa2-8829af13d32c",
        "cursor": {
          "ref": "025e52db-7d0d-4dcb-870d-12fd8550622c",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a112a326-3560-4ca8-b6de-3ba53bacbc90"
        },
        "item": {
          "id": "74251c13-ead8-4e41-bfa2-8829af13d32c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7a53aac4-7bb6-4aa5-b2c3-dcb89898a9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad3651c-ca0a-4e94-8f3e-7efb17011ce9",
        "cursor": {
          "ref": "7fa6359c-1896-4438-898d-a849e2d3779e",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "02baa83a-e5f4-4d9e-aa05-c547d4e7ab7d"
        },
        "item": {
          "id": "fad3651c-ca0a-4e94-8f3e-7efb17011ce9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d0cd1b7f-42fc-437a-91e2-64826d872bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06fb6a4c-e51f-4454-b51f-308343418ce1",
        "cursor": {
          "ref": "e74e4a61-3e46-48e4-8371-3e0e78fdf5b7",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "09ceed74-e629-4ce5-8f51-1c35a5da3cdb"
        },
        "item": {
          "id": "06fb6a4c-e51f-4454-b51f-308343418ce1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6a4735a1-1ec1-4809-b36a-160072270d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef95173-88be-4039-8a0c-c4cbfc1399a9",
        "cursor": {
          "ref": "48669d80-0a52-4801-b55f-c22800576b7a",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "704602fb-a454-4f21-b5e8-de09e470f47e"
        },
        "item": {
          "id": "aef95173-88be-4039-8a0c-c4cbfc1399a9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9d8bfb70-7acb-4905-b0a5-b586e0af4550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ec6eef-a5dc-491c-85ff-ec73d654bf19",
        "cursor": {
          "ref": "c1931edb-0233-42c1-a9b2-6c7029e9a50c",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "aa8d65e3-6249-4167-9dcf-150576c003fc"
        },
        "item": {
          "id": "f1ec6eef-a5dc-491c-85ff-ec73d654bf19",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9dd7d024-2c9e-4ea9-bbe4-275b1985c777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3da9ef5-b3f8-4eec-b6f3-97eb6e06fbf3",
        "cursor": {
          "ref": "f72bf8a9-d6d5-44da-a259-1fd1917a79c5",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9ec3f54a-8158-472e-b257-3756442dc157"
        },
        "item": {
          "id": "a3da9ef5-b3f8-4eec-b6f3-97eb6e06fbf3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a793a481-e6fb-4fb8-8e87-11a05db1de60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e03b448-0285-4fba-89f4-9dccc6791298",
        "cursor": {
          "ref": "628fc55f-0cdb-41ed-ad5c-d882061cdfd7",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b2f7f088-5fcd-4694-b5e3-19691f69c1d1"
        },
        "item": {
          "id": "4e03b448-0285-4fba-89f4-9dccc6791298",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5c1d8c3b-487c-43b3-80fa-9a995b4b591f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9371c0c1-a785-4780-b68c-7f5e53737a39",
        "cursor": {
          "ref": "a385f6c5-15ae-4e81-b6a2-b98cfd5c4836",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ed5c2f56-aad3-4cf6-bc4d-fa711332705c"
        },
        "item": {
          "id": "9371c0c1-a785-4780-b68c-7f5e53737a39",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d5b63144-0dfe-4e34-bd2d-51417ecffbdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "fa58aa89-7028-440d-af44-8c99c58b4a7c",
        "cursor": {
          "ref": "58e522c2-d40d-4a2f-beff-10c38518cffb",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "02b994ee-72b8-47f3-b0ac-465579201865"
        },
        "item": {
          "id": "fa58aa89-7028-440d-af44-8c99c58b4a7c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f27b38dd-e1f3-4c0c-8e5e-1efe9e692fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1fc365bd-1e47-40b9-aec3-7bf26548ef70",
        "cursor": {
          "ref": "7a8234e0-f7eb-4f94-adcf-57dbcf50bf8e",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b14f6a5c-a9a4-4449-b4de-c37c90098936"
        },
        "item": {
          "id": "1fc365bd-1e47-40b9-aec3-7bf26548ef70",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fe1abc2c-0073-4057-8ed6-4cc06b9ef212",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a4e50a-1d71-40ce-bc2b-95b42a81cb2f",
        "cursor": {
          "ref": "28107e7b-0cb4-478e-9b7f-daf01500d37d",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d110d4c2-feb8-4f5a-b203-b13da819765d"
        },
        "item": {
          "id": "c4a4e50a-1d71-40ce-bc2b-95b42a81cb2f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "94649902-84d6-4c6c-a822-948a9bd01fea",
          "status": "OK",
          "code": 200,
          "responseTime": 2688,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5091aa4-d2b7-4637-992a-8375ad7cf15d",
        "cursor": {
          "ref": "cdd3ca31-6e88-4d84-9ac0-e2dc8e3525a4",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "78fee47b-aecd-465e-a7af-68cdf75596a4"
        },
        "item": {
          "id": "a5091aa4-d2b7-4637-992a-8375ad7cf15d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1ca9d690-b03e-462e-8a7f-10581ec90998",
          "status": "OK",
          "code": 200,
          "responseTime": 2149,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1c516b-bb0f-4e93-b724-365a3cf5e529",
        "cursor": {
          "ref": "eb421c0f-9f22-4fd9-8b84-e338dce4de39",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fe6e3836-25fd-4380-939b-789f21a07114"
        },
        "item": {
          "id": "0a1c516b-bb0f-4e93-b724-365a3cf5e529",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6d63f05b-cf92-4fc6-8c57-cdc9195dd4ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0a1c516b-bb0f-4e93-b724-365a3cf5e529",
        "cursor": {
          "ref": "eb421c0f-9f22-4fd9-8b84-e338dce4de39",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fe6e3836-25fd-4380-939b-789f21a07114"
        },
        "item": {
          "id": "0a1c516b-bb0f-4e93-b724-365a3cf5e529",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6d63f05b-cf92-4fc6-8c57-cdc9195dd4ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0a1c516b-bb0f-4e93-b724-365a3cf5e529",
        "cursor": {
          "ref": "eb421c0f-9f22-4fd9-8b84-e338dce4de39",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fe6e3836-25fd-4380-939b-789f21a07114"
        },
        "item": {
          "id": "0a1c516b-bb0f-4e93-b724-365a3cf5e529",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6d63f05b-cf92-4fc6-8c57-cdc9195dd4ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d80fe950-def6-401c-b6a9-d82943071b33",
        "cursor": {
          "ref": "c2d99978-8e37-44e8-9de3-1b4e60d52f46",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "60b3b0f7-9e86-4967-8b32-a9261abec806"
        },
        "item": {
          "id": "d80fe950-def6-401c-b6a9-d82943071b33",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "97d59d3b-637f-49fe-8639-d707c07bc547",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 201
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "1b93ff6a-2189-44e1-a862-12d8d69f4d0b",
        "cursor": {
          "ref": "8193cbf2-e599-4f88-b4c5-cc14a4e5e55a",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7ccd3c04-656a-4c65-938e-4e3be6503b70"
        },
        "item": {
          "id": "1b93ff6a-2189-44e1-a862-12d8d69f4d0b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f5a0e056-8ded-4a26-8619-7f0729bf2f37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1b93ff6a-2189-44e1-a862-12d8d69f4d0b",
        "cursor": {
          "ref": "8193cbf2-e599-4f88-b4c5-cc14a4e5e55a",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7ccd3c04-656a-4c65-938e-4e3be6503b70"
        },
        "item": {
          "id": "1b93ff6a-2189-44e1-a862-12d8d69f4d0b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f5a0e056-8ded-4a26-8619-7f0729bf2f37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4b338891-dbeb-49a4-9067-68dfbc1f0622",
        "cursor": {
          "ref": "15ca1bf4-c19c-4e62-81dc-120e58924beb",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7996933e-8d26-4dce-a537-6b9cded0f722"
        },
        "item": {
          "id": "4b338891-dbeb-49a4-9067-68dfbc1f0622",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "bfbe71b5-1673-4551-a4cd-a307e48b7156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 199,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b671164b-39ca-4392-9d42-541b5d0a6b09",
        "cursor": {
          "ref": "5f58134e-8d8f-429e-9c6c-bff1ff9902c0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0538d7b3-cd89-4a51-90ad-7d114905372a"
        },
        "item": {
          "id": "b671164b-39ca-4392-9d42-541b5d0a6b09",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0be76c3a-f03b-4870-b329-47be0b86092c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b671164b-39ca-4392-9d42-541b5d0a6b09",
        "cursor": {
          "ref": "5f58134e-8d8f-429e-9c6c-bff1ff9902c0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0538d7b3-cd89-4a51-90ad-7d114905372a"
        },
        "item": {
          "id": "b671164b-39ca-4392-9d42-541b5d0a6b09",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0be76c3a-f03b-4870-b329-47be0b86092c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "65600e1d-3858-435e-98b4-ca48fa393525",
        "cursor": {
          "ref": "48d1c714-e79e-413d-81f6-1633a9908562",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bc8b38d2-e5d0-4c6f-a25d-be97f9e54ce2"
        },
        "item": {
          "id": "65600e1d-3858-435e-98b4-ca48fa393525",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c699ea4c-45ff-429d-84e3-d12000e3b6e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 126,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}